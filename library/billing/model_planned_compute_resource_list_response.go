/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlannedComputeResourceListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlannedComputeResourceListResponse{}

// PlannedComputeResourceListResponse struct for PlannedComputeResourceListResponse
type PlannedComputeResourceListResponse struct {
	// Resource Group Amount
	Amount *ResourceGroupTotalAmountDTO `json:"amount,omitempty"`
	Coverages []ResourceUsedAmountDTO `json:"coverages"`
	// Order Count
	OrderCount *int32 `json:"order_count,omitempty"`
	// OS Type
	Os *OSTypeDTO `json:"os,omitempty"`
	// Server Type
	ServerType *string `json:"server_type,omitempty"`
	// Server Type Description
	ServerTypeDescription map[string]interface{} `json:"server_type_description,omitempty"`
	// Product Type Name
	Service *ProductResponse `json:"service,omitempty"`
}

type _PlannedComputeResourceListResponse PlannedComputeResourceListResponse

// NewPlannedComputeResourceListResponse instantiates a new PlannedComputeResourceListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannedComputeResourceListResponse(coverages []ResourceUsedAmountDTO) *PlannedComputeResourceListResponse {
	this := PlannedComputeResourceListResponse{}
	this.Coverages = coverages
	return &this
}

// NewPlannedComputeResourceListResponseWithDefaults instantiates a new PlannedComputeResourceListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannedComputeResourceListResponseWithDefaults() *PlannedComputeResourceListResponse {
	this := PlannedComputeResourceListResponse{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *PlannedComputeResourceListResponse) GetAmount() ResourceGroupTotalAmountDTO {
	if o == nil || IsNil(o.Amount) {
		var ret ResourceGroupTotalAmountDTO
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeResourceListResponse) GetAmountOk() (*ResourceGroupTotalAmountDTO, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *PlannedComputeResourceListResponse) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given ResourceGroupTotalAmountDTO and assigns it to the Amount field.
func (o *PlannedComputeResourceListResponse) SetAmount(v ResourceGroupTotalAmountDTO) {
	o.Amount = &v
}

// GetCoverages returns the Coverages field value
func (o *PlannedComputeResourceListResponse) GetCoverages() []ResourceUsedAmountDTO {
	if o == nil {
		var ret []ResourceUsedAmountDTO
		return ret
	}

	return o.Coverages
}

// GetCoveragesOk returns a tuple with the Coverages field value
// and a boolean to check if the value has been set.
func (o *PlannedComputeResourceListResponse) GetCoveragesOk() ([]ResourceUsedAmountDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Coverages, true
}

// SetCoverages sets field value
func (o *PlannedComputeResourceListResponse) SetCoverages(v []ResourceUsedAmountDTO) {
	o.Coverages = v
}

// GetOrderCount returns the OrderCount field value if set, zero value otherwise.
func (o *PlannedComputeResourceListResponse) GetOrderCount() int32 {
	if o == nil || IsNil(o.OrderCount) {
		var ret int32
		return ret
	}
	return *o.OrderCount
}

// GetOrderCountOk returns a tuple with the OrderCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeResourceListResponse) GetOrderCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderCount) {
		return nil, false
	}
	return o.OrderCount, true
}

// HasOrderCount returns a boolean if a field has been set.
func (o *PlannedComputeResourceListResponse) HasOrderCount() bool {
	if o != nil && !IsNil(o.OrderCount) {
		return true
	}

	return false
}

// SetOrderCount gets a reference to the given int32 and assigns it to the OrderCount field.
func (o *PlannedComputeResourceListResponse) SetOrderCount(v int32) {
	o.OrderCount = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *PlannedComputeResourceListResponse) GetOs() OSTypeDTO {
	if o == nil || IsNil(o.Os) {
		var ret OSTypeDTO
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeResourceListResponse) GetOsOk() (*OSTypeDTO, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *PlannedComputeResourceListResponse) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given OSTypeDTO and assigns it to the Os field.
func (o *PlannedComputeResourceListResponse) SetOs(v OSTypeDTO) {
	o.Os = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *PlannedComputeResourceListResponse) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeResourceListResponse) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *PlannedComputeResourceListResponse) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *PlannedComputeResourceListResponse) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerTypeDescription returns the ServerTypeDescription field value if set, zero value otherwise.
func (o *PlannedComputeResourceListResponse) GetServerTypeDescription() map[string]interface{} {
	if o == nil || IsNil(o.ServerTypeDescription) {
		var ret map[string]interface{}
		return ret
	}
	return o.ServerTypeDescription
}

// GetServerTypeDescriptionOk returns a tuple with the ServerTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeResourceListResponse) GetServerTypeDescriptionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ServerTypeDescription) {
		return map[string]interface{}{}, false
	}
	return o.ServerTypeDescription, true
}

// HasServerTypeDescription returns a boolean if a field has been set.
func (o *PlannedComputeResourceListResponse) HasServerTypeDescription() bool {
	if o != nil && !IsNil(o.ServerTypeDescription) {
		return true
	}

	return false
}

// SetServerTypeDescription gets a reference to the given map[string]interface{} and assigns it to the ServerTypeDescription field.
func (o *PlannedComputeResourceListResponse) SetServerTypeDescription(v map[string]interface{}) {
	o.ServerTypeDescription = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *PlannedComputeResourceListResponse) GetService() ProductResponse {
	if o == nil || IsNil(o.Service) {
		var ret ProductResponse
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeResourceListResponse) GetServiceOk() (*ProductResponse, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *PlannedComputeResourceListResponse) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given ProductResponse and assigns it to the Service field.
func (o *PlannedComputeResourceListResponse) SetService(v ProductResponse) {
	o.Service = &v
}

func (o PlannedComputeResourceListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlannedComputeResourceListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	toSerialize["coverages"] = o.Coverages
	if !IsNil(o.OrderCount) {
		toSerialize["order_count"] = o.OrderCount
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.ServerTypeDescription) {
		toSerialize["server_type_description"] = o.ServerTypeDescription
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	return toSerialize, nil
}

func (o *PlannedComputeResourceListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coverages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlannedComputeResourceListResponse := _PlannedComputeResourceListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlannedComputeResourceListResponse)

	if err != nil {
		return err
	}

	*o = PlannedComputeResourceListResponse(varPlannedComputeResourceListResponse)

	return err
}

type NullablePlannedComputeResourceListResponse struct {
	value *PlannedComputeResourceListResponse
	isSet bool
}

func (v NullablePlannedComputeResourceListResponse) Get() *PlannedComputeResourceListResponse {
	return v.value
}

func (v *NullablePlannedComputeResourceListResponse) Set(val *PlannedComputeResourceListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedComputeResourceListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedComputeResourceListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedComputeResourceListResponse(val *PlannedComputeResourceListResponse) *NullablePlannedComputeResourceListResponse {
	return &NullablePlannedComputeResourceListResponse{value: val, isSet: true}
}

func (v NullablePlannedComputeResourceListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedComputeResourceListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


