/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServerTypeListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerTypeListResponse{}

// ServerTypeListResponse struct for ServerTypeListResponse
type ServerTypeListResponse struct {
	ServerTypes []ServerTypeDTO `json:"server_types"`
}

type _ServerTypeListResponse ServerTypeListResponse

// NewServerTypeListResponse instantiates a new ServerTypeListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerTypeListResponse(serverTypes []ServerTypeDTO) *ServerTypeListResponse {
	this := ServerTypeListResponse{}
	this.ServerTypes = serverTypes
	return &this
}

// NewServerTypeListResponseWithDefaults instantiates a new ServerTypeListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeListResponseWithDefaults() *ServerTypeListResponse {
	this := ServerTypeListResponse{}
	return &this
}

// GetServerTypes returns the ServerTypes field value
func (o *ServerTypeListResponse) GetServerTypes() []ServerTypeDTO {
	if o == nil {
		var ret []ServerTypeDTO
		return ret
	}

	return o.ServerTypes
}

// GetServerTypesOk returns a tuple with the ServerTypes field value
// and a boolean to check if the value has been set.
func (o *ServerTypeListResponse) GetServerTypesOk() ([]ServerTypeDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerTypes, true
}

// SetServerTypes sets field value
func (o *ServerTypeListResponse) SetServerTypes(v []ServerTypeDTO) {
	o.ServerTypes = v
}

func (o ServerTypeListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerTypeListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["server_types"] = o.ServerTypes
	return toSerialize, nil
}

func (o *ServerTypeListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"server_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerTypeListResponse := _ServerTypeListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerTypeListResponse)

	if err != nil {
		return err
	}

	*o = ServerTypeListResponse(varServerTypeListResponse)

	return err
}

type NullableServerTypeListResponse struct {
	value *ServerTypeListResponse
	isSet bool
}

func (v NullableServerTypeListResponse) Get() *ServerTypeListResponse {
	return v.value
}

func (v *NullableServerTypeListResponse) Set(val *ServerTypeListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerTypeListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerTypeListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerTypeListResponse(val *ServerTypeListResponse) *NullableServerTypeListResponse {
	return &NullableServerTypeListResponse{value: val, isSet: true}
}

func (v NullableServerTypeListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerTypeListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


