/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
)

// checks if the PlannedComputeChangeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlannedComputeChangeRequest{}

// PlannedComputeChangeRequest struct for PlannedComputeChangeRequest
type PlannedComputeChangeRequest struct {
	// Planned Compute change request action type
	Action *PlannedComputeChangeActionEnum `json:"action,omitempty"`
	ContractType NullablePlannedComputeContractEnum `json:"contract_type,omitempty"`
	ServerType NullableString `json:"server_type,omitempty"`
}

// NewPlannedComputeChangeRequest instantiates a new PlannedComputeChangeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannedComputeChangeRequest() *PlannedComputeChangeRequest {
	this := PlannedComputeChangeRequest{}
	return &this
}

// NewPlannedComputeChangeRequestWithDefaults instantiates a new PlannedComputeChangeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannedComputeChangeRequestWithDefaults() *PlannedComputeChangeRequest {
	this := PlannedComputeChangeRequest{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PlannedComputeChangeRequest) GetAction() PlannedComputeChangeActionEnum {
	if o == nil || IsNil(o.Action) {
		var ret PlannedComputeChangeActionEnum
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeChangeRequest) GetActionOk() (*PlannedComputeChangeActionEnum, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PlannedComputeChangeRequest) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given PlannedComputeChangeActionEnum and assigns it to the Action field.
func (o *PlannedComputeChangeRequest) SetAction(v PlannedComputeChangeActionEnum) {
	o.Action = &v
}

// GetContractType returns the ContractType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeChangeRequest) GetContractType() PlannedComputeContractEnum {
	if o == nil || IsNil(o.ContractType.Get()) {
		var ret PlannedComputeContractEnum
		return ret
	}
	return *o.ContractType.Get()
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeChangeRequest) GetContractTypeOk() (*PlannedComputeContractEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractType.Get(), o.ContractType.IsSet()
}

// HasContractType returns a boolean if a field has been set.
func (o *PlannedComputeChangeRequest) HasContractType() bool {
	if o != nil && o.ContractType.IsSet() {
		return true
	}

	return false
}

// SetContractType gets a reference to the given NullablePlannedComputeContractEnum and assigns it to the ContractType field.
func (o *PlannedComputeChangeRequest) SetContractType(v PlannedComputeContractEnum) {
	o.ContractType.Set(&v)
}
// SetContractTypeNil sets the value for ContractType to be an explicit nil
func (o *PlannedComputeChangeRequest) SetContractTypeNil() {
	o.ContractType.Set(nil)
}

// UnsetContractType ensures that no value is present for ContractType, not even an explicit nil
func (o *PlannedComputeChangeRequest) UnsetContractType() {
	o.ContractType.Unset()
}

// GetServerType returns the ServerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeChangeRequest) GetServerType() string {
	if o == nil || IsNil(o.ServerType.Get()) {
		var ret string
		return ret
	}
	return *o.ServerType.Get()
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeChangeRequest) GetServerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerType.Get(), o.ServerType.IsSet()
}

// HasServerType returns a boolean if a field has been set.
func (o *PlannedComputeChangeRequest) HasServerType() bool {
	if o != nil && o.ServerType.IsSet() {
		return true
	}

	return false
}

// SetServerType gets a reference to the given NullableString and assigns it to the ServerType field.
func (o *PlannedComputeChangeRequest) SetServerType(v string) {
	o.ServerType.Set(&v)
}
// SetServerTypeNil sets the value for ServerType to be an explicit nil
func (o *PlannedComputeChangeRequest) SetServerTypeNil() {
	o.ServerType.Set(nil)
}

// UnsetServerType ensures that no value is present for ServerType, not even an explicit nil
func (o *PlannedComputeChangeRequest) UnsetServerType() {
	o.ServerType.Unset()
}

func (o PlannedComputeChangeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlannedComputeChangeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if o.ContractType.IsSet() {
		toSerialize["contract_type"] = o.ContractType.Get()
	}
	if o.ServerType.IsSet() {
		toSerialize["server_type"] = o.ServerType.Get()
	}
	return toSerialize, nil
}

type NullablePlannedComputeChangeRequest struct {
	value *PlannedComputeChangeRequest
	isSet bool
}

func (v NullablePlannedComputeChangeRequest) Get() *PlannedComputeChangeRequest {
	return v.value
}

func (v *NullablePlannedComputeChangeRequest) Set(val *PlannedComputeChangeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedComputeChangeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedComputeChangeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedComputeChangeRequest(val *PlannedComputeChangeRequest) *NullablePlannedComputeChangeRequest {
	return &NullablePlannedComputeChangeRequest{value: val, isSet: true}
}

func (v NullablePlannedComputeChangeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedComputeChangeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


