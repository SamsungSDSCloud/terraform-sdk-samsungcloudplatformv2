/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
)

// checks if the ResourceUsedAmountDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceUsedAmountDTO{}

// ResourceUsedAmountDTO struct for ResourceUsedAmountDTO
type ResourceUsedAmountDTO struct {
	NonAppliedAmount NullableAmount `json:"non_applied_amount,omitempty"`
	RequestAt NullableString `json:"request_at,omitempty"`
	ResourceName NullableString `json:"resource_name,omitempty"`
	UnitPrice NullableAmount `json:"unit_price,omitempty"`
	UsedAmount NullableAmount `json:"used_amount,omitempty"`
	UsedTime NullableInt32 `json:"used_time,omitempty"`
}

// NewResourceUsedAmountDTO instantiates a new ResourceUsedAmountDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUsedAmountDTO() *ResourceUsedAmountDTO {
	this := ResourceUsedAmountDTO{}
	return &this
}

// NewResourceUsedAmountDTOWithDefaults instantiates a new ResourceUsedAmountDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUsedAmountDTOWithDefaults() *ResourceUsedAmountDTO {
	this := ResourceUsedAmountDTO{}
	return &this
}

// GetNonAppliedAmount returns the NonAppliedAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceUsedAmountDTO) GetNonAppliedAmount() Amount {
	if o == nil || IsNil(o.NonAppliedAmount.Get()) {
		var ret Amount
		return ret
	}
	return *o.NonAppliedAmount.Get()
}

// GetNonAppliedAmountOk returns a tuple with the NonAppliedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUsedAmountDTO) GetNonAppliedAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonAppliedAmount.Get(), o.NonAppliedAmount.IsSet()
}

// HasNonAppliedAmount returns a boolean if a field has been set.
func (o *ResourceUsedAmountDTO) HasNonAppliedAmount() bool {
	if o != nil && o.NonAppliedAmount.IsSet() {
		return true
	}

	return false
}

// SetNonAppliedAmount gets a reference to the given NullableAmount and assigns it to the NonAppliedAmount field.
func (o *ResourceUsedAmountDTO) SetNonAppliedAmount(v Amount) {
	o.NonAppliedAmount.Set(&v)
}
// SetNonAppliedAmountNil sets the value for NonAppliedAmount to be an explicit nil
func (o *ResourceUsedAmountDTO) SetNonAppliedAmountNil() {
	o.NonAppliedAmount.Set(nil)
}

// UnsetNonAppliedAmount ensures that no value is present for NonAppliedAmount, not even an explicit nil
func (o *ResourceUsedAmountDTO) UnsetNonAppliedAmount() {
	o.NonAppliedAmount.Unset()
}

// GetRequestAt returns the RequestAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceUsedAmountDTO) GetRequestAt() string {
	if o == nil || IsNil(o.RequestAt.Get()) {
		var ret string
		return ret
	}
	return *o.RequestAt.Get()
}

// GetRequestAtOk returns a tuple with the RequestAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUsedAmountDTO) GetRequestAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestAt.Get(), o.RequestAt.IsSet()
}

// HasRequestAt returns a boolean if a field has been set.
func (o *ResourceUsedAmountDTO) HasRequestAt() bool {
	if o != nil && o.RequestAt.IsSet() {
		return true
	}

	return false
}

// SetRequestAt gets a reference to the given NullableString and assigns it to the RequestAt field.
func (o *ResourceUsedAmountDTO) SetRequestAt(v string) {
	o.RequestAt.Set(&v)
}
// SetRequestAtNil sets the value for RequestAt to be an explicit nil
func (o *ResourceUsedAmountDTO) SetRequestAtNil() {
	o.RequestAt.Set(nil)
}

// UnsetRequestAt ensures that no value is present for RequestAt, not even an explicit nil
func (o *ResourceUsedAmountDTO) UnsetRequestAt() {
	o.RequestAt.Unset()
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceUsedAmountDTO) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUsedAmountDTO) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *ResourceUsedAmountDTO) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableString and assigns it to the ResourceName field.
func (o *ResourceUsedAmountDTO) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}
// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *ResourceUsedAmountDTO) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *ResourceUsedAmountDTO) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceUsedAmountDTO) GetUnitPrice() Amount {
	if o == nil || IsNil(o.UnitPrice.Get()) {
		var ret Amount
		return ret
	}
	return *o.UnitPrice.Get()
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUsedAmountDTO) GetUnitPriceOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitPrice.Get(), o.UnitPrice.IsSet()
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *ResourceUsedAmountDTO) HasUnitPrice() bool {
	if o != nil && o.UnitPrice.IsSet() {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given NullableAmount and assigns it to the UnitPrice field.
func (o *ResourceUsedAmountDTO) SetUnitPrice(v Amount) {
	o.UnitPrice.Set(&v)
}
// SetUnitPriceNil sets the value for UnitPrice to be an explicit nil
func (o *ResourceUsedAmountDTO) SetUnitPriceNil() {
	o.UnitPrice.Set(nil)
}

// UnsetUnitPrice ensures that no value is present for UnitPrice, not even an explicit nil
func (o *ResourceUsedAmountDTO) UnsetUnitPrice() {
	o.UnitPrice.Unset()
}

// GetUsedAmount returns the UsedAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceUsedAmountDTO) GetUsedAmount() Amount {
	if o == nil || IsNil(o.UsedAmount.Get()) {
		var ret Amount
		return ret
	}
	return *o.UsedAmount.Get()
}

// GetUsedAmountOk returns a tuple with the UsedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUsedAmountDTO) GetUsedAmountOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedAmount.Get(), o.UsedAmount.IsSet()
}

// HasUsedAmount returns a boolean if a field has been set.
func (o *ResourceUsedAmountDTO) HasUsedAmount() bool {
	if o != nil && o.UsedAmount.IsSet() {
		return true
	}

	return false
}

// SetUsedAmount gets a reference to the given NullableAmount and assigns it to the UsedAmount field.
func (o *ResourceUsedAmountDTO) SetUsedAmount(v Amount) {
	o.UsedAmount.Set(&v)
}
// SetUsedAmountNil sets the value for UsedAmount to be an explicit nil
func (o *ResourceUsedAmountDTO) SetUsedAmountNil() {
	o.UsedAmount.Set(nil)
}

// UnsetUsedAmount ensures that no value is present for UsedAmount, not even an explicit nil
func (o *ResourceUsedAmountDTO) UnsetUsedAmount() {
	o.UsedAmount.Unset()
}

// GetUsedTime returns the UsedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceUsedAmountDTO) GetUsedTime() int32 {
	if o == nil || IsNil(o.UsedTime.Get()) {
		var ret int32
		return ret
	}
	return *o.UsedTime.Get()
}

// GetUsedTimeOk returns a tuple with the UsedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceUsedAmountDTO) GetUsedTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedTime.Get(), o.UsedTime.IsSet()
}

// HasUsedTime returns a boolean if a field has been set.
func (o *ResourceUsedAmountDTO) HasUsedTime() bool {
	if o != nil && o.UsedTime.IsSet() {
		return true
	}

	return false
}

// SetUsedTime gets a reference to the given NullableInt32 and assigns it to the UsedTime field.
func (o *ResourceUsedAmountDTO) SetUsedTime(v int32) {
	o.UsedTime.Set(&v)
}
// SetUsedTimeNil sets the value for UsedTime to be an explicit nil
func (o *ResourceUsedAmountDTO) SetUsedTimeNil() {
	o.UsedTime.Set(nil)
}

// UnsetUsedTime ensures that no value is present for UsedTime, not even an explicit nil
func (o *ResourceUsedAmountDTO) UnsetUsedTime() {
	o.UsedTime.Unset()
}

func (o ResourceUsedAmountDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceUsedAmountDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NonAppliedAmount.IsSet() {
		toSerialize["non_applied_amount"] = o.NonAppliedAmount.Get()
	}
	if o.RequestAt.IsSet() {
		toSerialize["request_at"] = o.RequestAt.Get()
	}
	if o.ResourceName.IsSet() {
		toSerialize["resource_name"] = o.ResourceName.Get()
	}
	if o.UnitPrice.IsSet() {
		toSerialize["unit_price"] = o.UnitPrice.Get()
	}
	if o.UsedAmount.IsSet() {
		toSerialize["used_amount"] = o.UsedAmount.Get()
	}
	if o.UsedTime.IsSet() {
		toSerialize["used_time"] = o.UsedTime.Get()
	}
	return toSerialize, nil
}

type NullableResourceUsedAmountDTO struct {
	value *ResourceUsedAmountDTO
	isSet bool
}

func (v NullableResourceUsedAmountDTO) Get() *ResourceUsedAmountDTO {
	return v.value
}

func (v *NullableResourceUsedAmountDTO) Set(val *ResourceUsedAmountDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUsedAmountDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUsedAmountDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUsedAmountDTO(val *ResourceUsedAmountDTO) *NullableResourceUsedAmountDTO {
	return &NullableResourceUsedAmountDTO{value: val, isSet: true}
}

func (v NullableResourceUsedAmountDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUsedAmountDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


