/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"fmt"
)

// PlannedComputeOSTypeEnum the model 'PlannedComputeOSTypeEnum'
type PlannedComputeOSTypeEnum string

// List of PlannedComputeOSTypeEnum
const (
	PLANNEDCOMPUTEOSTYPEENUM_OPEN_SOURCE PlannedComputeOSTypeEnum = "OPEN_SOURCE"
	PLANNEDCOMPUTEOSTYPEENUM_RHEL PlannedComputeOSTypeEnum = "RHEL"
	PLANNEDCOMPUTEOSTYPEENUM_WINDOWS PlannedComputeOSTypeEnum = "WINDOWS"
)

// All allowed values of PlannedComputeOSTypeEnum enum
var AllowedPlannedComputeOSTypeEnumEnumValues = []PlannedComputeOSTypeEnum{
	"OPEN_SOURCE",
	"RHEL",
	"WINDOWS",
}

func (v *PlannedComputeOSTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlannedComputeOSTypeEnum(value)
	for _, existing := range AllowedPlannedComputeOSTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlannedComputeOSTypeEnum", value)
}

// NewPlannedComputeOSTypeEnumFromValue returns a pointer to a valid PlannedComputeOSTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlannedComputeOSTypeEnumFromValue(v string) (*PlannedComputeOSTypeEnum, error) {
	ev := PlannedComputeOSTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlannedComputeOSTypeEnum: valid values are %v", v, AllowedPlannedComputeOSTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlannedComputeOSTypeEnum) IsValid() bool {
	for _, existing := range AllowedPlannedComputeOSTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlannedComputeOSTypeEnum value
func (v PlannedComputeOSTypeEnum) Ptr() *PlannedComputeOSTypeEnum {
	return &v
}

type NullablePlannedComputeOSTypeEnum struct {
	value *PlannedComputeOSTypeEnum
	isSet bool
}

func (v NullablePlannedComputeOSTypeEnum) Get() *PlannedComputeOSTypeEnum {
	return v.value
}

func (v *NullablePlannedComputeOSTypeEnum) Set(val *PlannedComputeOSTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedComputeOSTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedComputeOSTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedComputeOSTypeEnum(val *PlannedComputeOSTypeEnum) *NullablePlannedComputeOSTypeEnum {
	return &NullablePlannedComputeOSTypeEnum{value: val, isSet: true}
}

func (v NullablePlannedComputeOSTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedComputeOSTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

