/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
)

// checks if the ResourceGroupTotalAmountDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceGroupTotalAmountDTO{}

// ResourceGroupTotalAmountDTO struct for ResourceGroupTotalAmountDTO
type ResourceGroupTotalAmountDTO struct {
	NoContractUsed NullableAmount `json:"no_contract_used,omitempty"`
	NonApplied NullableAmount `json:"non_applied,omitempty"`
	Total NullableAmount `json:"total,omitempty"`
	Used NullableAmount `json:"used,omitempty"`
}

// NewResourceGroupTotalAmountDTO instantiates a new ResourceGroupTotalAmountDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceGroupTotalAmountDTO() *ResourceGroupTotalAmountDTO {
	this := ResourceGroupTotalAmountDTO{}
	return &this
}

// NewResourceGroupTotalAmountDTOWithDefaults instantiates a new ResourceGroupTotalAmountDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceGroupTotalAmountDTOWithDefaults() *ResourceGroupTotalAmountDTO {
	this := ResourceGroupTotalAmountDTO{}
	return &this
}

// GetNoContractUsed returns the NoContractUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceGroupTotalAmountDTO) GetNoContractUsed() Amount {
	if o == nil || IsNil(o.NoContractUsed.Get()) {
		var ret Amount
		return ret
	}
	return *o.NoContractUsed.Get()
}

// GetNoContractUsedOk returns a tuple with the NoContractUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceGroupTotalAmountDTO) GetNoContractUsedOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoContractUsed.Get(), o.NoContractUsed.IsSet()
}

// HasNoContractUsed returns a boolean if a field has been set.
func (o *ResourceGroupTotalAmountDTO) HasNoContractUsed() bool {
	if o != nil && o.NoContractUsed.IsSet() {
		return true
	}

	return false
}

// SetNoContractUsed gets a reference to the given NullableAmount and assigns it to the NoContractUsed field.
func (o *ResourceGroupTotalAmountDTO) SetNoContractUsed(v Amount) {
	o.NoContractUsed.Set(&v)
}
// SetNoContractUsedNil sets the value for NoContractUsed to be an explicit nil
func (o *ResourceGroupTotalAmountDTO) SetNoContractUsedNil() {
	o.NoContractUsed.Set(nil)
}

// UnsetNoContractUsed ensures that no value is present for NoContractUsed, not even an explicit nil
func (o *ResourceGroupTotalAmountDTO) UnsetNoContractUsed() {
	o.NoContractUsed.Unset()
}

// GetNonApplied returns the NonApplied field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceGroupTotalAmountDTO) GetNonApplied() Amount {
	if o == nil || IsNil(o.NonApplied.Get()) {
		var ret Amount
		return ret
	}
	return *o.NonApplied.Get()
}

// GetNonAppliedOk returns a tuple with the NonApplied field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceGroupTotalAmountDTO) GetNonAppliedOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.NonApplied.Get(), o.NonApplied.IsSet()
}

// HasNonApplied returns a boolean if a field has been set.
func (o *ResourceGroupTotalAmountDTO) HasNonApplied() bool {
	if o != nil && o.NonApplied.IsSet() {
		return true
	}

	return false
}

// SetNonApplied gets a reference to the given NullableAmount and assigns it to the NonApplied field.
func (o *ResourceGroupTotalAmountDTO) SetNonApplied(v Amount) {
	o.NonApplied.Set(&v)
}
// SetNonAppliedNil sets the value for NonApplied to be an explicit nil
func (o *ResourceGroupTotalAmountDTO) SetNonAppliedNil() {
	o.NonApplied.Set(nil)
}

// UnsetNonApplied ensures that no value is present for NonApplied, not even an explicit nil
func (o *ResourceGroupTotalAmountDTO) UnsetNonApplied() {
	o.NonApplied.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceGroupTotalAmountDTO) GetTotal() Amount {
	if o == nil || IsNil(o.Total.Get()) {
		var ret Amount
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceGroupTotalAmountDTO) GetTotalOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *ResourceGroupTotalAmountDTO) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableAmount and assigns it to the Total field.
func (o *ResourceGroupTotalAmountDTO) SetTotal(v Amount) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *ResourceGroupTotalAmountDTO) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *ResourceGroupTotalAmountDTO) UnsetTotal() {
	o.Total.Unset()
}

// GetUsed returns the Used field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceGroupTotalAmountDTO) GetUsed() Amount {
	if o == nil || IsNil(o.Used.Get()) {
		var ret Amount
		return ret
	}
	return *o.Used.Get()
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceGroupTotalAmountDTO) GetUsedOk() (*Amount, bool) {
	if o == nil {
		return nil, false
	}
	return o.Used.Get(), o.Used.IsSet()
}

// HasUsed returns a boolean if a field has been set.
func (o *ResourceGroupTotalAmountDTO) HasUsed() bool {
	if o != nil && o.Used.IsSet() {
		return true
	}

	return false
}

// SetUsed gets a reference to the given NullableAmount and assigns it to the Used field.
func (o *ResourceGroupTotalAmountDTO) SetUsed(v Amount) {
	o.Used.Set(&v)
}
// SetUsedNil sets the value for Used to be an explicit nil
func (o *ResourceGroupTotalAmountDTO) SetUsedNil() {
	o.Used.Set(nil)
}

// UnsetUsed ensures that no value is present for Used, not even an explicit nil
func (o *ResourceGroupTotalAmountDTO) UnsetUsed() {
	o.Used.Unset()
}

func (o ResourceGroupTotalAmountDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceGroupTotalAmountDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NoContractUsed.IsSet() {
		toSerialize["no_contract_used"] = o.NoContractUsed.Get()
	}
	if o.NonApplied.IsSet() {
		toSerialize["non_applied"] = o.NonApplied.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.Used.IsSet() {
		toSerialize["used"] = o.Used.Get()
	}
	return toSerialize, nil
}

type NullableResourceGroupTotalAmountDTO struct {
	value *ResourceGroupTotalAmountDTO
	isSet bool
}

func (v NullableResourceGroupTotalAmountDTO) Get() *ResourceGroupTotalAmountDTO {
	return v.value
}

func (v *NullableResourceGroupTotalAmountDTO) Set(val *ResourceGroupTotalAmountDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceGroupTotalAmountDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceGroupTotalAmountDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceGroupTotalAmountDTO(val *ResourceGroupTotalAmountDTO) *NullableResourceGroupTotalAmountDTO {
	return &NullableResourceGroupTotalAmountDTO{value: val, isSet: true}
}

func (v NullableResourceGroupTotalAmountDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceGroupTotalAmountDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


