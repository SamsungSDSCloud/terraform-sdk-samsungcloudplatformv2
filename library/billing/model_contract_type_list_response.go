/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContractTypeListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContractTypeListResponse{}

// ContractTypeListResponse struct for ContractTypeListResponse
type ContractTypeListResponse struct {
	ContractTypes []ContractTypeDTO `json:"contract_types"`
	ExtensionTypes []ContractTypeDTO `json:"extension_types"`
}

type _ContractTypeListResponse ContractTypeListResponse

// NewContractTypeListResponse instantiates a new ContractTypeListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractTypeListResponse(contractTypes []ContractTypeDTO, extensionTypes []ContractTypeDTO) *ContractTypeListResponse {
	this := ContractTypeListResponse{}
	this.ContractTypes = contractTypes
	this.ExtensionTypes = extensionTypes
	return &this
}

// NewContractTypeListResponseWithDefaults instantiates a new ContractTypeListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractTypeListResponseWithDefaults() *ContractTypeListResponse {
	this := ContractTypeListResponse{}
	return &this
}

// GetContractTypes returns the ContractTypes field value
func (o *ContractTypeListResponse) GetContractTypes() []ContractTypeDTO {
	if o == nil {
		var ret []ContractTypeDTO
		return ret
	}

	return o.ContractTypes
}

// GetContractTypesOk returns a tuple with the ContractTypes field value
// and a boolean to check if the value has been set.
func (o *ContractTypeListResponse) GetContractTypesOk() ([]ContractTypeDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractTypes, true
}

// SetContractTypes sets field value
func (o *ContractTypeListResponse) SetContractTypes(v []ContractTypeDTO) {
	o.ContractTypes = v
}

// GetExtensionTypes returns the ExtensionTypes field value
func (o *ContractTypeListResponse) GetExtensionTypes() []ContractTypeDTO {
	if o == nil {
		var ret []ContractTypeDTO
		return ret
	}

	return o.ExtensionTypes
}

// GetExtensionTypesOk returns a tuple with the ExtensionTypes field value
// and a boolean to check if the value has been set.
func (o *ContractTypeListResponse) GetExtensionTypesOk() ([]ContractTypeDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtensionTypes, true
}

// SetExtensionTypes sets field value
func (o *ContractTypeListResponse) SetExtensionTypes(v []ContractTypeDTO) {
	o.ExtensionTypes = v
}

func (o ContractTypeListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContractTypeListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contract_types"] = o.ContractTypes
	toSerialize["extension_types"] = o.ExtensionTypes
	return toSerialize, nil
}

func (o *ContractTypeListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contract_types",
		"extension_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContractTypeListResponse := _ContractTypeListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContractTypeListResponse)

	if err != nil {
		return err
	}

	*o = ContractTypeListResponse(varContractTypeListResponse)

	return err
}

type NullableContractTypeListResponse struct {
	value *ContractTypeListResponse
	isSet bool
}

func (v NullableContractTypeListResponse) Get() *ContractTypeListResponse {
	return v.value
}

func (v *NullableContractTypeListResponse) Set(val *ContractTypeListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContractTypeListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContractTypeListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractTypeListResponse(val *ContractTypeListResponse) *NullableContractTypeListResponse {
	return &NullableContractTypeListResponse{value: val, isSet: true}
}

func (v NullableContractTypeListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractTypeListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


