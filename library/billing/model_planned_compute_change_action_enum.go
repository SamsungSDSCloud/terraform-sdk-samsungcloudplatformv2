/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"fmt"
)

// PlannedComputeChangeActionEnum the model 'PlannedComputeChangeActionEnum'
type PlannedComputeChangeActionEnum string

// List of PlannedComputeChangeActionEnum
const (
	PLANNEDCOMPUTECHANGEACTIONENUM_EXTEND_APPLY PlannedComputeChangeActionEnum = "EXTEND_APPLY"
	PLANNEDCOMPUTECHANGEACTIONENUM_EXTEND_CHANGE PlannedComputeChangeActionEnum = "EXTEND_CHANGE"
	PLANNEDCOMPUTECHANGEACTIONENUM_EXTEND_CANCEL PlannedComputeChangeActionEnum = "EXTEND_CANCEL"
	PLANNEDCOMPUTECHANGEACTIONENUM_SERVER_TYPE_CHANGE PlannedComputeChangeActionEnum = "SERVER_TYPE_CHANGE"
	PLANNEDCOMPUTECHANGEACTIONENUM_CONTRACT_CANCEL PlannedComputeChangeActionEnum = "CONTRACT_CANCEL"
)

// All allowed values of PlannedComputeChangeActionEnum enum
var AllowedPlannedComputeChangeActionEnumEnumValues = []PlannedComputeChangeActionEnum{
	"EXTEND_APPLY",
	"EXTEND_CHANGE",
	"EXTEND_CANCEL",
	"SERVER_TYPE_CHANGE",
	"CONTRACT_CANCEL",
}

func (v *PlannedComputeChangeActionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlannedComputeChangeActionEnum(value)
	for _, existing := range AllowedPlannedComputeChangeActionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlannedComputeChangeActionEnum", value)
}

// NewPlannedComputeChangeActionEnumFromValue returns a pointer to a valid PlannedComputeChangeActionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlannedComputeChangeActionEnumFromValue(v string) (*PlannedComputeChangeActionEnum, error) {
	ev := PlannedComputeChangeActionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlannedComputeChangeActionEnum: valid values are %v", v, AllowedPlannedComputeChangeActionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlannedComputeChangeActionEnum) IsValid() bool {
	for _, existing := range AllowedPlannedComputeChangeActionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlannedComputeChangeActionEnum value
func (v PlannedComputeChangeActionEnum) Ptr() *PlannedComputeChangeActionEnum {
	return &v
}

type NullablePlannedComputeChangeActionEnum struct {
	value *PlannedComputeChangeActionEnum
	isSet bool
}

func (v NullablePlannedComputeChangeActionEnum) Get() *PlannedComputeChangeActionEnum {
	return v.value
}

func (v *NullablePlannedComputeChangeActionEnum) Set(val *PlannedComputeChangeActionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedComputeChangeActionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedComputeChangeActionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedComputeChangeActionEnum(val *PlannedComputeChangeActionEnum) *NullablePlannedComputeChangeActionEnum {
	return &NullablePlannedComputeChangeActionEnum{value: val, isSet: true}
}

func (v NullablePlannedComputeChangeActionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedComputeChangeActionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

