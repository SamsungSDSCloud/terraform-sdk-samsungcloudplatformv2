/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"time"
)

// checks if the PlannedComputeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlannedComputeDTO{}

// PlannedComputeDTO struct for PlannedComputeDTO
type PlannedComputeDTO struct {
	// Account Id
	AccountId *string `json:"account_id,omitempty"`
	ContractId NullableString `json:"contract_id,omitempty"`
	// Contract Type
	ContractType *string `json:"contract_type,omitempty"`
	// Created date
	CreatedAt *time.Time `json:"created_at,omitempty"`
	CreatedBy NullableString `json:"created_by,omitempty"`
	DeleteYn NullableString `json:"delete_yn,omitempty"`
	// End date (YYYY-MM-dd)
	EndDate *string `json:"end_date,omitempty"`
	// Start date (YYYY-MM-dd)
	FirstContractStartAt *string `json:"first_contract_start_at,omitempty"`
	Id NullableString `json:"id,omitempty"`
	// Modified date
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	ModifiedBy NullableString `json:"modified_by,omitempty"`
	NextContractType NullableString `json:"next_contract_type,omitempty"`
	NextEndDate NullableString `json:"next_end_date,omitempty"`
	NextStartDate NullableString `json:"next_start_date,omitempty"`
	// OS Name
	OsName *string `json:"os_name,omitempty"`
	// OS Type
	OsType *string `json:"os_type,omitempty"`
	// Region
	Region *string `json:"region,omitempty"`
	ResourceName NullableString `json:"resource_name,omitempty"`
	// Resource Type
	ResourceType *string `json:"resource_type,omitempty"`
	// Server Type
	ServerType *string `json:"server_type,omitempty"`
	// Server Type Description
	ServerTypeDescription map[string]interface{} `json:"server_type_description,omitempty"`
	// Service Id
	ServiceId *string `json:"service_id,omitempty"`
	// Service Name
	ServiceName *string `json:"service_name,omitempty"`
	// SRN
	Srn *string `json:"srn,omitempty"`
	// Start date (YYYY-MM-dd)
	StartDate *string `json:"start_date,omitempty"`
	// Planned Compute State
	State *string `json:"state,omitempty"`
}

// NewPlannedComputeDTO instantiates a new PlannedComputeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannedComputeDTO() *PlannedComputeDTO {
	this := PlannedComputeDTO{}
	var contractType string = "01"
	this.ContractType = &contractType
	var state string = "ACTIVE"
	this.State = &state
	return &this
}

// NewPlannedComputeDTOWithDefaults instantiates a new PlannedComputeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannedComputeDTOWithDefaults() *PlannedComputeDTO {
	this := PlannedComputeDTO{}
	var contractType string = "01"
	this.ContractType = &contractType
	var state string = "ACTIVE"
	this.State = &state
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *PlannedComputeDTO) SetAccountId(v string) {
	o.AccountId = &v
}

// GetContractId returns the ContractId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetContractId() string {
	if o == nil || IsNil(o.ContractId.Get()) {
		var ret string
		return ret
	}
	return *o.ContractId.Get()
}

// GetContractIdOk returns a tuple with the ContractId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetContractIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContractId.Get(), o.ContractId.IsSet()
}

// HasContractId returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasContractId() bool {
	if o != nil && o.ContractId.IsSet() {
		return true
	}

	return false
}

// SetContractId gets a reference to the given NullableString and assigns it to the ContractId field.
func (o *PlannedComputeDTO) SetContractId(v string) {
	o.ContractId.Set(&v)
}
// SetContractIdNil sets the value for ContractId to be an explicit nil
func (o *PlannedComputeDTO) SetContractIdNil() {
	o.ContractId.Set(nil)
}

// UnsetContractId ensures that no value is present for ContractId, not even an explicit nil
func (o *PlannedComputeDTO) UnsetContractId() {
	o.ContractId.Unset()
}

// GetContractType returns the ContractType field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetContractType() string {
	if o == nil || IsNil(o.ContractType) {
		var ret string
		return ret
	}
	return *o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetContractTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContractType) {
		return nil, false
	}
	return o.ContractType, true
}

// HasContractType returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasContractType() bool {
	if o != nil && !IsNil(o.ContractType) {
		return true
	}

	return false
}

// SetContractType gets a reference to the given string and assigns it to the ContractType field.
func (o *PlannedComputeDTO) SetContractType(v string) {
	o.ContractType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PlannedComputeDTO) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasCreatedBy() bool {
	if o != nil && o.CreatedBy.IsSet() {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given NullableString and assigns it to the CreatedBy field.
func (o *PlannedComputeDTO) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}
// SetCreatedByNil sets the value for CreatedBy to be an explicit nil
func (o *PlannedComputeDTO) SetCreatedByNil() {
	o.CreatedBy.Set(nil)
}

// UnsetCreatedBy ensures that no value is present for CreatedBy, not even an explicit nil
func (o *PlannedComputeDTO) UnsetCreatedBy() {
	o.CreatedBy.Unset()
}

// GetDeleteYn returns the DeleteYn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetDeleteYn() string {
	if o == nil || IsNil(o.DeleteYn.Get()) {
		var ret string
		return ret
	}
	return *o.DeleteYn.Get()
}

// GetDeleteYnOk returns a tuple with the DeleteYn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetDeleteYnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteYn.Get(), o.DeleteYn.IsSet()
}

// HasDeleteYn returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasDeleteYn() bool {
	if o != nil && o.DeleteYn.IsSet() {
		return true
	}

	return false
}

// SetDeleteYn gets a reference to the given NullableString and assigns it to the DeleteYn field.
func (o *PlannedComputeDTO) SetDeleteYn(v string) {
	o.DeleteYn.Set(&v)
}
// SetDeleteYnNil sets the value for DeleteYn to be an explicit nil
func (o *PlannedComputeDTO) SetDeleteYnNil() {
	o.DeleteYn.Set(nil)
}

// UnsetDeleteYn ensures that no value is present for DeleteYn, not even an explicit nil
func (o *PlannedComputeDTO) UnsetDeleteYn() {
	o.DeleteYn.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *PlannedComputeDTO) SetEndDate(v string) {
	o.EndDate = &v
}

// GetFirstContractStartAt returns the FirstContractStartAt field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetFirstContractStartAt() string {
	if o == nil || IsNil(o.FirstContractStartAt) {
		var ret string
		return ret
	}
	return *o.FirstContractStartAt
}

// GetFirstContractStartAtOk returns a tuple with the FirstContractStartAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetFirstContractStartAtOk() (*string, bool) {
	if o == nil || IsNil(o.FirstContractStartAt) {
		return nil, false
	}
	return o.FirstContractStartAt, true
}

// HasFirstContractStartAt returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasFirstContractStartAt() bool {
	if o != nil && !IsNil(o.FirstContractStartAt) {
		return true
	}

	return false
}

// SetFirstContractStartAt gets a reference to the given string and assigns it to the FirstContractStartAt field.
func (o *PlannedComputeDTO) SetFirstContractStartAt(v string) {
	o.FirstContractStartAt = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PlannedComputeDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PlannedComputeDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PlannedComputeDTO) UnsetId() {
	o.Id.Unset()
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetModifiedAt() time.Time {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *PlannedComputeDTO) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetModifiedBy returns the ModifiedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetModifiedBy() string {
	if o == nil || IsNil(o.ModifiedBy.Get()) {
		var ret string
		return ret
	}
	return *o.ModifiedBy.Get()
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedBy.Get(), o.ModifiedBy.IsSet()
}

// HasModifiedBy returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasModifiedBy() bool {
	if o != nil && o.ModifiedBy.IsSet() {
		return true
	}

	return false
}

// SetModifiedBy gets a reference to the given NullableString and assigns it to the ModifiedBy field.
func (o *PlannedComputeDTO) SetModifiedBy(v string) {
	o.ModifiedBy.Set(&v)
}
// SetModifiedByNil sets the value for ModifiedBy to be an explicit nil
func (o *PlannedComputeDTO) SetModifiedByNil() {
	o.ModifiedBy.Set(nil)
}

// UnsetModifiedBy ensures that no value is present for ModifiedBy, not even an explicit nil
func (o *PlannedComputeDTO) UnsetModifiedBy() {
	o.ModifiedBy.Unset()
}

// GetNextContractType returns the NextContractType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetNextContractType() string {
	if o == nil || IsNil(o.NextContractType.Get()) {
		var ret string
		return ret
	}
	return *o.NextContractType.Get()
}

// GetNextContractTypeOk returns a tuple with the NextContractType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetNextContractTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextContractType.Get(), o.NextContractType.IsSet()
}

// HasNextContractType returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasNextContractType() bool {
	if o != nil && o.NextContractType.IsSet() {
		return true
	}

	return false
}

// SetNextContractType gets a reference to the given NullableString and assigns it to the NextContractType field.
func (o *PlannedComputeDTO) SetNextContractType(v string) {
	o.NextContractType.Set(&v)
}
// SetNextContractTypeNil sets the value for NextContractType to be an explicit nil
func (o *PlannedComputeDTO) SetNextContractTypeNil() {
	o.NextContractType.Set(nil)
}

// UnsetNextContractType ensures that no value is present for NextContractType, not even an explicit nil
func (o *PlannedComputeDTO) UnsetNextContractType() {
	o.NextContractType.Unset()
}

// GetNextEndDate returns the NextEndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetNextEndDate() string {
	if o == nil || IsNil(o.NextEndDate.Get()) {
		var ret string
		return ret
	}
	return *o.NextEndDate.Get()
}

// GetNextEndDateOk returns a tuple with the NextEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetNextEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextEndDate.Get(), o.NextEndDate.IsSet()
}

// HasNextEndDate returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasNextEndDate() bool {
	if o != nil && o.NextEndDate.IsSet() {
		return true
	}

	return false
}

// SetNextEndDate gets a reference to the given NullableString and assigns it to the NextEndDate field.
func (o *PlannedComputeDTO) SetNextEndDate(v string) {
	o.NextEndDate.Set(&v)
}
// SetNextEndDateNil sets the value for NextEndDate to be an explicit nil
func (o *PlannedComputeDTO) SetNextEndDateNil() {
	o.NextEndDate.Set(nil)
}

// UnsetNextEndDate ensures that no value is present for NextEndDate, not even an explicit nil
func (o *PlannedComputeDTO) UnsetNextEndDate() {
	o.NextEndDate.Unset()
}

// GetNextStartDate returns the NextStartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetNextStartDate() string {
	if o == nil || IsNil(o.NextStartDate.Get()) {
		var ret string
		return ret
	}
	return *o.NextStartDate.Get()
}

// GetNextStartDateOk returns a tuple with the NextStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetNextStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextStartDate.Get(), o.NextStartDate.IsSet()
}

// HasNextStartDate returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasNextStartDate() bool {
	if o != nil && o.NextStartDate.IsSet() {
		return true
	}

	return false
}

// SetNextStartDate gets a reference to the given NullableString and assigns it to the NextStartDate field.
func (o *PlannedComputeDTO) SetNextStartDate(v string) {
	o.NextStartDate.Set(&v)
}
// SetNextStartDateNil sets the value for NextStartDate to be an explicit nil
func (o *PlannedComputeDTO) SetNextStartDateNil() {
	o.NextStartDate.Set(nil)
}

// UnsetNextStartDate ensures that no value is present for NextStartDate, not even an explicit nil
func (o *PlannedComputeDTO) UnsetNextStartDate() {
	o.NextStartDate.Unset()
}

// GetOsName returns the OsName field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetOsName() string {
	if o == nil || IsNil(o.OsName) {
		var ret string
		return ret
	}
	return *o.OsName
}

// GetOsNameOk returns a tuple with the OsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetOsNameOk() (*string, bool) {
	if o == nil || IsNil(o.OsName) {
		return nil, false
	}
	return o.OsName, true
}

// HasOsName returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasOsName() bool {
	if o != nil && !IsNil(o.OsName) {
		return true
	}

	return false
}

// SetOsName gets a reference to the given string and assigns it to the OsName field.
func (o *PlannedComputeDTO) SetOsName(v string) {
	o.OsName = &v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetOsType() string {
	if o == nil || IsNil(o.OsType) {
		var ret string
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetOsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasOsType() bool {
	if o != nil && !IsNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given string and assigns it to the OsType field.
func (o *PlannedComputeDTO) SetOsType(v string) {
	o.OsType = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *PlannedComputeDTO) SetRegion(v string) {
	o.Region = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedComputeDTO) GetResourceName() string {
	if o == nil || IsNil(o.ResourceName.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedComputeDTO) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableString and assigns it to the ResourceName field.
func (o *PlannedComputeDTO) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}
// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *PlannedComputeDTO) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *PlannedComputeDTO) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *PlannedComputeDTO) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *PlannedComputeDTO) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerTypeDescription returns the ServerTypeDescription field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetServerTypeDescription() map[string]interface{} {
	if o == nil || IsNil(o.ServerTypeDescription) {
		var ret map[string]interface{}
		return ret
	}
	return o.ServerTypeDescription
}

// GetServerTypeDescriptionOk returns a tuple with the ServerTypeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetServerTypeDescriptionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ServerTypeDescription) {
		return map[string]interface{}{}, false
	}
	return o.ServerTypeDescription, true
}

// HasServerTypeDescription returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasServerTypeDescription() bool {
	if o != nil && !IsNil(o.ServerTypeDescription) {
		return true
	}

	return false
}

// SetServerTypeDescription gets a reference to the given map[string]interface{} and assigns it to the ServerTypeDescription field.
func (o *PlannedComputeDTO) SetServerTypeDescription(v map[string]interface{}) {
	o.ServerTypeDescription = v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *PlannedComputeDTO) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *PlannedComputeDTO) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetSrn returns the Srn field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetSrn() string {
	if o == nil || IsNil(o.Srn) {
		var ret string
		return ret
	}
	return *o.Srn
}

// GetSrnOk returns a tuple with the Srn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetSrnOk() (*string, bool) {
	if o == nil || IsNil(o.Srn) {
		return nil, false
	}
	return o.Srn, true
}

// HasSrn returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasSrn() bool {
	if o != nil && !IsNil(o.Srn) {
		return true
	}

	return false
}

// SetSrn gets a reference to the given string and assigns it to the Srn field.
func (o *PlannedComputeDTO) SetSrn(v string) {
	o.Srn = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *PlannedComputeDTO) SetStartDate(v string) {
	o.StartDate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PlannedComputeDTO) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlannedComputeDTO) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PlannedComputeDTO) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PlannedComputeDTO) SetState(v string) {
	o.State = &v
}

func (o PlannedComputeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlannedComputeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if o.ContractId.IsSet() {
		toSerialize["contract_id"] = o.ContractId.Get()
	}
	if !IsNil(o.ContractType) {
		toSerialize["contract_type"] = o.ContractType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedBy.IsSet() {
		toSerialize["created_by"] = o.CreatedBy.Get()
	}
	if o.DeleteYn.IsSet() {
		toSerialize["delete_yn"] = o.DeleteYn.Get()
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.FirstContractStartAt) {
		toSerialize["first_contract_start_at"] = o.FirstContractStartAt
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modified_at"] = o.ModifiedAt
	}
	if o.ModifiedBy.IsSet() {
		toSerialize["modified_by"] = o.ModifiedBy.Get()
	}
	if o.NextContractType.IsSet() {
		toSerialize["next_contract_type"] = o.NextContractType.Get()
	}
	if o.NextEndDate.IsSet() {
		toSerialize["next_end_date"] = o.NextEndDate.Get()
	}
	if o.NextStartDate.IsSet() {
		toSerialize["next_start_date"] = o.NextStartDate.Get()
	}
	if !IsNil(o.OsName) {
		toSerialize["os_name"] = o.OsName
	}
	if !IsNil(o.OsType) {
		toSerialize["os_type"] = o.OsType
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if o.ResourceName.IsSet() {
		toSerialize["resource_name"] = o.ResourceName.Get()
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.ServerTypeDescription) {
		toSerialize["server_type_description"] = o.ServerTypeDescription
	}
	if !IsNil(o.ServiceId) {
		toSerialize["service_id"] = o.ServiceId
	}
	if !IsNil(o.ServiceName) {
		toSerialize["service_name"] = o.ServiceName
	}
	if !IsNil(o.Srn) {
		toSerialize["srn"] = o.Srn
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullablePlannedComputeDTO struct {
	value *PlannedComputeDTO
	isSet bool
}

func (v NullablePlannedComputeDTO) Get() *PlannedComputeDTO {
	return v.value
}

func (v *NullablePlannedComputeDTO) Set(val *PlannedComputeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedComputeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedComputeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedComputeDTO(val *PlannedComputeDTO) *NullablePlannedComputeDTO {
	return &NullablePlannedComputeDTO{value: val, isSet: true}
}

func (v NullablePlannedComputeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedComputeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


