/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
	"fmt"
)

// PlannedComputeContractEnum the model 'PlannedComputeContractEnum'
type PlannedComputeContractEnum string

// List of PlannedComputeContractEnum
const (
	PLANNEDCOMPUTECONTRACTENUM__01 PlannedComputeContractEnum = "01"
	PLANNEDCOMPUTECONTRACTENUM__03 PlannedComputeContractEnum = "03"
	PLANNEDCOMPUTECONTRACTENUM__05 PlannedComputeContractEnum = "05"
)

// All allowed values of PlannedComputeContractEnum enum
var AllowedPlannedComputeContractEnumEnumValues = []PlannedComputeContractEnum{
	"01",
	"03",
	"05",
}

func (v *PlannedComputeContractEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlannedComputeContractEnum(value)
	for _, existing := range AllowedPlannedComputeContractEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlannedComputeContractEnum", value)
}

// NewPlannedComputeContractEnumFromValue returns a pointer to a valid PlannedComputeContractEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlannedComputeContractEnumFromValue(v string) (*PlannedComputeContractEnum, error) {
	ev := PlannedComputeContractEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlannedComputeContractEnum: valid values are %v", v, AllowedPlannedComputeContractEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlannedComputeContractEnum) IsValid() bool {
	for _, existing := range AllowedPlannedComputeContractEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlannedComputeContractEnum value
func (v PlannedComputeContractEnum) Ptr() *PlannedComputeContractEnum {
	return &v
}

type NullablePlannedComputeContractEnum struct {
	value *PlannedComputeContractEnum
	isSet bool
}

func (v NullablePlannedComputeContractEnum) Get() *PlannedComputeContractEnum {
	return v.value
}

func (v *NullablePlannedComputeContractEnum) Set(val *PlannedComputeContractEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedComputeContractEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedComputeContractEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedComputeContractEnum(val *PlannedComputeContractEnum) *NullablePlannedComputeContractEnum {
	return &NullablePlannedComputeContractEnum{value: val, isSet: true}
}

func (v NullablePlannedComputeContractEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedComputeContractEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

