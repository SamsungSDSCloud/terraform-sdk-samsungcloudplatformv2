/*
OSSCP Billing

OSSCP Billing

API version: 1.2.0.0rc5.dev38
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package billing

import (
	"encoding/json"
)

// checks if the OSTypeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSTypeDTO{}

// OSTypeDTO struct for OSTypeDTO
type OSTypeDTO struct {
	DisplayName NullableString `json:"display_name,omitempty"`
	OsTypeId NullableString `json:"os_type_id,omitempty"`
	OsTypeValue NullableString `json:"os_type_value,omitempty"`
}

// NewOSTypeDTO instantiates a new OSTypeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSTypeDTO() *OSTypeDTO {
	this := OSTypeDTO{}
	return &this
}

// NewOSTypeDTOWithDefaults instantiates a new OSTypeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSTypeDTOWithDefaults() *OSTypeDTO {
	this := OSTypeDTO{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OSTypeDTO) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OSTypeDTO) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *OSTypeDTO) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *OSTypeDTO) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *OSTypeDTO) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *OSTypeDTO) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetOsTypeId returns the OsTypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OSTypeDTO) GetOsTypeId() string {
	if o == nil || IsNil(o.OsTypeId.Get()) {
		var ret string
		return ret
	}
	return *o.OsTypeId.Get()
}

// GetOsTypeIdOk returns a tuple with the OsTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OSTypeDTO) GetOsTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsTypeId.Get(), o.OsTypeId.IsSet()
}

// HasOsTypeId returns a boolean if a field has been set.
func (o *OSTypeDTO) HasOsTypeId() bool {
	if o != nil && o.OsTypeId.IsSet() {
		return true
	}

	return false
}

// SetOsTypeId gets a reference to the given NullableString and assigns it to the OsTypeId field.
func (o *OSTypeDTO) SetOsTypeId(v string) {
	o.OsTypeId.Set(&v)
}
// SetOsTypeIdNil sets the value for OsTypeId to be an explicit nil
func (o *OSTypeDTO) SetOsTypeIdNil() {
	o.OsTypeId.Set(nil)
}

// UnsetOsTypeId ensures that no value is present for OsTypeId, not even an explicit nil
func (o *OSTypeDTO) UnsetOsTypeId() {
	o.OsTypeId.Unset()
}

// GetOsTypeValue returns the OsTypeValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OSTypeDTO) GetOsTypeValue() string {
	if o == nil || IsNil(o.OsTypeValue.Get()) {
		var ret string
		return ret
	}
	return *o.OsTypeValue.Get()
}

// GetOsTypeValueOk returns a tuple with the OsTypeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OSTypeDTO) GetOsTypeValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsTypeValue.Get(), o.OsTypeValue.IsSet()
}

// HasOsTypeValue returns a boolean if a field has been set.
func (o *OSTypeDTO) HasOsTypeValue() bool {
	if o != nil && o.OsTypeValue.IsSet() {
		return true
	}

	return false
}

// SetOsTypeValue gets a reference to the given NullableString and assigns it to the OsTypeValue field.
func (o *OSTypeDTO) SetOsTypeValue(v string) {
	o.OsTypeValue.Set(&v)
}
// SetOsTypeValueNil sets the value for OsTypeValue to be an explicit nil
func (o *OSTypeDTO) SetOsTypeValueNil() {
	o.OsTypeValue.Set(nil)
}

// UnsetOsTypeValue ensures that no value is present for OsTypeValue, not even an explicit nil
func (o *OSTypeDTO) UnsetOsTypeValue() {
	o.OsTypeValue.Unset()
}

func (o OSTypeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSTypeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["display_name"] = o.DisplayName.Get()
	}
	if o.OsTypeId.IsSet() {
		toSerialize["os_type_id"] = o.OsTypeId.Get()
	}
	if o.OsTypeValue.IsSet() {
		toSerialize["os_type_value"] = o.OsTypeValue.Get()
	}
	return toSerialize, nil
}

type NullableOSTypeDTO struct {
	value *OSTypeDTO
	isSet bool
}

func (v NullableOSTypeDTO) Get() *OSTypeDTO {
	return v.value
}

func (v *NullableOSTypeDTO) Set(val *OSTypeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableOSTypeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableOSTypeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSTypeDTO(val *OSTypeDTO) *NullableOSTypeDTO {
	return &NullableOSTypeDTO{value: val, isSet: true}
}

func (v NullableOSTypeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSTypeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


