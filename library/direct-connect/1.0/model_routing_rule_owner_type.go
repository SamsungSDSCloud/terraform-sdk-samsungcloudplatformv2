/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"encoding/json"
	"fmt"
)

// RoutingRuleOwnerType the model 'RoutingRuleOwnerType'
type RoutingRuleOwnerType string

// List of RoutingRuleOwnerType
const (
	ROUTINGRULEOWNERTYPE_INTERNET_GATEWAY        RoutingRuleOwnerType = "INTERNET_GATEWAY"
	ROUTINGRULEOWNERTYPE_GROUP_GATEWAY           RoutingRuleOwnerType = "GROUP_GATEWAY"
	ROUTINGRULEOWNERTYPE_DIRECT_CONNECT          RoutingRuleOwnerType = "DIRECT_CONNECT"
	ROUTINGRULEOWNERTYPE_SUBNET                  RoutingRuleOwnerType = "SUBNET"
	ROUTINGRULEOWNERTYPE_PRIVATE_NAT             RoutingRuleOwnerType = "PRIVATE_NAT"
	ROUTINGRULEOWNERTYPE_TRANSIT_GATEWAY         RoutingRuleOwnerType = "TRANSIT_GATEWAY"
	ROUTINGRULEOWNERTYPE_VPC_PEERING             RoutingRuleOwnerType = "VPC_PEERING"
	ROUTINGRULEOWNERTYPE_SECURE_INTERNET_GATEWAY RoutingRuleOwnerType = "SECURE_INTERNET_GATEWAY"
)

// All allowed values of RoutingRuleOwnerType enum
var AllowedRoutingRuleOwnerTypeEnumValues = []RoutingRuleOwnerType{
	"INTERNET_GATEWAY",
	"GROUP_GATEWAY",
	"DIRECT_CONNECT",
	"SUBNET",
	"PRIVATE_NAT",
	"TRANSIT_GATEWAY",
	"VPC_PEERING",
	"SECURE_INTERNET_GATEWAY",
}

func (v *RoutingRuleOwnerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingRuleOwnerType(value)
	for _, existing := range AllowedRoutingRuleOwnerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingRuleOwnerType", value)
}

// NewRoutingRuleOwnerTypeFromValue returns a pointer to a valid RoutingRuleOwnerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingRuleOwnerTypeFromValue(v string) (*RoutingRuleOwnerType, error) {
	ev := RoutingRuleOwnerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingRuleOwnerType: valid values are %v", v, AllowedRoutingRuleOwnerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingRuleOwnerType) IsValid() bool {
	for _, existing := range AllowedRoutingRuleOwnerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingRuleOwnerType value
func (v RoutingRuleOwnerType) Ptr() *RoutingRuleOwnerType {
	return &v
}

type NullableRoutingRuleOwnerType struct {
	value *RoutingRuleOwnerType
	isSet bool
}

func (v NullableRoutingRuleOwnerType) Get() *RoutingRuleOwnerType {
	return v.value
}

func (v *NullableRoutingRuleOwnerType) Set(val *RoutingRuleOwnerType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRuleOwnerType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRuleOwnerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRuleOwnerType(val *RoutingRuleOwnerType) *NullableRoutingRuleOwnerType {
	return &NullableRoutingRuleOwnerType{value: val, isSet: true}
}

func (v NullableRoutingRuleOwnerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRuleOwnerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
