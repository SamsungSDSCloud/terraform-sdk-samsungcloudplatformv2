/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"encoding/json"
	"fmt"
)

// RoutingRuleState the model 'RoutingRuleState'
type RoutingRuleState string

// List of RoutingRuleState
const (
	ROUTINGRULESTATE_CREATING RoutingRuleState = "CREATING"
	ROUTINGRULESTATE_ACTIVE   RoutingRuleState = "ACTIVE"
	ROUTINGRULESTATE_DELETING RoutingRuleState = "DELETING"
	ROUTINGRULESTATE_DELETED  RoutingRuleState = "DELETED"
	ROUTINGRULESTATE_ERROR    RoutingRuleState = "ERROR"
)

// All allowed values of RoutingRuleState enum
var AllowedRoutingRuleStateEnumValues = []RoutingRuleState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *RoutingRuleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingRuleState(value)
	for _, existing := range AllowedRoutingRuleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingRuleState", value)
}

// NewRoutingRuleStateFromValue returns a pointer to a valid RoutingRuleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingRuleStateFromValue(v string) (*RoutingRuleState, error) {
	ev := RoutingRuleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingRuleState: valid values are %v", v, AllowedRoutingRuleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingRuleState) IsValid() bool {
	for _, existing := range AllowedRoutingRuleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingRuleState value
func (v RoutingRuleState) Ptr() *RoutingRuleState {
	return &v
}

type NullableRoutingRuleState struct {
	value *RoutingRuleState
	isSet bool
}

func (v NullableRoutingRuleState) Get() *RoutingRuleState {
	return v.value
}

func (v *NullableRoutingRuleState) Set(val *RoutingRuleState) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRuleState) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRuleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRuleState(val *RoutingRuleState) *NullableRoutingRuleState {
	return &NullableRoutingRuleState{value: val, isSet: true}
}

func (v NullableRoutingRuleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRuleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
