/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RoutingRuleShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingRuleShowResponse{}

// RoutingRuleShowResponse struct for RoutingRuleShowResponse
type RoutingRuleShowResponse struct {
	RoutingRule RoutingRule `json:"routing_rule"`
}

type _RoutingRuleShowResponse RoutingRuleShowResponse

// NewRoutingRuleShowResponse instantiates a new RoutingRuleShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingRuleShowResponse(routingRule RoutingRule) *RoutingRuleShowResponse {
	this := RoutingRuleShowResponse{}
	this.RoutingRule = routingRule
	return &this
}

// NewRoutingRuleShowResponseWithDefaults instantiates a new RoutingRuleShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingRuleShowResponseWithDefaults() *RoutingRuleShowResponse {
	this := RoutingRuleShowResponse{}
	return &this
}

// GetRoutingRule returns the RoutingRule field value
func (o *RoutingRuleShowResponse) GetRoutingRule() RoutingRule {
	if o == nil {
		var ret RoutingRule
		return ret
	}

	return o.RoutingRule
}

// GetRoutingRuleOk returns a tuple with the RoutingRule field value
// and a boolean to check if the value has been set.
func (o *RoutingRuleShowResponse) GetRoutingRuleOk() (*RoutingRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoutingRule, true
}

// SetRoutingRule sets field value
func (o *RoutingRuleShowResponse) SetRoutingRule(v RoutingRule) {
	o.RoutingRule = v
}

func (o RoutingRuleShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingRuleShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routing_rule"] = o.RoutingRule
	return toSerialize, nil
}

func (o *RoutingRuleShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routing_rule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingRuleShowResponse := _RoutingRuleShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoutingRuleShowResponse)

	if err != nil {
		return err
	}

	*o = RoutingRuleShowResponse(varRoutingRuleShowResponse)

	return err
}

type NullableRoutingRuleShowResponse struct {
	value *RoutingRuleShowResponse
	isSet bool
}

func (v NullableRoutingRuleShowResponse) Get() *RoutingRuleShowResponse {
	return v.value
}

func (v *NullableRoutingRuleShowResponse) Set(val *RoutingRuleShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRuleShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRuleShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRuleShowResponse(val *RoutingRuleShowResponse) *NullableRoutingRuleShowResponse {
	return &NullableRoutingRuleShowResponse{value: val, isSet: true}
}

func (v NullableRoutingRuleShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRuleShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
