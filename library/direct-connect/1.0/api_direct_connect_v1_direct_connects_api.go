/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DirectConnectV1DirectConnectsApiAPIService DirectConnectV1DirectConnectsApiAPI service
type DirectConnectV1DirectConnectsApiAPIService service

type DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest struct {
	ctx                        context.Context
	ApiService                 *DirectConnectV1DirectConnectsApiAPIService
	directConnectCreateRequest *DirectConnectCreateRequest
}

func (r DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest) DirectConnectCreateRequest(directConnectCreateRequest DirectConnectCreateRequest) DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest {
	r.directConnectCreateRequest = &directConnectCreateRequest
	return r
}

func (r DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest) Execute() (*DirectConnectShowResponse, *http.Response, error) {
	return r.ApiService.CreateDirectConnectExecute(r)
}

/*
CreateDirectConnect Create Direct Connect

Create direct connect.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest
*/
func (a *DirectConnectV1DirectConnectsApiAPIService) CreateDirectConnect(ctx context.Context) DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest {
	return DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DirectConnectShowResponse
func (a *DirectConnectV1DirectConnectsApiAPIService) CreateDirectConnectExecute(r DirectConnectV1DirectConnectsApiAPICreateDirectConnectRequest) (*DirectConnectShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DirectConnectShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.directConnectCreateRequest == nil {
		return localVarReturnValue, nil, reportError("directConnectCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.directConnectCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectConnectV1DirectConnectsApiAPIDeleteDirectConnectRequest struct {
	ctx             context.Context
	ApiService      *DirectConnectV1DirectConnectsApiAPIService
	directConnectId string
}

func (r DirectConnectV1DirectConnectsApiAPIDeleteDirectConnectRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDirectConnectExecute(r)
}

/*
DeleteDirectConnect Delete Direct Connect

Delete direct connect.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param directConnectId Direct Connect ID
	@return DirectConnectV1DirectConnectsApiAPIDeleteDirectConnectRequest
*/
func (a *DirectConnectV1DirectConnectsApiAPIService) DeleteDirectConnect(ctx context.Context, directConnectId string) DirectConnectV1DirectConnectsApiAPIDeleteDirectConnectRequest {
	return DirectConnectV1DirectConnectsApiAPIDeleteDirectConnectRequest{
		ApiService:      a,
		ctx:             ctx,
		directConnectId: directConnectId,
	}
}

// Execute executes the request
func (a *DirectConnectV1DirectConnectsApiAPIService) DeleteDirectConnectExecute(r DirectConnectV1DirectConnectsApiAPIDeleteDirectConnectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects/{direct_connect_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"direct_connect_id"+"}", url.PathEscape(parameterValueToString(r.directConnectId, "directConnectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest struct {
	ctx        context.Context
	ApiService *DirectConnectV1DirectConnectsApiAPIService
	withCount  *string
	limit      *int32
	marker     *string
	sort       *string
	id         *string
	name       *string
	state      *DirectConnectState
	vpcId      *string
	vpcName    *string
}

// with count
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) WithCount(withCount string) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) Limit(limit int32) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.limit = &limit
	return r
}

// marker
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) Marker(marker string) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.marker = &marker
	return r
}

// sort
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) Sort(sort string) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.sort = &sort
	return r
}

// Direct Connect ID
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) Id(id string) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.id = &id
	return r
}

// Direct Connect Name
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) Name(name string) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.name = &name
	return r
}

// State
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) State(state DirectConnectState) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.state = &state
	return r
}

// VPC Id
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) VpcId(vpcId string) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Name
func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) VpcName(vpcName string) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	r.vpcName = &vpcName
	return r
}

func (r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) Execute() (*DirectConnectListResponse, *http.Response, error) {
	return r.ApiService.ListDirectConnectsExecute(r)
}

/*
ListDirectConnects List Direct Connects

Get direct connect list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest
*/
func (a *DirectConnectV1DirectConnectsApiAPIService) ListDirectConnects(ctx context.Context) DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest {
	return DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DirectConnectListResponse
func (a *DirectConnectV1DirectConnectsApiAPIService) ListDirectConnectsExecute(r DirectConnectV1DirectConnectsApiAPIListDirectConnectsRequest) (*DirectConnectListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DirectConnectListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest struct {
	ctx                     context.Context
	ApiService              *DirectConnectV1DirectConnectsApiAPIService
	directConnectId         string
	directConnectSetRequest *DirectConnectSetRequest
}

func (r DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest) DirectConnectSetRequest(directConnectSetRequest DirectConnectSetRequest) DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest {
	r.directConnectSetRequest = &directConnectSetRequest
	return r
}

func (r DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest) Execute() (*DirectConnectShowResponse, *http.Response, error) {
	return r.ApiService.SetDirectConnectExecute(r)
}

/*
SetDirectConnect Set Direct Connect

Set direct connect.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param directConnectId Direct Connect ID
	@return DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest
*/
func (a *DirectConnectV1DirectConnectsApiAPIService) SetDirectConnect(ctx context.Context, directConnectId string) DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest {
	return DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest{
		ApiService:      a,
		ctx:             ctx,
		directConnectId: directConnectId,
	}
}

// Execute executes the request
//
//	@return DirectConnectShowResponse
func (a *DirectConnectV1DirectConnectsApiAPIService) SetDirectConnectExecute(r DirectConnectV1DirectConnectsApiAPISetDirectConnectRequest) (*DirectConnectShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DirectConnectShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects/{direct_connect_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"direct_connect_id"+"}", url.PathEscape(parameterValueToString(r.directConnectId, "directConnectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.directConnectSetRequest == nil {
		return localVarReturnValue, nil, reportError("directConnectSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.directConnectSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectConnectV1DirectConnectsApiAPIShowDirectConnectRequest struct {
	ctx             context.Context
	ApiService      *DirectConnectV1DirectConnectsApiAPIService
	directConnectId string
}

func (r DirectConnectV1DirectConnectsApiAPIShowDirectConnectRequest) Execute() (*DirectConnectShowResponse, *http.Response, error) {
	return r.ApiService.ShowDirectConnectExecute(r)
}

/*
ShowDirectConnect Show Direct Connect

Show direct connect.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param directConnectId Direct Connect ID
	@return DirectConnectV1DirectConnectsApiAPIShowDirectConnectRequest
*/
func (a *DirectConnectV1DirectConnectsApiAPIService) ShowDirectConnect(ctx context.Context, directConnectId string) DirectConnectV1DirectConnectsApiAPIShowDirectConnectRequest {
	return DirectConnectV1DirectConnectsApiAPIShowDirectConnectRequest{
		ApiService:      a,
		ctx:             ctx,
		directConnectId: directConnectId,
	}
}

// Execute executes the request
//
//	@return DirectConnectShowResponse
func (a *DirectConnectV1DirectConnectsApiAPIService) ShowDirectConnectExecute(r DirectConnectV1DirectConnectsApiAPIShowDirectConnectRequest) (*DirectConnectShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DirectConnectShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects/{direct_connect_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"direct_connect_id"+"}", url.PathEscape(parameterValueToString(r.directConnectId, "directConnectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
