/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DirectConnectV1DirectConnectsRulesApiAPIService DirectConnectV1DirectConnectsRulesApiAPI service
type DirectConnectV1DirectConnectsRulesApiAPIService service

type DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest struct {
	ctx             context.Context
	ApiService      *DirectConnectV1DirectConnectsRulesApiAPIService
	directConnectId string
	destinationType *DirectConnectRoutingRuleDestinationType
	destinationCidr *string
}

// Destination Type
func (r DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest) DestinationType(destinationType DirectConnectRoutingRuleDestinationType) DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest {
	r.destinationType = &destinationType
	return r
}

// Destination CIDR
func (r DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest) DestinationCidr(destinationCidr string) DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest {
	r.destinationCidr = &destinationCidr
	return r
}

func (r DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest) Execute() (*RoutingRuleCidrAvailabilityResponse, *http.Response, error) {
	return r.ApiService.CheckDestinationCidrAvailabilitiesExecute(r)
}

/*
CheckDestinationCidrAvailabilities CheckDestinationCidrAvailabilities

check destination cidr availabilities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param directConnectId Direct Connect ID
	@return DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest
*/
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) CheckDestinationCidrAvailabilities(ctx context.Context, directConnectId string) DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest {
	return DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest{
		ApiService:      a,
		ctx:             ctx,
		directConnectId: directConnectId,
	}
}

// Execute executes the request
//
//	@return RoutingRuleCidrAvailabilityResponse
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) CheckDestinationCidrAvailabilitiesExecute(r DirectConnectV1DirectConnectsRulesApiAPICheckDestinationCidrAvailabilitiesRequest) (*RoutingRuleCidrAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingRuleCidrAvailabilityResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects/{direct_connect_id}/routing-rules/destination-cidr-availabilities"
	localVarPath = strings.Replace(localVarPath, "{"+"direct_connect_id"+"}", url.PathEscape(parameterValueToString(r.directConnectId, "directConnectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.destinationType == nil {
		return localVarReturnValue, nil, reportError("destinationType is required and must be specified")
	}
	if r.destinationCidr == nil {
		return localVarReturnValue, nil, reportError("destinationCidr is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", r.destinationType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "destination_cidr", r.destinationCidr, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest struct {
	ctx                      context.Context
	ApiService               *DirectConnectV1DirectConnectsRulesApiAPIService
	directConnectId          string
	routingRuleCreateRequest *RoutingRuleCreateRequest
}

func (r DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest) RoutingRuleCreateRequest(routingRuleCreateRequest RoutingRuleCreateRequest) DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest {
	r.routingRuleCreateRequest = &routingRuleCreateRequest
	return r
}

func (r DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest) Execute() (*RoutingRuleShowResponse, *http.Response, error) {
	return r.ApiService.CreateRoutingRuleExecute(r)
}

/*
CreateRoutingRule Create Routing Rule

Create a routing rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param directConnectId Direct Connect ID
	@return DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest
*/
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) CreateRoutingRule(ctx context.Context, directConnectId string) DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest {
	return DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest{
		ApiService:      a,
		ctx:             ctx,
		directConnectId: directConnectId,
	}
}

// Execute executes the request
//
//	@return RoutingRuleShowResponse
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) CreateRoutingRuleExecute(r DirectConnectV1DirectConnectsRulesApiAPICreateRoutingRuleRequest) (*RoutingRuleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingRuleShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects/{direct_connect_id}/routing-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"direct_connect_id"+"}", url.PathEscape(parameterValueToString(r.directConnectId, "directConnectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routingRuleCreateRequest == nil {
		return localVarReturnValue, nil, reportError("routingRuleCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routingRuleCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectConnectV1DirectConnectsRulesApiAPIDeleteRoutingRuleRequest struct {
	ctx             context.Context
	ApiService      *DirectConnectV1DirectConnectsRulesApiAPIService
	directConnectId string
	routingRuleId   string
}

func (r DirectConnectV1DirectConnectsRulesApiAPIDeleteRoutingRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoutingRuleExecute(r)
}

/*
DeleteRoutingRule Delete Routing Rule

Delete a routing rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param directConnectId Direct Connect ID
	@param routingRuleId Routing Rule ID
	@return DirectConnectV1DirectConnectsRulesApiAPIDeleteRoutingRuleRequest
*/
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) DeleteRoutingRule(ctx context.Context, directConnectId string, routingRuleId string) DirectConnectV1DirectConnectsRulesApiAPIDeleteRoutingRuleRequest {
	return DirectConnectV1DirectConnectsRulesApiAPIDeleteRoutingRuleRequest{
		ApiService:      a,
		ctx:             ctx,
		directConnectId: directConnectId,
		routingRuleId:   routingRuleId,
	}
}

// Execute executes the request
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) DeleteRoutingRuleExecute(r DirectConnectV1DirectConnectsRulesApiAPIDeleteRoutingRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects/{direct_connect_id}/routing-rules/{routing_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"direct_connect_id"+"}", url.PathEscape(parameterValueToString(r.directConnectId, "directConnectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routing_rule_id"+"}", url.PathEscape(parameterValueToString(r.routingRuleId, "routingRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest struct {
	ctx             context.Context
	ApiService      *DirectConnectV1DirectConnectsRulesApiAPIService
	directConnectId string
	withCount       *string
	limit           *int32
	marker          *string
	sort            *string
	id              *string
	destinationType *DirectConnectRoutingRuleDestinationType
	destinationCidr *string
	state           *RoutingRuleState
}

// with count
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) WithCount(withCount string) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) Limit(limit int32) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.limit = &limit
	return r
}

// marker
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) Marker(marker string) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.marker = &marker
	return r
}

// sort
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) Sort(sort string) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.sort = &sort
	return r
}

// Routing Rule ID
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) Id(id string) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.id = &id
	return r
}

// Destination Type
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) DestinationType(destinationType DirectConnectRoutingRuleDestinationType) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.destinationType = &destinationType
	return r
}

// Destination CIDR
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) DestinationCidr(destinationCidr string) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.destinationCidr = &destinationCidr
	return r
}

// State
func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) State(state RoutingRuleState) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	r.state = &state
	return r
}

func (r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) Execute() (*RoutingRuleListResponse, *http.Response, error) {
	return r.ApiService.ListRoutingRulesExecute(r)
}

/*
ListRoutingRules List Routing Rules

Get routing rule list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param directConnectId Direct Connect ID
	@return DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest
*/
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) ListRoutingRules(ctx context.Context, directConnectId string) DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest {
	return DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest{
		ApiService:      a,
		ctx:             ctx,
		directConnectId: directConnectId,
	}
}

// Execute executes the request
//
//	@return RoutingRuleListResponse
func (a *DirectConnectV1DirectConnectsRulesApiAPIService) ListRoutingRulesExecute(r DirectConnectV1DirectConnectsRulesApiAPIListRoutingRulesRequest) (*RoutingRuleListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoutingRuleListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/direct-connects/{direct_connect_id}/routing-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"direct_connect_id"+"}", url.PathEscape(parameterValueToString(r.directConnectId, "directConnectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.destinationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", r.destinationType, "form", "")
	}
	if r.destinationCidr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_cidr", r.destinationCidr, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "directconnect 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
