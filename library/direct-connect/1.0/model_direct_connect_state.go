/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"encoding/json"
	"fmt"
)

// DirectConnectState the model 'DirectConnectState'
type DirectConnectState string

// List of DirectConnectState
const (
	DIRECTCONNECTSTATE_CREATING DirectConnectState = "CREATING"
	DIRECTCONNECTSTATE_ACTIVE   DirectConnectState = "ACTIVE"
	DIRECTCONNECTSTATE_EDITING  DirectConnectState = "EDITING"
	DIRECTCONNECTSTATE_DELETING DirectConnectState = "DELETING"
	DIRECTCONNECTSTATE_DELETED  DirectConnectState = "DELETED"
	DIRECTCONNECTSTATE_ERROR    DirectConnectState = "ERROR"
)

// All allowed values of DirectConnectState enum
var AllowedDirectConnectStateEnumValues = []DirectConnectState{
	"CREATING",
	"ACTIVE",
	"EDITING",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *DirectConnectState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DirectConnectState(value)
	for _, existing := range AllowedDirectConnectStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DirectConnectState", value)
}

// NewDirectConnectStateFromValue returns a pointer to a valid DirectConnectState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectConnectStateFromValue(v string) (*DirectConnectState, error) {
	ev := DirectConnectState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DirectConnectState: valid values are %v", v, AllowedDirectConnectStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DirectConnectState) IsValid() bool {
	for _, existing := range AllowedDirectConnectStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DirectConnectState value
func (v DirectConnectState) Ptr() *DirectConnectState {
	return &v
}

type NullableDirectConnectState struct {
	value *DirectConnectState
	isSet bool
}

func (v NullableDirectConnectState) Get() *DirectConnectState {
	return v.value
}

func (v *NullableDirectConnectState) Set(val *DirectConnectState) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectConnectState) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectConnectState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectConnectState(val *DirectConnectState) *NullableDirectConnectState {
	return &NullableDirectConnectState{value: val, isSet: true}
}

func (v NullableDirectConnectState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectConnectState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
