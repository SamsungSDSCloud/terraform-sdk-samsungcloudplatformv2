/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RoutingRuleCidrAvailabilityDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingRuleCidrAvailabilityDetail{}

// RoutingRuleCidrAvailabilityDetail struct for RoutingRuleCidrAvailabilityDetail
type RoutingRuleCidrAvailabilityDetail struct {
	// Availability of destination CIDR
	Available bool `json:"available"`
	// Destination CIDR
	DestinationCidr string `json:"destination_cidr"`
	// Destination Type
	DestinationType DirectConnectRoutingRuleDestinationType `json:"destination_type"`
}

type _RoutingRuleCidrAvailabilityDetail RoutingRuleCidrAvailabilityDetail

// NewRoutingRuleCidrAvailabilityDetail instantiates a new RoutingRuleCidrAvailabilityDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingRuleCidrAvailabilityDetail(available bool, destinationCidr string, destinationType DirectConnectRoutingRuleDestinationType) *RoutingRuleCidrAvailabilityDetail {
	this := RoutingRuleCidrAvailabilityDetail{}
	this.Available = available
	this.DestinationCidr = destinationCidr
	this.DestinationType = destinationType
	return &this
}

// NewRoutingRuleCidrAvailabilityDetailWithDefaults instantiates a new RoutingRuleCidrAvailabilityDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingRuleCidrAvailabilityDetailWithDefaults() *RoutingRuleCidrAvailabilityDetail {
	this := RoutingRuleCidrAvailabilityDetail{}
	return &this
}

// GetAvailable returns the Available field value
func (o *RoutingRuleCidrAvailabilityDetail) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *RoutingRuleCidrAvailabilityDetail) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *RoutingRuleCidrAvailabilityDetail) SetAvailable(v bool) {
	o.Available = v
}

// GetDestinationCidr returns the DestinationCidr field value
func (o *RoutingRuleCidrAvailabilityDetail) GetDestinationCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationCidr
}

// GetDestinationCidrOk returns a tuple with the DestinationCidr field value
// and a boolean to check if the value has been set.
func (o *RoutingRuleCidrAvailabilityDetail) GetDestinationCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationCidr, true
}

// SetDestinationCidr sets field value
func (o *RoutingRuleCidrAvailabilityDetail) SetDestinationCidr(v string) {
	o.DestinationCidr = v
}

// GetDestinationType returns the DestinationType field value
func (o *RoutingRuleCidrAvailabilityDetail) GetDestinationType() DirectConnectRoutingRuleDestinationType {
	if o == nil {
		var ret DirectConnectRoutingRuleDestinationType
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *RoutingRuleCidrAvailabilityDetail) GetDestinationTypeOk() (*DirectConnectRoutingRuleDestinationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *RoutingRuleCidrAvailabilityDetail) SetDestinationType(v DirectConnectRoutingRuleDestinationType) {
	o.DestinationType = v
}

func (o RoutingRuleCidrAvailabilityDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingRuleCidrAvailabilityDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available"] = o.Available
	toSerialize["destination_cidr"] = o.DestinationCidr
	toSerialize["destination_type"] = o.DestinationType
	return toSerialize, nil
}

func (o *RoutingRuleCidrAvailabilityDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available",
		"destination_cidr",
		"destination_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingRuleCidrAvailabilityDetail := _RoutingRuleCidrAvailabilityDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoutingRuleCidrAvailabilityDetail)

	if err != nil {
		return err
	}

	*o = RoutingRuleCidrAvailabilityDetail(varRoutingRuleCidrAvailabilityDetail)

	return err
}

type NullableRoutingRuleCidrAvailabilityDetail struct {
	value *RoutingRuleCidrAvailabilityDetail
	isSet bool
}

func (v NullableRoutingRuleCidrAvailabilityDetail) Get() *RoutingRuleCidrAvailabilityDetail {
	return v.value
}

func (v *NullableRoutingRuleCidrAvailabilityDetail) Set(val *RoutingRuleCidrAvailabilityDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRuleCidrAvailabilityDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRuleCidrAvailabilityDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRuleCidrAvailabilityDetail(val *RoutingRuleCidrAvailabilityDetail) *NullableRoutingRuleCidrAvailabilityDetail {
	return &NullableRoutingRuleCidrAvailabilityDetail{value: val, isSet: true}
}

func (v NullableRoutingRuleCidrAvailabilityDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRuleCidrAvailabilityDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
