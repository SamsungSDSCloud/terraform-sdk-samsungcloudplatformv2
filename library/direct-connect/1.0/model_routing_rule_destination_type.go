/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"encoding/json"
	"fmt"
)

// RoutingRuleDestinationType the model 'RoutingRuleDestinationType'
type RoutingRuleDestinationType string

// List of RoutingRuleDestinationType
const (
	ROUTINGRULEDESTINATIONTYPE_VPC        RoutingRuleDestinationType = "VPC"
	ROUTINGRULEDESTINATIONTYPE_ON_PREMISE RoutingRuleDestinationType = "ON_PREMISE"
	ROUTINGRULEDESTINATIONTYPE_INTERNET   RoutingRuleDestinationType = "INTERNET"
	ROUTINGRULEDESTINATIONTYPE_TGW        RoutingRuleDestinationType = "TGW"
)

// All allowed values of RoutingRuleDestinationType enum
var AllowedRoutingRuleDestinationTypeEnumValues = []RoutingRuleDestinationType{
	"VPC",
	"ON_PREMISE",
	"INTERNET",
	"TGW",
}

func (v *RoutingRuleDestinationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingRuleDestinationType(value)
	for _, existing := range AllowedRoutingRuleDestinationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingRuleDestinationType", value)
}

// NewRoutingRuleDestinationTypeFromValue returns a pointer to a valid RoutingRuleDestinationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingRuleDestinationTypeFromValue(v string) (*RoutingRuleDestinationType, error) {
	ev := RoutingRuleDestinationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingRuleDestinationType: valid values are %v", v, AllowedRoutingRuleDestinationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingRuleDestinationType) IsValid() bool {
	for _, existing := range AllowedRoutingRuleDestinationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingRuleDestinationType value
func (v RoutingRuleDestinationType) Ptr() *RoutingRuleDestinationType {
	return &v
}

type NullableRoutingRuleDestinationType struct {
	value *RoutingRuleDestinationType
	isSet bool
}

func (v NullableRoutingRuleDestinationType) Get() *RoutingRuleDestinationType {
	return v.value
}

func (v *NullableRoutingRuleDestinationType) Set(val *RoutingRuleDestinationType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingRuleDestinationType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingRuleDestinationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingRuleDestinationType(val *RoutingRuleDestinationType) *NullableRoutingRuleDestinationType {
	return &NullableRoutingRuleDestinationType{value: val, isSet: true}
}

func (v NullableRoutingRuleDestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingRuleDestinationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
