/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6775
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package directconnect

import (
	"encoding/json"
	"fmt"
)

// DirectConnectRoutingRuleDestinationType the model 'DirectConnectRoutingRuleDestinationType'
type DirectConnectRoutingRuleDestinationType string

// List of DirectConnectRoutingRuleDestinationType
const (
	DIRECTCONNECTROUTINGRULEDESTINATIONTYPE_VPC        DirectConnectRoutingRuleDestinationType = "VPC"
	DIRECTCONNECTROUTINGRULEDESTINATIONTYPE_ON_PREMISE DirectConnectRoutingRuleDestinationType = "ON_PREMISE"
)

// All allowed values of DirectConnectRoutingRuleDestinationType enum
var AllowedDirectConnectRoutingRuleDestinationTypeEnumValues = []DirectConnectRoutingRuleDestinationType{
	"VPC",
	"ON_PREMISE",
}

func (v *DirectConnectRoutingRuleDestinationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DirectConnectRoutingRuleDestinationType(value)
	for _, existing := range AllowedDirectConnectRoutingRuleDestinationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DirectConnectRoutingRuleDestinationType", value)
}

// NewDirectConnectRoutingRuleDestinationTypeFromValue returns a pointer to a valid DirectConnectRoutingRuleDestinationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDirectConnectRoutingRuleDestinationTypeFromValue(v string) (*DirectConnectRoutingRuleDestinationType, error) {
	ev := DirectConnectRoutingRuleDestinationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DirectConnectRoutingRuleDestinationType: valid values are %v", v, AllowedDirectConnectRoutingRuleDestinationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DirectConnectRoutingRuleDestinationType) IsValid() bool {
	for _, existing := range AllowedDirectConnectRoutingRuleDestinationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DirectConnectRoutingRuleDestinationType value
func (v DirectConnectRoutingRuleDestinationType) Ptr() *DirectConnectRoutingRuleDestinationType {
	return &v
}

type NullableDirectConnectRoutingRuleDestinationType struct {
	value *DirectConnectRoutingRuleDestinationType
	isSet bool
}

func (v NullableDirectConnectRoutingRuleDestinationType) Get() *DirectConnectRoutingRuleDestinationType {
	return v.value
}

func (v *NullableDirectConnectRoutingRuleDestinationType) Set(val *DirectConnectRoutingRuleDestinationType) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectConnectRoutingRuleDestinationType) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectConnectRoutingRuleDestinationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectConnectRoutingRuleDestinationType(val *DirectConnectRoutingRuleDestinationType) *NullableDirectConnectRoutingRuleDestinationType {
	return &NullableDirectConnectRoutingRuleDestinationType{value: val, isSet: true}
}

func (v NullableDirectConnectRoutingRuleDestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectConnectRoutingRuleDestinationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
