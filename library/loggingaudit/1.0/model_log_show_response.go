/*
OSSCP Logging Audit Service

OSSCP Logging Audit Service

API version: 1.2.2.dev64
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loggingaudit

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogShowResponse{}

// LogShowResponse struct for LogShowResponse
type LogShowResponse struct {
	Log LogDetails `json:"log"`
}

type _LogShowResponse LogShowResponse

// NewLogShowResponse instantiates a new LogShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogShowResponse(log LogDetails) *LogShowResponse {
	this := LogShowResponse{}
	this.Log = log
	return &this
}

// NewLogShowResponseWithDefaults instantiates a new LogShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogShowResponseWithDefaults() *LogShowResponse {
	this := LogShowResponse{}
	return &this
}

// GetLog returns the Log field value
func (o *LogShowResponse) GetLog() LogDetails {
	if o == nil {
		var ret LogDetails
		return ret
	}

	return o.Log
}

// GetLogOk returns a tuple with the Log field value
// and a boolean to check if the value has been set.
func (o *LogShowResponse) GetLogOk() (*LogDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Log, true
}

// SetLog sets field value
func (o *LogShowResponse) SetLog(v LogDetails) {
	o.Log = v
}

func (o LogShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["log"] = o.Log
	return toSerialize, nil
}

func (o *LogShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"log",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogShowResponse := _LogShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogShowResponse)

	if err != nil {
		return err
	}

	*o = LogShowResponse(varLogShowResponse)

	return err
}

type NullableLogShowResponse struct {
	value *LogShowResponse
	isSet bool
}

func (v NullableLogShowResponse) Get() *LogShowResponse {
	return v.value
}

func (v *NullableLogShowResponse) Set(val *LogShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogShowResponse(val *LogShowResponse) *NullableLogShowResponse {
	return &NullableLogShowResponse{value: val, isSet: true}
}

func (v NullableLogShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


