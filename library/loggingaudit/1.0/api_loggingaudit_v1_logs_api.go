/*
OSSCP Logging Audit Service

OSSCP Logging Audit Service

API version: 1.2.2.dev64
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loggingaudit

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LoggingauditV1LogsApiAPIService LoggingauditV1LogsApiAPI service
type LoggingauditV1LogsApiAPIService service

type LoggingauditV1LogsApiAPIDownloadLogsRequest struct {
	ctx                context.Context
	ApiService         *LoggingauditV1LogsApiAPIService
	logDownloadRequest *LogDownloadRequest
}

func (r LoggingauditV1LogsApiAPIDownloadLogsRequest) LogDownloadRequest(logDownloadRequest LogDownloadRequest) LoggingauditV1LogsApiAPIDownloadLogsRequest {
	r.logDownloadRequest = &logDownloadRequest
	return r
}

func (r LoggingauditV1LogsApiAPIDownloadLogsRequest) Execute() (*LogDownloadResponse, *http.Response, error) {
	return r.ApiService.DownloadLogsExecute(r)
}

/*
DownloadLogs DownloadLogs

download log file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoggingauditV1LogsApiAPIDownloadLogsRequest
*/
func (a *LoggingauditV1LogsApiAPIService) DownloadLogs(ctx context.Context) LoggingauditV1LogsApiAPIDownloadLogsRequest {
	return LoggingauditV1LogsApiAPIDownloadLogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LogDownloadResponse
func (a *LoggingauditV1LogsApiAPIService) DownloadLogsExecute(r LoggingauditV1LogsApiAPIDownloadLogsRequest) (*LogDownloadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LogDownloadResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/logs/download"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.logDownloadRequest == nil {
		return localVarReturnValue, nil, reportError("logDownloadRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loggingaudit 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.logDownloadRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoggingauditV1LogsApiAPIListLogsRequest struct {
	ctx            context.Context
	ApiService     *LoggingauditV1LogsApiAPIService
	startAt        *string
	endAt          *string
	size           *int32
	page           *int32
	sort           *string
	resourceId     *string
	resourceName   *string
	resourceType   *string
	productName    *string
	productType    *string
	status         *string
	eventType      *string
	userId         *string
	userName       *string
	region         *string
	rootResourceId *string
	serviceType    *string
}

// Query start date
func (r LoggingauditV1LogsApiAPIListLogsRequest) StartAt(startAt string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.startAt = &startAt
	return r
}

// Query finish date
func (r LoggingauditV1LogsApiAPIListLogsRequest) EndAt(endAt string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.endAt = &endAt
	return r
}

// size
func (r LoggingauditV1LogsApiAPIListLogsRequest) Size(size int32) LoggingauditV1LogsApiAPIListLogsRequest {
	r.size = &size
	return r
}

// page
func (r LoggingauditV1LogsApiAPIListLogsRequest) Page(page int32) LoggingauditV1LogsApiAPIListLogsRequest {
	r.page = &page
	return r
}

// sort
func (r LoggingauditV1LogsApiAPIListLogsRequest) Sort(sort string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.sort = &sort
	return r
}

// Resource ID
func (r LoggingauditV1LogsApiAPIListLogsRequest) ResourceId(resourceId string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.resourceId = &resourceId
	return r
}

// Resource name
func (r LoggingauditV1LogsApiAPIListLogsRequest) ResourceName(resourceName string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.resourceName = &resourceName
	return r
}

// Resource type
func (r LoggingauditV1LogsApiAPIListLogsRequest) ResourceType(resourceType string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.resourceType = &resourceType
	return r
}

// Product name
func (r LoggingauditV1LogsApiAPIListLogsRequest) ProductName(productName string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.productName = &productName
	return r
}

// Product type
func (r LoggingauditV1LogsApiAPIListLogsRequest) ProductType(productType string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.productType = &productType
	return r
}

// Task result
func (r LoggingauditV1LogsApiAPIListLogsRequest) Status(status string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.status = &status
	return r
}

// Event type
func (r LoggingauditV1LogsApiAPIListLogsRequest) EventType(eventType string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.eventType = &eventType
	return r
}

// User ID
func (r LoggingauditV1LogsApiAPIListLogsRequest) UserId(userId string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.userId = &userId
	return r
}

// Username
func (r LoggingauditV1LogsApiAPIListLogsRequest) UserName(userName string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.userName = &userName
	return r
}

// Region name
func (r LoggingauditV1LogsApiAPIListLogsRequest) Region(region string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.region = &region
	return r
}

// Root resource ID
func (r LoggingauditV1LogsApiAPIListLogsRequest) RootResourceId(rootResourceId string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.rootResourceId = &rootResourceId
	return r
}

// Service type
func (r LoggingauditV1LogsApiAPIListLogsRequest) ServiceType(serviceType string) LoggingauditV1LogsApiAPIListLogsRequest {
	r.serviceType = &serviceType
	return r
}

func (r LoggingauditV1LogsApiAPIListLogsRequest) Execute() (*LogListResponse, *http.Response, error) {
	return r.ApiService.ListLogsExecute(r)
}

/*
ListLogs ListLogs

get log list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoggingauditV1LogsApiAPIListLogsRequest
*/
func (a *LoggingauditV1LogsApiAPIService) ListLogs(ctx context.Context) LoggingauditV1LogsApiAPIListLogsRequest {
	return LoggingauditV1LogsApiAPIListLogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LogListResponse
func (a *LoggingauditV1LogsApiAPIService) ListLogsExecute(r LoggingauditV1LogsApiAPIListLogsRequest) (*LogListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LogListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/logs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startAt == nil {
		return localVarReturnValue, nil, reportError("startAt is required and must be specified")
	}
	if r.endAt == nil {
		return localVarReturnValue, nil, reportError("endAt is required and must be specified")
	}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "start_at", r.startAt, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_at", r.endAt, "form", "")
	if r.resourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "form", "")
	}
	if r.resourceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_name", r.resourceName, "form", "")
	}
	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	}
	if r.productName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_name", r.productName, "form", "")
	}
	if r.productType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_type", r.productType, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "event_type", r.eventType, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	if r.userName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_name", r.userName, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	if r.rootResourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "root_resource_id", r.rootResourceId, "form", "")
	}
	if r.serviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service_type", r.serviceType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loggingaudit 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoggingauditV1LogsApiAPIShowLogRequest struct {
	ctx        context.Context
	ApiService *LoggingauditV1LogsApiAPIService
	loggingId  string
}

func (r LoggingauditV1LogsApiAPIShowLogRequest) Execute() (*LogShowResponse, *http.Response, error) {
	return r.ApiService.ShowLogExecute(r)
}

/*
ShowLog ShowLog

show a specific log

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param loggingId Log ID
	@return LoggingauditV1LogsApiAPIShowLogRequest
*/
func (a *LoggingauditV1LogsApiAPIService) ShowLog(ctx context.Context, loggingId string) LoggingauditV1LogsApiAPIShowLogRequest {
	return LoggingauditV1LogsApiAPIShowLogRequest{
		ApiService: a,
		ctx:        ctx,
		loggingId:  loggingId,
	}
}

// Execute executes the request
//
//	@return LogShowResponse
func (a *LoggingauditV1LogsApiAPIService) ShowLogExecute(r LoggingauditV1LogsApiAPIShowLogRequest) (*LogShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LogShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/logs/{logging_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"logging_id"+"}", url.PathEscape(parameterValueToString(r.loggingId, "loggingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loggingaudit 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
