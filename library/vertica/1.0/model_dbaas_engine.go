/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vertica

import (
	"encoding/json"
	"fmt"
)

// DbaasEngine the model 'DbaasEngine'
type DbaasEngine string

// List of DbaasEngine
const (
	DBAASENGINE_POSTGRE_SQL              DbaasEngine = "PostgreSQL"
	DBAASENGINE_REDIS                    DbaasEngine = "Redis"
	DBAASENGINE_MARIA_DB                 DbaasEngine = "MariaDB"
	DBAASENGINE_MY_SQL                   DbaasEngine = "MySQL"
	DBAASENGINE_ELASTICSEARCH_ENTERPRISE DbaasEngine = "Elasticsearch Enterprise"
	DBAASENGINE_OPEN_SEARCH              DbaasEngine = "OpenSearch"
	DBAASENGINE_EPAS                     DbaasEngine = "EPAS"
	DBAASENGINE_MICROSOFT_SQL_SERVER     DbaasEngine = "Microsoft SQL Server"
	DBAASENGINE_KAFKA                    DbaasEngine = "Kafka"
	DBAASENGINE_VERTICA                  DbaasEngine = "Vertica"
)

// All allowed values of DbaasEngine enum
var AllowedDbaasEngineEnumValues = []DbaasEngine{
	"PostgreSQL",
	"Redis",
	"MariaDB",
	"MySQL",
	"Elasticsearch Enterprise",
	"OpenSearch",
	"EPAS",
	"Microsoft SQL Server",
	"Kafka",
	"Vertica",
}

func (v *DbaasEngine) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DbaasEngine(value)
	for _, existing := range AllowedDbaasEngineEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DbaasEngine", value)
}

// NewDbaasEngineFromValue returns a pointer to a valid DbaasEngine
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDbaasEngineFromValue(v string) (*DbaasEngine, error) {
	ev := DbaasEngine(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DbaasEngine: valid values are %v", v, AllowedDbaasEngineEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DbaasEngine) IsValid() bool {
	for _, existing := range AllowedDbaasEngineEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DbaasEngine value
func (v DbaasEngine) Ptr() *DbaasEngine {
	return &v
}

type NullableDbaasEngine struct {
	value *DbaasEngine
	isSet bool
}

func (v NullableDbaasEngine) Get() *DbaasEngine {
	return v.value
}

func (v *NullableDbaasEngine) Set(val *DbaasEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableDbaasEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableDbaasEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbaasEngine(val *DbaasEngine) *NullableDbaasEngine {
	return &NullableDbaasEngine{value: val, isSet: true}
}

func (v NullableDbaasEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbaasEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
