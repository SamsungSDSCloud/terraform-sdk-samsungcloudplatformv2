/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vertica

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VerticaInitConfigOptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerticaInitConfigOptionResponse{}

// VerticaInitConfigOptionResponse struct for VerticaInitConfigOptionResponse
type VerticaInitConfigOptionResponse struct {
	BackupOption   NullableBackupSettingExcludingArchiveRequest `json:"backup_option,omitempty"`
	DatabaseLocale NullableString                               `json:"database_locale,omitempty"`
	// Database Name
	DatabaseName string        `json:"database_name"`
	DatabasePort NullableInt32 `json:"database_port,omitempty"`
	// Database User Name
	DatabaseUserName string        `json:"database_user_name"`
	McPort           NullableInt32 `json:"mc_port,omitempty"`
}

type _VerticaInitConfigOptionResponse VerticaInitConfigOptionResponse

// NewVerticaInitConfigOptionResponse instantiates a new VerticaInitConfigOptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerticaInitConfigOptionResponse(databaseName string, databaseUserName string) *VerticaInitConfigOptionResponse {
	this := VerticaInitConfigOptionResponse{}
	this.DatabaseName = databaseName
	this.DatabaseUserName = databaseUserName
	return &this
}

// NewVerticaInitConfigOptionResponseWithDefaults instantiates a new VerticaInitConfigOptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerticaInitConfigOptionResponseWithDefaults() *VerticaInitConfigOptionResponse {
	this := VerticaInitConfigOptionResponse{}
	return &this
}

// GetBackupOption returns the BackupOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VerticaInitConfigOptionResponse) GetBackupOption() BackupSettingExcludingArchiveRequest {
	if o == nil || IsNil(o.BackupOption.Get()) {
		var ret BackupSettingExcludingArchiveRequest
		return ret
	}
	return *o.BackupOption.Get()
}

// GetBackupOptionOk returns a tuple with the BackupOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VerticaInitConfigOptionResponse) GetBackupOptionOk() (*BackupSettingExcludingArchiveRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupOption.Get(), o.BackupOption.IsSet()
}

// HasBackupOption returns a boolean if a field has been set.
func (o *VerticaInitConfigOptionResponse) HasBackupOption() bool {
	if o != nil && o.BackupOption.IsSet() {
		return true
	}

	return false
}

// SetBackupOption gets a reference to the given NullableBackupSettingExcludingArchiveRequest and assigns it to the BackupOption field.
func (o *VerticaInitConfigOptionResponse) SetBackupOption(v BackupSettingExcludingArchiveRequest) {
	o.BackupOption.Set(&v)
}

// SetBackupOptionNil sets the value for BackupOption to be an explicit nil
func (o *VerticaInitConfigOptionResponse) SetBackupOptionNil() {
	o.BackupOption.Set(nil)
}

// UnsetBackupOption ensures that no value is present for BackupOption, not even an explicit nil
func (o *VerticaInitConfigOptionResponse) UnsetBackupOption() {
	o.BackupOption.Unset()
}

// GetDatabaseLocale returns the DatabaseLocale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VerticaInitConfigOptionResponse) GetDatabaseLocale() string {
	if o == nil || IsNil(o.DatabaseLocale.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseLocale.Get()
}

// GetDatabaseLocaleOk returns a tuple with the DatabaseLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VerticaInitConfigOptionResponse) GetDatabaseLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseLocale.Get(), o.DatabaseLocale.IsSet()
}

// HasDatabaseLocale returns a boolean if a field has been set.
func (o *VerticaInitConfigOptionResponse) HasDatabaseLocale() bool {
	if o != nil && o.DatabaseLocale.IsSet() {
		return true
	}

	return false
}

// SetDatabaseLocale gets a reference to the given NullableString and assigns it to the DatabaseLocale field.
func (o *VerticaInitConfigOptionResponse) SetDatabaseLocale(v string) {
	o.DatabaseLocale.Set(&v)
}

// SetDatabaseLocaleNil sets the value for DatabaseLocale to be an explicit nil
func (o *VerticaInitConfigOptionResponse) SetDatabaseLocaleNil() {
	o.DatabaseLocale.Set(nil)
}

// UnsetDatabaseLocale ensures that no value is present for DatabaseLocale, not even an explicit nil
func (o *VerticaInitConfigOptionResponse) UnsetDatabaseLocale() {
	o.DatabaseLocale.Unset()
}

// GetDatabaseName returns the DatabaseName field value
func (o *VerticaInitConfigOptionResponse) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *VerticaInitConfigOptionResponse) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *VerticaInitConfigOptionResponse) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetDatabasePort returns the DatabasePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VerticaInitConfigOptionResponse) GetDatabasePort() int32 {
	if o == nil || IsNil(o.DatabasePort.Get()) {
		var ret int32
		return ret
	}
	return *o.DatabasePort.Get()
}

// GetDatabasePortOk returns a tuple with the DatabasePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VerticaInitConfigOptionResponse) GetDatabasePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabasePort.Get(), o.DatabasePort.IsSet()
}

// HasDatabasePort returns a boolean if a field has been set.
func (o *VerticaInitConfigOptionResponse) HasDatabasePort() bool {
	if o != nil && o.DatabasePort.IsSet() {
		return true
	}

	return false
}

// SetDatabasePort gets a reference to the given NullableInt32 and assigns it to the DatabasePort field.
func (o *VerticaInitConfigOptionResponse) SetDatabasePort(v int32) {
	o.DatabasePort.Set(&v)
}

// SetDatabasePortNil sets the value for DatabasePort to be an explicit nil
func (o *VerticaInitConfigOptionResponse) SetDatabasePortNil() {
	o.DatabasePort.Set(nil)
}

// UnsetDatabasePort ensures that no value is present for DatabasePort, not even an explicit nil
func (o *VerticaInitConfigOptionResponse) UnsetDatabasePort() {
	o.DatabasePort.Unset()
}

// GetDatabaseUserName returns the DatabaseUserName field value
func (o *VerticaInitConfigOptionResponse) GetDatabaseUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserName
}

// GetDatabaseUserNameOk returns a tuple with the DatabaseUserName field value
// and a boolean to check if the value has been set.
func (o *VerticaInitConfigOptionResponse) GetDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserName, true
}

// SetDatabaseUserName sets field value
func (o *VerticaInitConfigOptionResponse) SetDatabaseUserName(v string) {
	o.DatabaseUserName = v
}

// GetMcPort returns the McPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VerticaInitConfigOptionResponse) GetMcPort() int32 {
	if o == nil || IsNil(o.McPort.Get()) {
		var ret int32
		return ret
	}
	return *o.McPort.Get()
}

// GetMcPortOk returns a tuple with the McPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VerticaInitConfigOptionResponse) GetMcPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.McPort.Get(), o.McPort.IsSet()
}

// HasMcPort returns a boolean if a field has been set.
func (o *VerticaInitConfigOptionResponse) HasMcPort() bool {
	if o != nil && o.McPort.IsSet() {
		return true
	}

	return false
}

// SetMcPort gets a reference to the given NullableInt32 and assigns it to the McPort field.
func (o *VerticaInitConfigOptionResponse) SetMcPort(v int32) {
	o.McPort.Set(&v)
}

// SetMcPortNil sets the value for McPort to be an explicit nil
func (o *VerticaInitConfigOptionResponse) SetMcPortNil() {
	o.McPort.Set(nil)
}

// UnsetMcPort ensures that no value is present for McPort, not even an explicit nil
func (o *VerticaInitConfigOptionResponse) UnsetMcPort() {
	o.McPort.Unset()
}

func (o VerticaInitConfigOptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerticaInitConfigOptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupOption.IsSet() {
		toSerialize["backup_option"] = o.BackupOption.Get()
	}
	if o.DatabaseLocale.IsSet() {
		toSerialize["database_locale"] = o.DatabaseLocale.Get()
	}
	toSerialize["database_name"] = o.DatabaseName
	if o.DatabasePort.IsSet() {
		toSerialize["database_port"] = o.DatabasePort.Get()
	}
	toSerialize["database_user_name"] = o.DatabaseUserName
	if o.McPort.IsSet() {
		toSerialize["mc_port"] = o.McPort.Get()
	}
	return toSerialize, nil
}

func (o *VerticaInitConfigOptionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_name",
		"database_user_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerticaInitConfigOptionResponse := _VerticaInitConfigOptionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerticaInitConfigOptionResponse)

	if err != nil {
		return err
	}

	*o = VerticaInitConfigOptionResponse(varVerticaInitConfigOptionResponse)

	return err
}

type NullableVerticaInitConfigOptionResponse struct {
	value *VerticaInitConfigOptionResponse
	isSet bool
}

func (v NullableVerticaInitConfigOptionResponse) Get() *VerticaInitConfigOptionResponse {
	return v.value
}

func (v *NullableVerticaInitConfigOptionResponse) Set(val *VerticaInitConfigOptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVerticaInitConfigOptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVerticaInitConfigOptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerticaInitConfigOptionResponse(val *VerticaInitConfigOptionResponse) *NullableVerticaInitConfigOptionResponse {
	return &NullableVerticaInitConfigOptionResponse{value: val, isSet: true}
}

func (v NullableVerticaInitConfigOptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerticaInitConfigOptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
