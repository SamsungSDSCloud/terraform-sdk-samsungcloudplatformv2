/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vertica

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VerticaInitConfigOptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerticaInitConfigOptionRequest{}

// VerticaInitConfigOptionRequest struct for VerticaInitConfigOptionRequest
type VerticaInitConfigOptionRequest struct {
	BackupOption   NullableBackupSettingExcludingArchiveRequest `json:"backup_option,omitempty"`
	DatabaseLocale NullableString                               `json:"database_locale,omitempty"`
	// Database Name
	DatabaseName string `json:"database_name" validate:"regexp=^[a-zA-Z][a-zA-Z0-9]*$"`
	// Database User Name
	DatabaseUserName string `json:"database_user_name" validate:"regexp=^[a-z]*$"`
	// Database user password
	DatabaseUserPassword string `json:"database_user_password"`
}

type _VerticaInitConfigOptionRequest VerticaInitConfigOptionRequest

// NewVerticaInitConfigOptionRequest instantiates a new VerticaInitConfigOptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerticaInitConfigOptionRequest(databaseName string, databaseUserName string, databaseUserPassword string) *VerticaInitConfigOptionRequest {
	this := VerticaInitConfigOptionRequest{}
	this.DatabaseName = databaseName
	this.DatabaseUserName = databaseUserName
	this.DatabaseUserPassword = databaseUserPassword
	return &this
}

// NewVerticaInitConfigOptionRequestWithDefaults instantiates a new VerticaInitConfigOptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerticaInitConfigOptionRequestWithDefaults() *VerticaInitConfigOptionRequest {
	this := VerticaInitConfigOptionRequest{}
	return &this
}

// GetBackupOption returns the BackupOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VerticaInitConfigOptionRequest) GetBackupOption() BackupSettingExcludingArchiveRequest {
	if o == nil || IsNil(o.BackupOption.Get()) {
		var ret BackupSettingExcludingArchiveRequest
		return ret
	}
	return *o.BackupOption.Get()
}

// GetBackupOptionOk returns a tuple with the BackupOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VerticaInitConfigOptionRequest) GetBackupOptionOk() (*BackupSettingExcludingArchiveRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupOption.Get(), o.BackupOption.IsSet()
}

// HasBackupOption returns a boolean if a field has been set.
func (o *VerticaInitConfigOptionRequest) HasBackupOption() bool {
	if o != nil && o.BackupOption.IsSet() {
		return true
	}

	return false
}

// SetBackupOption gets a reference to the given NullableBackupSettingExcludingArchiveRequest and assigns it to the BackupOption field.
func (o *VerticaInitConfigOptionRequest) SetBackupOption(v BackupSettingExcludingArchiveRequest) {
	o.BackupOption.Set(&v)
}

// SetBackupOptionNil sets the value for BackupOption to be an explicit nil
func (o *VerticaInitConfigOptionRequest) SetBackupOptionNil() {
	o.BackupOption.Set(nil)
}

// UnsetBackupOption ensures that no value is present for BackupOption, not even an explicit nil
func (o *VerticaInitConfigOptionRequest) UnsetBackupOption() {
	o.BackupOption.Unset()
}

// GetDatabaseLocale returns the DatabaseLocale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VerticaInitConfigOptionRequest) GetDatabaseLocale() string {
	if o == nil || IsNil(o.DatabaseLocale.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseLocale.Get()
}

// GetDatabaseLocaleOk returns a tuple with the DatabaseLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VerticaInitConfigOptionRequest) GetDatabaseLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseLocale.Get(), o.DatabaseLocale.IsSet()
}

// HasDatabaseLocale returns a boolean if a field has been set.
func (o *VerticaInitConfigOptionRequest) HasDatabaseLocale() bool {
	if o != nil && o.DatabaseLocale.IsSet() {
		return true
	}

	return false
}

// SetDatabaseLocale gets a reference to the given NullableString and assigns it to the DatabaseLocale field.
func (o *VerticaInitConfigOptionRequest) SetDatabaseLocale(v string) {
	o.DatabaseLocale.Set(&v)
}

// SetDatabaseLocaleNil sets the value for DatabaseLocale to be an explicit nil
func (o *VerticaInitConfigOptionRequest) SetDatabaseLocaleNil() {
	o.DatabaseLocale.Set(nil)
}

// UnsetDatabaseLocale ensures that no value is present for DatabaseLocale, not even an explicit nil
func (o *VerticaInitConfigOptionRequest) UnsetDatabaseLocale() {
	o.DatabaseLocale.Unset()
}

// GetDatabaseName returns the DatabaseName field value
func (o *VerticaInitConfigOptionRequest) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *VerticaInitConfigOptionRequest) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *VerticaInitConfigOptionRequest) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetDatabaseUserName returns the DatabaseUserName field value
func (o *VerticaInitConfigOptionRequest) GetDatabaseUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserName
}

// GetDatabaseUserNameOk returns a tuple with the DatabaseUserName field value
// and a boolean to check if the value has been set.
func (o *VerticaInitConfigOptionRequest) GetDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserName, true
}

// SetDatabaseUserName sets field value
func (o *VerticaInitConfigOptionRequest) SetDatabaseUserName(v string) {
	o.DatabaseUserName = v
}

// GetDatabaseUserPassword returns the DatabaseUserPassword field value
func (o *VerticaInitConfigOptionRequest) GetDatabaseUserPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserPassword
}

// GetDatabaseUserPasswordOk returns a tuple with the DatabaseUserPassword field value
// and a boolean to check if the value has been set.
func (o *VerticaInitConfigOptionRequest) GetDatabaseUserPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserPassword, true
}

// SetDatabaseUserPassword sets field value
func (o *VerticaInitConfigOptionRequest) SetDatabaseUserPassword(v string) {
	o.DatabaseUserPassword = v
}

func (o VerticaInitConfigOptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerticaInitConfigOptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupOption.IsSet() {
		toSerialize["backup_option"] = o.BackupOption.Get()
	}
	if o.DatabaseLocale.IsSet() {
		toSerialize["database_locale"] = o.DatabaseLocale.Get()
	}
	toSerialize["database_name"] = o.DatabaseName
	toSerialize["database_user_name"] = o.DatabaseUserName
	toSerialize["database_user_password"] = o.DatabaseUserPassword
	return toSerialize, nil
}

func (o *VerticaInitConfigOptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_name",
		"database_user_name",
		"database_user_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVerticaInitConfigOptionRequest := _VerticaInitConfigOptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVerticaInitConfigOptionRequest)

	if err != nil {
		return err
	}

	*o = VerticaInitConfigOptionRequest(varVerticaInitConfigOptionRequest)

	return err
}

type NullableVerticaInitConfigOptionRequest struct {
	value *VerticaInitConfigOptionRequest
	isSet bool
}

func (v NullableVerticaInitConfigOptionRequest) Get() *VerticaInitConfigOptionRequest {
	return v.value
}

func (v *NullableVerticaInitConfigOptionRequest) Set(val *VerticaInitConfigOptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVerticaInitConfigOptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVerticaInitConfigOptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerticaInitConfigOptionRequest(val *VerticaInitConfigOptionRequest) *NullableVerticaInitConfigOptionRequest {
	return &NullableVerticaInitConfigOptionRequest{value: val, isSet: true}
}

func (v NullableVerticaInitConfigOptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerticaInitConfigOptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
