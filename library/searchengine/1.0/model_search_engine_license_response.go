/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2192
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package searchengine

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchEngineLicenseResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchEngineLicenseResponse{}

// SearchEngineLicenseResponse struct for SearchEngineLicenseResponse
type SearchEngineLicenseResponse struct {
	// License expiry date
	LicenseExpiryDate string `json:"license_expiry_date"`
	// License state
	LicenseStatus string `json:"license_status"`
	// License type
	LicenseType string `json:"license_type"`
}

type _SearchEngineLicenseResponse SearchEngineLicenseResponse

// NewSearchEngineLicenseResponse instantiates a new SearchEngineLicenseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchEngineLicenseResponse(licenseExpiryDate string, licenseStatus string, licenseType string) *SearchEngineLicenseResponse {
	this := SearchEngineLicenseResponse{}
	this.LicenseExpiryDate = licenseExpiryDate
	this.LicenseStatus = licenseStatus
	this.LicenseType = licenseType
	return &this
}

// NewSearchEngineLicenseResponseWithDefaults instantiates a new SearchEngineLicenseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchEngineLicenseResponseWithDefaults() *SearchEngineLicenseResponse {
	this := SearchEngineLicenseResponse{}
	return &this
}

// GetLicenseExpiryDate returns the LicenseExpiryDate field value
func (o *SearchEngineLicenseResponse) GetLicenseExpiryDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseExpiryDate
}

// GetLicenseExpiryDateOk returns a tuple with the LicenseExpiryDate field value
// and a boolean to check if the value has been set.
func (o *SearchEngineLicenseResponse) GetLicenseExpiryDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseExpiryDate, true
}

// SetLicenseExpiryDate sets field value
func (o *SearchEngineLicenseResponse) SetLicenseExpiryDate(v string) {
	o.LicenseExpiryDate = v
}

// GetLicenseStatus returns the LicenseStatus field value
func (o *SearchEngineLicenseResponse) GetLicenseStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseStatus
}

// GetLicenseStatusOk returns a tuple with the LicenseStatus field value
// and a boolean to check if the value has been set.
func (o *SearchEngineLicenseResponse) GetLicenseStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseStatus, true
}

// SetLicenseStatus sets field value
func (o *SearchEngineLicenseResponse) SetLicenseStatus(v string) {
	o.LicenseStatus = v
}

// GetLicenseType returns the LicenseType field value
func (o *SearchEngineLicenseResponse) GetLicenseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value
// and a boolean to check if the value has been set.
func (o *SearchEngineLicenseResponse) GetLicenseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseType, true
}

// SetLicenseType sets field value
func (o *SearchEngineLicenseResponse) SetLicenseType(v string) {
	o.LicenseType = v
}

func (o SearchEngineLicenseResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchEngineLicenseResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["license_expiry_date"] = o.LicenseExpiryDate
	toSerialize["license_status"] = o.LicenseStatus
	toSerialize["license_type"] = o.LicenseType
	return toSerialize, nil
}

func (o *SearchEngineLicenseResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"license_expiry_date",
		"license_status",
		"license_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchEngineLicenseResponse := _SearchEngineLicenseResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchEngineLicenseResponse)

	if err != nil {
		return err
	}

	*o = SearchEngineLicenseResponse(varSearchEngineLicenseResponse)

	return err
}

type NullableSearchEngineLicenseResponse struct {
	value *SearchEngineLicenseResponse
	isSet bool
}

func (v NullableSearchEngineLicenseResponse) Get() *SearchEngineLicenseResponse {
	return v.value
}

func (v *NullableSearchEngineLicenseResponse) Set(val *SearchEngineLicenseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchEngineLicenseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchEngineLicenseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchEngineLicenseResponse(val *SearchEngineLicenseResponse) *NullableSearchEngineLicenseResponse {
	return &NullableSearchEngineLicenseResponse{value: val, isSet: true}
}

func (v NullableSearchEngineLicenseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchEngineLicenseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
