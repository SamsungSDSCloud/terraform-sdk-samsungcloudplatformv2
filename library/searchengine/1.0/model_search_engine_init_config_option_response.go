/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2192
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package searchengine

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchEngineInitConfigOptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchEngineInitConfigOptionResponse{}

// SearchEngineInitConfigOptionResponse struct for SearchEngineInitConfigOptionResponse
type SearchEngineInitConfigOptionResponse struct {
	BackupOption   NullableBackupSettingExcludingArchiveRequest `json:"backup_option,omitempty"`
	DashboardsPort NullableInt32                                `json:"dashboards_port,omitempty"`
	DatabasePort   NullableInt32                                `json:"database_port,omitempty"`
	// Database User Name
	DatabaseUserName string        `json:"database_user_name"`
	KibanaPort       NullableInt32 `json:"kibana_port,omitempty"`
}

type _SearchEngineInitConfigOptionResponse SearchEngineInitConfigOptionResponse

// NewSearchEngineInitConfigOptionResponse instantiates a new SearchEngineInitConfigOptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchEngineInitConfigOptionResponse(databaseUserName string) *SearchEngineInitConfigOptionResponse {
	this := SearchEngineInitConfigOptionResponse{}
	this.DatabaseUserName = databaseUserName
	return &this
}

// NewSearchEngineInitConfigOptionResponseWithDefaults instantiates a new SearchEngineInitConfigOptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchEngineInitConfigOptionResponseWithDefaults() *SearchEngineInitConfigOptionResponse {
	this := SearchEngineInitConfigOptionResponse{}
	return &this
}

// GetBackupOption returns the BackupOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchEngineInitConfigOptionResponse) GetBackupOption() BackupSettingExcludingArchiveRequest {
	if o == nil || IsNil(o.BackupOption.Get()) {
		var ret BackupSettingExcludingArchiveRequest
		return ret
	}
	return *o.BackupOption.Get()
}

// GetBackupOptionOk returns a tuple with the BackupOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchEngineInitConfigOptionResponse) GetBackupOptionOk() (*BackupSettingExcludingArchiveRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupOption.Get(), o.BackupOption.IsSet()
}

// HasBackupOption returns a boolean if a field has been set.
func (o *SearchEngineInitConfigOptionResponse) HasBackupOption() bool {
	if o != nil && o.BackupOption.IsSet() {
		return true
	}

	return false
}

// SetBackupOption gets a reference to the given NullableBackupSettingExcludingArchiveRequest and assigns it to the BackupOption field.
func (o *SearchEngineInitConfigOptionResponse) SetBackupOption(v BackupSettingExcludingArchiveRequest) {
	o.BackupOption.Set(&v)
}

// SetBackupOptionNil sets the value for BackupOption to be an explicit nil
func (o *SearchEngineInitConfigOptionResponse) SetBackupOptionNil() {
	o.BackupOption.Set(nil)
}

// UnsetBackupOption ensures that no value is present for BackupOption, not even an explicit nil
func (o *SearchEngineInitConfigOptionResponse) UnsetBackupOption() {
	o.BackupOption.Unset()
}

// GetDashboardsPort returns the DashboardsPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchEngineInitConfigOptionResponse) GetDashboardsPort() int32 {
	if o == nil || IsNil(o.DashboardsPort.Get()) {
		var ret int32
		return ret
	}
	return *o.DashboardsPort.Get()
}

// GetDashboardsPortOk returns a tuple with the DashboardsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchEngineInitConfigOptionResponse) GetDashboardsPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DashboardsPort.Get(), o.DashboardsPort.IsSet()
}

// HasDashboardsPort returns a boolean if a field has been set.
func (o *SearchEngineInitConfigOptionResponse) HasDashboardsPort() bool {
	if o != nil && o.DashboardsPort.IsSet() {
		return true
	}

	return false
}

// SetDashboardsPort gets a reference to the given NullableInt32 and assigns it to the DashboardsPort field.
func (o *SearchEngineInitConfigOptionResponse) SetDashboardsPort(v int32) {
	o.DashboardsPort.Set(&v)
}

// SetDashboardsPortNil sets the value for DashboardsPort to be an explicit nil
func (o *SearchEngineInitConfigOptionResponse) SetDashboardsPortNil() {
	o.DashboardsPort.Set(nil)
}

// UnsetDashboardsPort ensures that no value is present for DashboardsPort, not even an explicit nil
func (o *SearchEngineInitConfigOptionResponse) UnsetDashboardsPort() {
	o.DashboardsPort.Unset()
}

// GetDatabasePort returns the DatabasePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchEngineInitConfigOptionResponse) GetDatabasePort() int32 {
	if o == nil || IsNil(o.DatabasePort.Get()) {
		var ret int32
		return ret
	}
	return *o.DatabasePort.Get()
}

// GetDatabasePortOk returns a tuple with the DatabasePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchEngineInitConfigOptionResponse) GetDatabasePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabasePort.Get(), o.DatabasePort.IsSet()
}

// HasDatabasePort returns a boolean if a field has been set.
func (o *SearchEngineInitConfigOptionResponse) HasDatabasePort() bool {
	if o != nil && o.DatabasePort.IsSet() {
		return true
	}

	return false
}

// SetDatabasePort gets a reference to the given NullableInt32 and assigns it to the DatabasePort field.
func (o *SearchEngineInitConfigOptionResponse) SetDatabasePort(v int32) {
	o.DatabasePort.Set(&v)
}

// SetDatabasePortNil sets the value for DatabasePort to be an explicit nil
func (o *SearchEngineInitConfigOptionResponse) SetDatabasePortNil() {
	o.DatabasePort.Set(nil)
}

// UnsetDatabasePort ensures that no value is present for DatabasePort, not even an explicit nil
func (o *SearchEngineInitConfigOptionResponse) UnsetDatabasePort() {
	o.DatabasePort.Unset()
}

// GetDatabaseUserName returns the DatabaseUserName field value
func (o *SearchEngineInitConfigOptionResponse) GetDatabaseUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserName
}

// GetDatabaseUserNameOk returns a tuple with the DatabaseUserName field value
// and a boolean to check if the value has been set.
func (o *SearchEngineInitConfigOptionResponse) GetDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserName, true
}

// SetDatabaseUserName sets field value
func (o *SearchEngineInitConfigOptionResponse) SetDatabaseUserName(v string) {
	o.DatabaseUserName = v
}

// GetKibanaPort returns the KibanaPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchEngineInitConfigOptionResponse) GetKibanaPort() int32 {
	if o == nil || IsNil(o.KibanaPort.Get()) {
		var ret int32
		return ret
	}
	return *o.KibanaPort.Get()
}

// GetKibanaPortOk returns a tuple with the KibanaPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchEngineInitConfigOptionResponse) GetKibanaPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KibanaPort.Get(), o.KibanaPort.IsSet()
}

// HasKibanaPort returns a boolean if a field has been set.
func (o *SearchEngineInitConfigOptionResponse) HasKibanaPort() bool {
	if o != nil && o.KibanaPort.IsSet() {
		return true
	}

	return false
}

// SetKibanaPort gets a reference to the given NullableInt32 and assigns it to the KibanaPort field.
func (o *SearchEngineInitConfigOptionResponse) SetKibanaPort(v int32) {
	o.KibanaPort.Set(&v)
}

// SetKibanaPortNil sets the value for KibanaPort to be an explicit nil
func (o *SearchEngineInitConfigOptionResponse) SetKibanaPortNil() {
	o.KibanaPort.Set(nil)
}

// UnsetKibanaPort ensures that no value is present for KibanaPort, not even an explicit nil
func (o *SearchEngineInitConfigOptionResponse) UnsetKibanaPort() {
	o.KibanaPort.Unset()
}

func (o SearchEngineInitConfigOptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchEngineInitConfigOptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupOption.IsSet() {
		toSerialize["backup_option"] = o.BackupOption.Get()
	}
	if o.DashboardsPort.IsSet() {
		toSerialize["dashboards_port"] = o.DashboardsPort.Get()
	}
	if o.DatabasePort.IsSet() {
		toSerialize["database_port"] = o.DatabasePort.Get()
	}
	toSerialize["database_user_name"] = o.DatabaseUserName
	if o.KibanaPort.IsSet() {
		toSerialize["kibana_port"] = o.KibanaPort.Get()
	}
	return toSerialize, nil
}

func (o *SearchEngineInitConfigOptionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_user_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchEngineInitConfigOptionResponse := _SearchEngineInitConfigOptionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchEngineInitConfigOptionResponse)

	if err != nil {
		return err
	}

	*o = SearchEngineInitConfigOptionResponse(varSearchEngineInitConfigOptionResponse)

	return err
}

type NullableSearchEngineInitConfigOptionResponse struct {
	value *SearchEngineInitConfigOptionResponse
	isSet bool
}

func (v NullableSearchEngineInitConfigOptionResponse) Get() *SearchEngineInitConfigOptionResponse {
	return v.value
}

func (v *NullableSearchEngineInitConfigOptionResponse) Set(val *SearchEngineInitConfigOptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchEngineInitConfigOptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchEngineInitConfigOptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchEngineInitConfigOptionResponse(val *SearchEngineInitConfigOptionResponse) *NullableSearchEngineInitConfigOptionResponse {
	return &NullableSearchEngineInitConfigOptionResponse{value: val, isSet: true}
}

func (v NullableSearchEngineInitConfigOptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchEngineInitConfigOptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
