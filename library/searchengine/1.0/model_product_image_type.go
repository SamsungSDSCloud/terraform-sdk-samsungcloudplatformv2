/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2192
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package searchengine

import (
	"encoding/json"
	"fmt"
)

// ProductImageType the model 'ProductImageType'
type ProductImageType string

// List of ProductImageType
const (
	PRODUCTIMAGETYPE_POSTGRE_SQL_COMMUNITY           ProductImageType = "PostgreSQL Community"
	PRODUCTIMAGETYPE_MARIA_DB_COMMUNITY              ProductImageType = "MariaDB Community"
	PRODUCTIMAGETYPE_MY_SQL_COMMUNITY                ProductImageType = "MySQL Community"
	PRODUCTIMAGETYPE_EPAS                            ProductImageType = "EPAS"
	PRODUCTIMAGETYPE_MICROSOFT_SQL_SERVER_ENTERPRISE ProductImageType = "Microsoft SQL Server Enterprise"
	PRODUCTIMAGETYPE_MICROSOFT_SQL_SERVER_STANDARD   ProductImageType = "Microsoft SQL Server Standard"
	PRODUCTIMAGETYPE_REDIS_OSS_SENTINEL              ProductImageType = "Redis OSS Sentinel"
	PRODUCTIMAGETYPE_VALKEY_SENTINEL                 ProductImageType = "Valkey Sentinel"
	PRODUCTIMAGETYPE_KAFKA                           ProductImageType = "Kafka"
	PRODUCTIMAGETYPE_ELASTICSEARCH_ENTERPRISE        ProductImageType = "Elasticsearch Enterprise"
	PRODUCTIMAGETYPE_OPEN_SEARCH                     ProductImageType = "OpenSearch"
	PRODUCTIMAGETYPE_VERTICA_ENTERPRISE              ProductImageType = "Vertica Enterprise"
	PRODUCTIMAGETYPE_VERTICA_COMMUNITY               ProductImageType = "Vertica Community"
)

// All allowed values of ProductImageType enum
var AllowedProductImageTypeEnumValues = []ProductImageType{
	"PostgreSQL Community",
	"MariaDB Community",
	"MySQL Community",
	"EPAS",
	"Microsoft SQL Server Enterprise",
	"Microsoft SQL Server Standard",
	"Redis OSS Sentinel",
	"Valkey Sentinel",
	"Kafka",
	"Elasticsearch Enterprise",
	"OpenSearch",
	"Vertica Enterprise",
	"Vertica Community",
}

func (v *ProductImageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductImageType(value)
	for _, existing := range AllowedProductImageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductImageType", value)
}

// NewProductImageTypeFromValue returns a pointer to a valid ProductImageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductImageTypeFromValue(v string) (*ProductImageType, error) {
	ev := ProductImageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductImageType: valid values are %v", v, AllowedProductImageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductImageType) IsValid() bool {
	for _, existing := range AllowedProductImageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProductImageType value
func (v ProductImageType) Ptr() *ProductImageType {
	return &v
}

type NullableProductImageType struct {
	value *ProductImageType
	isSet bool
}

func (v NullableProductImageType) Get() *ProductImageType {
	return v.value
}

func (v *NullableProductImageType) Set(val *ProductImageType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductImageType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductImageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductImageType(val *ProductImageType) *NullableProductImageType {
	return &NullableProductImageType{value: val, isSet: true}
}

func (v NullableProductImageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductImageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
