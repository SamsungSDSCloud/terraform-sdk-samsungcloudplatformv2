/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2192
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package searchengine

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SearchengineV1SearchEngineMasterDataApiAPIService SearchengineV1SearchEngineMasterDataApiAPI service
type SearchengineV1SearchEngineMasterDataApiAPIService service

type SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionPropertiesRequest struct {
	ctx                  context.Context
	ApiService           *SearchengineV1SearchEngineMasterDataApiAPIService
	dbaasEngineVersionId string
}

func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionPropertiesRequest) Execute() (*EnginePropertyListResponse, *http.Response, error) {
	return r.ApiService.SearchengineListEngineVersionPropertiesExecute(r)
}

/*
SearchengineListEngineVersionProperties List Engine Version Properties

List Engine Version Properties.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param dbaasEngineVersionId DBaaS engine version ID
	@return SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionPropertiesRequest
*/
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineListEngineVersionProperties(ctx context.Context, dbaasEngineVersionId string) SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionPropertiesRequest {
	return SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionPropertiesRequest{
		ApiService:           a,
		ctx:                  ctx,
		dbaasEngineVersionId: dbaasEngineVersionId,
	}
}

// Execute executes the request
//
//	@return EnginePropertyListResponse
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineListEngineVersionPropertiesExecute(r SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionPropertiesRequest) (*EnginePropertyListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnginePropertyListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/engine-versions/{dbaas_engine_version_id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"dbaas_engine_version_id"+"}", url.PathEscape(parameterValueToString(r.dbaasEngineVersionId, "dbaasEngineVersionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "searchengine 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest struct {
	ctx              context.Context
	ApiService       *SearchengineV1SearchEngineMasterDataApiAPIService
	id               *string
	productImageType *ProductImageType
	eosIncluded      *bool
}

// DBaaS engine version ID
func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest) Id(id string) SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest {
	r.id = &id
	return r
}

// Product image type
func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest) ProductImageType(productImageType ProductImageType) SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest {
	r.productImageType = &productImageType
	return r
}

// EoS included
func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest) EosIncluded(eosIncluded bool) SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest {
	r.eosIncluded = &eosIncluded
	return r
}

func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest) Execute() (*EngineListResponse, *http.Response, error) {
	return r.ApiService.SearchengineListEngineVersionsExecute(r)
}

/*
SearchengineListEngineVersions List Engine Versions

List Engine Versions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest
*/
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineListEngineVersions(ctx context.Context) SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest {
	return SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EngineListResponse
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineListEngineVersionsExecute(r SearchengineV1SearchEngineMasterDataApiAPISearchengineListEngineVersionsRequest) (*EngineListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EngineListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/engine-versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
	}
	if r.eosIncluded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eos_included", r.eosIncluded, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "searchengine 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest struct {
	ctx              context.Context
	ApiService       *SearchengineV1SearchEngineMasterDataApiAPIService
	name             *string
	productImageType *string
}

// Server type name
func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest) Name(name string) SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest {
	r.name = &name
	return r
}

// Product image type
func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest) ProductImageType(productImageType string) SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest {
	r.productImageType = &productImageType
	return r
}

func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest) Execute() (*ServerTypeListResponse, *http.Response, error) {
	return r.ApiService.SearchengineListServerTypesExecute(r)
}

/*
SearchengineListServerTypes List Server Types

List Server Types.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest
*/
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineListServerTypes(ctx context.Context) SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest {
	return SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServerTypeListResponse
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineListServerTypesExecute(r SearchengineV1SearchEngineMasterDataApiAPISearchengineListServerTypesRequest) (*ServerTypeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServerTypeListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/server-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "searchengine 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SearchengineV1SearchEngineMasterDataApiAPISearchengineShowRequestRequest struct {
	ctx        context.Context
	ApiService *SearchengineV1SearchEngineMasterDataApiAPIService
	requestId  string
}

func (r SearchengineV1SearchEngineMasterDataApiAPISearchengineShowRequestRequest) Execute() (*RequestStateResponse, *http.Response, error) {
	return r.ApiService.SearchengineShowRequestExecute(r)
}

/*
SearchengineShowRequest Show Request

Show Request.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param requestId Request ID
	@return SearchengineV1SearchEngineMasterDataApiAPISearchengineShowRequestRequest
*/
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineShowRequest(ctx context.Context, requestId string) SearchengineV1SearchEngineMasterDataApiAPISearchengineShowRequestRequest {
	return SearchengineV1SearchEngineMasterDataApiAPISearchengineShowRequestRequest{
		ApiService: a,
		ctx:        ctx,
		requestId:  requestId,
	}
}

// Execute executes the request
//
//	@return RequestStateResponse
func (a *SearchengineV1SearchEngineMasterDataApiAPIService) SearchengineShowRequestExecute(r SearchengineV1SearchEngineMasterDataApiAPISearchengineShowRequestRequest) (*RequestStateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RequestStateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/requests/{request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"request_id"+"}", url.PathEscape(parameterValueToString(r.requestId, "requestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "searchengine 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
