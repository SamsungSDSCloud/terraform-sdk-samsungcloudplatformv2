/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2192
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package searchengine

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Engine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Engine{}

// Engine struct for Engine
type Engine struct {
	// End of Service
	EndOfService *bool `json:"end_of_service,omitempty"`
	// ID
	Id string `json:"id"`
	// Software major version
	MajorVersion string `json:"major_version"`
	// DBaaS engine version name
	Name string `json:"name"`
	// OS type
	OsType string `json:"os_type"`
	// OS version
	OsVersion        string         `json:"os_version"`
	ProductImageType NullableString `json:"product_image_type,omitempty"`
	// Software version
	SoftwareVersion string `json:"software_version"`
}

type _Engine Engine

// NewEngine instantiates a new Engine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngine(id string, majorVersion string, name string, osType string, osVersion string, softwareVersion string) *Engine {
	this := Engine{}
	var endOfService bool = false
	this.EndOfService = &endOfService
	this.Id = id
	this.MajorVersion = majorVersion
	this.Name = name
	this.OsType = osType
	this.OsVersion = osVersion
	this.SoftwareVersion = softwareVersion
	return &this
}

// NewEngineWithDefaults instantiates a new Engine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngineWithDefaults() *Engine {
	this := Engine{}
	var endOfService bool = false
	this.EndOfService = &endOfService
	return &this
}

// GetEndOfService returns the EndOfService field value if set, zero value otherwise.
func (o *Engine) GetEndOfService() bool {
	if o == nil || IsNil(o.EndOfService) {
		var ret bool
		return ret
	}
	return *o.EndOfService
}

// GetEndOfServiceOk returns a tuple with the EndOfService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engine) GetEndOfServiceOk() (*bool, bool) {
	if o == nil || IsNil(o.EndOfService) {
		return nil, false
	}
	return o.EndOfService, true
}

// HasEndOfService returns a boolean if a field has been set.
func (o *Engine) HasEndOfService() bool {
	if o != nil && !IsNil(o.EndOfService) {
		return true
	}

	return false
}

// SetEndOfService gets a reference to the given bool and assigns it to the EndOfService field.
func (o *Engine) SetEndOfService(v bool) {
	o.EndOfService = &v
}

// GetId returns the Id field value
func (o *Engine) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Engine) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Engine) SetId(v string) {
	o.Id = v
}

// GetMajorVersion returns the MajorVersion field value
func (o *Engine) GetMajorVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MajorVersion
}

// GetMajorVersionOk returns a tuple with the MajorVersion field value
// and a boolean to check if the value has been set.
func (o *Engine) GetMajorVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MajorVersion, true
}

// SetMajorVersion sets field value
func (o *Engine) SetMajorVersion(v string) {
	o.MajorVersion = v
}

// GetName returns the Name field value
func (o *Engine) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Engine) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Engine) SetName(v string) {
	o.Name = v
}

// GetOsType returns the OsType field value
func (o *Engine) GetOsType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value
// and a boolean to check if the value has been set.
func (o *Engine) GetOsTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsType, true
}

// SetOsType sets field value
func (o *Engine) SetOsType(v string) {
	o.OsType = v
}

// GetOsVersion returns the OsVersion field value
func (o *Engine) GetOsVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value
// and a boolean to check if the value has been set.
func (o *Engine) GetOsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsVersion, true
}

// SetOsVersion sets field value
func (o *Engine) SetOsVersion(v string) {
	o.OsVersion = v
}

// GetProductImageType returns the ProductImageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engine) GetProductImageType() string {
	if o == nil || IsNil(o.ProductImageType.Get()) {
		var ret string
		return ret
	}
	return *o.ProductImageType.Get()
}

// GetProductImageTypeOk returns a tuple with the ProductImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engine) GetProductImageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductImageType.Get(), o.ProductImageType.IsSet()
}

// HasProductImageType returns a boolean if a field has been set.
func (o *Engine) HasProductImageType() bool {
	if o != nil && o.ProductImageType.IsSet() {
		return true
	}

	return false
}

// SetProductImageType gets a reference to the given NullableString and assigns it to the ProductImageType field.
func (o *Engine) SetProductImageType(v string) {
	o.ProductImageType.Set(&v)
}

// SetProductImageTypeNil sets the value for ProductImageType to be an explicit nil
func (o *Engine) SetProductImageTypeNil() {
	o.ProductImageType.Set(nil)
}

// UnsetProductImageType ensures that no value is present for ProductImageType, not even an explicit nil
func (o *Engine) UnsetProductImageType() {
	o.ProductImageType.Unset()
}

// GetSoftwareVersion returns the SoftwareVersion field value
func (o *Engine) GetSoftwareVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value
// and a boolean to check if the value has been set.
func (o *Engine) GetSoftwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftwareVersion, true
}

// SetSoftwareVersion sets field value
func (o *Engine) SetSoftwareVersion(v string) {
	o.SoftwareVersion = v
}

func (o Engine) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Engine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndOfService) {
		toSerialize["end_of_service"] = o.EndOfService
	}
	toSerialize["id"] = o.Id
	toSerialize["major_version"] = o.MajorVersion
	toSerialize["name"] = o.Name
	toSerialize["os_type"] = o.OsType
	toSerialize["os_version"] = o.OsVersion
	if o.ProductImageType.IsSet() {
		toSerialize["product_image_type"] = o.ProductImageType.Get()
	}
	toSerialize["software_version"] = o.SoftwareVersion
	return toSerialize, nil
}

func (o *Engine) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"major_version",
		"name",
		"os_type",
		"os_version",
		"software_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEngine := _Engine{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEngine)

	if err != nil {
		return err
	}

	*o = Engine(varEngine)

	return err
}

type NullableEngine struct {
	value *Engine
	isSet bool
}

func (v NullableEngine) Get() *Engine {
	return v.value
}

func (v *NullableEngine) Set(val *Engine) {
	v.value = val
	v.isSet = true
}

func (v NullableEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngine(val *Engine) *NullableEngine {
	return &NullableEngine{value: val, isSet: true}
}

func (v NullableEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
