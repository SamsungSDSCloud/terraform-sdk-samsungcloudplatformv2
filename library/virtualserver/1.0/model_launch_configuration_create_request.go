/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LaunchConfigurationCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LaunchConfigurationCreateRequest{}

// LaunchConfigurationCreateRequest struct for LaunchConfigurationCreateRequest
type LaunchConfigurationCreateRequest struct {
	// Image ID
	ImageId string `json:"image_id"`
	// Keypair name
	KeypairName string `json:"keypair_name"`
	// Launch Configuration name
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9-_]*$"`
	// Server type ID
	ServerTypeId string                      `json:"server_type_id"`
	Tags         []Tag                       `json:"tags,omitempty"`
	UserData     NullableString              `json:"user_data,omitempty"`
	Volumes      []LaunchConfigurationVolume `json:"volumes,omitempty"`
}

type _LaunchConfigurationCreateRequest LaunchConfigurationCreateRequest

// NewLaunchConfigurationCreateRequest instantiates a new LaunchConfigurationCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLaunchConfigurationCreateRequest(imageId string, keypairName string, name string, serverTypeId string) *LaunchConfigurationCreateRequest {
	this := LaunchConfigurationCreateRequest{}
	this.ImageId = imageId
	this.KeypairName = keypairName
	this.Name = name
	this.ServerTypeId = serverTypeId
	return &this
}

// NewLaunchConfigurationCreateRequestWithDefaults instantiates a new LaunchConfigurationCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLaunchConfigurationCreateRequestWithDefaults() *LaunchConfigurationCreateRequest {
	this := LaunchConfigurationCreateRequest{}
	return &this
}

// GetImageId returns the ImageId field value
func (o *LaunchConfigurationCreateRequest) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *LaunchConfigurationCreateRequest) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *LaunchConfigurationCreateRequest) SetImageId(v string) {
	o.ImageId = v
}

// GetKeypairName returns the KeypairName field value
func (o *LaunchConfigurationCreateRequest) GetKeypairName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeypairName
}

// GetKeypairNameOk returns a tuple with the KeypairName field value
// and a boolean to check if the value has been set.
func (o *LaunchConfigurationCreateRequest) GetKeypairNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeypairName, true
}

// SetKeypairName sets field value
func (o *LaunchConfigurationCreateRequest) SetKeypairName(v string) {
	o.KeypairName = v
}

// GetName returns the Name field value
func (o *LaunchConfigurationCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LaunchConfigurationCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LaunchConfigurationCreateRequest) SetName(v string) {
	o.Name = v
}

// GetServerTypeId returns the ServerTypeId field value
func (o *LaunchConfigurationCreateRequest) GetServerTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerTypeId
}

// GetServerTypeIdOk returns a tuple with the ServerTypeId field value
// and a boolean to check if the value has been set.
func (o *LaunchConfigurationCreateRequest) GetServerTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerTypeId, true
}

// SetServerTypeId sets field value
func (o *LaunchConfigurationCreateRequest) SetServerTypeId(v string) {
	o.ServerTypeId = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LaunchConfigurationCreateRequest) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LaunchConfigurationCreateRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *LaunchConfigurationCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *LaunchConfigurationCreateRequest) SetTags(v []Tag) {
	o.Tags = v
}

// GetUserData returns the UserData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LaunchConfigurationCreateRequest) GetUserData() string {
	if o == nil || IsNil(o.UserData.Get()) {
		var ret string
		return ret
	}
	return *o.UserData.Get()
}

// GetUserDataOk returns a tuple with the UserData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LaunchConfigurationCreateRequest) GetUserDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserData.Get(), o.UserData.IsSet()
}

// HasUserData returns a boolean if a field has been set.
func (o *LaunchConfigurationCreateRequest) HasUserData() bool {
	if o != nil && o.UserData.IsSet() {
		return true
	}

	return false
}

// SetUserData gets a reference to the given NullableString and assigns it to the UserData field.
func (o *LaunchConfigurationCreateRequest) SetUserData(v string) {
	o.UserData.Set(&v)
}

// SetUserDataNil sets the value for UserData to be an explicit nil
func (o *LaunchConfigurationCreateRequest) SetUserDataNil() {
	o.UserData.Set(nil)
}

// UnsetUserData ensures that no value is present for UserData, not even an explicit nil
func (o *LaunchConfigurationCreateRequest) UnsetUserData() {
	o.UserData.Unset()
}

// GetVolumes returns the Volumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LaunchConfigurationCreateRequest) GetVolumes() []LaunchConfigurationVolume {
	if o == nil {
		var ret []LaunchConfigurationVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LaunchConfigurationCreateRequest) GetVolumesOk() ([]LaunchConfigurationVolume, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *LaunchConfigurationCreateRequest) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []LaunchConfigurationVolume and assigns it to the Volumes field.
func (o *LaunchConfigurationCreateRequest) SetVolumes(v []LaunchConfigurationVolume) {
	o.Volumes = v
}

func (o LaunchConfigurationCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LaunchConfigurationCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image_id"] = o.ImageId
	toSerialize["keypair_name"] = o.KeypairName
	toSerialize["name"] = o.Name
	toSerialize["server_type_id"] = o.ServerTypeId
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.UserData.IsSet() {
		toSerialize["user_data"] = o.UserData.Get()
	}
	if o.Volumes != nil {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

func (o *LaunchConfigurationCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image_id",
		"keypair_name",
		"name",
		"server_type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLaunchConfigurationCreateRequest := _LaunchConfigurationCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLaunchConfigurationCreateRequest)

	if err != nil {
		return err
	}

	*o = LaunchConfigurationCreateRequest(varLaunchConfigurationCreateRequest)

	return err
}

type NullableLaunchConfigurationCreateRequest struct {
	value *LaunchConfigurationCreateRequest
	isSet bool
}

func (v NullableLaunchConfigurationCreateRequest) Get() *LaunchConfigurationCreateRequest {
	return v.value
}

func (v *NullableLaunchConfigurationCreateRequest) Set(val *LaunchConfigurationCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLaunchConfigurationCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLaunchConfigurationCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLaunchConfigurationCreateRequest(val *LaunchConfigurationCreateRequest) *NullableLaunchConfigurationCreateRequest {
	return &NullableLaunchConfigurationCreateRequest{value: val, isSet: true}
}

func (v NullableLaunchConfigurationCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLaunchConfigurationCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
