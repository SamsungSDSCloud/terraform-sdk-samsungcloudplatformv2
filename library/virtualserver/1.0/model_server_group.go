/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerGroup{}

// ServerGroup struct for ServerGroup
type ServerGroup struct {
	// Account ID
	AccountId string `json:"account_id"`
	// Server Group ID
	Id string `json:"id"`
	// Server Group members
	Members []string `json:"members"`
	// Server Group name
	Name string `json:"name"`
	// Server Group policy
	Policy string `json:"policy"`
	// User ID
	UserId string `json:"user_id"`
}

type _ServerGroup ServerGroup

// NewServerGroup instantiates a new ServerGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerGroup(accountId string, id string, members []string, name string, policy string, userId string) *ServerGroup {
	this := ServerGroup{}
	this.AccountId = accountId
	this.Id = id
	this.Members = members
	this.Name = name
	this.Policy = policy
	this.UserId = userId
	return &this
}

// NewServerGroupWithDefaults instantiates a new ServerGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerGroupWithDefaults() *ServerGroup {
	this := ServerGroup{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *ServerGroup) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *ServerGroup) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *ServerGroup) SetAccountId(v string) {
	o.AccountId = v
}

// GetId returns the Id field value
func (o *ServerGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerGroup) SetId(v string) {
	o.Id = v
}

// GetMembers returns the Members field value
func (o *ServerGroup) GetMembers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *ServerGroup) GetMembersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *ServerGroup) SetMembers(v []string) {
	o.Members = v
}

// GetName returns the Name field value
func (o *ServerGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServerGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServerGroup) SetName(v string) {
	o.Name = v
}

// GetPolicy returns the Policy field value
func (o *ServerGroup) GetPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *ServerGroup) GetPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *ServerGroup) SetPolicy(v string) {
	o.Policy = v
}

// GetUserId returns the UserId field value
func (o *ServerGroup) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ServerGroup) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ServerGroup) SetUserId(v string) {
	o.UserId = v
}

func (o ServerGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["id"] = o.Id
	toSerialize["members"] = o.Members
	toSerialize["name"] = o.Name
	toSerialize["policy"] = o.Policy
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *ServerGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"id",
		"members",
		"name",
		"policy",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerGroup := _ServerGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerGroup)

	if err != nil {
		return err
	}

	*o = ServerGroup(varServerGroup)

	return err
}

type NullableServerGroup struct {
	value *ServerGroup
	isSet bool
}

func (v NullableServerGroup) Get() *ServerGroup {
	return v.value
}

func (v *NullableServerGroup) Set(val *ServerGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableServerGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableServerGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerGroup(val *ServerGroup) *NullableServerGroup {
	return &NullableServerGroup{value: val, isSet: true}
}

func (v NullableServerGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
