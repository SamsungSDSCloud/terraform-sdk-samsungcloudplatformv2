/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeTypeListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeTypeListResponse{}

// VolumeTypeListResponse struct for VolumeTypeListResponse
type VolumeTypeListResponse struct {
	VolumeTypes []VolumeTypeDetailResponse `json:"volume_types"`
}

type _VolumeTypeListResponse VolumeTypeListResponse

// NewVolumeTypeListResponse instantiates a new VolumeTypeListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeTypeListResponse(volumeTypes []VolumeTypeDetailResponse) *VolumeTypeListResponse {
	this := VolumeTypeListResponse{}
	this.VolumeTypes = volumeTypes
	return &this
}

// NewVolumeTypeListResponseWithDefaults instantiates a new VolumeTypeListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeTypeListResponseWithDefaults() *VolumeTypeListResponse {
	this := VolumeTypeListResponse{}
	return &this
}

// GetVolumeTypes returns the VolumeTypes field value
func (o *VolumeTypeListResponse) GetVolumeTypes() []VolumeTypeDetailResponse {
	if o == nil {
		var ret []VolumeTypeDetailResponse
		return ret
	}

	return o.VolumeTypes
}

// GetVolumeTypesOk returns a tuple with the VolumeTypes field value
// and a boolean to check if the value has been set.
func (o *VolumeTypeListResponse) GetVolumeTypesOk() ([]VolumeTypeDetailResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeTypes, true
}

// SetVolumeTypes sets field value
func (o *VolumeTypeListResponse) SetVolumeTypes(v []VolumeTypeDetailResponse) {
	o.VolumeTypes = v
}

func (o VolumeTypeListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeTypeListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["volume_types"] = o.VolumeTypes
	return toSerialize, nil
}

func (o *VolumeTypeListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volume_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeTypeListResponse := _VolumeTypeListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeTypeListResponse)

	if err != nil {
		return err
	}

	*o = VolumeTypeListResponse(varVolumeTypeListResponse)

	return err
}

type NullableVolumeTypeListResponse struct {
	value *VolumeTypeListResponse
	isSet bool
}

func (v NullableVolumeTypeListResponse) Get() *VolumeTypeListResponse {
	return v.value
}

func (v *NullableVolumeTypeListResponse) Set(val *VolumeTypeListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeTypeListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeTypeListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeTypeListResponse(val *VolumeTypeListResponse) *NullableVolumeTypeListResponse {
	return &NullableVolumeTypeListResponse{value: val, isSet: true}
}

func (v NullableVolumeTypeListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeTypeListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
