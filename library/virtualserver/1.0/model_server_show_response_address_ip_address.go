/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerShowResponseAddressIpAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerShowResponseAddressIpAddress{}

// ServerShowResponseAddressIpAddress struct for ServerShowResponseAddressIpAddress
type ServerShowResponseAddressIpAddress struct {
	// IP address
	IpAddress string `json:"ip_address"`
	// IP address version
	Version int32 `json:"version"`
}

type _ServerShowResponseAddressIpAddress ServerShowResponseAddressIpAddress

// NewServerShowResponseAddressIpAddress instantiates a new ServerShowResponseAddressIpAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerShowResponseAddressIpAddress(ipAddress string, version int32) *ServerShowResponseAddressIpAddress {
	this := ServerShowResponseAddressIpAddress{}
	this.IpAddress = ipAddress
	this.Version = version
	return &this
}

// NewServerShowResponseAddressIpAddressWithDefaults instantiates a new ServerShowResponseAddressIpAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerShowResponseAddressIpAddressWithDefaults() *ServerShowResponseAddressIpAddress {
	this := ServerShowResponseAddressIpAddress{}
	return &this
}

// GetIpAddress returns the IpAddress field value
func (o *ServerShowResponseAddressIpAddress) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *ServerShowResponseAddressIpAddress) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *ServerShowResponseAddressIpAddress) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetVersion returns the Version field value
func (o *ServerShowResponseAddressIpAddress) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ServerShowResponseAddressIpAddress) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ServerShowResponseAddressIpAddress) SetVersion(v int32) {
	o.Version = v
}

func (o ServerShowResponseAddressIpAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerShowResponseAddressIpAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip_address"] = o.IpAddress
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ServerShowResponseAddressIpAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip_address",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerShowResponseAddressIpAddress := _ServerShowResponseAddressIpAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerShowResponseAddressIpAddress)

	if err != nil {
		return err
	}

	*o = ServerShowResponseAddressIpAddress(varServerShowResponseAddressIpAddress)

	return err
}

type NullableServerShowResponseAddressIpAddress struct {
	value *ServerShowResponseAddressIpAddress
	isSet bool
}

func (v NullableServerShowResponseAddressIpAddress) Get() *ServerShowResponseAddressIpAddress {
	return v.value
}

func (v *NullableServerShowResponseAddressIpAddress) Set(val *ServerShowResponseAddressIpAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableServerShowResponseAddressIpAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableServerShowResponseAddressIpAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerShowResponseAddressIpAddress(val *ServerShowResponseAddressIpAddress) *NullableServerShowResponseAddressIpAddress {
	return &NullableServerShowResponseAddressIpAddress{value: val, isSet: true}
}

func (v NullableServerShowResponseAddressIpAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerShowResponseAddressIpAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
