/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeServerAttachRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeServerAttachRequest{}

// VolumeServerAttachRequest struct for VolumeServerAttachRequest
type VolumeServerAttachRequest struct {
	DeleteOnTermination NullableBool `json:"delete_on_termination,omitempty"`
	// Server ID
	ServerId string `json:"server_id"`
}

type _VolumeServerAttachRequest VolumeServerAttachRequest

// NewVolumeServerAttachRequest instantiates a new VolumeServerAttachRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeServerAttachRequest(serverId string) *VolumeServerAttachRequest {
	this := VolumeServerAttachRequest{}
	this.ServerId = serverId
	return &this
}

// NewVolumeServerAttachRequestWithDefaults instantiates a new VolumeServerAttachRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeServerAttachRequestWithDefaults() *VolumeServerAttachRequest {
	this := VolumeServerAttachRequest{}
	return &this
}

// GetDeleteOnTermination returns the DeleteOnTermination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeServerAttachRequest) GetDeleteOnTermination() bool {
	if o == nil || IsNil(o.DeleteOnTermination.Get()) {
		var ret bool
		return ret
	}
	return *o.DeleteOnTermination.Get()
}

// GetDeleteOnTerminationOk returns a tuple with the DeleteOnTermination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeServerAttachRequest) GetDeleteOnTerminationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteOnTermination.Get(), o.DeleteOnTermination.IsSet()
}

// HasDeleteOnTermination returns a boolean if a field has been set.
func (o *VolumeServerAttachRequest) HasDeleteOnTermination() bool {
	if o != nil && o.DeleteOnTermination.IsSet() {
		return true
	}

	return false
}

// SetDeleteOnTermination gets a reference to the given NullableBool and assigns it to the DeleteOnTermination field.
func (o *VolumeServerAttachRequest) SetDeleteOnTermination(v bool) {
	o.DeleteOnTermination.Set(&v)
}

// SetDeleteOnTerminationNil sets the value for DeleteOnTermination to be an explicit nil
func (o *VolumeServerAttachRequest) SetDeleteOnTerminationNil() {
	o.DeleteOnTermination.Set(nil)
}

// UnsetDeleteOnTermination ensures that no value is present for DeleteOnTermination, not even an explicit nil
func (o *VolumeServerAttachRequest) UnsetDeleteOnTermination() {
	o.DeleteOnTermination.Unset()
}

// GetServerId returns the ServerId field value
func (o *VolumeServerAttachRequest) GetServerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *VolumeServerAttachRequest) GetServerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *VolumeServerAttachRequest) SetServerId(v string) {
	o.ServerId = v
}

func (o VolumeServerAttachRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeServerAttachRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteOnTermination.IsSet() {
		toSerialize["delete_on_termination"] = o.DeleteOnTermination.Get()
	}
	toSerialize["server_id"] = o.ServerId
	return toSerialize, nil
}

func (o *VolumeServerAttachRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"server_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeServerAttachRequest := _VolumeServerAttachRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeServerAttachRequest)

	if err != nil {
		return err
	}

	*o = VolumeServerAttachRequest(varVolumeServerAttachRequest)

	return err
}

type NullableVolumeServerAttachRequest struct {
	value *VolumeServerAttachRequest
	isSet bool
}

func (v NullableVolumeServerAttachRequest) Get() *VolumeServerAttachRequest {
	return v.value
}

func (v *NullableVolumeServerAttachRequest) Set(val *VolumeServerAttachRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeServerAttachRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeServerAttachRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeServerAttachRequest(val *VolumeServerAttachRequest) *NullableVolumeServerAttachRequest {
	return &NullableVolumeServerAttachRequest{value: val, isSet: true}
}

func (v NullableVolumeServerAttachRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeServerAttachRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
