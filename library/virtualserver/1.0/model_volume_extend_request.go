/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeExtendRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeExtendRequest{}

// VolumeExtendRequest struct for VolumeExtendRequest
type VolumeExtendRequest struct {
	// Volume size
	Size int32 `json:"size"`
}

type _VolumeExtendRequest VolumeExtendRequest

// NewVolumeExtendRequest instantiates a new VolumeExtendRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeExtendRequest(size int32) *VolumeExtendRequest {
	this := VolumeExtendRequest{}
	this.Size = size
	return &this
}

// NewVolumeExtendRequestWithDefaults instantiates a new VolumeExtendRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeExtendRequestWithDefaults() *VolumeExtendRequest {
	this := VolumeExtendRequest{}
	return &this
}

// GetSize returns the Size field value
func (o *VolumeExtendRequest) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *VolumeExtendRequest) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *VolumeExtendRequest) SetSize(v int32) {
	o.Size = v
}

func (o VolumeExtendRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeExtendRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

func (o *VolumeExtendRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeExtendRequest := _VolumeExtendRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeExtendRequest)

	if err != nil {
		return err
	}

	*o = VolumeExtendRequest(varVolumeExtendRequest)

	return err
}

type NullableVolumeExtendRequest struct {
	value *VolumeExtendRequest
	isSet bool
}

func (v NullableVolumeExtendRequest) Get() *VolumeExtendRequest {
	return v.value
}

func (v *NullableVolumeExtendRequest) Set(val *VolumeExtendRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeExtendRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeExtendRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeExtendRequest(val *VolumeExtendRequest) *NullableVolumeExtendRequest {
	return &NullableVolumeExtendRequest{value: val, isSet: true}
}

func (v NullableVolumeExtendRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeExtendRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
