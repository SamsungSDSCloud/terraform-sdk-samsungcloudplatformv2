/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerGroupListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerGroupListResponse{}

// ServerGroupListResponse struct for ServerGroupListResponse
type ServerGroupListResponse struct {
	ServerGroups []ServerGroup `json:"server_groups"`
}

type _ServerGroupListResponse ServerGroupListResponse

// NewServerGroupListResponse instantiates a new ServerGroupListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerGroupListResponse(serverGroups []ServerGroup) *ServerGroupListResponse {
	this := ServerGroupListResponse{}
	this.ServerGroups = serverGroups
	return &this
}

// NewServerGroupListResponseWithDefaults instantiates a new ServerGroupListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerGroupListResponseWithDefaults() *ServerGroupListResponse {
	this := ServerGroupListResponse{}
	return &this
}

// GetServerGroups returns the ServerGroups field value
func (o *ServerGroupListResponse) GetServerGroups() []ServerGroup {
	if o == nil {
		var ret []ServerGroup
		return ret
	}

	return o.ServerGroups
}

// GetServerGroupsOk returns a tuple with the ServerGroups field value
// and a boolean to check if the value has been set.
func (o *ServerGroupListResponse) GetServerGroupsOk() ([]ServerGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerGroups, true
}

// SetServerGroups sets field value
func (o *ServerGroupListResponse) SetServerGroups(v []ServerGroup) {
	o.ServerGroups = v
}

func (o ServerGroupListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerGroupListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["server_groups"] = o.ServerGroups
	return toSerialize, nil
}

func (o *ServerGroupListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"server_groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerGroupListResponse := _ServerGroupListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerGroupListResponse)

	if err != nil {
		return err
	}

	*o = ServerGroupListResponse(varServerGroupListResponse)

	return err
}

type NullableServerGroupListResponse struct {
	value *ServerGroupListResponse
	isSet bool
}

func (v NullableServerGroupListResponse) Get() *ServerGroupListResponse {
	return v.value
}

func (v *NullableServerGroupListResponse) Set(val *ServerGroupListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerGroupListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerGroupListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerGroupListResponse(val *ServerGroupListResponse) *NullableServerGroupListResponse {
	return &NullableServerGroupListResponse{value: val, isSet: true}
}

func (v NullableServerGroupListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerGroupListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
