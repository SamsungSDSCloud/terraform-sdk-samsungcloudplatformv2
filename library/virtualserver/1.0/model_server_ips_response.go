/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerIpsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerIpsResponse{}

// ServerIpsResponse struct for ServerIpsResponse
type ServerIpsResponse struct {
	// IP addresses
	Addresses []ServerShowResponseAddress `json:"addresses"`
}

type _ServerIpsResponse ServerIpsResponse

// NewServerIpsResponse instantiates a new ServerIpsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerIpsResponse(addresses []ServerShowResponseAddress) *ServerIpsResponse {
	this := ServerIpsResponse{}
	this.Addresses = addresses
	return &this
}

// NewServerIpsResponseWithDefaults instantiates a new ServerIpsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerIpsResponseWithDefaults() *ServerIpsResponse {
	this := ServerIpsResponse{}
	return &this
}

// GetAddresses returns the Addresses field value
func (o *ServerIpsResponse) GetAddresses() []ServerShowResponseAddress {
	if o == nil {
		var ret []ServerShowResponseAddress
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *ServerIpsResponse) GetAddressesOk() ([]ServerShowResponseAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *ServerIpsResponse) SetAddresses(v []ServerShowResponseAddress) {
	o.Addresses = v
}

func (o ServerIpsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerIpsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addresses"] = o.Addresses
	return toSerialize, nil
}

func (o *ServerIpsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addresses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerIpsResponse := _ServerIpsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerIpsResponse)

	if err != nil {
		return err
	}

	*o = ServerIpsResponse(varServerIpsResponse)

	return err
}

type NullableServerIpsResponse struct {
	value *ServerIpsResponse
	isSet bool
}

func (v NullableServerIpsResponse) Get() *ServerIpsResponse {
	return v.value
}

func (v *NullableServerIpsResponse) Set(val *ServerIpsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerIpsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerIpsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerIpsResponse(val *ServerIpsResponse) *NullableServerIpsResponse {
	return &NullableServerIpsResponse{value: val, isSet: true}
}

func (v NullableServerIpsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerIpsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
