/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
)

// checks if the ImageSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageSetRequest{}

// ImageSetRequest struct for ImageSetRequest
type ImageSetRequest struct {
	MinDisk    NullableInt32  `json:"min_disk,omitempty"`
	MinRam     NullableInt32  `json:"min_ram,omitempty"`
	Protected  NullableBool   `json:"protected,omitempty"`
	Visibility NullableString `json:"visibility,omitempty" validate:"regexp=private|shared"`
}

// NewImageSetRequest instantiates a new ImageSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageSetRequest() *ImageSetRequest {
	this := ImageSetRequest{}
	return &this
}

// NewImageSetRequestWithDefaults instantiates a new ImageSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageSetRequestWithDefaults() *ImageSetRequest {
	this := ImageSetRequest{}
	return &this
}

// GetMinDisk returns the MinDisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageSetRequest) GetMinDisk() int32 {
	if o == nil || IsNil(o.MinDisk.Get()) {
		var ret int32
		return ret
	}
	return *o.MinDisk.Get()
}

// GetMinDiskOk returns a tuple with the MinDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageSetRequest) GetMinDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinDisk.Get(), o.MinDisk.IsSet()
}

// HasMinDisk returns a boolean if a field has been set.
func (o *ImageSetRequest) HasMinDisk() bool {
	if o != nil && o.MinDisk.IsSet() {
		return true
	}

	return false
}

// SetMinDisk gets a reference to the given NullableInt32 and assigns it to the MinDisk field.
func (o *ImageSetRequest) SetMinDisk(v int32) {
	o.MinDisk.Set(&v)
}

// SetMinDiskNil sets the value for MinDisk to be an explicit nil
func (o *ImageSetRequest) SetMinDiskNil() {
	o.MinDisk.Set(nil)
}

// UnsetMinDisk ensures that no value is present for MinDisk, not even an explicit nil
func (o *ImageSetRequest) UnsetMinDisk() {
	o.MinDisk.Unset()
}

// GetMinRam returns the MinRam field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageSetRequest) GetMinRam() int32 {
	if o == nil || IsNil(o.MinRam.Get()) {
		var ret int32
		return ret
	}
	return *o.MinRam.Get()
}

// GetMinRamOk returns a tuple with the MinRam field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageSetRequest) GetMinRamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinRam.Get(), o.MinRam.IsSet()
}

// HasMinRam returns a boolean if a field has been set.
func (o *ImageSetRequest) HasMinRam() bool {
	if o != nil && o.MinRam.IsSet() {
		return true
	}

	return false
}

// SetMinRam gets a reference to the given NullableInt32 and assigns it to the MinRam field.
func (o *ImageSetRequest) SetMinRam(v int32) {
	o.MinRam.Set(&v)
}

// SetMinRamNil sets the value for MinRam to be an explicit nil
func (o *ImageSetRequest) SetMinRamNil() {
	o.MinRam.Set(nil)
}

// UnsetMinRam ensures that no value is present for MinRam, not even an explicit nil
func (o *ImageSetRequest) UnsetMinRam() {
	o.MinRam.Unset()
}

// GetProtected returns the Protected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageSetRequest) GetProtected() bool {
	if o == nil || IsNil(o.Protected.Get()) {
		var ret bool
		return ret
	}
	return *o.Protected.Get()
}

// GetProtectedOk returns a tuple with the Protected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageSetRequest) GetProtectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protected.Get(), o.Protected.IsSet()
}

// HasProtected returns a boolean if a field has been set.
func (o *ImageSetRequest) HasProtected() bool {
	if o != nil && o.Protected.IsSet() {
		return true
	}

	return false
}

// SetProtected gets a reference to the given NullableBool and assigns it to the Protected field.
func (o *ImageSetRequest) SetProtected(v bool) {
	o.Protected.Set(&v)
}

// SetProtectedNil sets the value for Protected to be an explicit nil
func (o *ImageSetRequest) SetProtectedNil() {
	o.Protected.Set(nil)
}

// UnsetProtected ensures that no value is present for Protected, not even an explicit nil
func (o *ImageSetRequest) UnsetProtected() {
	o.Protected.Unset()
}

// GetVisibility returns the Visibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImageSetRequest) GetVisibility() string {
	if o == nil || IsNil(o.Visibility.Get()) {
		var ret string
		return ret
	}
	return *o.Visibility.Get()
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImageSetRequest) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visibility.Get(), o.Visibility.IsSet()
}

// HasVisibility returns a boolean if a field has been set.
func (o *ImageSetRequest) HasVisibility() bool {
	if o != nil && o.Visibility.IsSet() {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given NullableString and assigns it to the Visibility field.
func (o *ImageSetRequest) SetVisibility(v string) {
	o.Visibility.Set(&v)
}

// SetVisibilityNil sets the value for Visibility to be an explicit nil
func (o *ImageSetRequest) SetVisibilityNil() {
	o.Visibility.Set(nil)
}

// UnsetVisibility ensures that no value is present for Visibility, not even an explicit nil
func (o *ImageSetRequest) UnsetVisibility() {
	o.Visibility.Unset()
}

func (o ImageSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MinDisk.IsSet() {
		toSerialize["min_disk"] = o.MinDisk.Get()
	}
	if o.MinRam.IsSet() {
		toSerialize["min_ram"] = o.MinRam.Get()
	}
	if o.Protected.IsSet() {
		toSerialize["protected"] = o.Protected.Get()
	}
	if o.Visibility.IsSet() {
		toSerialize["visibility"] = o.Visibility.Get()
	}
	return toSerialize, nil
}

type NullableImageSetRequest struct {
	value *ImageSetRequest
	isSet bool
}

func (v NullableImageSetRequest) Get() *ImageSetRequest {
	return v.value
}

func (v *NullableImageSetRequest) Set(val *ImageSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImageSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImageSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageSetRequest(val *ImageSetRequest) *NullableImageSetRequest {
	return &NullableImageSetRequest{value: val, isSet: true}
}

func (v NullableImageSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
