/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// ServerRebootType the model 'ServerRebootType'
type ServerRebootType string

// List of ServerRebootType
const (
	SERVERREBOOTTYPE_SOFT ServerRebootType = "SOFT"
	SERVERREBOOTTYPE_HARD ServerRebootType = "HARD"
)

// All allowed values of ServerRebootType enum
var AllowedServerRebootTypeEnumValues = []ServerRebootType{
	"SOFT",
	"HARD",
}

func (v *ServerRebootType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerRebootType(value)
	for _, existing := range AllowedServerRebootTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerRebootType", value)
}

// NewServerRebootTypeFromValue returns a pointer to a valid ServerRebootType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerRebootTypeFromValue(v string) (*ServerRebootType, error) {
	ev := ServerRebootType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerRebootType: valid values are %v", v, AllowedServerRebootTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerRebootType) IsValid() bool {
	for _, existing := range AllowedServerRebootTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerRebootType value
func (v ServerRebootType) Ptr() *ServerRebootType {
	return &v
}

type NullableServerRebootType struct {
	value *ServerRebootType
	isSet bool
}

func (v NullableServerRebootType) Get() *ServerRebootType {
	return v.value
}

func (v *NullableServerRebootType) Set(val *ServerRebootType) {
	v.value = val
	v.isSet = true
}

func (v NullableServerRebootType) IsSet() bool {
	return v.isSet
}

func (v *NullableServerRebootType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerRebootType(val *ServerRebootType) *NullableServerRebootType {
	return &NullableServerRebootType{value: val, isSet: true}
}

func (v NullableServerRebootType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerRebootType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
