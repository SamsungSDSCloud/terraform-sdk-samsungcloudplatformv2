/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VirtualserverV1AutoScalingGroupsAPIService VirtualserverV1AutoScalingGroupsAPI service
type VirtualserverV1AutoScalingGroupsAPIService service

type VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest struct {
	ctx                           context.Context
	ApiService                    *VirtualserverV1AutoScalingGroupsAPIService
	autoScalingGroupCreateRequest *AutoScalingGroupCreateRequest
}

func (r VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest) AutoScalingGroupCreateRequest(autoScalingGroupCreateRequest AutoScalingGroupCreateRequest) VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest {
	r.autoScalingGroupCreateRequest = &autoScalingGroupCreateRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest) Execute() (*AutoScalingGroupShowResponse, *http.Response, error) {
	return r.ApiService.CreateAutoScalingGroupExecute(r)
}

/*
CreateAutoScalingGroup Create Auto-Scaling Group

Create Auto-Scaling Group.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest
*/
func (a *VirtualserverV1AutoScalingGroupsAPIService) CreateAutoScalingGroup(ctx context.Context) VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest {
	return VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupShowResponse
func (a *VirtualserverV1AutoScalingGroupsAPIService) CreateAutoScalingGroupExecute(r VirtualserverV1AutoScalingGroupsAPICreateAutoScalingGroupRequest) (*AutoScalingGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("autoScalingGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupsAPIDeleteAutoScalingGroupRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupsAPIService
	autoScalingGroupId string
}

func (r VirtualserverV1AutoScalingGroupsAPIDeleteAutoScalingGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutoScalingGroupExecute(r)
}

/*
DeleteAutoScalingGroup Delete Auto-Scaling Group

Delete Auto-Scaling Group.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupsAPIDeleteAutoScalingGroupRequest
*/
func (a *VirtualserverV1AutoScalingGroupsAPIService) DeleteAutoScalingGroup(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupsAPIDeleteAutoScalingGroupRequest {
	return VirtualserverV1AutoScalingGroupsAPIDeleteAutoScalingGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
func (a *VirtualserverV1AutoScalingGroupsAPIService) DeleteAutoScalingGroupExecute(r VirtualserverV1AutoScalingGroupsAPIDeleteAutoScalingGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest struct {
	ctx                     context.Context
	ApiService              *VirtualserverV1AutoScalingGroupsAPIService
	name                    *string
	state                   *string
	launchConfigurationId   *string
	launchConfigurationName *string
	lbServerGroupId         *string
	securityGroupId         *string
	subnetId                *string
	vpcId                   *string
	createdBy               *string
	offset                  *int32
	limit                   *int32
	sort                    *string
}

// Auto-Scaling Group name
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) Name(name string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.name = &name
	return r
}

// Auto-Scaling Group state
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) State(state string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.state = &state
	return r
}

// Launch Configuration ID
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) LaunchConfigurationId(launchConfigurationId string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.launchConfigurationId = &launchConfigurationId
	return r
}

// Launch Configuration name
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) LaunchConfigurationName(launchConfigurationName string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.launchConfigurationName = &launchConfigurationName
	return r
}

// LB Server Group ID
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) LbServerGroupId(lbServerGroupId string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.lbServerGroupId = &lbServerGroupId
	return r
}

// Security Group ID
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) SecurityGroupId(securityGroupId string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.securityGroupId = &securityGroupId
	return r
}

// Subnet ID
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) SubnetId(subnetId string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.subnetId = &subnetId
	return r
}

// VPC ID
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) VpcId(vpcId string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.vpcId = &vpcId
	return r
}

// Created by
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) CreatedBy(createdBy string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.createdBy = &createdBy
	return r
}

// Offset
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) Offset(offset int32) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.offset = &offset
	return r
}

// Limit
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) Limit(limit int32) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.limit = &limit
	return r
}

// Sort
func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) Sort(sort string) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	r.sort = &sort
	return r
}

func (r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) Execute() (*AutoScalingGroupListResponse, *http.Response, error) {
	return r.ApiService.ListAutoScalingGroupsExecute(r)
}

/*
ListAutoScalingGroups List Auto-Scaling Groups

List Auto-Scaling Groups.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest
*/
func (a *VirtualserverV1AutoScalingGroupsAPIService) ListAutoScalingGroups(ctx context.Context) VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest {
	return VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupListResponse
func (a *VirtualserverV1AutoScalingGroupsAPIService) ListAutoScalingGroupsExecute(r VirtualserverV1AutoScalingGroupsAPIListAutoScalingGroupsRequest) (*AutoScalingGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.launchConfigurationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "launch_configuration_id", r.launchConfigurationId, "form", "")
	}
	if r.launchConfigurationName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "launch_configuration_name", r.launchConfigurationName, "form", "")
	}
	if r.lbServerGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lb_server_group_id", r.lbServerGroupId, "form", "")
	}
	if r.securityGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "security_group_id", r.securityGroupId, "form", "")
	}
	if r.subnetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_id", r.subnetId, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.createdBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by", r.createdBy, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupsAPIShowAutoScalingGroupRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupsAPIService
	autoScalingGroupId string
}

func (r VirtualserverV1AutoScalingGroupsAPIShowAutoScalingGroupRequest) Execute() (*AutoScalingGroupShowResponse, *http.Response, error) {
	return r.ApiService.ShowAutoScalingGroupExecute(r)
}

/*
ShowAutoScalingGroup Show Auto-Scaling Group

Show Auto-Scaling Group.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupsAPIShowAutoScalingGroupRequest
*/
func (a *VirtualserverV1AutoScalingGroupsAPIService) ShowAutoScalingGroup(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupsAPIShowAutoScalingGroupRequest {
	return VirtualserverV1AutoScalingGroupsAPIShowAutoScalingGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupShowResponse
func (a *VirtualserverV1AutoScalingGroupsAPIService) ShowAutoScalingGroupExecute(r VirtualserverV1AutoScalingGroupsAPIShowAutoScalingGroupRequest) (*AutoScalingGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest struct {
	ctx                        context.Context
	ApiService                 *VirtualserverV1AutoScalingGroupsAPIService
	autoScalingGroupId         string
	autoScalingGroupSetRequest *AutoScalingGroupSetRequest
}

func (r VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest) AutoScalingGroupSetRequest(autoScalingGroupSetRequest AutoScalingGroupSetRequest) VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest {
	r.autoScalingGroupSetRequest = &autoScalingGroupSetRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest) Execute() (*AutoScalingGroupShowResponse, *http.Response, error) {
	return r.ApiService.UpdateAutoScalingGroupExecute(r)
}

/*
UpdateAutoScalingGroup Update Auto-Scaling Group

Update Auto-Scaling Group.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest
*/
func (a *VirtualserverV1AutoScalingGroupsAPIService) UpdateAutoScalingGroup(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest {
	return VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupShowResponse
func (a *VirtualserverV1AutoScalingGroupsAPIService) UpdateAutoScalingGroupExecute(r VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupRequest) (*AutoScalingGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupSetRequest == nil {
		return localVarReturnValue, nil, reportError("autoScalingGroupSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest struct {
	ctx                                   context.Context
	ApiService                            *VirtualserverV1AutoScalingGroupsAPIService
	autoScalingGroupId                    string
	autoScalingGroupSetServerCountRequest *AutoScalingGroupSetServerCountRequest
}

func (r VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest) AutoScalingGroupSetServerCountRequest(autoScalingGroupSetServerCountRequest AutoScalingGroupSetServerCountRequest) VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest {
	r.autoScalingGroupSetServerCountRequest = &autoScalingGroupSetServerCountRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest) Execute() (*AutoScalingGroupShowResponse, *http.Response, error) {
	return r.ApiService.UpdateAutoScalingGroupServerCountExecute(r)
}

/*
UpdateAutoScalingGroupServerCount Update Auto-Scaling Group server count

Update Auto-Scaling Group server count.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest
*/
func (a *VirtualserverV1AutoScalingGroupsAPIService) UpdateAutoScalingGroupServerCount(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest {
	return VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupShowResponse
func (a *VirtualserverV1AutoScalingGroupsAPIService) UpdateAutoScalingGroupServerCountExecute(r VirtualserverV1AutoScalingGroupsAPIUpdateAutoScalingGroupServerCountRequest) (*AutoScalingGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/server-count"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupSetServerCountRequest == nil {
		return localVarReturnValue, nil, reportError("autoScalingGroupSetServerCountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupSetServerCountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
