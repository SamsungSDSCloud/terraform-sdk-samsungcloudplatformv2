/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
)

// checks if the AutoScalingGroupNotificationUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutoScalingGroupNotificationUpdateRequest{}

// AutoScalingGroupNotificationUpdateRequest struct for AutoScalingGroupNotificationUpdateRequest
type AutoScalingGroupNotificationUpdateRequest struct {
	NotificationEvents []string       `json:"notification_events,omitempty"`
	NotificationState  NullableString `json:"notification_state,omitempty"`
}

// NewAutoScalingGroupNotificationUpdateRequest instantiates a new AutoScalingGroupNotificationUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoScalingGroupNotificationUpdateRequest() *AutoScalingGroupNotificationUpdateRequest {
	this := AutoScalingGroupNotificationUpdateRequest{}
	return &this
}

// NewAutoScalingGroupNotificationUpdateRequestWithDefaults instantiates a new AutoScalingGroupNotificationUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoScalingGroupNotificationUpdateRequestWithDefaults() *AutoScalingGroupNotificationUpdateRequest {
	this := AutoScalingGroupNotificationUpdateRequest{}
	return &this
}

// GetNotificationEvents returns the NotificationEvents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AutoScalingGroupNotificationUpdateRequest) GetNotificationEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NotificationEvents
}

// GetNotificationEventsOk returns a tuple with the NotificationEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AutoScalingGroupNotificationUpdateRequest) GetNotificationEventsOk() ([]string, bool) {
	if o == nil || IsNil(o.NotificationEvents) {
		return nil, false
	}
	return o.NotificationEvents, true
}

// HasNotificationEvents returns a boolean if a field has been set.
func (o *AutoScalingGroupNotificationUpdateRequest) HasNotificationEvents() bool {
	if o != nil && !IsNil(o.NotificationEvents) {
		return true
	}

	return false
}

// SetNotificationEvents gets a reference to the given []string and assigns it to the NotificationEvents field.
func (o *AutoScalingGroupNotificationUpdateRequest) SetNotificationEvents(v []string) {
	o.NotificationEvents = v
}

// GetNotificationState returns the NotificationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AutoScalingGroupNotificationUpdateRequest) GetNotificationState() string {
	if o == nil || IsNil(o.NotificationState.Get()) {
		var ret string
		return ret
	}
	return *o.NotificationState.Get()
}

// GetNotificationStateOk returns a tuple with the NotificationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AutoScalingGroupNotificationUpdateRequest) GetNotificationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationState.Get(), o.NotificationState.IsSet()
}

// HasNotificationState returns a boolean if a field has been set.
func (o *AutoScalingGroupNotificationUpdateRequest) HasNotificationState() bool {
	if o != nil && o.NotificationState.IsSet() {
		return true
	}

	return false
}

// SetNotificationState gets a reference to the given NullableString and assigns it to the NotificationState field.
func (o *AutoScalingGroupNotificationUpdateRequest) SetNotificationState(v string) {
	o.NotificationState.Set(&v)
}

// SetNotificationStateNil sets the value for NotificationState to be an explicit nil
func (o *AutoScalingGroupNotificationUpdateRequest) SetNotificationStateNil() {
	o.NotificationState.Set(nil)
}

// UnsetNotificationState ensures that no value is present for NotificationState, not even an explicit nil
func (o *AutoScalingGroupNotificationUpdateRequest) UnsetNotificationState() {
	o.NotificationState.Unset()
}

func (o AutoScalingGroupNotificationUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutoScalingGroupNotificationUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NotificationEvents != nil {
		toSerialize["notification_events"] = o.NotificationEvents
	}
	if o.NotificationState.IsSet() {
		toSerialize["notification_state"] = o.NotificationState.Get()
	}
	return toSerialize, nil
}

type NullableAutoScalingGroupNotificationUpdateRequest struct {
	value *AutoScalingGroupNotificationUpdateRequest
	isSet bool
}

func (v NullableAutoScalingGroupNotificationUpdateRequest) Get() *AutoScalingGroupNotificationUpdateRequest {
	return v.value
}

func (v *NullableAutoScalingGroupNotificationUpdateRequest) Set(val *AutoScalingGroupNotificationUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoScalingGroupNotificationUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoScalingGroupNotificationUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoScalingGroupNotificationUpdateRequest(val *AutoScalingGroupNotificationUpdateRequest) *NullableAutoScalingGroupNotificationUpdateRequest {
	return &NullableAutoScalingGroupNotificationUpdateRequest{value: val, isSet: true}
}

func (v NullableAutoScalingGroupNotificationUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoScalingGroupNotificationUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
