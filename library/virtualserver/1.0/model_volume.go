/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Volume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Volume{}

// Volume struct for Volume
type Volume struct {
	// Boot index
	BootIndex           int32        `json:"boot_index"`
	DeleteOnTermination NullableBool `json:"delete_on_termination,omitempty"`
	// Volume size
	Size       int32                    `json:"size"`
	SourceType NullableVolumeSourceType `json:"source_type,omitempty"`
	Type       NullableString           `json:"type,omitempty"`
}

type _Volume Volume

// NewVolume instantiates a new Volume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolume(bootIndex int32, size int32) *Volume {
	this := Volume{}
	this.BootIndex = bootIndex
	this.Size = size
	return &this
}

// NewVolumeWithDefaults instantiates a new Volume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeWithDefaults() *Volume {
	this := Volume{}
	return &this
}

// GetBootIndex returns the BootIndex field value
func (o *Volume) GetBootIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BootIndex
}

// GetBootIndexOk returns a tuple with the BootIndex field value
// and a boolean to check if the value has been set.
func (o *Volume) GetBootIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BootIndex, true
}

// SetBootIndex sets field value
func (o *Volume) SetBootIndex(v int32) {
	o.BootIndex = v
}

// GetDeleteOnTermination returns the DeleteOnTermination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Volume) GetDeleteOnTermination() bool {
	if o == nil || IsNil(o.DeleteOnTermination.Get()) {
		var ret bool
		return ret
	}
	return *o.DeleteOnTermination.Get()
}

// GetDeleteOnTerminationOk returns a tuple with the DeleteOnTermination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Volume) GetDeleteOnTerminationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteOnTermination.Get(), o.DeleteOnTermination.IsSet()
}

// HasDeleteOnTermination returns a boolean if a field has been set.
func (o *Volume) HasDeleteOnTermination() bool {
	if o != nil && o.DeleteOnTermination.IsSet() {
		return true
	}

	return false
}

// SetDeleteOnTermination gets a reference to the given NullableBool and assigns it to the DeleteOnTermination field.
func (o *Volume) SetDeleteOnTermination(v bool) {
	o.DeleteOnTermination.Set(&v)
}

// SetDeleteOnTerminationNil sets the value for DeleteOnTermination to be an explicit nil
func (o *Volume) SetDeleteOnTerminationNil() {
	o.DeleteOnTermination.Set(nil)
}

// UnsetDeleteOnTermination ensures that no value is present for DeleteOnTermination, not even an explicit nil
func (o *Volume) UnsetDeleteOnTermination() {
	o.DeleteOnTermination.Unset()
}

// GetSize returns the Size field value
func (o *Volume) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *Volume) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *Volume) SetSize(v int32) {
	o.Size = v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Volume) GetSourceType() VolumeSourceType {
	if o == nil || IsNil(o.SourceType.Get()) {
		var ret VolumeSourceType
		return ret
	}
	return *o.SourceType.Get()
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Volume) GetSourceTypeOk() (*VolumeSourceType, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceType.Get(), o.SourceType.IsSet()
}

// HasSourceType returns a boolean if a field has been set.
func (o *Volume) HasSourceType() bool {
	if o != nil && o.SourceType.IsSet() {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given NullableVolumeSourceType and assigns it to the SourceType field.
func (o *Volume) SetSourceType(v VolumeSourceType) {
	o.SourceType.Set(&v)
}

// SetSourceTypeNil sets the value for SourceType to be an explicit nil
func (o *Volume) SetSourceTypeNil() {
	o.SourceType.Set(nil)
}

// UnsetSourceType ensures that no value is present for SourceType, not even an explicit nil
func (o *Volume) UnsetSourceType() {
	o.SourceType.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Volume) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Volume) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *Volume) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *Volume) SetType(v string) {
	o.Type.Set(&v)
}

// SetTypeNil sets the value for Type to be an explicit nil
func (o *Volume) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *Volume) UnsetType() {
	o.Type.Unset()
}

func (o Volume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Volume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["boot_index"] = o.BootIndex
	if o.DeleteOnTermination.IsSet() {
		toSerialize["delete_on_termination"] = o.DeleteOnTermination.Get()
	}
	toSerialize["size"] = o.Size
	if o.SourceType.IsSet() {
		toSerialize["source_type"] = o.SourceType.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

func (o *Volume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"boot_index",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolume := _Volume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolume)

	if err != nil {
		return err
	}

	*o = Volume(varVolume)

	return err
}

type NullableVolume struct {
	value *Volume
	isSet bool
}

func (v NullableVolume) Get() *Volume {
	return v.value
}

func (v *NullableVolume) Set(val *Volume) {
	v.value = val
	v.isSet = true
}

func (v NullableVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolume(val *Volume) *NullableVolume {
	return &NullableVolume{value: val, isSet: true}
}

func (v NullableVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
