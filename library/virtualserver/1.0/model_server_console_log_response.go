/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
)

// checks if the ServerConsoleLogResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerConsoleLogResponse{}

// ServerConsoleLogResponse struct for ServerConsoleLogResponse
type ServerConsoleLogResponse struct {
	Output NullableString `json:"output,omitempty"`
}

// NewServerConsoleLogResponse instantiates a new ServerConsoleLogResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerConsoleLogResponse() *ServerConsoleLogResponse {
	this := ServerConsoleLogResponse{}
	return &this
}

// NewServerConsoleLogResponseWithDefaults instantiates a new ServerConsoleLogResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerConsoleLogResponseWithDefaults() *ServerConsoleLogResponse {
	this := ServerConsoleLogResponse{}
	return &this
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerConsoleLogResponse) GetOutput() string {
	if o == nil || IsNil(o.Output.Get()) {
		var ret string
		return ret
	}
	return *o.Output.Get()
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerConsoleLogResponse) GetOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Output.Get(), o.Output.IsSet()
}

// HasOutput returns a boolean if a field has been set.
func (o *ServerConsoleLogResponse) HasOutput() bool {
	if o != nil && o.Output.IsSet() {
		return true
	}

	return false
}

// SetOutput gets a reference to the given NullableString and assigns it to the Output field.
func (o *ServerConsoleLogResponse) SetOutput(v string) {
	o.Output.Set(&v)
}

// SetOutputNil sets the value for Output to be an explicit nil
func (o *ServerConsoleLogResponse) SetOutputNil() {
	o.Output.Set(nil)
}

// UnsetOutput ensures that no value is present for Output, not even an explicit nil
func (o *ServerConsoleLogResponse) UnsetOutput() {
	o.Output.Unset()
}

func (o ServerConsoleLogResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerConsoleLogResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Output.IsSet() {
		toSerialize["output"] = o.Output.Get()
	}
	return toSerialize, nil
}

type NullableServerConsoleLogResponse struct {
	value *ServerConsoleLogResponse
	isSet bool
}

func (v NullableServerConsoleLogResponse) Get() *ServerConsoleLogResponse {
	return v.value
}

func (v *NullableServerConsoleLogResponse) Set(val *ServerConsoleLogResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerConsoleLogResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerConsoleLogResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerConsoleLogResponse(val *ServerConsoleLogResponse) *NullableServerConsoleLogResponse {
	return &NullableServerConsoleLogResponse{value: val, isSet: true}
}

func (v NullableServerConsoleLogResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerConsoleLogResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
