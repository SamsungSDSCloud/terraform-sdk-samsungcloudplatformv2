/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerShowResponseAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerShowResponseAddress{}

// ServerShowResponseAddress struct for ServerShowResponseAddress
type ServerShowResponseAddress struct {
	// IP addresses
	IpAddresses []ServerShowResponseAddressIpAddress `json:"ip_addresses"`
	// Subnet name
	SubnetName string `json:"subnet_name"`
}

type _ServerShowResponseAddress ServerShowResponseAddress

// NewServerShowResponseAddress instantiates a new ServerShowResponseAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerShowResponseAddress(ipAddresses []ServerShowResponseAddressIpAddress, subnetName string) *ServerShowResponseAddress {
	this := ServerShowResponseAddress{}
	this.IpAddresses = ipAddresses
	this.SubnetName = subnetName
	return &this
}

// NewServerShowResponseAddressWithDefaults instantiates a new ServerShowResponseAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerShowResponseAddressWithDefaults() *ServerShowResponseAddress {
	this := ServerShowResponseAddress{}
	return &this
}

// GetIpAddresses returns the IpAddresses field value
func (o *ServerShowResponseAddress) GetIpAddresses() []ServerShowResponseAddressIpAddress {
	if o == nil {
		var ret []ServerShowResponseAddressIpAddress
		return ret
	}

	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value
// and a boolean to check if the value has been set.
func (o *ServerShowResponseAddress) GetIpAddressesOk() ([]ServerShowResponseAddressIpAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddresses, true
}

// SetIpAddresses sets field value
func (o *ServerShowResponseAddress) SetIpAddresses(v []ServerShowResponseAddressIpAddress) {
	o.IpAddresses = v
}

// GetSubnetName returns the SubnetName field value
func (o *ServerShowResponseAddress) GetSubnetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetName
}

// GetSubnetNameOk returns a tuple with the SubnetName field value
// and a boolean to check if the value has been set.
func (o *ServerShowResponseAddress) GetSubnetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetName, true
}

// SetSubnetName sets field value
func (o *ServerShowResponseAddress) SetSubnetName(v string) {
	o.SubnetName = v
}

func (o ServerShowResponseAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerShowResponseAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip_addresses"] = o.IpAddresses
	toSerialize["subnet_name"] = o.SubnetName
	return toSerialize, nil
}

func (o *ServerShowResponseAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip_addresses",
		"subnet_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerShowResponseAddress := _ServerShowResponseAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerShowResponseAddress)

	if err != nil {
		return err
	}

	*o = ServerShowResponseAddress(varServerShowResponseAddress)

	return err
}

type NullableServerShowResponseAddress struct {
	value *ServerShowResponseAddress
	isSet bool
}

func (v NullableServerShowResponseAddress) Get() *ServerShowResponseAddress {
	return v.value
}

func (v *NullableServerShowResponseAddress) Set(val *ServerShowResponseAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableServerShowResponseAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableServerShowResponseAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerShowResponseAddress(val *ServerShowResponseAddress) *NullableServerShowResponseAddress {
	return &NullableServerShowResponseAddress{value: val, isSet: true}
}

func (v NullableServerShowResponseAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerShowResponseAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
