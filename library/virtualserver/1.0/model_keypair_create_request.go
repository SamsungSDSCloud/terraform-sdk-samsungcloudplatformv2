/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KeypairCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeypairCreateRequest{}

// KeypairCreateRequest struct for KeypairCreateRequest
type KeypairCreateRequest struct {
	// Keypair name
	Name      string         `json:"name" validate:"regexp=^[a-zA-Z0-9-_ ]*$"`
	PublicKey NullableString `json:"public_key,omitempty"`
	Tags      []Tag          `json:"tags,omitempty"`
}

type _KeypairCreateRequest KeypairCreateRequest

// NewKeypairCreateRequest instantiates a new KeypairCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeypairCreateRequest(name string) *KeypairCreateRequest {
	this := KeypairCreateRequest{}
	this.Name = name
	return &this
}

// NewKeypairCreateRequestWithDefaults instantiates a new KeypairCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeypairCreateRequestWithDefaults() *KeypairCreateRequest {
	this := KeypairCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *KeypairCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeypairCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeypairCreateRequest) SetName(v string) {
	o.Name = v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeypairCreateRequest) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey.Get()) {
		var ret string
		return ret
	}
	return *o.PublicKey.Get()
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeypairCreateRequest) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicKey.Get(), o.PublicKey.IsSet()
}

// HasPublicKey returns a boolean if a field has been set.
func (o *KeypairCreateRequest) HasPublicKey() bool {
	if o != nil && o.PublicKey.IsSet() {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given NullableString and assigns it to the PublicKey field.
func (o *KeypairCreateRequest) SetPublicKey(v string) {
	o.PublicKey.Set(&v)
}

// SetPublicKeyNil sets the value for PublicKey to be an explicit nil
func (o *KeypairCreateRequest) SetPublicKeyNil() {
	o.PublicKey.Set(nil)
}

// UnsetPublicKey ensures that no value is present for PublicKey, not even an explicit nil
func (o *KeypairCreateRequest) UnsetPublicKey() {
	o.PublicKey.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeypairCreateRequest) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeypairCreateRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *KeypairCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *KeypairCreateRequest) SetTags(v []Tag) {
	o.Tags = v
}

func (o KeypairCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeypairCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.PublicKey.IsSet() {
		toSerialize["public_key"] = o.PublicKey.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *KeypairCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeypairCreateRequest := _KeypairCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeypairCreateRequest)

	if err != nil {
		return err
	}

	*o = KeypairCreateRequest(varKeypairCreateRequest)

	return err
}

type NullableKeypairCreateRequest struct {
	value *KeypairCreateRequest
	isSet bool
}

func (v NullableKeypairCreateRequest) Get() *KeypairCreateRequest {
	return v.value
}

func (v *NullableKeypairCreateRequest) Set(val *KeypairCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeypairCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeypairCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeypairCreateRequest(val *KeypairCreateRequest) *NullableKeypairCreateRequest {
	return &NullableKeypairCreateRequest{value: val, isSet: true}
}

func (v NullableKeypairCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeypairCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
