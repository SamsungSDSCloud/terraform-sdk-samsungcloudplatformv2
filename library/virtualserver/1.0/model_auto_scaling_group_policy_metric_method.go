/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// AutoScalingGroupPolicyMetricMethod the model 'AutoScalingGroupPolicyMetricMethod'
type AutoScalingGroupPolicyMetricMethod string

// List of AutoScalingGroupPolicyMetricMethod
const (
	AUTOSCALINGGROUPPOLICYMETRICMETHOD_AVG AutoScalingGroupPolicyMetricMethod = "AVG"
	AUTOSCALINGGROUPPOLICYMETRICMETHOD_MIN AutoScalingGroupPolicyMetricMethod = "MIN"
	AUTOSCALINGGROUPPOLICYMETRICMETHOD_MAX AutoScalingGroupPolicyMetricMethod = "MAX"
)

// All allowed values of AutoScalingGroupPolicyMetricMethod enum
var AllowedAutoScalingGroupPolicyMetricMethodEnumValues = []AutoScalingGroupPolicyMetricMethod{
	"AVG",
	"MIN",
	"MAX",
}

func (v *AutoScalingGroupPolicyMetricMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AutoScalingGroupPolicyMetricMethod(value)
	for _, existing := range AllowedAutoScalingGroupPolicyMetricMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AutoScalingGroupPolicyMetricMethod", value)
}

// NewAutoScalingGroupPolicyMetricMethodFromValue returns a pointer to a valid AutoScalingGroupPolicyMetricMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAutoScalingGroupPolicyMetricMethodFromValue(v string) (*AutoScalingGroupPolicyMetricMethod, error) {
	ev := AutoScalingGroupPolicyMetricMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AutoScalingGroupPolicyMetricMethod: valid values are %v", v, AllowedAutoScalingGroupPolicyMetricMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AutoScalingGroupPolicyMetricMethod) IsValid() bool {
	for _, existing := range AllowedAutoScalingGroupPolicyMetricMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AutoScalingGroupPolicyMetricMethod value
func (v AutoScalingGroupPolicyMetricMethod) Ptr() *AutoScalingGroupPolicyMetricMethod {
	return &v
}

type NullableAutoScalingGroupPolicyMetricMethod struct {
	value *AutoScalingGroupPolicyMetricMethod
	isSet bool
}

func (v NullableAutoScalingGroupPolicyMetricMethod) Get() *AutoScalingGroupPolicyMetricMethod {
	return v.value
}

func (v *NullableAutoScalingGroupPolicyMetricMethod) Set(val *AutoScalingGroupPolicyMetricMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoScalingGroupPolicyMetricMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoScalingGroupPolicyMetricMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoScalingGroupPolicyMetricMethod(val *AutoScalingGroupPolicyMetricMethod) *NullableAutoScalingGroupPolicyMetricMethod {
	return &NullableAutoScalingGroupPolicyMetricMethod{value: val, isSet: true}
}

func (v NullableAutoScalingGroupPolicyMetricMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoScalingGroupPolicyMetricMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
