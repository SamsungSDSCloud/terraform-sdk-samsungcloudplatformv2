/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerInterfaceListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInterfaceListResponse{}

// ServerInterfaceListResponse struct for ServerInterfaceListResponse
type ServerInterfaceListResponse struct {
	// Interface List
	Interfaces []InterfaceResponse `json:"interfaces"`
}

type _ServerInterfaceListResponse ServerInterfaceListResponse

// NewServerInterfaceListResponse instantiates a new ServerInterfaceListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInterfaceListResponse(interfaces []InterfaceResponse) *ServerInterfaceListResponse {
	this := ServerInterfaceListResponse{}
	this.Interfaces = interfaces
	return &this
}

// NewServerInterfaceListResponseWithDefaults instantiates a new ServerInterfaceListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInterfaceListResponseWithDefaults() *ServerInterfaceListResponse {
	this := ServerInterfaceListResponse{}
	return &this
}

// GetInterfaces returns the Interfaces field value
func (o *ServerInterfaceListResponse) GetInterfaces() []InterfaceResponse {
	if o == nil {
		var ret []InterfaceResponse
		return ret
	}

	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value
// and a boolean to check if the value has been set.
func (o *ServerInterfaceListResponse) GetInterfacesOk() ([]InterfaceResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// SetInterfaces sets field value
func (o *ServerInterfaceListResponse) SetInterfaces(v []InterfaceResponse) {
	o.Interfaces = v
}

func (o ServerInterfaceListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInterfaceListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["interfaces"] = o.Interfaces
	return toSerialize, nil
}

func (o *ServerInterfaceListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"interfaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInterfaceListResponse := _ServerInterfaceListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerInterfaceListResponse)

	if err != nil {
		return err
	}

	*o = ServerInterfaceListResponse(varServerInterfaceListResponse)

	return err
}

type NullableServerInterfaceListResponse struct {
	value *ServerInterfaceListResponse
	isSet bool
}

func (v NullableServerInterfaceListResponse) Get() *ServerInterfaceListResponse {
	return v.value
}

func (v *NullableServerInterfaceListResponse) Set(val *ServerInterfaceListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInterfaceListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInterfaceListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInterfaceListResponse(val *ServerInterfaceListResponse) *NullableServerInterfaceListResponse {
	return &NullableServerInterfaceListResponse{value: val, isSet: true}
}

func (v NullableServerInterfaceListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInterfaceListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
