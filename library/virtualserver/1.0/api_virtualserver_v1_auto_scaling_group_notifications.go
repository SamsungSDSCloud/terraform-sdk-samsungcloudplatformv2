/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// VirtualserverV1AutoScalingGroupNotificationsAPIService VirtualserverV1AutoScalingGroupNotificationsAPI service
type VirtualserverV1AutoScalingGroupNotificationsAPIService service

type VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest struct {
	ctx                                       context.Context
	ApiService                                *VirtualserverV1AutoScalingGroupNotificationsAPIService
	autoScalingGroupId                        string
	autoScalingGroupNotificationCreateRequest *AutoScalingGroupNotificationCreateRequest
}

func (r VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest) AutoScalingGroupNotificationCreateRequest(autoScalingGroupNotificationCreateRequest AutoScalingGroupNotificationCreateRequest) VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest {
	r.autoScalingGroupNotificationCreateRequest = &autoScalingGroupNotificationCreateRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest) Execute() (*AutoScalingGroupNotificationListResponse, *http.Response, error) {
	return r.ApiService.CreateAutoScalingGroupNotificationExecute(r)
}

/*
CreateAutoScalingGroupNotification Create Auto-Scaling Group Notification

Create Auto-Scaling Group notification.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest
*/
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) CreateAutoScalingGroupNotification(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest {
	return VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupNotificationListResponse
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) CreateAutoScalingGroupNotificationExecute(r VirtualserverV1AutoScalingGroupNotificationsAPICreateAutoScalingGroupNotificationRequest) (*AutoScalingGroupNotificationListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupNotificationListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupNotificationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("autoScalingGroupNotificationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupNotificationCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupNotificationsAPIDeleteAutoScalingGroupNotificationRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupNotificationsAPIService
	autoScalingGroupId string
	notificationId     string
}

func (r VirtualserverV1AutoScalingGroupNotificationsAPIDeleteAutoScalingGroupNotificationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutoScalingGroupNotificationExecute(r)
}

/*
DeleteAutoScalingGroupNotification Delete Auto-Scaling Group Notification

Delete Auto-Scaling Group notification.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@param notificationId Notification ID
	@return VirtualserverV1AutoScalingGroupNotificationsAPIDeleteAutoScalingGroupNotificationRequest
*/
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) DeleteAutoScalingGroupNotification(ctx context.Context, autoScalingGroupId string, notificationId string) VirtualserverV1AutoScalingGroupNotificationsAPIDeleteAutoScalingGroupNotificationRequest {
	return VirtualserverV1AutoScalingGroupNotificationsAPIDeleteAutoScalingGroupNotificationRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
		notificationId:     notificationId,
	}
}

// Execute executes the request
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) DeleteAutoScalingGroupNotificationExecute(r VirtualserverV1AutoScalingGroupNotificationsAPIDeleteAutoScalingGroupNotificationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/notifications/{notification_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notification_id"+"}", url.PathEscape(parameterValueToString(r.notificationId, "notificationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupNotificationsAPIService
	autoScalingGroupId string
	userIds            *[]string
	notificationState  *string
	notificationEvent  *string
	offset             *int32
	limit              *int32
	sort               *string
}

// User ID list
func (r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) UserIds(userIds []string) VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest {
	r.userIds = &userIds
	return r
}

// Auto-Scaling Group notification state
func (r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) NotificationState(notificationState string) VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest {
	r.notificationState = &notificationState
	return r
}

// Auto-Scaling Group notification event
func (r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) NotificationEvent(notificationEvent string) VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest {
	r.notificationEvent = &notificationEvent
	return r
}

// Offset
func (r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) Offset(offset int32) VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest {
	r.offset = &offset
	return r
}

// Limit
func (r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) Limit(limit int32) VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest {
	r.limit = &limit
	return r
}

// Sort
func (r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) Sort(sort string) VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest {
	r.sort = &sort
	return r
}

func (r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) Execute() (*AutoScalingGroupNotificationListResponse, *http.Response, error) {
	return r.ApiService.ListAutoScalingGroupNotificationsExecute(r)
}

/*
ListAutoScalingGroupNotifications List Auto-Scaling Group Notifications

List Auto-Scaling Group notifications.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest
*/
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) ListAutoScalingGroupNotifications(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest {
	return VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupNotificationListResponse
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) ListAutoScalingGroupNotificationsExecute(r VirtualserverV1AutoScalingGroupNotificationsAPIListAutoScalingGroupNotificationsRequest) (*AutoScalingGroupNotificationListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupNotificationListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userIds != nil {
		t := *r.userIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "user_ids", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "user_ids", t, "form", "multi")
		}
	}
	if r.notificationState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "notification_state", r.notificationState, "form", "")
	}
	if r.notificationEvent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "notification_event", r.notificationEvent, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupNotificationsAPIShowAutoScalingGroupNotificationRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupNotificationsAPIService
	autoScalingGroupId string
	notificationId     string
}

func (r VirtualserverV1AutoScalingGroupNotificationsAPIShowAutoScalingGroupNotificationRequest) Execute() (*AutoScalingGroupNotificationShowResponse, *http.Response, error) {
	return r.ApiService.ShowAutoScalingGroupNotificationExecute(r)
}

/*
ShowAutoScalingGroupNotification Show Auto-Scaling Group Notification

Show Auto-Scaling Group notification.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@param notificationId Notification ID
	@return VirtualserverV1AutoScalingGroupNotificationsAPIShowAutoScalingGroupNotificationRequest
*/
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) ShowAutoScalingGroupNotification(ctx context.Context, autoScalingGroupId string, notificationId string) VirtualserverV1AutoScalingGroupNotificationsAPIShowAutoScalingGroupNotificationRequest {
	return VirtualserverV1AutoScalingGroupNotificationsAPIShowAutoScalingGroupNotificationRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
		notificationId:     notificationId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupNotificationShowResponse
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) ShowAutoScalingGroupNotificationExecute(r VirtualserverV1AutoScalingGroupNotificationsAPIShowAutoScalingGroupNotificationRequest) (*AutoScalingGroupNotificationShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupNotificationShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/notifications/{notification_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notification_id"+"}", url.PathEscape(parameterValueToString(r.notificationId, "notificationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest struct {
	ctx                                       context.Context
	ApiService                                *VirtualserverV1AutoScalingGroupNotificationsAPIService
	autoScalingGroupId                        string
	notificationId                            string
	autoScalingGroupNotificationUpdateRequest *AutoScalingGroupNotificationUpdateRequest
}

func (r VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest) AutoScalingGroupNotificationUpdateRequest(autoScalingGroupNotificationUpdateRequest AutoScalingGroupNotificationUpdateRequest) VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest {
	r.autoScalingGroupNotificationUpdateRequest = &autoScalingGroupNotificationUpdateRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest) Execute() (*AutoScalingGroupNotificationShowResponse, *http.Response, error) {
	return r.ApiService.UpdateAutoScalingGroupNotificationExecute(r)
}

/*
UpdateAutoScalingGroupNotification Update Auto-Scaling Group Notification

Update Auto-Scaling Group notification.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@param notificationId Notification ID
	@return VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest
*/
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) UpdateAutoScalingGroupNotification(ctx context.Context, autoScalingGroupId string, notificationId string) VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest {
	return VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
		notificationId:     notificationId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupNotificationShowResponse
func (a *VirtualserverV1AutoScalingGroupNotificationsAPIService) UpdateAutoScalingGroupNotificationExecute(r VirtualserverV1AutoScalingGroupNotificationsAPIUpdateAutoScalingGroupNotificationRequest) (*AutoScalingGroupNotificationShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupNotificationShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/notifications/{notification_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notification_id"+"}", url.PathEscape(parameterValueToString(r.notificationId, "notificationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupNotificationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("autoScalingGroupNotificationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupNotificationUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
