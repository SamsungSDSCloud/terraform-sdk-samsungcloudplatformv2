/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerType{}

// ServerType struct for ServerType
type ServerType struct {
	Description NullableString `json:"description"`
	// Size of root disk
	Disk int32 `json:"disk"`
	// Size of ephemeral disk
	Ephemeral int32 `json:"ephemeral"`
	// Extra specs
	ExtraSpecs map[string]interface{} `json:"extra_specs"`
	// Server type ID
	Id string `json:"id"`
	// Server type name
	Name string `json:"name"`
	// Amount of RAM
	Ram int32 `json:"ram"`
	// Size of dedicated swap disk
	Swap int32 `json:"swap"`
	// Number of CPUs
	Vcpus int32 `json:"vcpus"`
}

type _ServerType ServerType

// NewServerType instantiates a new ServerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerType(description NullableString, disk int32, ephemeral int32, extraSpecs map[string]interface{}, id string, name string, ram int32, swap int32, vcpus int32) *ServerType {
	this := ServerType{}
	this.Description = description
	this.Disk = disk
	this.Ephemeral = ephemeral
	this.ExtraSpecs = extraSpecs
	this.Id = id
	this.Name = name
	this.Ram = ram
	this.Swap = swap
	this.Vcpus = vcpus
	return &this
}

// NewServerTypeWithDefaults instantiates a new ServerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeWithDefaults() *ServerType {
	this := ServerType{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ServerType) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *ServerType) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetDisk returns the Disk field value
func (o *ServerType) GetDisk() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetDiskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *ServerType) SetDisk(v int32) {
	o.Disk = v
}

// GetEphemeral returns the Ephemeral field value
func (o *ServerType) GetEphemeral() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ephemeral
}

// GetEphemeralOk returns a tuple with the Ephemeral field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetEphemeralOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ephemeral, true
}

// SetEphemeral sets field value
func (o *ServerType) SetEphemeral(v int32) {
	o.Ephemeral = v
}

// GetExtraSpecs returns the ExtraSpecs field value
func (o *ServerType) GetExtraSpecs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ExtraSpecs
}

// GetExtraSpecsOk returns a tuple with the ExtraSpecs field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetExtraSpecsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ExtraSpecs, true
}

// SetExtraSpecs sets field value
func (o *ServerType) SetExtraSpecs(v map[string]interface{}) {
	o.ExtraSpecs = v
}

// GetId returns the Id field value
func (o *ServerType) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerType) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServerType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServerType) SetName(v string) {
	o.Name = v
}

// GetRam returns the Ram field value
func (o *ServerType) GetRam() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ram
}

// GetRamOk returns a tuple with the Ram field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetRamOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ram, true
}

// SetRam sets field value
func (o *ServerType) SetRam(v int32) {
	o.Ram = v
}

// GetSwap returns the Swap field value
func (o *ServerType) GetSwap() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Swap
}

// GetSwapOk returns a tuple with the Swap field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetSwapOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Swap, true
}

// SetSwap sets field value
func (o *ServerType) SetSwap(v int32) {
	o.Swap = v
}

// GetVcpus returns the Vcpus field value
func (o *ServerType) GetVcpus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Vcpus
}

// GetVcpusOk returns a tuple with the Vcpus field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetVcpusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vcpus, true
}

// SetVcpus sets field value
func (o *ServerType) SetVcpus(v int32) {
	o.Vcpus = v
}

func (o ServerType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description.Get()
	toSerialize["disk"] = o.Disk
	toSerialize["ephemeral"] = o.Ephemeral
	toSerialize["extra_specs"] = o.ExtraSpecs
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["ram"] = o.Ram
	toSerialize["swap"] = o.Swap
	toSerialize["vcpus"] = o.Vcpus
	return toSerialize, nil
}

func (o *ServerType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"disk",
		"ephemeral",
		"extra_specs",
		"id",
		"name",
		"ram",
		"swap",
		"vcpus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerType := _ServerType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerType)

	if err != nil {
		return err
	}

	*o = ServerType(varServerType)

	return err
}

type NullableServerType struct {
	value *ServerType
	isSet bool
}

func (v NullableServerType) Get() *ServerType {
	return v.value
}

func (v *NullableServerType) Set(val *ServerType) {
	v.value = val
	v.isSet = true
}

func (v NullableServerType) IsSet() bool {
	return v.isSet
}

func (v *NullableServerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerType(val *ServerType) *NullableServerType {
	return &NullableServerType{value: val, isSet: true}
}

func (v NullableServerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
