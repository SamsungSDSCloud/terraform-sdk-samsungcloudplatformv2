/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VirtualserverV1AutoScalingGroupSchedulesAPIService VirtualserverV1AutoScalingGroupSchedulesAPI service
type VirtualserverV1AutoScalingGroupSchedulesAPIService service

type VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest struct {
	ctx                                   context.Context
	ApiService                            *VirtualserverV1AutoScalingGroupSchedulesAPIService
	autoScalingGroupId                    string
	autoScalingGroupScheduleCreateRequest *AutoScalingGroupScheduleCreateRequest
}

func (r VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest) AutoScalingGroupScheduleCreateRequest(autoScalingGroupScheduleCreateRequest AutoScalingGroupScheduleCreateRequest) VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest {
	r.autoScalingGroupScheduleCreateRequest = &autoScalingGroupScheduleCreateRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest) Execute() (*AutoScalingGroupScheduleShowResponse, *http.Response, error) {
	return r.ApiService.CreateAutoScalingGroupScheduleExecute(r)
}

/*
CreateAutoScalingGroupSchedule Create Auto-Scaling Group Schedule

Create Auto-Scaling Group schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest
*/
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) CreateAutoScalingGroupSchedule(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest {
	return VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupScheduleShowResponse
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) CreateAutoScalingGroupScheduleExecute(r VirtualserverV1AutoScalingGroupSchedulesAPICreateAutoScalingGroupScheduleRequest) (*AutoScalingGroupScheduleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupScheduleShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupScheduleCreateRequest == nil {
		return localVarReturnValue, nil, reportError("autoScalingGroupScheduleCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupScheduleCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupSchedulesAPIDeleteAutoScalingGroupScheduleRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupSchedulesAPIService
	autoScalingGroupId string
	scheduleId         string
}

func (r VirtualserverV1AutoScalingGroupSchedulesAPIDeleteAutoScalingGroupScheduleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAutoScalingGroupScheduleExecute(r)
}

/*
DeleteAutoScalingGroupSchedule Delete Auto-Scaling Group Schedule

Delete Auto-Scaling Group schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@param scheduleId Schedule ID
	@return VirtualserverV1AutoScalingGroupSchedulesAPIDeleteAutoScalingGroupScheduleRequest
*/
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) DeleteAutoScalingGroupSchedule(ctx context.Context, autoScalingGroupId string, scheduleId string) VirtualserverV1AutoScalingGroupSchedulesAPIDeleteAutoScalingGroupScheduleRequest {
	return VirtualserverV1AutoScalingGroupSchedulesAPIDeleteAutoScalingGroupScheduleRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
		scheduleId:         scheduleId,
	}
}

// Execute executes the request
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) DeleteAutoScalingGroupScheduleExecute(r VirtualserverV1AutoScalingGroupSchedulesAPIDeleteAutoScalingGroupScheduleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/schedules/{schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schedule_id"+"}", url.PathEscape(parameterValueToString(r.scheduleId, "scheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupSchedulesAPIService
	autoScalingGroupId string
	size               *int32
	page               *int32
	sort               *string
	frequency          *JobSchedulingFrequencyEnum
}

// size
func (r VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest) Size(size int32) VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest {
	r.size = &size
	return r
}

// page
func (r VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest) Page(page int32) VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest {
	r.page = &page
	return r
}

// sort
func (r VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest) Sort(sort string) VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest {
	r.sort = &sort
	return r
}

// Frequency
func (r VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest) Frequency(frequency JobSchedulingFrequencyEnum) VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest {
	r.frequency = &frequency
	return r
}

func (r VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest) Execute() (*AutoScalingGroupScheduleListResponse, *http.Response, error) {
	return r.ApiService.ListAutoScalingGroupSchedulesExecute(r)
}

/*
ListAutoScalingGroupSchedules List Auto-Scaling Group Schedules

Get Auto-Scaling Group schedule list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest
*/
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) ListAutoScalingGroupSchedules(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest {
	return VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupScheduleListResponse
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) ListAutoScalingGroupSchedulesExecute(r VirtualserverV1AutoScalingGroupSchedulesAPIListAutoScalingGroupSchedulesRequest) (*AutoScalingGroupScheduleListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupScheduleListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.frequency != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "frequency", r.frequency, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupSchedulesAPIShowAutoScalingGroupScheduleRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupSchedulesAPIService
	autoScalingGroupId string
	scheduleId         string
}

func (r VirtualserverV1AutoScalingGroupSchedulesAPIShowAutoScalingGroupScheduleRequest) Execute() (*AutoScalingGroupScheduleShowResponse, *http.Response, error) {
	return r.ApiService.ShowAutoScalingGroupScheduleExecute(r)
}

/*
ShowAutoScalingGroupSchedule Show Auto-Scaling Group Schedule

Show Auto-Scaling Group schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@param scheduleId Schedule ID
	@return VirtualserverV1AutoScalingGroupSchedulesAPIShowAutoScalingGroupScheduleRequest
*/
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) ShowAutoScalingGroupSchedule(ctx context.Context, autoScalingGroupId string, scheduleId string) VirtualserverV1AutoScalingGroupSchedulesAPIShowAutoScalingGroupScheduleRequest {
	return VirtualserverV1AutoScalingGroupSchedulesAPIShowAutoScalingGroupScheduleRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
		scheduleId:         scheduleId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupScheduleShowResponse
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) ShowAutoScalingGroupScheduleExecute(r VirtualserverV1AutoScalingGroupSchedulesAPIShowAutoScalingGroupScheduleRequest) (*AutoScalingGroupScheduleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupScheduleShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/schedules/{schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schedule_id"+"}", url.PathEscape(parameterValueToString(r.scheduleId, "scheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest struct {
	ctx                                   context.Context
	ApiService                            *VirtualserverV1AutoScalingGroupSchedulesAPIService
	autoScalingGroupId                    string
	scheduleId                            string
	autoScalingGroupScheduleUpdateRequest *AutoScalingGroupScheduleUpdateRequest
}

func (r VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest) AutoScalingGroupScheduleUpdateRequest(autoScalingGroupScheduleUpdateRequest AutoScalingGroupScheduleUpdateRequest) VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest {
	r.autoScalingGroupScheduleUpdateRequest = &autoScalingGroupScheduleUpdateRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest) Execute() (*AutoScalingGroupScheduleShowResponse, *http.Response, error) {
	return r.ApiService.UpdateAutoScalingGroupScheduleExecute(r)
}

/*
UpdateAutoScalingGroupSchedule Update Auto-Scaling Group Schedule

Update Auto-Scaling Group schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@param scheduleId Schedule ID
	@return VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest
*/
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) UpdateAutoScalingGroupSchedule(ctx context.Context, autoScalingGroupId string, scheduleId string) VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest {
	return VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
		scheduleId:         scheduleId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupScheduleShowResponse
func (a *VirtualserverV1AutoScalingGroupSchedulesAPIService) UpdateAutoScalingGroupScheduleExecute(r VirtualserverV1AutoScalingGroupSchedulesAPIUpdateAutoScalingGroupScheduleRequest) (*AutoScalingGroupScheduleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupScheduleShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/schedules/{schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"schedule_id"+"}", url.PathEscape(parameterValueToString(r.scheduleId, "scheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupScheduleUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("autoScalingGroupScheduleUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupScheduleUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
