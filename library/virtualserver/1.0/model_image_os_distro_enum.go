/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// ImageOsDistroEnum the model 'ImageOsDistroEnum'
type ImageOsDistroEnum string

// List of ImageOsDistroEnum
const (
	IMAGEOSDISTROENUM_ALMA    ImageOsDistroEnum = "alma"
	IMAGEOSDISTROENUM_CENTOS  ImageOsDistroEnum = "centos"
	IMAGEOSDISTROENUM_RHEL    ImageOsDistroEnum = "rhel"
	IMAGEOSDISTROENUM_ROCKY   ImageOsDistroEnum = "rocky"
	IMAGEOSDISTROENUM_UBUNTU  ImageOsDistroEnum = "ubuntu"
	IMAGEOSDISTROENUM_WINDOWS ImageOsDistroEnum = "windows"
	IMAGEOSDISTROENUM_ORACLE  ImageOsDistroEnum = "oracle"
	IMAGEOSDISTROENUM_SLES    ImageOsDistroEnum = "sles"
)

// All allowed values of ImageOsDistroEnum enum
var AllowedImageOsDistroEnumEnumValues = []ImageOsDistroEnum{
	"alma",
	"centos",
	"rhel",
	"rocky",
	"ubuntu",
	"windows",
	"oracle",
	"sles",
}

func (v *ImageOsDistroEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageOsDistroEnum(value)
	for _, existing := range AllowedImageOsDistroEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageOsDistroEnum", value)
}

// NewImageOsDistroEnumFromValue returns a pointer to a valid ImageOsDistroEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageOsDistroEnumFromValue(v string) (*ImageOsDistroEnum, error) {
	ev := ImageOsDistroEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageOsDistroEnum: valid values are %v", v, AllowedImageOsDistroEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageOsDistroEnum) IsValid() bool {
	for _, existing := range AllowedImageOsDistroEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageOsDistroEnum value
func (v ImageOsDistroEnum) Ptr() *ImageOsDistroEnum {
	return &v
}

type NullableImageOsDistroEnum struct {
	value *ImageOsDistroEnum
	isSet bool
}

func (v NullableImageOsDistroEnum) Get() *ImageOsDistroEnum {
	return v.value
}

func (v *NullableImageOsDistroEnum) Set(val *ImageOsDistroEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableImageOsDistroEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableImageOsDistroEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageOsDistroEnum(val *ImageOsDistroEnum) *NullableImageOsDistroEnum {
	return &NullableImageOsDistroEnum{value: val, isSet: true}
}

func (v NullableImageOsDistroEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageOsDistroEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
