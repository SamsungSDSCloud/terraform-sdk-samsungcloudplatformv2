/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KeypairCreateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeypairCreateResponse{}

// KeypairCreateResponse struct for KeypairCreateResponse
type KeypairCreateResponse struct {
	// Fingerprint
	Fingerprint string `json:"fingerprint"`
	// Keypair name
	Name       string         `json:"name"`
	PrivateKey NullableString `json:"private_key,omitempty"`
	// Public key
	PublicKey string `json:"public_key"`
	// Keypair type
	Type string `json:"type"`
}

type _KeypairCreateResponse KeypairCreateResponse

// NewKeypairCreateResponse instantiates a new KeypairCreateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeypairCreateResponse(fingerprint string, name string, publicKey string, type_ string) *KeypairCreateResponse {
	this := KeypairCreateResponse{}
	this.Fingerprint = fingerprint
	this.Name = name
	this.PublicKey = publicKey
	this.Type = type_
	return &this
}

// NewKeypairCreateResponseWithDefaults instantiates a new KeypairCreateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeypairCreateResponseWithDefaults() *KeypairCreateResponse {
	this := KeypairCreateResponse{}
	return &this
}

// GetFingerprint returns the Fingerprint field value
func (o *KeypairCreateResponse) GetFingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
func (o *KeypairCreateResponse) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fingerprint, true
}

// SetFingerprint sets field value
func (o *KeypairCreateResponse) SetFingerprint(v string) {
	o.Fingerprint = v
}

// GetName returns the Name field value
func (o *KeypairCreateResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeypairCreateResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeypairCreateResponse) SetName(v string) {
	o.Name = v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeypairCreateResponse) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeypairCreateResponse) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *KeypairCreateResponse) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *KeypairCreateResponse) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}

// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *KeypairCreateResponse) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *KeypairCreateResponse) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetPublicKey returns the PublicKey field value
func (o *KeypairCreateResponse) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *KeypairCreateResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *KeypairCreateResponse) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetType returns the Type field value
func (o *KeypairCreateResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KeypairCreateResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KeypairCreateResponse) SetType(v string) {
	o.Type = v
}

func (o KeypairCreateResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeypairCreateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fingerprint"] = o.Fingerprint
	toSerialize["name"] = o.Name
	if o.PrivateKey.IsSet() {
		toSerialize["private_key"] = o.PrivateKey.Get()
	}
	toSerialize["public_key"] = o.PublicKey
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *KeypairCreateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fingerprint",
		"name",
		"public_key",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeypairCreateResponse := _KeypairCreateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeypairCreateResponse)

	if err != nil {
		return err
	}

	*o = KeypairCreateResponse(varKeypairCreateResponse)

	return err
}

type NullableKeypairCreateResponse struct {
	value *KeypairCreateResponse
	isSet bool
}

func (v NullableKeypairCreateResponse) Get() *KeypairCreateResponse {
	return v.value
}

func (v *NullableKeypairCreateResponse) Set(val *KeypairCreateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeypairCreateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeypairCreateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeypairCreateResponse(val *KeypairCreateResponse) *NullableKeypairCreateResponse {
	return &NullableKeypairCreateResponse{value: val, isSet: true}
}

func (v NullableKeypairCreateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeypairCreateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
