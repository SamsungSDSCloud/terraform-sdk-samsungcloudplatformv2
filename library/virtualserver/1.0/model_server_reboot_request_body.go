/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
)

// checks if the ServerRebootRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerRebootRequestBody{}

// ServerRebootRequestBody struct for ServerRebootRequestBody
type ServerRebootRequestBody struct {
	RebootType NullableServerRebootType `json:"reboot_type,omitempty"`
}

// NewServerRebootRequestBody instantiates a new ServerRebootRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerRebootRequestBody() *ServerRebootRequestBody {
	this := ServerRebootRequestBody{}
	return &this
}

// NewServerRebootRequestBodyWithDefaults instantiates a new ServerRebootRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerRebootRequestBodyWithDefaults() *ServerRebootRequestBody {
	this := ServerRebootRequestBody{}
	return &this
}

// GetRebootType returns the RebootType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerRebootRequestBody) GetRebootType() ServerRebootType {
	if o == nil || IsNil(o.RebootType.Get()) {
		var ret ServerRebootType
		return ret
	}
	return *o.RebootType.Get()
}

// GetRebootTypeOk returns a tuple with the RebootType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerRebootRequestBody) GetRebootTypeOk() (*ServerRebootType, bool) {
	if o == nil {
		return nil, false
	}
	return o.RebootType.Get(), o.RebootType.IsSet()
}

// HasRebootType returns a boolean if a field has been set.
func (o *ServerRebootRequestBody) HasRebootType() bool {
	if o != nil && o.RebootType.IsSet() {
		return true
	}

	return false
}

// SetRebootType gets a reference to the given NullableServerRebootType and assigns it to the RebootType field.
func (o *ServerRebootRequestBody) SetRebootType(v ServerRebootType) {
	o.RebootType.Set(&v)
}

// SetRebootTypeNil sets the value for RebootType to be an explicit nil
func (o *ServerRebootRequestBody) SetRebootTypeNil() {
	o.RebootType.Set(nil)
}

// UnsetRebootType ensures that no value is present for RebootType, not even an explicit nil
func (o *ServerRebootRequestBody) UnsetRebootType() {
	o.RebootType.Unset()
}

func (o ServerRebootRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerRebootRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RebootType.IsSet() {
		toSerialize["reboot_type"] = o.RebootType.Get()
	}
	return toSerialize, nil
}

type NullableServerRebootRequestBody struct {
	value *ServerRebootRequestBody
	isSet bool
}

func (v NullableServerRebootRequestBody) Get() *ServerRebootRequestBody {
	return v.value
}

func (v *NullableServerRebootRequestBody) Set(val *ServerRebootRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableServerRebootRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableServerRebootRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerRebootRequestBody(val *ServerRebootRequestBody) *NullableServerRebootRequestBody {
	return &NullableServerRebootRequestBody{value: val, isSet: true}
}

func (v NullableServerRebootRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerRebootRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
