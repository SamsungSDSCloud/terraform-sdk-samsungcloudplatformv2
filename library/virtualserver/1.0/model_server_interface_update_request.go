/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
)

// checks if the ServerInterfaceUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInterfaceUpdateRequest{}

// ServerInterfaceUpdateRequest struct for ServerInterfaceUpdateRequest
type ServerInterfaceUpdateRequest struct {
	FixedIpAddress NullableString `json:"fixed_ip_address,omitempty"`
	SubnetId       NullableString `json:"subnet_id,omitempty"`
}

// NewServerInterfaceUpdateRequest instantiates a new ServerInterfaceUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInterfaceUpdateRequest() *ServerInterfaceUpdateRequest {
	this := ServerInterfaceUpdateRequest{}
	return &this
}

// NewServerInterfaceUpdateRequestWithDefaults instantiates a new ServerInterfaceUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInterfaceUpdateRequestWithDefaults() *ServerInterfaceUpdateRequest {
	this := ServerInterfaceUpdateRequest{}
	return &this
}

// GetFixedIpAddress returns the FixedIpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerInterfaceUpdateRequest) GetFixedIpAddress() string {
	if o == nil || IsNil(o.FixedIpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.FixedIpAddress.Get()
}

// GetFixedIpAddressOk returns a tuple with the FixedIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerInterfaceUpdateRequest) GetFixedIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FixedIpAddress.Get(), o.FixedIpAddress.IsSet()
}

// HasFixedIpAddress returns a boolean if a field has been set.
func (o *ServerInterfaceUpdateRequest) HasFixedIpAddress() bool {
	if o != nil && o.FixedIpAddress.IsSet() {
		return true
	}

	return false
}

// SetFixedIpAddress gets a reference to the given NullableString and assigns it to the FixedIpAddress field.
func (o *ServerInterfaceUpdateRequest) SetFixedIpAddress(v string) {
	o.FixedIpAddress.Set(&v)
}

// SetFixedIpAddressNil sets the value for FixedIpAddress to be an explicit nil
func (o *ServerInterfaceUpdateRequest) SetFixedIpAddressNil() {
	o.FixedIpAddress.Set(nil)
}

// UnsetFixedIpAddress ensures that no value is present for FixedIpAddress, not even an explicit nil
func (o *ServerInterfaceUpdateRequest) UnsetFixedIpAddress() {
	o.FixedIpAddress.Unset()
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerInterfaceUpdateRequest) GetSubnetId() string {
	if o == nil || IsNil(o.SubnetId.Get()) {
		var ret string
		return ret
	}
	return *o.SubnetId.Get()
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerInterfaceUpdateRequest) GetSubnetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetId.Get(), o.SubnetId.IsSet()
}

// HasSubnetId returns a boolean if a field has been set.
func (o *ServerInterfaceUpdateRequest) HasSubnetId() bool {
	if o != nil && o.SubnetId.IsSet() {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given NullableString and assigns it to the SubnetId field.
func (o *ServerInterfaceUpdateRequest) SetSubnetId(v string) {
	o.SubnetId.Set(&v)
}

// SetSubnetIdNil sets the value for SubnetId to be an explicit nil
func (o *ServerInterfaceUpdateRequest) SetSubnetIdNil() {
	o.SubnetId.Set(nil)
}

// UnsetSubnetId ensures that no value is present for SubnetId, not even an explicit nil
func (o *ServerInterfaceUpdateRequest) UnsetSubnetId() {
	o.SubnetId.Unset()
}

func (o ServerInterfaceUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInterfaceUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FixedIpAddress.IsSet() {
		toSerialize["fixed_ip_address"] = o.FixedIpAddress.Get()
	}
	if o.SubnetId.IsSet() {
		toSerialize["subnet_id"] = o.SubnetId.Get()
	}
	return toSerialize, nil
}

type NullableServerInterfaceUpdateRequest struct {
	value *ServerInterfaceUpdateRequest
	isSet bool
}

func (v NullableServerInterfaceUpdateRequest) Get() *ServerInterfaceUpdateRequest {
	return v.value
}

func (v *NullableServerInterfaceUpdateRequest) Set(val *ServerInterfaceUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInterfaceUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInterfaceUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInterfaceUpdateRequest(val *ServerInterfaceUpdateRequest) *NullableServerInterfaceUpdateRequest {
	return &NullableServerInterfaceUpdateRequest{value: val, isSet: true}
}

func (v NullableServerInterfaceUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInterfaceUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
