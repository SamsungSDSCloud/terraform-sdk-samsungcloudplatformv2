/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
)

// checks if the Network type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Network{}

// Network struct for Network
type Network struct {
	FixedIp    NullableString `json:"fixed_ip,omitempty"`
	PortId     NullableString `json:"port_id,omitempty"`
	PublicIpId NullableString `json:"public_ip_id,omitempty"`
	SubnetId   NullableString `json:"subnet_id,omitempty"`
}

// NewNetwork instantiates a new Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetwork() *Network {
	this := Network{}
	return &this
}

// NewNetworkWithDefaults instantiates a new Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkWithDefaults() *Network {
	this := Network{}
	return &this
}

// GetFixedIp returns the FixedIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Network) GetFixedIp() string {
	if o == nil || IsNil(o.FixedIp.Get()) {
		var ret string
		return ret
	}
	return *o.FixedIp.Get()
}

// GetFixedIpOk returns a tuple with the FixedIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Network) GetFixedIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FixedIp.Get(), o.FixedIp.IsSet()
}

// HasFixedIp returns a boolean if a field has been set.
func (o *Network) HasFixedIp() bool {
	if o != nil && o.FixedIp.IsSet() {
		return true
	}

	return false
}

// SetFixedIp gets a reference to the given NullableString and assigns it to the FixedIp field.
func (o *Network) SetFixedIp(v string) {
	o.FixedIp.Set(&v)
}

// SetFixedIpNil sets the value for FixedIp to be an explicit nil
func (o *Network) SetFixedIpNil() {
	o.FixedIp.Set(nil)
}

// UnsetFixedIp ensures that no value is present for FixedIp, not even an explicit nil
func (o *Network) UnsetFixedIp() {
	o.FixedIp.Unset()
}

// GetPortId returns the PortId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Network) GetPortId() string {
	if o == nil || IsNil(o.PortId.Get()) {
		var ret string
		return ret
	}
	return *o.PortId.Get()
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Network) GetPortIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortId.Get(), o.PortId.IsSet()
}

// HasPortId returns a boolean if a field has been set.
func (o *Network) HasPortId() bool {
	if o != nil && o.PortId.IsSet() {
		return true
	}

	return false
}

// SetPortId gets a reference to the given NullableString and assigns it to the PortId field.
func (o *Network) SetPortId(v string) {
	o.PortId.Set(&v)
}

// SetPortIdNil sets the value for PortId to be an explicit nil
func (o *Network) SetPortIdNil() {
	o.PortId.Set(nil)
}

// UnsetPortId ensures that no value is present for PortId, not even an explicit nil
func (o *Network) UnsetPortId() {
	o.PortId.Unset()
}

// GetPublicIpId returns the PublicIpId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Network) GetPublicIpId() string {
	if o == nil || IsNil(o.PublicIpId.Get()) {
		var ret string
		return ret
	}
	return *o.PublicIpId.Get()
}

// GetPublicIpIdOk returns a tuple with the PublicIpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Network) GetPublicIpIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicIpId.Get(), o.PublicIpId.IsSet()
}

// HasPublicIpId returns a boolean if a field has been set.
func (o *Network) HasPublicIpId() bool {
	if o != nil && o.PublicIpId.IsSet() {
		return true
	}

	return false
}

// SetPublicIpId gets a reference to the given NullableString and assigns it to the PublicIpId field.
func (o *Network) SetPublicIpId(v string) {
	o.PublicIpId.Set(&v)
}

// SetPublicIpIdNil sets the value for PublicIpId to be an explicit nil
func (o *Network) SetPublicIpIdNil() {
	o.PublicIpId.Set(nil)
}

// UnsetPublicIpId ensures that no value is present for PublicIpId, not even an explicit nil
func (o *Network) UnsetPublicIpId() {
	o.PublicIpId.Unset()
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Network) GetSubnetId() string {
	if o == nil || IsNil(o.SubnetId.Get()) {
		var ret string
		return ret
	}
	return *o.SubnetId.Get()
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Network) GetSubnetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetId.Get(), o.SubnetId.IsSet()
}

// HasSubnetId returns a boolean if a field has been set.
func (o *Network) HasSubnetId() bool {
	if o != nil && o.SubnetId.IsSet() {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given NullableString and assigns it to the SubnetId field.
func (o *Network) SetSubnetId(v string) {
	o.SubnetId.Set(&v)
}

// SetSubnetIdNil sets the value for SubnetId to be an explicit nil
func (o *Network) SetSubnetIdNil() {
	o.SubnetId.Set(nil)
}

// UnsetSubnetId ensures that no value is present for SubnetId, not even an explicit nil
func (o *Network) UnsetSubnetId() {
	o.SubnetId.Unset()
}

func (o Network) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Network) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FixedIp.IsSet() {
		toSerialize["fixed_ip"] = o.FixedIp.Get()
	}
	if o.PortId.IsSet() {
		toSerialize["port_id"] = o.PortId.Get()
	}
	if o.PublicIpId.IsSet() {
		toSerialize["public_ip_id"] = o.PublicIpId.Get()
	}
	if o.SubnetId.IsSet() {
		toSerialize["subnet_id"] = o.SubnetId.Get()
	}
	return toSerialize, nil
}

type NullableNetwork struct {
	value *Network
	isSet bool
}

func (v NullableNetwork) Get() *Network {
	return v.value
}

func (v *NullableNetwork) Set(val *Network) {
	v.value = val
	v.isSet = true
}

func (v NullableNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetwork(val *Network) *NullableNetwork {
	return &NullableNetwork{value: val, isSet: true}
}

func (v NullableNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
