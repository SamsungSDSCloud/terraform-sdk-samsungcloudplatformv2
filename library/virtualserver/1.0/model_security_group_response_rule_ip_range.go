/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SecurityGroupResponseRuleIpRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityGroupResponseRuleIpRange{}

// SecurityGroupResponseRuleIpRange struct for SecurityGroupResponseRuleIpRange
type SecurityGroupResponseRuleIpRange struct {
	// Cidr
	Cidr string `json:"cidr"`
}

type _SecurityGroupResponseRuleIpRange SecurityGroupResponseRuleIpRange

// NewSecurityGroupResponseRuleIpRange instantiates a new SecurityGroupResponseRuleIpRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityGroupResponseRuleIpRange(cidr string) *SecurityGroupResponseRuleIpRange {
	this := SecurityGroupResponseRuleIpRange{}
	this.Cidr = cidr
	return &this
}

// NewSecurityGroupResponseRuleIpRangeWithDefaults instantiates a new SecurityGroupResponseRuleIpRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityGroupResponseRuleIpRangeWithDefaults() *SecurityGroupResponseRuleIpRange {
	this := SecurityGroupResponseRuleIpRange{}
	return &this
}

// GetCidr returns the Cidr field value
func (o *SecurityGroupResponseRuleIpRange) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *SecurityGroupResponseRuleIpRange) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *SecurityGroupResponseRuleIpRange) SetCidr(v string) {
	o.Cidr = v
}

func (o SecurityGroupResponseRuleIpRange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityGroupResponseRuleIpRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidr"] = o.Cidr
	return toSerialize, nil
}

func (o *SecurityGroupResponseRuleIpRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecurityGroupResponseRuleIpRange := _SecurityGroupResponseRuleIpRange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecurityGroupResponseRuleIpRange)

	if err != nil {
		return err
	}

	*o = SecurityGroupResponseRuleIpRange(varSecurityGroupResponseRuleIpRange)

	return err
}

type NullableSecurityGroupResponseRuleIpRange struct {
	value *SecurityGroupResponseRuleIpRange
	isSet bool
}

func (v NullableSecurityGroupResponseRuleIpRange) Get() *SecurityGroupResponseRuleIpRange {
	return v.value
}

func (v *NullableSecurityGroupResponseRuleIpRange) Set(val *SecurityGroupResponseRuleIpRange) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityGroupResponseRuleIpRange) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityGroupResponseRuleIpRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityGroupResponseRuleIpRange(val *SecurityGroupResponseRuleIpRange) *NullableSecurityGroupResponseRuleIpRange {
	return &NullableSecurityGroupResponseRuleIpRange{value: val, isSet: true}
}

func (v NullableSecurityGroupResponseRuleIpRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityGroupResponseRuleIpRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
