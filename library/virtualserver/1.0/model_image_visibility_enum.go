/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// ImageVisibilityEnum the model 'ImageVisibilityEnum'
type ImageVisibilityEnum string

// List of ImageVisibilityEnum
const (
	IMAGEVISIBILITYENUM_PUBLIC    ImageVisibilityEnum = "public"
	IMAGEVISIBILITYENUM_COMMUNITY ImageVisibilityEnum = "community"
	IMAGEVISIBILITYENUM_SHARED    ImageVisibilityEnum = "shared"
	IMAGEVISIBILITYENUM_PRIVATE   ImageVisibilityEnum = "private"
)

// All allowed values of ImageVisibilityEnum enum
var AllowedImageVisibilityEnumEnumValues = []ImageVisibilityEnum{
	"public",
	"community",
	"shared",
	"private",
}

func (v *ImageVisibilityEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageVisibilityEnum(value)
	for _, existing := range AllowedImageVisibilityEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageVisibilityEnum", value)
}

// NewImageVisibilityEnumFromValue returns a pointer to a valid ImageVisibilityEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageVisibilityEnumFromValue(v string) (*ImageVisibilityEnum, error) {
	ev := ImageVisibilityEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageVisibilityEnum: valid values are %v", v, AllowedImageVisibilityEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageVisibilityEnum) IsValid() bool {
	for _, existing := range AllowedImageVisibilityEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageVisibilityEnum value
func (v ImageVisibilityEnum) Ptr() *ImageVisibilityEnum {
	return &v
}

type NullableImageVisibilityEnum struct {
	value *ImageVisibilityEnum
	isSet bool
}

func (v NullableImageVisibilityEnum) Get() *ImageVisibilityEnum {
	return v.value
}

func (v *NullableImageVisibilityEnum) Set(val *ImageVisibilityEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableImageVisibilityEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableImageVisibilityEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageVisibilityEnum(val *ImageVisibilityEnum) *NullableImageVisibilityEnum {
	return &NullableImageVisibilityEnum{value: val, isSet: true}
}

func (v NullableImageVisibilityEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageVisibilityEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
