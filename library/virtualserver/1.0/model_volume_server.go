/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the VolumeServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeServer{}

// VolumeServer struct for VolumeServer
type VolumeServer struct {
	// Attached at
	AttachedAt time.Time `json:"attached_at"`
	// Device
	Device string `json:"device"`
	// Server ID
	Id string `json:"id"`
}

type _VolumeServer VolumeServer

// NewVolumeServer instantiates a new VolumeServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeServer(attachedAt time.Time, device string, id string) *VolumeServer {
	this := VolumeServer{}
	this.AttachedAt = attachedAt
	this.Device = device
	this.Id = id
	return &this
}

// NewVolumeServerWithDefaults instantiates a new VolumeServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeServerWithDefaults() *VolumeServer {
	this := VolumeServer{}
	return &this
}

// GetAttachedAt returns the AttachedAt field value
func (o *VolumeServer) GetAttachedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AttachedAt
}

// GetAttachedAtOk returns a tuple with the AttachedAt field value
// and a boolean to check if the value has been set.
func (o *VolumeServer) GetAttachedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttachedAt, true
}

// SetAttachedAt sets field value
func (o *VolumeServer) SetAttachedAt(v time.Time) {
	o.AttachedAt = v
}

// GetDevice returns the Device field value
func (o *VolumeServer) GetDevice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *VolumeServer) GetDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *VolumeServer) SetDevice(v string) {
	o.Device = v
}

// GetId returns the Id field value
func (o *VolumeServer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumeServer) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumeServer) SetId(v string) {
	o.Id = v
}

func (o VolumeServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attached_at"] = o.AttachedAt
	toSerialize["device"] = o.Device
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *VolumeServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attached_at",
		"device",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeServer := _VolumeServer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeServer)

	if err != nil {
		return err
	}

	*o = VolumeServer(varVolumeServer)

	return err
}

type NullableVolumeServer struct {
	value *VolumeServer
	isSet bool
}

func (v NullableVolumeServer) Get() *VolumeServer {
	return v.value
}

func (v *NullableVolumeServer) Set(val *VolumeServer) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeServer) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeServer(val *VolumeServer) *NullableVolumeServer {
	return &NullableVolumeServer{value: val, isSet: true}
}

func (v NullableVolumeServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
