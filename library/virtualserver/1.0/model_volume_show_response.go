/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the VolumeShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeShowResponse{}

// VolumeShowResponse struct for VolumeShowResponse
type VolumeShowResponse struct {
	// Bootable
	Bootable bool `json:"bootable"`
	// Created at
	CreatedAt time.Time `json:"created_at"`
	// Encrypted
	Encrypted bool `json:"encrypted"`
	// Volume ID
	Id         string       `json:"id"`
	ModifiedAt NullableTime `json:"modified_at"`
	// Multiattach
	Multiattach bool           `json:"multiattach"`
	Name        NullableString `json:"name,omitempty"`
	// Servers attached
	Servers []VolumeServer `json:"servers"`
	// Volume size
	Size       int32          `json:"size"`
	SnapshotId NullableString `json:"snapshot_id,omitempty"`
	// Volume state
	State string `json:"state"`
	// User ID
	UserId              string                              `json:"user_id"`
	VolumeImageMetadata NullableVolumeImageMetadataResponse `json:"volume_image_metadata,omitempty"`
	// Volume type
	VolumeType string `json:"volume_type"`
	// Volume type ID
	VolumeTypeId string `json:"volume_type_id"`
}

type _VolumeShowResponse VolumeShowResponse

// NewVolumeShowResponse instantiates a new VolumeShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeShowResponse(bootable bool, createdAt time.Time, encrypted bool, id string, modifiedAt NullableTime, multiattach bool, servers []VolumeServer, size int32, state string, userId string, volumeType string, volumeTypeId string) *VolumeShowResponse {
	this := VolumeShowResponse{}
	this.Bootable = bootable
	this.CreatedAt = createdAt
	this.Encrypted = encrypted
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.Multiattach = multiattach
	this.Servers = servers
	this.Size = size
	this.State = state
	this.UserId = userId
	this.VolumeType = volumeType
	this.VolumeTypeId = volumeTypeId
	return &this
}

// NewVolumeShowResponseWithDefaults instantiates a new VolumeShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeShowResponseWithDefaults() *VolumeShowResponse {
	this := VolumeShowResponse{}
	return &this
}

// GetBootable returns the Bootable field value
func (o *VolumeShowResponse) GetBootable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Bootable
}

// GetBootableOk returns a tuple with the Bootable field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetBootableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bootable, true
}

// SetBootable sets field value
func (o *VolumeShowResponse) SetBootable(v bool) {
	o.Bootable = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *VolumeShowResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VolumeShowResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEncrypted returns the Encrypted field value
func (o *VolumeShowResponse) GetEncrypted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetEncryptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encrypted, true
}

// SetEncrypted sets field value
func (o *VolumeShowResponse) SetEncrypted(v bool) {
	o.Encrypted = v
}

// GetId returns the Id field value
func (o *VolumeShowResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumeShowResponse) SetId(v string) {
	o.Id = v
}

// GetModifiedAt returns the ModifiedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *VolumeShowResponse) GetModifiedAt() time.Time {
	if o == nil || o.ModifiedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// SetModifiedAt sets field value
func (o *VolumeShowResponse) SetModifiedAt(v time.Time) {
	o.ModifiedAt.Set(&v)
}

// GetMultiattach returns the Multiattach field value
func (o *VolumeShowResponse) GetMultiattach() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Multiattach
}

// GetMultiattachOk returns a tuple with the Multiattach field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetMultiattachOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Multiattach, true
}

// SetMultiattach sets field value
func (o *VolumeShowResponse) SetMultiattach(v bool) {
	o.Multiattach = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeShowResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VolumeShowResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VolumeShowResponse) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *VolumeShowResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VolumeShowResponse) UnsetName() {
	o.Name.Unset()
}

// GetServers returns the Servers field value
func (o *VolumeShowResponse) GetServers() []VolumeServer {
	if o == nil {
		var ret []VolumeServer
		return ret
	}

	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetServersOk() ([]VolumeServer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Servers, true
}

// SetServers sets field value
func (o *VolumeShowResponse) SetServers(v []VolumeServer) {
	o.Servers = v
}

// GetSize returns the Size field value
func (o *VolumeShowResponse) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *VolumeShowResponse) SetSize(v int32) {
	o.Size = v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeShowResponse) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId.Get()) {
		var ret string
		return ret
	}
	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *VolumeShowResponse) HasSnapshotId() bool {
	if o != nil && o.SnapshotId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given NullableString and assigns it to the SnapshotId field.
func (o *VolumeShowResponse) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}

// SetSnapshotIdNil sets the value for SnapshotId to be an explicit nil
func (o *VolumeShowResponse) SetSnapshotIdNil() {
	o.SnapshotId.Set(nil)
}

// UnsetSnapshotId ensures that no value is present for SnapshotId, not even an explicit nil
func (o *VolumeShowResponse) UnsetSnapshotId() {
	o.SnapshotId.Unset()
}

// GetState returns the State field value
func (o *VolumeShowResponse) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VolumeShowResponse) SetState(v string) {
	o.State = v
}

// GetUserId returns the UserId field value
func (o *VolumeShowResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *VolumeShowResponse) SetUserId(v string) {
	o.UserId = v
}

// GetVolumeImageMetadata returns the VolumeImageMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeShowResponse) GetVolumeImageMetadata() VolumeImageMetadataResponse {
	if o == nil || IsNil(o.VolumeImageMetadata.Get()) {
		var ret VolumeImageMetadataResponse
		return ret
	}
	return *o.VolumeImageMetadata.Get()
}

// GetVolumeImageMetadataOk returns a tuple with the VolumeImageMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetVolumeImageMetadataOk() (*VolumeImageMetadataResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeImageMetadata.Get(), o.VolumeImageMetadata.IsSet()
}

// HasVolumeImageMetadata returns a boolean if a field has been set.
func (o *VolumeShowResponse) HasVolumeImageMetadata() bool {
	if o != nil && o.VolumeImageMetadata.IsSet() {
		return true
	}

	return false
}

// SetVolumeImageMetadata gets a reference to the given NullableVolumeImageMetadataResponse and assigns it to the VolumeImageMetadata field.
func (o *VolumeShowResponse) SetVolumeImageMetadata(v VolumeImageMetadataResponse) {
	o.VolumeImageMetadata.Set(&v)
}

// SetVolumeImageMetadataNil sets the value for VolumeImageMetadata to be an explicit nil
func (o *VolumeShowResponse) SetVolumeImageMetadataNil() {
	o.VolumeImageMetadata.Set(nil)
}

// UnsetVolumeImageMetadata ensures that no value is present for VolumeImageMetadata, not even an explicit nil
func (o *VolumeShowResponse) UnsetVolumeImageMetadata() {
	o.VolumeImageMetadata.Unset()
}

// GetVolumeType returns the VolumeType field value
func (o *VolumeShowResponse) GetVolumeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetVolumeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeType, true
}

// SetVolumeType sets field value
func (o *VolumeShowResponse) SetVolumeType(v string) {
	o.VolumeType = v
}

// GetVolumeTypeId returns the VolumeTypeId field value
func (o *VolumeShowResponse) GetVolumeTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeTypeId
}

// GetVolumeTypeIdOk returns a tuple with the VolumeTypeId field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetVolumeTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeTypeId, true
}

// SetVolumeTypeId sets field value
func (o *VolumeShowResponse) SetVolumeTypeId(v string) {
	o.VolumeTypeId = v
}

func (o VolumeShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bootable"] = o.Bootable
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["encrypted"] = o.Encrypted
	toSerialize["id"] = o.Id
	toSerialize["modified_at"] = o.ModifiedAt.Get()
	toSerialize["multiattach"] = o.Multiattach
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["servers"] = o.Servers
	toSerialize["size"] = o.Size
	if o.SnapshotId.IsSet() {
		toSerialize["snapshot_id"] = o.SnapshotId.Get()
	}
	toSerialize["state"] = o.State
	toSerialize["user_id"] = o.UserId
	if o.VolumeImageMetadata.IsSet() {
		toSerialize["volume_image_metadata"] = o.VolumeImageMetadata.Get()
	}
	toSerialize["volume_type"] = o.VolumeType
	toSerialize["volume_type_id"] = o.VolumeTypeId
	return toSerialize, nil
}

func (o *VolumeShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bootable",
		"created_at",
		"encrypted",
		"id",
		"modified_at",
		"multiattach",
		"servers",
		"size",
		"state",
		"user_id",
		"volume_type",
		"volume_type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeShowResponse := _VolumeShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeShowResponse)

	if err != nil {
		return err
	}

	*o = VolumeShowResponse(varVolumeShowResponse)

	return err
}

type NullableVolumeShowResponse struct {
	value *VolumeShowResponse
	isSet bool
}

func (v NullableVolumeShowResponse) Get() *VolumeShowResponse {
	return v.value
}

func (v *NullableVolumeShowResponse) Set(val *VolumeShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeShowResponse(val *VolumeShowResponse) *NullableVolumeShowResponse {
	return &NullableVolumeShowResponse{value: val, isSet: true}
}

func (v NullableVolumeShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
