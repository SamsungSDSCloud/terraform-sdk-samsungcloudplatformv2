/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VirtualserverV1AutoScalingGroupLbServerGroupsAPIService VirtualserverV1AutoScalingGroupLbServerGroupsAPI service
type VirtualserverV1AutoScalingGroupLbServerGroupsAPIService service

type VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1AutoScalingGroupLbServerGroupsAPIService
	autoScalingGroupId string
	offset             *int32
	limit              *int32
	sort               *string
}

// Offset
func (r VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest) Offset(offset int32) VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest {
	r.offset = &offset
	return r
}

// Limit
func (r VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest) Limit(limit int32) VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest {
	r.limit = &limit
	return r
}

// Sort
func (r VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest) Sort(sort string) VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest {
	r.sort = &sort
	return r
}

func (r VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest) Execute() (*AutoScalingGroupLbServerGroupListResponse, *http.Response, error) {
	return r.ApiService.ListAutoScalingGroupLbServerGroupsExecute(r)
}

/*
ListAutoScalingGroupLbServerGroups List Auto-Scaling Group LB Server Groups

List Auto-Scaling Group LB Server Groups.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest
*/
func (a *VirtualserverV1AutoScalingGroupLbServerGroupsAPIService) ListAutoScalingGroupLbServerGroups(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest {
	return VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
//
//	@return AutoScalingGroupLbServerGroupListResponse
func (a *VirtualserverV1AutoScalingGroupLbServerGroupsAPIService) ListAutoScalingGroupLbServerGroupsExecute(r VirtualserverV1AutoScalingGroupLbServerGroupsAPIListAutoScalingGroupLbServerGroupsRequest) (*AutoScalingGroupLbServerGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AutoScalingGroupLbServerGroupListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/lb-server-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest struct {
	ctx                                     context.Context
	ApiService                              *VirtualserverV1AutoScalingGroupLbServerGroupsAPIService
	autoScalingGroupId                      string
	autoScalingGroupLbServerGroupSetRequest *AutoScalingGroupLbServerGroupSetRequest
}

func (r VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest) AutoScalingGroupLbServerGroupSetRequest(autoScalingGroupLbServerGroupSetRequest AutoScalingGroupLbServerGroupSetRequest) VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest {
	r.autoScalingGroupLbServerGroupSetRequest = &autoScalingGroupLbServerGroupSetRequest
	return r
}

func (r VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateAutoScalingGroupLbServerGroupsExecute(r)
}

/*
UpdateAutoScalingGroupLbServerGroups Update Auto-Scaling Group LB Server Groups

Update Auto-Scaling Group LB Server Groups.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param autoScalingGroupId Auto-Scaling Group ID
	@return VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest
*/
func (a *VirtualserverV1AutoScalingGroupLbServerGroupsAPIService) UpdateAutoScalingGroupLbServerGroups(ctx context.Context, autoScalingGroupId string) VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest {
	return VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest{
		ApiService:         a,
		ctx:                ctx,
		autoScalingGroupId: autoScalingGroupId,
	}
}

// Execute executes the request
func (a *VirtualserverV1AutoScalingGroupLbServerGroupsAPIService) UpdateAutoScalingGroupLbServerGroupsExecute(r VirtualserverV1AutoScalingGroupLbServerGroupsAPIUpdateAutoScalingGroupLbServerGroupsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/auto-scaling-groups/{auto_scaling_group_id}/lb-server-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"auto_scaling_group_id"+"}", url.PathEscape(parameterValueToString(r.autoScalingGroupId, "autoScalingGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoScalingGroupLbServerGroupSetRequest == nil {
		return nil, reportError("autoScalingGroupLbServerGroupSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoScalingGroupLbServerGroupSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
