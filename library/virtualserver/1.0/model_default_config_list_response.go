/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DefaultConfigListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultConfigListResponse{}

// DefaultConfigListResponse struct for DefaultConfigListResponse
type DefaultConfigListResponse struct {
	// Configs
	Configs map[string]interface{} `json:"configs"`
	// Count
	Count int32 `json:"count"`
}

type _DefaultConfigListResponse DefaultConfigListResponse

// NewDefaultConfigListResponse instantiates a new DefaultConfigListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultConfigListResponse(configs map[string]interface{}, count int32) *DefaultConfigListResponse {
	this := DefaultConfigListResponse{}
	this.Configs = configs
	this.Count = count
	return &this
}

// NewDefaultConfigListResponseWithDefaults instantiates a new DefaultConfigListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultConfigListResponseWithDefaults() *DefaultConfigListResponse {
	this := DefaultConfigListResponse{}
	return &this
}

// GetConfigs returns the Configs field value
func (o *DefaultConfigListResponse) GetConfigs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value
// and a boolean to check if the value has been set.
func (o *DefaultConfigListResponse) GetConfigsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Configs, true
}

// SetConfigs sets field value
func (o *DefaultConfigListResponse) SetConfigs(v map[string]interface{}) {
	o.Configs = v
}

// GetCount returns the Count field value
func (o *DefaultConfigListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *DefaultConfigListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *DefaultConfigListResponse) SetCount(v int32) {
	o.Count = v
}

func (o DefaultConfigListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultConfigListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configs"] = o.Configs
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *DefaultConfigListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"configs",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDefaultConfigListResponse := _DefaultConfigListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDefaultConfigListResponse)

	if err != nil {
		return err
	}

	*o = DefaultConfigListResponse(varDefaultConfigListResponse)

	return err
}

type NullableDefaultConfigListResponse struct {
	value *DefaultConfigListResponse
	isSet bool
}

func (v NullableDefaultConfigListResponse) Get() *DefaultConfigListResponse {
	return v.value
}

func (v *NullableDefaultConfigListResponse) Set(val *DefaultConfigListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultConfigListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultConfigListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultConfigListResponse(val *DefaultConfigListResponse) *NullableDefaultConfigListResponse {
	return &NullableDefaultConfigListResponse{value: val, isSet: true}
}

func (v NullableDefaultConfigListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultConfigListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
