/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InterfaceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceResponse{}

// InterfaceResponse struct for InterfaceResponse
type InterfaceResponse struct {
	// Fixed IP List
	FixedIps []InterfaceAttachmentFixedIp `json:"fixed_ips"`
	// MAC Address
	MacAddr string `json:"mac_addr"`
	// Port ID
	PortId string `json:"port_id"`
	// Port State
	PortState string `json:"port_state"`
	// Private Static NAT
	PrivateStaticNat *PrivateStaticNat `json:"private_static_nat,omitempty"`
	// Public Static NAT
	StaticNat *PublicStaticNat `json:"static_nat,omitempty"`
	// Subnet ID
	SubnetId string `json:"subnet_id"`
}

type _InterfaceResponse InterfaceResponse

// NewInterfaceResponse instantiates a new InterfaceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceResponse(fixedIps []InterfaceAttachmentFixedIp, macAddr string, portId string, portState string, subnetId string) *InterfaceResponse {
	this := InterfaceResponse{}
	this.FixedIps = fixedIps
	this.MacAddr = macAddr
	this.PortId = portId
	this.PortState = portState
	this.SubnetId = subnetId
	return &this
}

// NewInterfaceResponseWithDefaults instantiates a new InterfaceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceResponseWithDefaults() *InterfaceResponse {
	this := InterfaceResponse{}
	return &this
}

// GetFixedIps returns the FixedIps field value
func (o *InterfaceResponse) GetFixedIps() []InterfaceAttachmentFixedIp {
	if o == nil {
		var ret []InterfaceAttachmentFixedIp
		return ret
	}

	return o.FixedIps
}

// GetFixedIpsOk returns a tuple with the FixedIps field value
// and a boolean to check if the value has been set.
func (o *InterfaceResponse) GetFixedIpsOk() ([]InterfaceAttachmentFixedIp, bool) {
	if o == nil {
		return nil, false
	}
	return o.FixedIps, true
}

// SetFixedIps sets field value
func (o *InterfaceResponse) SetFixedIps(v []InterfaceAttachmentFixedIp) {
	o.FixedIps = v
}

// GetMacAddr returns the MacAddr field value
func (o *InterfaceResponse) GetMacAddr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MacAddr
}

// GetMacAddrOk returns a tuple with the MacAddr field value
// and a boolean to check if the value has been set.
func (o *InterfaceResponse) GetMacAddrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MacAddr, true
}

// SetMacAddr sets field value
func (o *InterfaceResponse) SetMacAddr(v string) {
	o.MacAddr = v
}

// GetPortId returns the PortId field value
func (o *InterfaceResponse) GetPortId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value
// and a boolean to check if the value has been set.
func (o *InterfaceResponse) GetPortIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortId, true
}

// SetPortId sets field value
func (o *InterfaceResponse) SetPortId(v string) {
	o.PortId = v
}

// GetPortState returns the PortState field value
func (o *InterfaceResponse) GetPortState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortState
}

// GetPortStateOk returns a tuple with the PortState field value
// and a boolean to check if the value has been set.
func (o *InterfaceResponse) GetPortStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortState, true
}

// SetPortState sets field value
func (o *InterfaceResponse) SetPortState(v string) {
	o.PortState = v
}

// GetPrivateStaticNat returns the PrivateStaticNat field value if set, zero value otherwise.
func (o *InterfaceResponse) GetPrivateStaticNat() PrivateStaticNat {
	if o == nil || IsNil(o.PrivateStaticNat) {
		var ret PrivateStaticNat
		return ret
	}
	return *o.PrivateStaticNat
}

// GetPrivateStaticNatOk returns a tuple with the PrivateStaticNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceResponse) GetPrivateStaticNatOk() (*PrivateStaticNat, bool) {
	if o == nil || IsNil(o.PrivateStaticNat) {
		return nil, false
	}
	return o.PrivateStaticNat, true
}

// HasPrivateStaticNat returns a boolean if a field has been set.
func (o *InterfaceResponse) HasPrivateStaticNat() bool {
	if o != nil && !IsNil(o.PrivateStaticNat) {
		return true
	}

	return false
}

// SetPrivateStaticNat gets a reference to the given PrivateStaticNat and assigns it to the PrivateStaticNat field.
func (o *InterfaceResponse) SetPrivateStaticNat(v PrivateStaticNat) {
	o.PrivateStaticNat = &v
}

// GetStaticNat returns the StaticNat field value if set, zero value otherwise.
func (o *InterfaceResponse) GetStaticNat() PublicStaticNat {
	if o == nil || IsNil(o.StaticNat) {
		var ret PublicStaticNat
		return ret
	}
	return *o.StaticNat
}

// GetStaticNatOk returns a tuple with the StaticNat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceResponse) GetStaticNatOk() (*PublicStaticNat, bool) {
	if o == nil || IsNil(o.StaticNat) {
		return nil, false
	}
	return o.StaticNat, true
}

// HasStaticNat returns a boolean if a field has been set.
func (o *InterfaceResponse) HasStaticNat() bool {
	if o != nil && !IsNil(o.StaticNat) {
		return true
	}

	return false
}

// SetStaticNat gets a reference to the given PublicStaticNat and assigns it to the StaticNat field.
func (o *InterfaceResponse) SetStaticNat(v PublicStaticNat) {
	o.StaticNat = &v
}

// GetSubnetId returns the SubnetId field value
func (o *InterfaceResponse) GetSubnetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value
// and a boolean to check if the value has been set.
func (o *InterfaceResponse) GetSubnetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetId, true
}

// SetSubnetId sets field value
func (o *InterfaceResponse) SetSubnetId(v string) {
	o.SubnetId = v
}

func (o InterfaceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fixed_ips"] = o.FixedIps
	toSerialize["mac_addr"] = o.MacAddr
	toSerialize["port_id"] = o.PortId
	toSerialize["port_state"] = o.PortState
	if !IsNil(o.PrivateStaticNat) {
		toSerialize["private_static_nat"] = o.PrivateStaticNat
	}
	if !IsNil(o.StaticNat) {
		toSerialize["static_nat"] = o.StaticNat
	}
	toSerialize["subnet_id"] = o.SubnetId
	return toSerialize, nil
}

func (o *InterfaceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fixed_ips",
		"mac_addr",
		"port_id",
		"port_state",
		"subnet_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterfaceResponse := _InterfaceResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInterfaceResponse)

	if err != nil {
		return err
	}

	*o = InterfaceResponse(varInterfaceResponse)

	return err
}

type NullableInterfaceResponse struct {
	value *InterfaceResponse
	isSet bool
}

func (v NullableInterfaceResponse) Get() *InterfaceResponse {
	return v.value
}

func (v *NullableInterfaceResponse) Set(val *InterfaceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceResponse(val *InterfaceResponse) *NullableInterfaceResponse {
	return &NullableInterfaceResponse{value: val, isSet: true}
}

func (v NullableInterfaceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
