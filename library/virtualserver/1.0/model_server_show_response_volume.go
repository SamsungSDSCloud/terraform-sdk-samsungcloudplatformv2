/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerShowResponseVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerShowResponseVolume{}

// ServerShowResponseVolume struct for ServerShowResponseVolume
type ServerShowResponseVolume struct {
	// Delete on termination
	DeleteOnTermination bool `json:"delete_on_termination"`
	// Volume ID
	Id string `json:"id"`
}

type _ServerShowResponseVolume ServerShowResponseVolume

// NewServerShowResponseVolume instantiates a new ServerShowResponseVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerShowResponseVolume(deleteOnTermination bool, id string) *ServerShowResponseVolume {
	this := ServerShowResponseVolume{}
	this.DeleteOnTermination = deleteOnTermination
	this.Id = id
	return &this
}

// NewServerShowResponseVolumeWithDefaults instantiates a new ServerShowResponseVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerShowResponseVolumeWithDefaults() *ServerShowResponseVolume {
	this := ServerShowResponseVolume{}
	return &this
}

// GetDeleteOnTermination returns the DeleteOnTermination field value
func (o *ServerShowResponseVolume) GetDeleteOnTermination() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DeleteOnTermination
}

// GetDeleteOnTerminationOk returns a tuple with the DeleteOnTermination field value
// and a boolean to check if the value has been set.
func (o *ServerShowResponseVolume) GetDeleteOnTerminationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteOnTermination, true
}

// SetDeleteOnTermination sets field value
func (o *ServerShowResponseVolume) SetDeleteOnTermination(v bool) {
	o.DeleteOnTermination = v
}

// GetId returns the Id field value
func (o *ServerShowResponseVolume) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerShowResponseVolume) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerShowResponseVolume) SetId(v string) {
	o.Id = v
}

func (o ServerShowResponseVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerShowResponseVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delete_on_termination"] = o.DeleteOnTermination
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *ServerShowResponseVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delete_on_termination",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerShowResponseVolume := _ServerShowResponseVolume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerShowResponseVolume)

	if err != nil {
		return err
	}

	*o = ServerShowResponseVolume(varServerShowResponseVolume)

	return err
}

type NullableServerShowResponseVolume struct {
	value *ServerShowResponseVolume
	isSet bool
}

func (v NullableServerShowResponseVolume) Get() *ServerShowResponseVolume {
	return v.value
}

func (v *NullableServerShowResponseVolume) Set(val *ServerShowResponseVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableServerShowResponseVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableServerShowResponseVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerShowResponseVolume(val *ServerShowResponseVolume) *NullableServerShowResponseVolume {
	return &NullableServerShowResponseVolume{value: val, isSet: true}
}

func (v NullableServerShowResponseVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerShowResponseVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
