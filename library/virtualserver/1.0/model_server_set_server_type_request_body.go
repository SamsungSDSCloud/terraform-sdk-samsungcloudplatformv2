/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerSetServerTypeRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerSetServerTypeRequestBody{}

// ServerSetServerTypeRequestBody struct for ServerSetServerTypeRequestBody
type ServerSetServerTypeRequestBody struct {
	// Server type
	ServerType string `json:"server_type"`
}

type _ServerSetServerTypeRequestBody ServerSetServerTypeRequestBody

// NewServerSetServerTypeRequestBody instantiates a new ServerSetServerTypeRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSetServerTypeRequestBody(serverType string) *ServerSetServerTypeRequestBody {
	this := ServerSetServerTypeRequestBody{}
	this.ServerType = serverType
	return &this
}

// NewServerSetServerTypeRequestBodyWithDefaults instantiates a new ServerSetServerTypeRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSetServerTypeRequestBodyWithDefaults() *ServerSetServerTypeRequestBody {
	this := ServerSetServerTypeRequestBody{}
	return &this
}

// GetServerType returns the ServerType field value
func (o *ServerSetServerTypeRequestBody) GetServerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value
// and a boolean to check if the value has been set.
func (o *ServerSetServerTypeRequestBody) GetServerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerType, true
}

// SetServerType sets field value
func (o *ServerSetServerTypeRequestBody) SetServerType(v string) {
	o.ServerType = v
}

func (o ServerSetServerTypeRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerSetServerTypeRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["server_type"] = o.ServerType
	return toSerialize, nil
}

func (o *ServerSetServerTypeRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"server_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerSetServerTypeRequestBody := _ServerSetServerTypeRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerSetServerTypeRequestBody)

	if err != nil {
		return err
	}

	*o = ServerSetServerTypeRequestBody(varServerSetServerTypeRequestBody)

	return err
}

type NullableServerSetServerTypeRequestBody struct {
	value *ServerSetServerTypeRequestBody
	isSet bool
}

func (v NullableServerSetServerTypeRequestBody) Get() *ServerSetServerTypeRequestBody {
	return v.value
}

func (v *NullableServerSetServerTypeRequestBody) Set(val *ServerSetServerTypeRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSetServerTypeRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSetServerTypeRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSetServerTypeRequestBody(val *ServerSetServerTypeRequestBody) *NullableServerSetServerTypeRequestBody {
	return &NullableServerSetServerTypeRequestBody{value: val, isSet: true}
}

func (v NullableServerSetServerTypeRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSetServerTypeRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
