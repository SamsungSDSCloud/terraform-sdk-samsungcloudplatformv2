/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VirtualserverV1VirtualserverV1ImagesAPIService VirtualserverV1VirtualserverV1ImagesAPI service
type VirtualserverV1VirtualserverV1ImagesAPIService service

type VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest struct {
	ctx                context.Context
	ApiService         *VirtualserverV1VirtualserverV1ImagesAPIService
	imageCreateRequest *ImageCreateRequest
}

func (r VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest) ImageCreateRequest(imageCreateRequest ImageCreateRequest) VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest {
	r.imageCreateRequest = &imageCreateRequest
	return r
}

func (r VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest) Execute() (*ImageShowResponse, *http.Response, error) {
	return r.ApiService.CreateImageExecute(r)
}

/*
CreateImage Create Image

Create Image.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest
*/
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) CreateImage(ctx context.Context) VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest {
	return VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ImageShowResponse
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) CreateImageExecute(r VirtualserverV1VirtualserverV1ImagesAPICreateImageRequest) (*ImageShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageCreateRequest == nil {
		return localVarReturnValue, nil, reportError("imageCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1VirtualserverV1ImagesAPIDeleteImageRequest struct {
	ctx        context.Context
	ApiService *VirtualserverV1VirtualserverV1ImagesAPIService
	imageId    string
}

func (r VirtualserverV1VirtualserverV1ImagesAPIDeleteImageRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteImageExecute(r)
}

/*
DeleteImage Delete Image

Delete Image.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param imageId Image ID
	@return VirtualserverV1VirtualserverV1ImagesAPIDeleteImageRequest
*/
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) DeleteImage(ctx context.Context, imageId string) VirtualserverV1VirtualserverV1ImagesAPIDeleteImageRequest {
	return VirtualserverV1VirtualserverV1ImagesAPIDeleteImageRequest{
		ApiService: a,
		ctx:        ctx,
		imageId:    imageId,
	}
}

// Execute executes the request
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) DeleteImageExecute(r VirtualserverV1VirtualserverV1ImagesAPIDeleteImageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/images/{image_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"image_id"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest struct {
	ctx                  context.Context
	ApiService           *VirtualserverV1VirtualserverV1ImagesAPIService
	limit                *int32
	marker               *string
	scpImageType         *string
	scpOriginalImageType *string
	name                 *string
	osDistro             *string
	status               *string
	visibility           *ImageVisibilityEnum
	sort                 *string
}

// Limit
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) Limit(limit int32) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.limit = &limit
	return r
}

// Marker
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) Marker(marker string) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.marker = &marker
	return r
}

// Image type
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) ScpImageType(scpImageType string) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.scpImageType = &scpImageType
	return r
}

// Original Image type
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) ScpOriginalImageType(scpOriginalImageType string) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.scpOriginalImageType = &scpOriginalImageType
	return r
}

// Name
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) Name(name string) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.name = &name
	return r
}

// OS distribution
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) OsDistro(osDistro string) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.osDistro = &osDistro
	return r
}

// Status
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) Status(status string) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.status = &status
	return r
}

// Visibility
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) Visibility(visibility ImageVisibilityEnum) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.visibility = &visibility
	return r
}

// Sort
func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) Sort(sort string) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	r.sort = &sort
	return r
}

func (r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) Execute() (*ImageListResponse, *http.Response, error) {
	return r.ApiService.ListImagesExecute(r)
}

/*
ListImages List Images

List Images.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest
*/
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) ListImages(ctx context.Context) VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest {
	return VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ImageListResponse
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) ListImagesExecute(r VirtualserverV1VirtualserverV1ImagesAPIListImagesRequest) (*ImageListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.scpImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scp_image_type", r.scpImageType, "form", "")
	}
	if r.scpOriginalImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scp_original_image_type", r.scpOriginalImageType, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.osDistro != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "os_distro", r.osDistro, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.visibility != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "visibility", r.visibility, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest struct {
	ctx                  context.Context
	ApiService           *VirtualserverV1VirtualserverV1ImagesAPIService
	scpImageType         *string
	scpOriginalImageType *string
}

// Image type
func (r VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest) ScpImageType(scpImageType string) VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest {
	r.scpImageType = &scpImageType
	return r
}

// Original Image type
func (r VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest) ScpOriginalImageType(scpOriginalImageType string) VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest {
	r.scpOriginalImageType = &scpOriginalImageType
	return r
}

func (r VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest) Execute() (*ImageListResponse, *http.Response, error) {
	return r.ApiService.ListPendingImagesExecute(r)
}

/*
ListPendingImages List pending Images

List pending Images.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest
*/
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) ListPendingImages(ctx context.Context) VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest {
	return VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ImageListResponse
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) ListPendingImagesExecute(r VirtualserverV1VirtualserverV1ImagesAPIListPendingImagesRequest) (*ImageListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/pending-images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.scpImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scp_image_type", r.scpImageType, "form", "")
	}
	if r.scpOriginalImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "scp_original_image_type", r.scpOriginalImageType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1VirtualserverV1ImagesAPIShowImageRequest struct {
	ctx        context.Context
	ApiService *VirtualserverV1VirtualserverV1ImagesAPIService
	imageId    string
}

func (r VirtualserverV1VirtualserverV1ImagesAPIShowImageRequest) Execute() (*ImageShowResponse, *http.Response, error) {
	return r.ApiService.ShowImageExecute(r)
}

/*
ShowImage Show Image

Show Image.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param imageId Image ID
	@return VirtualserverV1VirtualserverV1ImagesAPIShowImageRequest
*/
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) ShowImage(ctx context.Context, imageId string) VirtualserverV1VirtualserverV1ImagesAPIShowImageRequest {
	return VirtualserverV1VirtualserverV1ImagesAPIShowImageRequest{
		ApiService: a,
		ctx:        ctx,
		imageId:    imageId,
	}
}

// Execute executes the request
//
//	@return ImageShowResponse
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) ShowImageExecute(r VirtualserverV1VirtualserverV1ImagesAPIShowImageRequest) (*ImageShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/images/{image_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"image_id"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest struct {
	ctx             context.Context
	ApiService      *VirtualserverV1VirtualserverV1ImagesAPIService
	imageId         string
	imageSetRequest *ImageSetRequest
}

func (r VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest) ImageSetRequest(imageSetRequest ImageSetRequest) VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest {
	r.imageSetRequest = &imageSetRequest
	return r
}

func (r VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest) Execute() (*ImageShowResponse, *http.Response, error) {
	return r.ApiService.UpdateImageExecute(r)
}

/*
UpdateImage Update Image

Update Image.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param imageId Image ID
	@return VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest
*/
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) UpdateImage(ctx context.Context, imageId string) VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest {
	return VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest{
		ApiService: a,
		ctx:        ctx,
		imageId:    imageId,
	}
}

// Execute executes the request
//
//	@return ImageShowResponse
func (a *VirtualserverV1VirtualserverV1ImagesAPIService) UpdateImageExecute(r VirtualserverV1VirtualserverV1ImagesAPIUpdateImageRequest) (*ImageShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ImageShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/images/{image_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"image_id"+"}", url.PathEscape(parameterValueToString(r.imageId, "imageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageSetRequest == nil {
		return localVarReturnValue, nil, reportError("imageSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "virtualserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
