/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerGroupCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerGroupCreateRequest{}

// ServerGroupCreateRequest struct for ServerGroupCreateRequest
type ServerGroupCreateRequest struct {
	// Server Group name
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9-_ ]*$"`
	// Server Group policy
	Policy string `json:"policy" validate:"regexp=^affinity$|^anti-affinity$"`
	Tags   []Tag  `json:"tags,omitempty"`
}

type _ServerGroupCreateRequest ServerGroupCreateRequest

// NewServerGroupCreateRequest instantiates a new ServerGroupCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerGroupCreateRequest(name string, policy string) *ServerGroupCreateRequest {
	this := ServerGroupCreateRequest{}
	this.Name = name
	this.Policy = policy
	return &this
}

// NewServerGroupCreateRequestWithDefaults instantiates a new ServerGroupCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerGroupCreateRequestWithDefaults() *ServerGroupCreateRequest {
	this := ServerGroupCreateRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ServerGroupCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServerGroupCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServerGroupCreateRequest) SetName(v string) {
	o.Name = v
}

// GetPolicy returns the Policy field value
func (o *ServerGroupCreateRequest) GetPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value
// and a boolean to check if the value has been set.
func (o *ServerGroupCreateRequest) GetPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Policy, true
}

// SetPolicy sets field value
func (o *ServerGroupCreateRequest) SetPolicy(v string) {
	o.Policy = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServerGroupCreateRequest) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServerGroupCreateRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServerGroupCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *ServerGroupCreateRequest) SetTags(v []Tag) {
	o.Tags = v
}

func (o ServerGroupCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerGroupCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["policy"] = o.Policy
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *ServerGroupCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"policy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerGroupCreateRequest := _ServerGroupCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerGroupCreateRequest)

	if err != nil {
		return err
	}

	*o = ServerGroupCreateRequest(varServerGroupCreateRequest)

	return err
}

type NullableServerGroupCreateRequest struct {
	value *ServerGroupCreateRequest
	isSet bool
}

func (v NullableServerGroupCreateRequest) Get() *ServerGroupCreateRequest {
	return v.value
}

func (v *NullableServerGroupCreateRequest) Set(val *ServerGroupCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableServerGroupCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableServerGroupCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerGroupCreateRequest(val *ServerGroupCreateRequest) *NullableServerGroupCreateRequest {
	return &NullableServerGroupCreateRequest{value: val, isSet: true}
}

func (v NullableServerGroupCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerGroupCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
