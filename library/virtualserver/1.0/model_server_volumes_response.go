/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerVolumesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerVolumesResponse{}

// ServerVolumesResponse struct for ServerVolumesResponse
type ServerVolumesResponse struct {
	// Volumes
	Volumes []ServersVolumeResponse `json:"volumes"`
}

type _ServerVolumesResponse ServerVolumesResponse

// NewServerVolumesResponse instantiates a new ServerVolumesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerVolumesResponse(volumes []ServersVolumeResponse) *ServerVolumesResponse {
	this := ServerVolumesResponse{}
	this.Volumes = volumes
	return &this
}

// NewServerVolumesResponseWithDefaults instantiates a new ServerVolumesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerVolumesResponseWithDefaults() *ServerVolumesResponse {
	this := ServerVolumesResponse{}
	return &this
}

// GetVolumes returns the Volumes field value
func (o *ServerVolumesResponse) GetVolumes() []ServersVolumeResponse {
	if o == nil {
		var ret []ServersVolumeResponse
		return ret
	}

	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value
// and a boolean to check if the value has been set.
func (o *ServerVolumesResponse) GetVolumesOk() ([]ServersVolumeResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Volumes, true
}

// SetVolumes sets field value
func (o *ServerVolumesResponse) SetVolumes(v []ServersVolumeResponse) {
	o.Volumes = v
}

func (o ServerVolumesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerVolumesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["volumes"] = o.Volumes
	return toSerialize, nil
}

func (o *ServerVolumesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volumes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerVolumesResponse := _ServerVolumesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerVolumesResponse)

	if err != nil {
		return err
	}

	*o = ServerVolumesResponse(varServerVolumesResponse)

	return err
}

type NullableServerVolumesResponse struct {
	value *ServerVolumesResponse
	isSet bool
}

func (v NullableServerVolumesResponse) Get() *ServerVolumesResponse {
	return v.value
}

func (v *NullableServerVolumesResponse) Set(val *ServerVolumesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServerVolumesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServerVolumesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerVolumesResponse(val *ServerVolumesResponse) *NullableServerVolumesResponse {
	return &NullableServerVolumesResponse{value: val, isSet: true}
}

func (v NullableServerVolumesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerVolumesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
