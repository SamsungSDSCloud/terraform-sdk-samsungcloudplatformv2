/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// ServerProductOffering the model 'ServerProductOffering'
type ServerProductOffering string

// List of ServerProductOffering
const (
	SERVERPRODUCTOFFERING_VIRTUAL_SERVER ServerProductOffering = "virtual_server"
	SERVERPRODUCTOFFERING_GPU_SERVER     ServerProductOffering = "gpu_server"
	SERVERPRODUCTOFFERING_K8S_VM         ServerProductOffering = "k8s_vm"
	SERVERPRODUCTOFFERING_K8S_GPU_VM     ServerProductOffering = "k8s_gpu_vm"
)

// All allowed values of ServerProductOffering enum
var AllowedServerProductOfferingEnumValues = []ServerProductOffering{
	"virtual_server",
	"gpu_server",
	"k8s_vm",
	"k8s_gpu_vm",
}

func (v *ServerProductOffering) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerProductOffering(value)
	for _, existing := range AllowedServerProductOfferingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerProductOffering", value)
}

// NewServerProductOfferingFromValue returns a pointer to a valid ServerProductOffering
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerProductOfferingFromValue(v string) (*ServerProductOffering, error) {
	ev := ServerProductOffering(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerProductOffering: valid values are %v", v, AllowedServerProductOfferingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerProductOffering) IsValid() bool {
	for _, existing := range AllowedServerProductOfferingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerProductOffering value
func (v ServerProductOffering) Ptr() *ServerProductOffering {
	return &v
}

type NullableServerProductOffering struct {
	value *ServerProductOffering
	isSet bool
}

func (v NullableServerProductOffering) Get() *ServerProductOffering {
	return v.value
}

func (v *NullableServerProductOffering) Set(val *ServerProductOffering) {
	v.value = val
	v.isSet = true
}

func (v NullableServerProductOffering) IsSet() bool {
	return v.isSet
}

func (v *NullableServerProductOffering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerProductOffering(val *ServerProductOffering) *NullableServerProductOffering {
	return &NullableServerProductOffering{value: val, isSet: true}
}

func (v NullableServerProductOffering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerProductOffering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
