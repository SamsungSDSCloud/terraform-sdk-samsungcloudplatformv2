/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeQuotaSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeQuotaSet{}

// VolumeQuotaSet struct for VolumeQuotaSet
type VolumeQuotaSet struct {
	// Quota set id
	Id string `json:"id"`
	// Per volume size quota
	PerVolumeSize VolumeQuotaSetObject `json:"per_volume_size"`
	// Snapshot quota
	Snapshots VolumeQuotaSetObject `json:"snapshots"`
	// Usage quota
	Usages VolumeQuotaSetObject `json:"usages"`
	// Volume quota
	Volumes VolumeQuotaSetObject `json:"volumes"`
}

type _VolumeQuotaSet VolumeQuotaSet

// NewVolumeQuotaSet instantiates a new VolumeQuotaSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeQuotaSet(id string, perVolumeSize VolumeQuotaSetObject, snapshots VolumeQuotaSetObject, usages VolumeQuotaSetObject, volumes VolumeQuotaSetObject) *VolumeQuotaSet {
	this := VolumeQuotaSet{}
	this.Id = id
	this.PerVolumeSize = perVolumeSize
	this.Snapshots = snapshots
	this.Usages = usages
	this.Volumes = volumes
	return &this
}

// NewVolumeQuotaSetWithDefaults instantiates a new VolumeQuotaSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeQuotaSetWithDefaults() *VolumeQuotaSet {
	this := VolumeQuotaSet{}
	return &this
}

// GetId returns the Id field value
func (o *VolumeQuotaSet) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSet) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumeQuotaSet) SetId(v string) {
	o.Id = v
}

// GetPerVolumeSize returns the PerVolumeSize field value
func (o *VolumeQuotaSet) GetPerVolumeSize() VolumeQuotaSetObject {
	if o == nil {
		var ret VolumeQuotaSetObject
		return ret
	}

	return o.PerVolumeSize
}

// GetPerVolumeSizeOk returns a tuple with the PerVolumeSize field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSet) GetPerVolumeSizeOk() (*VolumeQuotaSetObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerVolumeSize, true
}

// SetPerVolumeSize sets field value
func (o *VolumeQuotaSet) SetPerVolumeSize(v VolumeQuotaSetObject) {
	o.PerVolumeSize = v
}

// GetSnapshots returns the Snapshots field value
func (o *VolumeQuotaSet) GetSnapshots() VolumeQuotaSetObject {
	if o == nil {
		var ret VolumeQuotaSetObject
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSet) GetSnapshotsOk() (*VolumeQuotaSetObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snapshots, true
}

// SetSnapshots sets field value
func (o *VolumeQuotaSet) SetSnapshots(v VolumeQuotaSetObject) {
	o.Snapshots = v
}

// GetUsages returns the Usages field value
func (o *VolumeQuotaSet) GetUsages() VolumeQuotaSetObject {
	if o == nil {
		var ret VolumeQuotaSetObject
		return ret
	}

	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSet) GetUsagesOk() (*VolumeQuotaSetObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usages, true
}

// SetUsages sets field value
func (o *VolumeQuotaSet) SetUsages(v VolumeQuotaSetObject) {
	o.Usages = v
}

// GetVolumes returns the Volumes field value
func (o *VolumeQuotaSet) GetVolumes() VolumeQuotaSetObject {
	if o == nil {
		var ret VolumeQuotaSetObject
		return ret
	}

	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSet) GetVolumesOk() (*VolumeQuotaSetObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volumes, true
}

// SetVolumes sets field value
func (o *VolumeQuotaSet) SetVolumes(v VolumeQuotaSetObject) {
	o.Volumes = v
}

func (o VolumeQuotaSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeQuotaSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["per_volume_size"] = o.PerVolumeSize
	toSerialize["snapshots"] = o.Snapshots
	toSerialize["usages"] = o.Usages
	toSerialize["volumes"] = o.Volumes
	return toSerialize, nil
}

func (o *VolumeQuotaSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"per_volume_size",
		"snapshots",
		"usages",
		"volumes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeQuotaSet := _VolumeQuotaSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeQuotaSet)

	if err != nil {
		return err
	}

	*o = VolumeQuotaSet(varVolumeQuotaSet)

	return err
}

type NullableVolumeQuotaSet struct {
	value *VolumeQuotaSet
	isSet bool
}

func (v NullableVolumeQuotaSet) Get() *VolumeQuotaSet {
	return v.value
}

func (v *NullableVolumeQuotaSet) Set(val *VolumeQuotaSet) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeQuotaSet) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeQuotaSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeQuotaSet(val *VolumeQuotaSet) *NullableVolumeQuotaSet {
	return &NullableVolumeQuotaSet{value: val, isSet: true}
}

func (v NullableVolumeQuotaSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeQuotaSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
