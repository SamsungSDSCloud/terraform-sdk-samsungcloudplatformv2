/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeServerAttachResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeServerAttachResponse{}

// VolumeServerAttachResponse struct for VolumeServerAttachResponse
type VolumeServerAttachResponse struct {
	// When delete server, delete volumes together
	DeleteOnTermination bool `json:"delete_on_termination"`
	// Device
	Device string `json:"device"`
	// Server ID
	ServerId string `json:"server_id"`
	// Volume ID
	VolumeId string `json:"volume_id"`
}

type _VolumeServerAttachResponse VolumeServerAttachResponse

// NewVolumeServerAttachResponse instantiates a new VolumeServerAttachResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeServerAttachResponse(deleteOnTermination bool, device string, serverId string, volumeId string) *VolumeServerAttachResponse {
	this := VolumeServerAttachResponse{}
	this.DeleteOnTermination = deleteOnTermination
	this.Device = device
	this.ServerId = serverId
	this.VolumeId = volumeId
	return &this
}

// NewVolumeServerAttachResponseWithDefaults instantiates a new VolumeServerAttachResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeServerAttachResponseWithDefaults() *VolumeServerAttachResponse {
	this := VolumeServerAttachResponse{}
	return &this
}

// GetDeleteOnTermination returns the DeleteOnTermination field value
func (o *VolumeServerAttachResponse) GetDeleteOnTermination() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DeleteOnTermination
}

// GetDeleteOnTerminationOk returns a tuple with the DeleteOnTermination field value
// and a boolean to check if the value has been set.
func (o *VolumeServerAttachResponse) GetDeleteOnTerminationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeleteOnTermination, true
}

// SetDeleteOnTermination sets field value
func (o *VolumeServerAttachResponse) SetDeleteOnTermination(v bool) {
	o.DeleteOnTermination = v
}

// GetDevice returns the Device field value
func (o *VolumeServerAttachResponse) GetDevice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *VolumeServerAttachResponse) GetDeviceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *VolumeServerAttachResponse) SetDevice(v string) {
	o.Device = v
}

// GetServerId returns the ServerId field value
func (o *VolumeServerAttachResponse) GetServerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *VolumeServerAttachResponse) GetServerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *VolumeServerAttachResponse) SetServerId(v string) {
	o.ServerId = v
}

// GetVolumeId returns the VolumeId field value
func (o *VolumeServerAttachResponse) GetVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value
// and a boolean to check if the value has been set.
func (o *VolumeServerAttachResponse) GetVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeId, true
}

// SetVolumeId sets field value
func (o *VolumeServerAttachResponse) SetVolumeId(v string) {
	o.VolumeId = v
}

func (o VolumeServerAttachResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeServerAttachResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delete_on_termination"] = o.DeleteOnTermination
	toSerialize["device"] = o.Device
	toSerialize["server_id"] = o.ServerId
	toSerialize["volume_id"] = o.VolumeId
	return toSerialize, nil
}

func (o *VolumeServerAttachResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delete_on_termination",
		"device",
		"server_id",
		"volume_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeServerAttachResponse := _VolumeServerAttachResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeServerAttachResponse)

	if err != nil {
		return err
	}

	*o = VolumeServerAttachResponse(varVolumeServerAttachResponse)

	return err
}

type NullableVolumeServerAttachResponse struct {
	value *VolumeServerAttachResponse
	isSet bool
}

func (v NullableVolumeServerAttachResponse) Get() *VolumeServerAttachResponse {
	return v.value
}

func (v *NullableVolumeServerAttachResponse) Set(val *VolumeServerAttachResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeServerAttachResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeServerAttachResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeServerAttachResponse(val *VolumeServerAttachResponse) *NullableVolumeServerAttachResponse {
	return &NullableVolumeServerAttachResponse{value: val, isSet: true}
}

func (v NullableVolumeServerAttachResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeServerAttachResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
