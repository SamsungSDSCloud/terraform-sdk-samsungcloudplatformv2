/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// JobSchedulingState the model 'JobSchedulingState'
type JobSchedulingState string

// List of JobSchedulingState
const (
	JOBSCHEDULINGSTATE_ACTIVE   JobSchedulingState = "ACTIVE"
	JOBSCHEDULINGSTATE_INACTIVE JobSchedulingState = "INACTIVE"
	JOBSCHEDULINGSTATE_DELETED  JobSchedulingState = "DELETED"
)

// All allowed values of JobSchedulingState enum
var AllowedJobSchedulingStateEnumValues = []JobSchedulingState{
	"ACTIVE",
	"INACTIVE",
	"DELETED",
}

func (v *JobSchedulingState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobSchedulingState(value)
	for _, existing := range AllowedJobSchedulingStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobSchedulingState", value)
}

// NewJobSchedulingStateFromValue returns a pointer to a valid JobSchedulingState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobSchedulingStateFromValue(v string) (*JobSchedulingState, error) {
	ev := JobSchedulingState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobSchedulingState: valid values are %v", v, AllowedJobSchedulingStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobSchedulingState) IsValid() bool {
	for _, existing := range AllowedJobSchedulingStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobSchedulingState value
func (v JobSchedulingState) Ptr() *JobSchedulingState {
	return &v
}

type NullableJobSchedulingState struct {
	value *JobSchedulingState
	isSet bool
}

func (v NullableJobSchedulingState) Get() *JobSchedulingState {
	return v.value
}

func (v *NullableJobSchedulingState) Set(val *JobSchedulingState) {
	v.value = val
	v.isSet = true
}

func (v NullableJobSchedulingState) IsSet() bool {
	return v.isSet
}

func (v *NullableJobSchedulingState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobSchedulingState(val *JobSchedulingState) *NullableJobSchedulingState {
	return &NullableJobSchedulingState{value: val, isSet: true}
}

func (v NullableJobSchedulingState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobSchedulingState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
