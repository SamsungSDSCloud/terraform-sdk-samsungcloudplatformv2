/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// JobSchedulingFrequencyEnum the model 'JobSchedulingFrequencyEnum'
type JobSchedulingFrequencyEnum string

// List of JobSchedulingFrequencyEnum
const (
	JOBSCHEDULINGFREQUENCYENUM_ONCE    JobSchedulingFrequencyEnum = "ONCE"
	JOBSCHEDULINGFREQUENCYENUM_DAILY   JobSchedulingFrequencyEnum = "DAILY"
	JOBSCHEDULINGFREQUENCYENUM_WEEKLY  JobSchedulingFrequencyEnum = "WEEKLY"
	JOBSCHEDULINGFREQUENCYENUM_MONTHLY JobSchedulingFrequencyEnum = "MONTHLY"
)

// All allowed values of JobSchedulingFrequencyEnum enum
var AllowedJobSchedulingFrequencyEnumEnumValues = []JobSchedulingFrequencyEnum{
	"ONCE",
	"DAILY",
	"WEEKLY",
	"MONTHLY",
}

func (v *JobSchedulingFrequencyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobSchedulingFrequencyEnum(value)
	for _, existing := range AllowedJobSchedulingFrequencyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobSchedulingFrequencyEnum", value)
}

// NewJobSchedulingFrequencyEnumFromValue returns a pointer to a valid JobSchedulingFrequencyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobSchedulingFrequencyEnumFromValue(v string) (*JobSchedulingFrequencyEnum, error) {
	ev := JobSchedulingFrequencyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobSchedulingFrequencyEnum: valid values are %v", v, AllowedJobSchedulingFrequencyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobSchedulingFrequencyEnum) IsValid() bool {
	for _, existing := range AllowedJobSchedulingFrequencyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobSchedulingFrequencyEnum value
func (v JobSchedulingFrequencyEnum) Ptr() *JobSchedulingFrequencyEnum {
	return &v
}

type NullableJobSchedulingFrequencyEnum struct {
	value *JobSchedulingFrequencyEnum
	isSet bool
}

func (v NullableJobSchedulingFrequencyEnum) Get() *JobSchedulingFrequencyEnum {
	return v.value
}

func (v *NullableJobSchedulingFrequencyEnum) Set(val *JobSchedulingFrequencyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableJobSchedulingFrequencyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableJobSchedulingFrequencyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobSchedulingFrequencyEnum(val *JobSchedulingFrequencyEnum) *NullableJobSchedulingFrequencyEnum {
	return &NullableJobSchedulingFrequencyEnum{value: val, isSet: true}
}

func (v NullableJobSchedulingFrequencyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobSchedulingFrequencyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
