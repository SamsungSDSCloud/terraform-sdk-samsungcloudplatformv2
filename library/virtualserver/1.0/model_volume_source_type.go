/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// VolumeSourceType the model 'VolumeSourceType'
type VolumeSourceType string

// List of VolumeSourceType
const (
	VOLUMESOURCETYPE_BLANK VolumeSourceType = "blank"
	VOLUMESOURCETYPE_IMAGE VolumeSourceType = "image"
)

// All allowed values of VolumeSourceType enum
var AllowedVolumeSourceTypeEnumValues = []VolumeSourceType{
	"blank",
	"image",
}

func (v *VolumeSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeSourceType(value)
	for _, existing := range AllowedVolumeSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeSourceType", value)
}

// NewVolumeSourceTypeFromValue returns a pointer to a valid VolumeSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeSourceTypeFromValue(v string) (*VolumeSourceType, error) {
	ev := VolumeSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeSourceType: valid values are %v", v, AllowedVolumeSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeSourceType) IsValid() bool {
	for _, existing := range AllowedVolumeSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeSourceType value
func (v VolumeSourceType) Ptr() *VolumeSourceType {
	return &v
}

type NullableVolumeSourceType struct {
	value *VolumeSourceType
	isSet bool
}

func (v NullableVolumeSourceType) Get() *VolumeSourceType {
	return v.value
}

func (v *NullableVolumeSourceType) Set(val *VolumeSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSourceType(val *VolumeSourceType) *NullableVolumeSourceType {
	return &NullableVolumeSourceType{value: val, isSet: true}
}

func (v NullableVolumeSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
