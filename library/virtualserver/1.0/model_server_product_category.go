/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// ServerProductCategory the model 'ServerProductCategory'
type ServerProductCategory string

// List of ServerProductCategory
const (
	SERVERPRODUCTCATEGORY_COMPUTE   ServerProductCategory = "compute"
	SERVERPRODUCTCATEGORY_CONTAINER ServerProductCategory = "container"
)

// All allowed values of ServerProductCategory enum
var AllowedServerProductCategoryEnumValues = []ServerProductCategory{
	"compute",
	"container",
}

func (v *ServerProductCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerProductCategory(value)
	for _, existing := range AllowedServerProductCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerProductCategory", value)
}

// NewServerProductCategoryFromValue returns a pointer to a valid ServerProductCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerProductCategoryFromValue(v string) (*ServerProductCategory, error) {
	ev := ServerProductCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerProductCategory: valid values are %v", v, AllowedServerProductCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerProductCategory) IsValid() bool {
	for _, existing := range AllowedServerProductCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerProductCategory value
func (v ServerProductCategory) Ptr() *ServerProductCategory {
	return &v
}

type NullableServerProductCategory struct {
	value *ServerProductCategory
	isSet bool
}

func (v NullableServerProductCategory) Get() *ServerProductCategory {
	return v.value
}

func (v *NullableServerProductCategory) Set(val *ServerProductCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableServerProductCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableServerProductCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerProductCategory(val *ServerProductCategory) *NullableServerProductCategory {
	return &NullableServerProductCategory{value: val, isSet: true}
}

func (v NullableServerProductCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerProductCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
