/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the KeypairShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeypairShowResponse{}

// KeypairShowResponse struct for KeypairShowResponse
type KeypairShowResponse struct {
	// Created at
	CreatedAt time.Time `json:"created_at"`
	// Fingerprint
	Fingerprint string `json:"fingerprint"`
	// Keypair ID
	Id int32 `json:"id"`
	// Keypair name
	Name string `json:"name"`
	// Public key
	PublicKey string `json:"public_key"`
	// Keypair type
	Type string `json:"type"`
	// User ID
	UserId string `json:"user_id"`
}

type _KeypairShowResponse KeypairShowResponse

// NewKeypairShowResponse instantiates a new KeypairShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeypairShowResponse(createdAt time.Time, fingerprint string, id int32, name string, publicKey string, type_ string, userId string) *KeypairShowResponse {
	this := KeypairShowResponse{}
	this.CreatedAt = createdAt
	this.Fingerprint = fingerprint
	this.Id = id
	this.Name = name
	this.PublicKey = publicKey
	this.Type = type_
	this.UserId = userId
	return &this
}

// NewKeypairShowResponseWithDefaults instantiates a new KeypairShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeypairShowResponseWithDefaults() *KeypairShowResponse {
	this := KeypairShowResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *KeypairShowResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *KeypairShowResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *KeypairShowResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFingerprint returns the Fingerprint field value
func (o *KeypairShowResponse) GetFingerprint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value
// and a boolean to check if the value has been set.
func (o *KeypairShowResponse) GetFingerprintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fingerprint, true
}

// SetFingerprint sets field value
func (o *KeypairShowResponse) SetFingerprint(v string) {
	o.Fingerprint = v
}

// GetId returns the Id field value
func (o *KeypairShowResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *KeypairShowResponse) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *KeypairShowResponse) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *KeypairShowResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeypairShowResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeypairShowResponse) SetName(v string) {
	o.Name = v
}

// GetPublicKey returns the PublicKey field value
func (o *KeypairShowResponse) GetPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *KeypairShowResponse) GetPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKey, true
}

// SetPublicKey sets field value
func (o *KeypairShowResponse) SetPublicKey(v string) {
	o.PublicKey = v
}

// GetType returns the Type field value
func (o *KeypairShowResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KeypairShowResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KeypairShowResponse) SetType(v string) {
	o.Type = v
}

// GetUserId returns the UserId field value
func (o *KeypairShowResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *KeypairShowResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *KeypairShowResponse) SetUserId(v string) {
	o.UserId = v
}

func (o KeypairShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeypairShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["fingerprint"] = o.Fingerprint
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["public_key"] = o.PublicKey
	toSerialize["type"] = o.Type
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *KeypairShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"fingerprint",
		"id",
		"name",
		"public_key",
		"type",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeypairShowResponse := _KeypairShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeypairShowResponse)

	if err != nil {
		return err
	}

	*o = KeypairShowResponse(varKeypairShowResponse)

	return err
}

type NullableKeypairShowResponse struct {
	value *KeypairShowResponse
	isSet bool
}

func (v NullableKeypairShowResponse) Get() *KeypairShowResponse {
	return v.value
}

func (v *NullableKeypairShowResponse) Set(val *KeypairShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeypairShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeypairShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeypairShowResponse(val *KeypairShowResponse) *NullableKeypairShowResponse {
	return &NullableKeypairShowResponse{value: val, isSet: true}
}

func (v NullableKeypairShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeypairShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
