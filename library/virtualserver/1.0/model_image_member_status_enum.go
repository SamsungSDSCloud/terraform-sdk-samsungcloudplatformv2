/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// ImageMemberStatusEnum the model 'ImageMemberStatusEnum'
type ImageMemberStatusEnum string

// List of ImageMemberStatusEnum
const (
	IMAGEMEMBERSTATUSENUM_PENDING  ImageMemberStatusEnum = "pending"
	IMAGEMEMBERSTATUSENUM_ACCEPTED ImageMemberStatusEnum = "accepted"
	IMAGEMEMBERSTATUSENUM_REJECTED ImageMemberStatusEnum = "rejected"
)

// All allowed values of ImageMemberStatusEnum enum
var AllowedImageMemberStatusEnumEnumValues = []ImageMemberStatusEnum{
	"pending",
	"accepted",
	"rejected",
}

func (v *ImageMemberStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageMemberStatusEnum(value)
	for _, existing := range AllowedImageMemberStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageMemberStatusEnum", value)
}

// NewImageMemberStatusEnumFromValue returns a pointer to a valid ImageMemberStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageMemberStatusEnumFromValue(v string) (*ImageMemberStatusEnum, error) {
	ev := ImageMemberStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageMemberStatusEnum: valid values are %v", v, AllowedImageMemberStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageMemberStatusEnum) IsValid() bool {
	for _, existing := range AllowedImageMemberStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageMemberStatusEnum value
func (v ImageMemberStatusEnum) Ptr() *ImageMemberStatusEnum {
	return &v
}

type NullableImageMemberStatusEnum struct {
	value *ImageMemberStatusEnum
	isSet bool
}

func (v NullableImageMemberStatusEnum) Get() *ImageMemberStatusEnum {
	return v.value
}

func (v *NullableImageMemberStatusEnum) Set(val *ImageMemberStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableImageMemberStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableImageMemberStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageMemberStatusEnum(val *ImageMemberStatusEnum) *NullableImageMemberStatusEnum {
	return &NullableImageMemberStatusEnum{value: val, isSet: true}
}

func (v NullableImageMemberStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageMemberStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
