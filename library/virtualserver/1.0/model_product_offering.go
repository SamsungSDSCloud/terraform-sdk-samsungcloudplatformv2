/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// ProductOffering Product offering
type ProductOffering struct {
	ServerProductOffering        *ServerProductOffering
	ArrayOfServerProductOffering *[]ServerProductOffering
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ProductOffering) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into ServerProductOffering
	err = json.Unmarshal(data, &dst.ServerProductOffering)
	if err == nil {
		jsonServerProductOffering, _ := json.Marshal(dst.ServerProductOffering)
		if string(jsonServerProductOffering) == "{}" { // empty struct
			dst.ServerProductOffering = nil
		} else {
			return nil // data stored in dst.ServerProductOffering, return on the first match
		}
	} else {
		dst.ServerProductOffering = nil
	}

	// try to unmarshal JSON data into ArrayOfServerProductOffering
	err = json.Unmarshal(data, &dst.ArrayOfServerProductOffering)
	if err == nil {
		jsonArrayOfServerProductOffering, _ := json.Marshal(dst.ArrayOfServerProductOffering)
		if string(jsonArrayOfServerProductOffering) == "{}" { // empty struct
			dst.ArrayOfServerProductOffering = nil
		} else {
			return nil // data stored in dst.ArrayOfServerProductOffering, return on the first match
		}
	} else {
		dst.ArrayOfServerProductOffering = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ProductOffering)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ProductOffering) MarshalJSON() ([]byte, error) {
	if src.ServerProductOffering != nil {
		return json.Marshal(&src.ServerProductOffering)
	}

	if src.ArrayOfServerProductOffering != nil {
		return json.Marshal(&src.ArrayOfServerProductOffering)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableProductOffering struct {
	value *ProductOffering
	isSet bool
}

func (v NullableProductOffering) Get() *ProductOffering {
	return v.value
}

func (v *NullableProductOffering) Set(val *ProductOffering) {
	v.value = val
	v.isSet = true
}

func (v NullableProductOffering) IsSet() bool {
	return v.isSet
}

func (v *NullableProductOffering) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductOffering(val *ProductOffering) *NullableProductOffering {
	return &NullableProductOffering{value: val, isSet: true}
}

func (v NullableProductOffering) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductOffering) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
