/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"encoding/json"
	"fmt"
)

// PlannedComputeOsType the model 'PlannedComputeOsType'
type PlannedComputeOsType string

// List of PlannedComputeOsType
const (
	PLANNEDCOMPUTEOSTYPE_OPEN_SOURCE PlannedComputeOsType = "open_source"
	PLANNEDCOMPUTEOSTYPE_WINDOWS     PlannedComputeOsType = "windows"
	PLANNEDCOMPUTEOSTYPE_RHEL        PlannedComputeOsType = "rhel"
)

// All allowed values of PlannedComputeOsType enum
var AllowedPlannedComputeOsTypeEnumValues = []PlannedComputeOsType{
	"open_source",
	"windows",
	"rhel",
}

func (v *PlannedComputeOsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlannedComputeOsType(value)
	for _, existing := range AllowedPlannedComputeOsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlannedComputeOsType", value)
}

// NewPlannedComputeOsTypeFromValue returns a pointer to a valid PlannedComputeOsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlannedComputeOsTypeFromValue(v string) (*PlannedComputeOsType, error) {
	ev := PlannedComputeOsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlannedComputeOsType: valid values are %v", v, AllowedPlannedComputeOsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlannedComputeOsType) IsValid() bool {
	for _, existing := range AllowedPlannedComputeOsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlannedComputeOsType value
func (v PlannedComputeOsType) Ptr() *PlannedComputeOsType {
	return &v
}

type NullablePlannedComputeOsType struct {
	value *PlannedComputeOsType
	isSet bool
}

func (v NullablePlannedComputeOsType) Get() *PlannedComputeOsType {
	return v.value
}

func (v *NullablePlannedComputeOsType) Set(val *PlannedComputeOsType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedComputeOsType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedComputeOsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedComputeOsType(val *PlannedComputeOsType) *NullablePlannedComputeOsType {
	return &NullablePlannedComputeOsType{value: val, isSet: true}
}

func (v NullablePlannedComputeOsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedComputeOsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
