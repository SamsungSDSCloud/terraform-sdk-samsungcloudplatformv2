/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PublicStaticNat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicStaticNat{}

// PublicStaticNat struct for PublicStaticNat
type PublicStaticNat struct {
	// External IP Address
	ExternalIpAddress string `json:"external_ip_address"`
	// NAT ID
	Id         string         `json:"id"`
	PublicipId NullableString `json:"publicip_id,omitempty"`
	// NAT State
	State string `json:"state"`
}

type _PublicStaticNat PublicStaticNat

// NewPublicStaticNat instantiates a new PublicStaticNat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicStaticNat(externalIpAddress string, id string, state string) *PublicStaticNat {
	this := PublicStaticNat{}
	this.ExternalIpAddress = externalIpAddress
	this.Id = id
	this.State = state
	return &this
}

// NewPublicStaticNatWithDefaults instantiates a new PublicStaticNat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicStaticNatWithDefaults() *PublicStaticNat {
	this := PublicStaticNat{}
	return &this
}

// GetExternalIpAddress returns the ExternalIpAddress field value
func (o *PublicStaticNat) GetExternalIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalIpAddress
}

// GetExternalIpAddressOk returns a tuple with the ExternalIpAddress field value
// and a boolean to check if the value has been set.
func (o *PublicStaticNat) GetExternalIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalIpAddress, true
}

// SetExternalIpAddress sets field value
func (o *PublicStaticNat) SetExternalIpAddress(v string) {
	o.ExternalIpAddress = v
}

// GetId returns the Id field value
func (o *PublicStaticNat) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PublicStaticNat) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PublicStaticNat) SetId(v string) {
	o.Id = v
}

// GetPublicipId returns the PublicipId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicStaticNat) GetPublicipId() string {
	if o == nil || IsNil(o.PublicipId.Get()) {
		var ret string
		return ret
	}
	return *o.PublicipId.Get()
}

// GetPublicipIdOk returns a tuple with the PublicipId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicStaticNat) GetPublicipIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicipId.Get(), o.PublicipId.IsSet()
}

// HasPublicipId returns a boolean if a field has been set.
func (o *PublicStaticNat) HasPublicipId() bool {
	if o != nil && o.PublicipId.IsSet() {
		return true
	}

	return false
}

// SetPublicipId gets a reference to the given NullableString and assigns it to the PublicipId field.
func (o *PublicStaticNat) SetPublicipId(v string) {
	o.PublicipId.Set(&v)
}

// SetPublicipIdNil sets the value for PublicipId to be an explicit nil
func (o *PublicStaticNat) SetPublicipIdNil() {
	o.PublicipId.Set(nil)
}

// UnsetPublicipId ensures that no value is present for PublicipId, not even an explicit nil
func (o *PublicStaticNat) UnsetPublicipId() {
	o.PublicipId.Unset()
}

// GetState returns the State field value
func (o *PublicStaticNat) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PublicStaticNat) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PublicStaticNat) SetState(v string) {
	o.State = v
}

func (o PublicStaticNat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicStaticNat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["external_ip_address"] = o.ExternalIpAddress
	toSerialize["id"] = o.Id
	if o.PublicipId.IsSet() {
		toSerialize["publicip_id"] = o.PublicipId.Get()
	}
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *PublicStaticNat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"external_ip_address",
		"id",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicStaticNat := _PublicStaticNat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicStaticNat)

	if err != nil {
		return err
	}

	*o = PublicStaticNat(varPublicStaticNat)

	return err
}

type NullablePublicStaticNat struct {
	value *PublicStaticNat
	isSet bool
}

func (v NullablePublicStaticNat) Get() *PublicStaticNat {
	return v.value
}

func (v *NullablePublicStaticNat) Set(val *PublicStaticNat) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicStaticNat) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicStaticNat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicStaticNat(val *PublicStaticNat) *NullablePublicStaticNat {
	return &NullablePublicStaticNat{value: val, isSet: true}
}

func (v NullablePublicStaticNat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicStaticNat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
