/*
SCP Compute Service

SCP Compute Service

API version: 1.2.0.0rc1.dev587
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package virtualserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeQuotaSetObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeQuotaSetObject{}

// VolumeQuotaSetObject struct for VolumeQuotaSetObject
type VolumeQuotaSetObject struct {
	// Quota set in use
	InUse int32 `json:"in_use"`
	// Quota set limit
	Limit int32 `json:"limit"`
	// Quota set reserved
	Reserved int32 `json:"reserved"`
}

type _VolumeQuotaSetObject VolumeQuotaSetObject

// NewVolumeQuotaSetObject instantiates a new VolumeQuotaSetObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeQuotaSetObject(inUse int32, limit int32, reserved int32) *VolumeQuotaSetObject {
	this := VolumeQuotaSetObject{}
	this.InUse = inUse
	this.Limit = limit
	this.Reserved = reserved
	return &this
}

// NewVolumeQuotaSetObjectWithDefaults instantiates a new VolumeQuotaSetObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeQuotaSetObjectWithDefaults() *VolumeQuotaSetObject {
	this := VolumeQuotaSetObject{}
	return &this
}

// GetInUse returns the InUse field value
func (o *VolumeQuotaSetObject) GetInUse() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InUse
}

// GetInUseOk returns a tuple with the InUse field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSetObject) GetInUseOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InUse, true
}

// SetInUse sets field value
func (o *VolumeQuotaSetObject) SetInUse(v int32) {
	o.InUse = v
}

// GetLimit returns the Limit field value
func (o *VolumeQuotaSetObject) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSetObject) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *VolumeQuotaSetObject) SetLimit(v int32) {
	o.Limit = v
}

// GetReserved returns the Reserved field value
func (o *VolumeQuotaSetObject) GetReserved() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value
// and a boolean to check if the value has been set.
func (o *VolumeQuotaSetObject) GetReservedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reserved, true
}

// SetReserved sets field value
func (o *VolumeQuotaSetObject) SetReserved(v int32) {
	o.Reserved = v
}

func (o VolumeQuotaSetObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeQuotaSetObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["in_use"] = o.InUse
	toSerialize["limit"] = o.Limit
	toSerialize["reserved"] = o.Reserved
	return toSerialize, nil
}

func (o *VolumeQuotaSetObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"in_use",
		"limit",
		"reserved",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeQuotaSetObject := _VolumeQuotaSetObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeQuotaSetObject)

	if err != nil {
		return err
	}

	*o = VolumeQuotaSetObject(varVolumeQuotaSetObject)

	return err
}

type NullableVolumeQuotaSetObject struct {
	value *VolumeQuotaSetObject
	isSet bool
}

func (v NullableVolumeQuotaSetObject) Get() *VolumeQuotaSetObject {
	return v.value
}

func (v *NullableVolumeQuotaSetObject) Set(val *VolumeQuotaSetObject) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeQuotaSetObject) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeQuotaSetObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeQuotaSetObject(val *VolumeQuotaSetObject) *NullableVolumeQuotaSetObject {
	return &NullableVolumeQuotaSetObject{value: val, isSet: true}
}

func (v NullableVolumeQuotaSetObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeQuotaSetObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
