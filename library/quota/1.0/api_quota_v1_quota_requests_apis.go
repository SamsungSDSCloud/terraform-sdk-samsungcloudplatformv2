/*
OSSCP Quota Project

OSSCP Quota Project

API version: 0.0.1.dev92
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quota

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// QuotaV1QuotaRequestsAPIsAPIService QuotaV1QuotaRequestsAPIsAPI service
type QuotaV1QuotaRequestsAPIsAPIService service

type QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest struct {
	ctx              context.Context
	ApiService       *QuotaV1QuotaRequestsAPIsAPIService
	size             *int32
	page             *int32
	sort             *string
	service          *string
	quotaItem        *string
	requestClass     *string
	requestedStartAt *time.Time
	requestedEndAt   *time.Time
	appliedStartAt   *time.Time
	appliedEndAt     *time.Time
	state            *string
}

// size
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) Size(size int32) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.size = &size
	return r
}

// page
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) Page(page int32) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.page = &page
	return r
}

// sort
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) Sort(sort string) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.sort = &sort
	return r
}

// Service Name
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) Service(service string) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.service = &service
	return r
}

// Quota Item Name
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) QuotaItem(quotaItem string) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.quotaItem = &quotaItem
	return r
}

// Request Class
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) RequestClass(requestClass string) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.requestClass = &requestClass
	return r
}

// Start date of the request
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) RequestedStartAt(requestedStartAt time.Time) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.requestedStartAt = &requestedStartAt
	return r
}

// End date of the request
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) RequestedEndAt(requestedEndAt time.Time) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.requestedEndAt = &requestedEndAt
	return r
}

// Start date of the application
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) AppliedStartAt(appliedStartAt time.Time) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.appliedStartAt = &appliedStartAt
	return r
}

// End date of the application
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) AppliedEndAt(appliedEndAt time.Time) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.appliedEndAt = &appliedEndAt
	return r
}

// Request State
func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) State(state string) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	r.state = &state
	return r
}

func (r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) Execute() (*QuotaRequestListResponse, *http.Response, error) {
	return r.ApiService.ListQuotaRequestsExecute(r)
}

/*
ListQuotaRequests ListQuotaRequests

get quota requests list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest
*/
func (a *QuotaV1QuotaRequestsAPIsAPIService) ListQuotaRequests(ctx context.Context) QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest {
	return QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return QuotaRequestListResponse
func (a *QuotaV1QuotaRequestsAPIsAPIService) ListQuotaRequestsExecute(r QuotaV1QuotaRequestsAPIsAPIListQuotaRequestsRequest) (*QuotaRequestListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QuotaRequestListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/quota-requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.service != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service", r.service, "form", "")
	}
	if r.quotaItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quota_item", r.quotaItem, "form", "")
	}
	if r.requestClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_class", r.requestClass, "form", "")
	}
	if r.requestedStartAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requested_start_at", r.requestedStartAt, "form", "")
	}
	if r.requestedEndAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requested_end_at", r.requestedEndAt, "form", "")
	}
	if r.appliedStartAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "applied_start_at", r.appliedStartAt, "form", "")
	}
	if r.appliedEndAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "applied_end_at", r.appliedEndAt, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "quota 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type QuotaV1QuotaRequestsAPIsAPIShowQuotaRequestRequest struct {
	ctx        context.Context
	ApiService *QuotaV1QuotaRequestsAPIsAPIService
	requestId  string
}

func (r QuotaV1QuotaRequestsAPIsAPIShowQuotaRequestRequest) Execute() (*QuotaRequestShowResponse, *http.Response, error) {
	return r.ApiService.ShowQuotaRequestExecute(r)
}

/*
ShowQuotaRequest ShowQuotaRequest

show a specific quota request

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param requestId Request ID
	@return QuotaV1QuotaRequestsAPIsAPIShowQuotaRequestRequest
*/
func (a *QuotaV1QuotaRequestsAPIsAPIService) ShowQuotaRequest(ctx context.Context, requestId string) QuotaV1QuotaRequestsAPIsAPIShowQuotaRequestRequest {
	return QuotaV1QuotaRequestsAPIsAPIShowQuotaRequestRequest{
		ApiService: a,
		ctx:        ctx,
		requestId:  requestId,
	}
}

// Execute executes the request
//
//	@return QuotaRequestShowResponse
func (a *QuotaV1QuotaRequestsAPIsAPIService) ShowQuotaRequestExecute(r QuotaV1QuotaRequestsAPIsAPIShowQuotaRequestRequest) (*QuotaRequestShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QuotaRequestShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/quota-requests/{request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"request_id"+"}", url.PathEscape(parameterValueToString(r.requestId, "requestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "quota 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
