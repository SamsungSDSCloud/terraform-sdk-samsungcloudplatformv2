/*
OSSCP Quota Project

OSSCP Quota Project

API version: 0.0.1.dev92
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package quota

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// QuotaV1AccountQuotasAPIsAPIService QuotaV1AccountQuotasAPIsAPI service
type QuotaV1AccountQuotasAPIsAPIService service

type QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest struct {
	ctx          context.Context
	ApiService   *QuotaV1AccountQuotasAPIsAPIService
	size         *int32
	page         *int32
	sort         *string
	requestClass *string
	service      *string
	quotaItem    *string
	description  *string
}

// size
func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) Size(size int32) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	r.size = &size
	return r
}

// page
func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) Page(page int32) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	r.page = &page
	return r
}

// sort
func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) Sort(sort string) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	r.sort = &sort
	return r
}

// Classification of the quota request (e.g., Account, Region)
func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) RequestClass(requestClass string) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	r.requestClass = &requestClass
	return r
}

// Service Name
func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) Service(service string) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	r.service = &service
	return r
}

// Quota Item Name
func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) QuotaItem(quotaItem string) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	r.quotaItem = &quotaItem
	return r
}

// Description
func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) Description(description string) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	r.description = &description
	return r
}

func (r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) Execute() (*AccountQuotaListResponse, *http.Response, error) {
	return r.ApiService.ListAccountQuotaExecute(r)
}

/*
ListAccountQuota ListAccountQuota

get account quota list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest
*/
func (a *QuotaV1AccountQuotasAPIsAPIService) ListAccountQuota(ctx context.Context) QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest {
	return QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AccountQuotaListResponse
func (a *QuotaV1AccountQuotasAPIsAPIService) ListAccountQuotaExecute(r QuotaV1AccountQuotasAPIsAPIListAccountQuotaRequest) (*AccountQuotaListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AccountQuotaListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/account-quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.requestClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_class", r.requestClass, "form", "")
	}
	if r.service != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service", r.service, "form", "")
	}
	if r.quotaItem != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "quota_item", r.quotaItem, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "quota 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type QuotaV1AccountQuotasAPIsAPIShowAccountQuotaRequest struct {
	ctx            context.Context
	ApiService     *QuotaV1AccountQuotasAPIsAPIService
	accountQuotaId string
}

func (r QuotaV1AccountQuotasAPIsAPIShowAccountQuotaRequest) Execute() (*AccountQuotaShowResponse, *http.Response, error) {
	return r.ApiService.ShowAccountQuotaExecute(r)
}

/*
ShowAccountQuota ShowAccountQuota

show a specific account quota

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param accountQuotaId Account Quota ID
	@return QuotaV1AccountQuotasAPIsAPIShowAccountQuotaRequest
*/
func (a *QuotaV1AccountQuotasAPIsAPIService) ShowAccountQuota(ctx context.Context, accountQuotaId string) QuotaV1AccountQuotasAPIsAPIShowAccountQuotaRequest {
	return QuotaV1AccountQuotasAPIsAPIShowAccountQuotaRequest{
		ApiService:     a,
		ctx:            ctx,
		accountQuotaId: accountQuotaId,
	}
}

// Execute executes the request
//
//	@return AccountQuotaShowResponse
func (a *QuotaV1AccountQuotasAPIsAPIService) ShowAccountQuotaExecute(r QuotaV1AccountQuotasAPIsAPIShowAccountQuotaRequest) (*AccountQuotaShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AccountQuotaShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/account-quotas/{account_quota_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_quota_id"+"}", url.PathEscape(parameterValueToString(r.accountQuotaId, "accountQuotaId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "quota 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
