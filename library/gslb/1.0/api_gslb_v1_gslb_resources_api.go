/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7227
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gslb

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GslbV1GslbResourcesApiAPIService GslbV1GslbResourcesApiAPI service
type GslbV1GslbResourcesApiAPIService service

type GslbV1GslbResourcesApiAPIListGslbResourcesRequest struct {
	ctx        context.Context
	ApiService *GslbV1GslbResourcesApiAPIService
	gslbId     string
	size       *int32
	page       *int32
	sort       *string
}

// size
func (r GslbV1GslbResourcesApiAPIListGslbResourcesRequest) Size(size int32) GslbV1GslbResourcesApiAPIListGslbResourcesRequest {
	r.size = &size
	return r
}

// page
func (r GslbV1GslbResourcesApiAPIListGslbResourcesRequest) Page(page int32) GslbV1GslbResourcesApiAPIListGslbResourcesRequest {
	r.page = &page
	return r
}

// sort
func (r GslbV1GslbResourcesApiAPIListGslbResourcesRequest) Sort(sort string) GslbV1GslbResourcesApiAPIListGslbResourcesRequest {
	r.sort = &sort
	return r
}

func (r GslbV1GslbResourcesApiAPIListGslbResourcesRequest) Execute() (*GslbResourceListResponse, *http.Response, error) {
	return r.ApiService.ListGslbResourcesExecute(r)
}

/*
ListGslbResources ListGslbResources

The GSLB Resource List.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param gslbId The GSLB ID.
	@return GslbV1GslbResourcesApiAPIListGslbResourcesRequest
*/
func (a *GslbV1GslbResourcesApiAPIService) ListGslbResources(ctx context.Context, gslbId string) GslbV1GslbResourcesApiAPIListGslbResourcesRequest {
	return GslbV1GslbResourcesApiAPIListGslbResourcesRequest{
		ApiService: a,
		ctx:        ctx,
		gslbId:     gslbId,
	}
}

// Execute executes the request
//
//	@return GslbResourceListResponse
func (a *GslbV1GslbResourcesApiAPIService) ListGslbResourcesExecute(r GslbV1GslbResourcesApiAPIListGslbResourcesRequest) (*GslbResourceListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GslbResourceListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/gslbs/{gslb_id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"gslb_id"+"}", url.PathEscape(parameterValueToString(r.gslbId, "gslbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "gslb 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GslbV1GslbResourcesApiAPISetGslbResourcesRequest struct {
	ctx                    context.Context
	ApiService             *GslbV1GslbResourcesApiAPIService
	gslbId                 string
	gslbResourceSetRequest *GslbResourceSetRequest
}

func (r GslbV1GslbResourcesApiAPISetGslbResourcesRequest) GslbResourceSetRequest(gslbResourceSetRequest GslbResourceSetRequest) GslbV1GslbResourcesApiAPISetGslbResourcesRequest {
	r.gslbResourceSetRequest = &gslbResourceSetRequest
	return r
}

func (r GslbV1GslbResourcesApiAPISetGslbResourcesRequest) Execute() (*GslbShowResponse, *http.Response, error) {
	return r.ApiService.SetGslbResourcesExecute(r)
}

/*
SetGslbResources SetGslbResources

Set GSLB Resources.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param gslbId The GSLB ID.
	@return GslbV1GslbResourcesApiAPISetGslbResourcesRequest
*/
func (a *GslbV1GslbResourcesApiAPIService) SetGslbResources(ctx context.Context, gslbId string) GslbV1GslbResourcesApiAPISetGslbResourcesRequest {
	return GslbV1GslbResourcesApiAPISetGslbResourcesRequest{
		ApiService: a,
		ctx:        ctx,
		gslbId:     gslbId,
	}
}

// Execute executes the request
//
//	@return GslbShowResponse
func (a *GslbV1GslbResourcesApiAPIService) SetGslbResourcesExecute(r GslbV1GslbResourcesApiAPISetGslbResourcesRequest) (*GslbShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GslbShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/gslbs/{gslb_id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"gslb_id"+"}", url.PathEscape(parameterValueToString(r.gslbId, "gslbId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gslbResourceSetRequest == nil {
		return localVarReturnValue, nil, reportError("gslbResourceSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "gslb 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gslbResourceSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
