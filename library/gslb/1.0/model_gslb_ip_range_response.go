/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7227
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gslb

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GslbIpRangeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GslbIpRangeResponse{}

// GslbIpRangeResponse struct for GslbIpRangeResponse
type GslbIpRangeResponse struct {
	// The GSLB IP Range.
	GslbIpRanges []string `json:"gslb_ip_ranges"`
}

type _GslbIpRangeResponse GslbIpRangeResponse

// NewGslbIpRangeResponse instantiates a new GslbIpRangeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGslbIpRangeResponse(gslbIpRanges []string) *GslbIpRangeResponse {
	this := GslbIpRangeResponse{}
	this.GslbIpRanges = gslbIpRanges
	return &this
}

// NewGslbIpRangeResponseWithDefaults instantiates a new GslbIpRangeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGslbIpRangeResponseWithDefaults() *GslbIpRangeResponse {
	this := GslbIpRangeResponse{}
	return &this
}

// GetGslbIpRanges returns the GslbIpRanges field value
func (o *GslbIpRangeResponse) GetGslbIpRanges() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.GslbIpRanges
}

// GetGslbIpRangesOk returns a tuple with the GslbIpRanges field value
// and a boolean to check if the value has been set.
func (o *GslbIpRangeResponse) GetGslbIpRangesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GslbIpRanges, true
}

// SetGslbIpRanges sets field value
func (o *GslbIpRangeResponse) SetGslbIpRanges(v []string) {
	o.GslbIpRanges = v
}

func (o GslbIpRangeResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GslbIpRangeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gslb_ip_ranges"] = o.GslbIpRanges
	return toSerialize, nil
}

func (o *GslbIpRangeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gslb_ip_ranges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGslbIpRangeResponse := _GslbIpRangeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGslbIpRangeResponse)

	if err != nil {
		return err
	}

	*o = GslbIpRangeResponse(varGslbIpRangeResponse)

	return err
}

type NullableGslbIpRangeResponse struct {
	value *GslbIpRangeResponse
	isSet bool
}

func (v NullableGslbIpRangeResponse) Get() *GslbIpRangeResponse {
	return v.value
}

func (v *NullableGslbIpRangeResponse) Set(val *GslbIpRangeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGslbIpRangeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGslbIpRangeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGslbIpRangeResponse(val *GslbIpRangeResponse) *NullableGslbIpRangeResponse {
	return &NullableGslbIpRangeResponse{value: val, isSet: true}
}

func (v NullableGslbIpRangeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGslbIpRangeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
