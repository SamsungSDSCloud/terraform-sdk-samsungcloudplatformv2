/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7227
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gslb

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GslbHealthCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GslbHealthCheck{}

// GslbHealthCheck struct for GslbHealthCheck
type GslbHealthCheck struct {
	HealthCheckInterval     NullableInt32  `json:"health_check_interval,omitempty"`
	HealthCheckProbeTimeout NullableInt32  `json:"health_check_probe_timeout,omitempty"`
	HealthCheckUserId       NullableString `json:"health_check_user_id,omitempty"`
	HealthCheckUserPassword NullableString `json:"health_check_user_password,omitempty"`
	// The GSLB Health Check Protocol.
	Protocol      string         `json:"protocol"`
	ReceiveString NullableString `json:"receive_string,omitempty"`
	SendString    NullableString `json:"send_string,omitempty"`
	ServicePort   NullableInt32  `json:"service_port,omitempty"`
	Timeout       NullableInt32  `json:"timeout,omitempty"`
}

type _GslbHealthCheck GslbHealthCheck

// NewGslbHealthCheck instantiates a new GslbHealthCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGslbHealthCheck(protocol string) *GslbHealthCheck {
	this := GslbHealthCheck{}
	this.Protocol = protocol
	return &this
}

// NewGslbHealthCheckWithDefaults instantiates a new GslbHealthCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGslbHealthCheckWithDefaults() *GslbHealthCheck {
	this := GslbHealthCheck{}
	return &this
}

// GetHealthCheckInterval returns the HealthCheckInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetHealthCheckInterval() int32 {
	if o == nil || IsNil(o.HealthCheckInterval.Get()) {
		var ret int32
		return ret
	}
	return *o.HealthCheckInterval.Get()
}

// GetHealthCheckIntervalOk returns a tuple with the HealthCheckInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetHealthCheckIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HealthCheckInterval.Get(), o.HealthCheckInterval.IsSet()
}

// HasHealthCheckInterval returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasHealthCheckInterval() bool {
	if o != nil && o.HealthCheckInterval.IsSet() {
		return true
	}

	return false
}

// SetHealthCheckInterval gets a reference to the given NullableInt32 and assigns it to the HealthCheckInterval field.
func (o *GslbHealthCheck) SetHealthCheckInterval(v int32) {
	o.HealthCheckInterval.Set(&v)
}

// SetHealthCheckIntervalNil sets the value for HealthCheckInterval to be an explicit nil
func (o *GslbHealthCheck) SetHealthCheckIntervalNil() {
	o.HealthCheckInterval.Set(nil)
}

// UnsetHealthCheckInterval ensures that no value is present for HealthCheckInterval, not even an explicit nil
func (o *GslbHealthCheck) UnsetHealthCheckInterval() {
	o.HealthCheckInterval.Unset()
}

// GetHealthCheckProbeTimeout returns the HealthCheckProbeTimeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetHealthCheckProbeTimeout() int32 {
	if o == nil || IsNil(o.HealthCheckProbeTimeout.Get()) {
		var ret int32
		return ret
	}
	return *o.HealthCheckProbeTimeout.Get()
}

// GetHealthCheckProbeTimeoutOk returns a tuple with the HealthCheckProbeTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetHealthCheckProbeTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HealthCheckProbeTimeout.Get(), o.HealthCheckProbeTimeout.IsSet()
}

// HasHealthCheckProbeTimeout returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasHealthCheckProbeTimeout() bool {
	if o != nil && o.HealthCheckProbeTimeout.IsSet() {
		return true
	}

	return false
}

// SetHealthCheckProbeTimeout gets a reference to the given NullableInt32 and assigns it to the HealthCheckProbeTimeout field.
func (o *GslbHealthCheck) SetHealthCheckProbeTimeout(v int32) {
	o.HealthCheckProbeTimeout.Set(&v)
}

// SetHealthCheckProbeTimeoutNil sets the value for HealthCheckProbeTimeout to be an explicit nil
func (o *GslbHealthCheck) SetHealthCheckProbeTimeoutNil() {
	o.HealthCheckProbeTimeout.Set(nil)
}

// UnsetHealthCheckProbeTimeout ensures that no value is present for HealthCheckProbeTimeout, not even an explicit nil
func (o *GslbHealthCheck) UnsetHealthCheckProbeTimeout() {
	o.HealthCheckProbeTimeout.Unset()
}

// GetHealthCheckUserId returns the HealthCheckUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetHealthCheckUserId() string {
	if o == nil || IsNil(o.HealthCheckUserId.Get()) {
		var ret string
		return ret
	}
	return *o.HealthCheckUserId.Get()
}

// GetHealthCheckUserIdOk returns a tuple with the HealthCheckUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetHealthCheckUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HealthCheckUserId.Get(), o.HealthCheckUserId.IsSet()
}

// HasHealthCheckUserId returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasHealthCheckUserId() bool {
	if o != nil && o.HealthCheckUserId.IsSet() {
		return true
	}

	return false
}

// SetHealthCheckUserId gets a reference to the given NullableString and assigns it to the HealthCheckUserId field.
func (o *GslbHealthCheck) SetHealthCheckUserId(v string) {
	o.HealthCheckUserId.Set(&v)
}

// SetHealthCheckUserIdNil sets the value for HealthCheckUserId to be an explicit nil
func (o *GslbHealthCheck) SetHealthCheckUserIdNil() {
	o.HealthCheckUserId.Set(nil)
}

// UnsetHealthCheckUserId ensures that no value is present for HealthCheckUserId, not even an explicit nil
func (o *GslbHealthCheck) UnsetHealthCheckUserId() {
	o.HealthCheckUserId.Unset()
}

// GetHealthCheckUserPassword returns the HealthCheckUserPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetHealthCheckUserPassword() string {
	if o == nil || IsNil(o.HealthCheckUserPassword.Get()) {
		var ret string
		return ret
	}
	return *o.HealthCheckUserPassword.Get()
}

// GetHealthCheckUserPasswordOk returns a tuple with the HealthCheckUserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetHealthCheckUserPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HealthCheckUserPassword.Get(), o.HealthCheckUserPassword.IsSet()
}

// HasHealthCheckUserPassword returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasHealthCheckUserPassword() bool {
	if o != nil && o.HealthCheckUserPassword.IsSet() {
		return true
	}

	return false
}

// SetHealthCheckUserPassword gets a reference to the given NullableString and assigns it to the HealthCheckUserPassword field.
func (o *GslbHealthCheck) SetHealthCheckUserPassword(v string) {
	o.HealthCheckUserPassword.Set(&v)
}

// SetHealthCheckUserPasswordNil sets the value for HealthCheckUserPassword to be an explicit nil
func (o *GslbHealthCheck) SetHealthCheckUserPasswordNil() {
	o.HealthCheckUserPassword.Set(nil)
}

// UnsetHealthCheckUserPassword ensures that no value is present for HealthCheckUserPassword, not even an explicit nil
func (o *GslbHealthCheck) UnsetHealthCheckUserPassword() {
	o.HealthCheckUserPassword.Unset()
}

// GetProtocol returns the Protocol field value
func (o *GslbHealthCheck) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *GslbHealthCheck) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *GslbHealthCheck) SetProtocol(v string) {
	o.Protocol = v
}

// GetReceiveString returns the ReceiveString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetReceiveString() string {
	if o == nil || IsNil(o.ReceiveString.Get()) {
		var ret string
		return ret
	}
	return *o.ReceiveString.Get()
}

// GetReceiveStringOk returns a tuple with the ReceiveString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetReceiveStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReceiveString.Get(), o.ReceiveString.IsSet()
}

// HasReceiveString returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasReceiveString() bool {
	if o != nil && o.ReceiveString.IsSet() {
		return true
	}

	return false
}

// SetReceiveString gets a reference to the given NullableString and assigns it to the ReceiveString field.
func (o *GslbHealthCheck) SetReceiveString(v string) {
	o.ReceiveString.Set(&v)
}

// SetReceiveStringNil sets the value for ReceiveString to be an explicit nil
func (o *GslbHealthCheck) SetReceiveStringNil() {
	o.ReceiveString.Set(nil)
}

// UnsetReceiveString ensures that no value is present for ReceiveString, not even an explicit nil
func (o *GslbHealthCheck) UnsetReceiveString() {
	o.ReceiveString.Unset()
}

// GetSendString returns the SendString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetSendString() string {
	if o == nil || IsNil(o.SendString.Get()) {
		var ret string
		return ret
	}
	return *o.SendString.Get()
}

// GetSendStringOk returns a tuple with the SendString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetSendStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendString.Get(), o.SendString.IsSet()
}

// HasSendString returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasSendString() bool {
	if o != nil && o.SendString.IsSet() {
		return true
	}

	return false
}

// SetSendString gets a reference to the given NullableString and assigns it to the SendString field.
func (o *GslbHealthCheck) SetSendString(v string) {
	o.SendString.Set(&v)
}

// SetSendStringNil sets the value for SendString to be an explicit nil
func (o *GslbHealthCheck) SetSendStringNil() {
	o.SendString.Set(nil)
}

// UnsetSendString ensures that no value is present for SendString, not even an explicit nil
func (o *GslbHealthCheck) UnsetSendString() {
	o.SendString.Unset()
}

// GetServicePort returns the ServicePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetServicePort() int32 {
	if o == nil || IsNil(o.ServicePort.Get()) {
		var ret int32
		return ret
	}
	return *o.ServicePort.Get()
}

// GetServicePortOk returns a tuple with the ServicePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetServicePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicePort.Get(), o.ServicePort.IsSet()
}

// HasServicePort returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasServicePort() bool {
	if o != nil && o.ServicePort.IsSet() {
		return true
	}

	return false
}

// SetServicePort gets a reference to the given NullableInt32 and assigns it to the ServicePort field.
func (o *GslbHealthCheck) SetServicePort(v int32) {
	o.ServicePort.Set(&v)
}

// SetServicePortNil sets the value for ServicePort to be an explicit nil
func (o *GslbHealthCheck) SetServicePortNil() {
	o.ServicePort.Set(nil)
}

// UnsetServicePort ensures that no value is present for ServicePort, not even an explicit nil
func (o *GslbHealthCheck) UnsetServicePort() {
	o.ServicePort.Unset()
}

// GetTimeout returns the Timeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GslbHealthCheck) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout.Get()) {
		var ret int32
		return ret
	}
	return *o.Timeout.Get()
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GslbHealthCheck) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timeout.Get(), o.Timeout.IsSet()
}

// HasTimeout returns a boolean if a field has been set.
func (o *GslbHealthCheck) HasTimeout() bool {
	if o != nil && o.Timeout.IsSet() {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given NullableInt32 and assigns it to the Timeout field.
func (o *GslbHealthCheck) SetTimeout(v int32) {
	o.Timeout.Set(&v)
}

// SetTimeoutNil sets the value for Timeout to be an explicit nil
func (o *GslbHealthCheck) SetTimeoutNil() {
	o.Timeout.Set(nil)
}

// UnsetTimeout ensures that no value is present for Timeout, not even an explicit nil
func (o *GslbHealthCheck) UnsetTimeout() {
	o.Timeout.Unset()
}

func (o GslbHealthCheck) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GslbHealthCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HealthCheckInterval.IsSet() {
		toSerialize["health_check_interval"] = o.HealthCheckInterval.Get()
	}
	if o.HealthCheckProbeTimeout.IsSet() {
		toSerialize["health_check_probe_timeout"] = o.HealthCheckProbeTimeout.Get()
	}
	if o.HealthCheckUserId.IsSet() {
		toSerialize["health_check_user_id"] = o.HealthCheckUserId.Get()
	}
	if o.HealthCheckUserPassword.IsSet() {
		toSerialize["health_check_user_password"] = o.HealthCheckUserPassword.Get()
	}
	toSerialize["protocol"] = o.Protocol
	if o.ReceiveString.IsSet() {
		toSerialize["receive_string"] = o.ReceiveString.Get()
	}
	if o.SendString.IsSet() {
		toSerialize["send_string"] = o.SendString.Get()
	}
	if o.ServicePort.IsSet() {
		toSerialize["service_port"] = o.ServicePort.Get()
	}
	if o.Timeout.IsSet() {
		toSerialize["timeout"] = o.Timeout.Get()
	}
	return toSerialize, nil
}

func (o *GslbHealthCheck) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGslbHealthCheck := _GslbHealthCheck{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGslbHealthCheck)

	if err != nil {
		return err
	}

	*o = GslbHealthCheck(varGslbHealthCheck)

	return err
}

type NullableGslbHealthCheck struct {
	value *GslbHealthCheck
	isSet bool
}

func (v NullableGslbHealthCheck) Get() *GslbHealthCheck {
	return v.value
}

func (v *NullableGslbHealthCheck) Set(val *GslbHealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableGslbHealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableGslbHealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGslbHealthCheck(val *GslbHealthCheck) *NullableGslbHealthCheck {
	return &NullableGslbHealthCheck{value: val, isSet: true}
}

func (v NullableGslbHealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGslbHealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
