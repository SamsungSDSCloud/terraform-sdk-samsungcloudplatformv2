/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mysql

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ParameterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterRequest{}

// ParameterRequest struct for ParameterRequest
type ParameterRequest struct {
	// Parameter id
	Id string `json:"id"`
	// Parameter new value
	NewValue string `json:"new_value"`
	// Parameter old value
	OldValue string `json:"old_value"`
}

type _ParameterRequest ParameterRequest

// NewParameterRequest instantiates a new ParameterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterRequest(id string, newValue string, oldValue string) *ParameterRequest {
	this := ParameterRequest{}
	this.Id = id
	this.NewValue = newValue
	this.OldValue = oldValue
	return &this
}

// NewParameterRequestWithDefaults instantiates a new ParameterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterRequestWithDefaults() *ParameterRequest {
	this := ParameterRequest{}
	return &this
}

// GetId returns the Id field value
func (o *ParameterRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParameterRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParameterRequest) SetId(v string) {
	o.Id = v
}

// GetNewValue returns the NewValue field value
func (o *ParameterRequest) GetNewValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value
// and a boolean to check if the value has been set.
func (o *ParameterRequest) GetNewValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewValue, true
}

// SetNewValue sets field value
func (o *ParameterRequest) SetNewValue(v string) {
	o.NewValue = v
}

// GetOldValue returns the OldValue field value
func (o *ParameterRequest) GetOldValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldValue
}

// GetOldValueOk returns a tuple with the OldValue field value
// and a boolean to check if the value has been set.
func (o *ParameterRequest) GetOldValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldValue, true
}

// SetOldValue sets field value
func (o *ParameterRequest) SetOldValue(v string) {
	o.OldValue = v
}

func (o ParameterRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["new_value"] = o.NewValue
	toSerialize["old_value"] = o.OldValue
	return toSerialize, nil
}

func (o *ParameterRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"new_value",
		"old_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterRequest := _ParameterRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParameterRequest)

	if err != nil {
		return err
	}

	*o = ParameterRequest(varParameterRequest)

	return err
}

type NullableParameterRequest struct {
	value *ParameterRequest
	isSet bool
}

func (v NullableParameterRequest) Get() *ParameterRequest {
	return v.value
}

func (v *NullableParameterRequest) Set(val *ParameterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterRequest(val *ParameterRequest) *NullableParameterRequest {
	return &NullableParameterRequest{value: val, isSet: true}
}

func (v NullableParameterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
