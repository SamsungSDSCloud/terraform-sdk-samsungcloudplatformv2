/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mysql

import (
	"encoding/json"
	"fmt"
)

// DatabaseUserState the model 'DatabaseUserState'
type DatabaseUserState string

// List of DatabaseUserState
const (
	DATABASEUSERSTATE_LOCK    DatabaseUserState = "Lock"
	DATABASEUSERSTATE_UN_LOCK DatabaseUserState = "UnLock"
)

// All allowed values of DatabaseUserState enum
var AllowedDatabaseUserStateEnumValues = []DatabaseUserState{
	"Lock",
	"UnLock",
}

func (v *DatabaseUserState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatabaseUserState(value)
	for _, existing := range AllowedDatabaseUserStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatabaseUserState", value)
}

// NewDatabaseUserStateFromValue returns a pointer to a valid DatabaseUserState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatabaseUserStateFromValue(v string) (*DatabaseUserState, error) {
	ev := DatabaseUserState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatabaseUserState: valid values are %v", v, AllowedDatabaseUserStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatabaseUserState) IsValid() bool {
	for _, existing := range AllowedDatabaseUserStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatabaseUserState value
func (v DatabaseUserState) Ptr() *DatabaseUserState {
	return &v
}

type NullableDatabaseUserState struct {
	value *DatabaseUserState
	isSet bool
}

func (v NullableDatabaseUserState) Get() *DatabaseUserState {
	return v.value
}

func (v *NullableDatabaseUserState) Set(val *DatabaseUserState) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseUserState) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseUserState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseUserState(val *DatabaseUserState) *NullableDatabaseUserState {
	return &NullableDatabaseUserState{value: val, isSet: true}
}

func (v NullableDatabaseUserState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseUserState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
