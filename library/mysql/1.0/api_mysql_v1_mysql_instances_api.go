/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mysql

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MysqlV1MysqlInstancesApiAPIService MysqlV1MysqlInstancesApiAPI service
type MysqlV1MysqlInstancesApiAPIService service

type MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest struct {
	ctx                     context.Context
	ApiService              *MysqlV1MysqlInstancesApiAPIService
	instanceGroupId         string
	addBlockStoragesRequest *AddBlockStoragesRequest
}

func (r MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest) AddBlockStoragesRequest(addBlockStoragesRequest AddBlockStoragesRequest) MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest {
	r.addBlockStoragesRequest = &addBlockStoragesRequest
	return r
}

func (r MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.MysqlAddBlockStoragesExecute(r)
}

/*
MysqlAddBlockStorages Add Block Storages

Add Block Storages.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceGroupId Instance group ID
	@return MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest
*/
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlAddBlockStorages(ctx context.Context, instanceGroupId string) MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest {
	return MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest{
		ApiService:      a,
		ctx:             ctx,
		instanceGroupId: instanceGroupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlAddBlockStoragesExecute(r MysqlV1MysqlInstancesApiAPIMysqlAddBlockStoragesRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/instance-groups/{instance_group_id}/block-storage-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_group_id"+"}", url.PathEscape(parameterValueToString(r.instanceGroupId, "instanceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addBlockStoragesRequest == nil {
		return localVarReturnValue, nil, reportError("addBlockStoragesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "mysql 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addBlockStoragesRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest struct {
	ctx                            context.Context
	ApiService                     *MysqlV1MysqlInstancesApiAPIService
	blockStorageGroupId            string
	resizeBlockStorageGroupRequest *ResizeBlockStorageGroupRequest
}

func (r MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest) ResizeBlockStorageGroupRequest(resizeBlockStorageGroupRequest ResizeBlockStorageGroupRequest) MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest {
	r.resizeBlockStorageGroupRequest = &resizeBlockStorageGroupRequest
	return r
}

func (r MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.MysqlSetBlockStorageSizeExecute(r)
}

/*
MysqlSetBlockStorageSize Set Block Storage Size

Set Block Storage Size.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param blockStorageGroupId Block storage group ID
	@return MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest
*/
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlSetBlockStorageSize(ctx context.Context, blockStorageGroupId string) MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest {
	return MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest{
		ApiService:          a,
		ctx:                 ctx,
		blockStorageGroupId: blockStorageGroupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlSetBlockStorageSizeExecute(r MysqlV1MysqlInstancesApiAPIMysqlSetBlockStorageSizeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/block-storage-groups/{block_storage_group_id}/resize"
	localVarPath = strings.Replace(localVarPath, "{"+"block_storage_group_id"+"}", url.PathEscape(parameterValueToString(r.blockStorageGroupId, "blockStorageGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resizeBlockStorageGroupRequest == nil {
		return localVarReturnValue, nil, reportError("resizeBlockStorageGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "mysql 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resizeBlockStorageGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest struct {
	ctx                             context.Context
	ApiService                      *MysqlV1MysqlInstancesApiAPIService
	clusterId                       string
	updateSecurityGroupRulesRequest *UpdateSecurityGroupRulesRequest
}

func (r MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest) UpdateSecurityGroupRulesRequest(updateSecurityGroupRulesRequest UpdateSecurityGroupRulesRequest) MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest {
	r.updateSecurityGroupRulesRequest = &updateSecurityGroupRulesRequest
	return r
}

func (r MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.MysqlSetSecurityGroupRulesExecute(r)
}

/*
MysqlSetSecurityGroupRules Set Security Group Rules

Set Security Group Rules.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Cluster ID
	@return MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest
*/
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlSetSecurityGroupRules(ctx context.Context, clusterId string) MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest {
	return MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlSetSecurityGroupRulesExecute(r MysqlV1MysqlInstancesApiAPIMysqlSetSecurityGroupRulesRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/clusters/{cluster_id}/security-group-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSecurityGroupRulesRequest == nil {
		return localVarReturnValue, nil, reportError("updateSecurityGroupRulesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "mysql 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateSecurityGroupRulesRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest struct {
	ctx                        context.Context
	ApiService                 *MysqlV1MysqlInstancesApiAPIService
	instanceGroupId            string
	instanceGroupResizeRequest *InstanceGroupResizeRequest
}

func (r MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest) InstanceGroupResizeRequest(instanceGroupResizeRequest InstanceGroupResizeRequest) MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest {
	r.instanceGroupResizeRequest = &instanceGroupResizeRequest
	return r
}

func (r MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.MysqlSetServerTypeExecute(r)
}

/*
MysqlSetServerType Set Server Type

Set Server Type.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceGroupId Instance group ID
	@return MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest
*/
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlSetServerType(ctx context.Context, instanceGroupId string) MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest {
	return MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest{
		ApiService:      a,
		ctx:             ctx,
		instanceGroupId: instanceGroupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *MysqlV1MysqlInstancesApiAPIService) MysqlSetServerTypeExecute(r MysqlV1MysqlInstancesApiAPIMysqlSetServerTypeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/instance-groups/{instance_group_id}/resize"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_group_id"+"}", url.PathEscape(parameterValueToString(r.instanceGroupId, "instanceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceGroupResizeRequest == nil {
		return localVarReturnValue, nil, reportError("instanceGroupResizeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "mysql 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.instanceGroupResizeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
