/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mysql

import (
	"encoding/json"
)

// checks if the AccessControlRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessControlRequest{}

// AccessControlRequest struct for AccessControlRequest
type AccessControlRequest struct {
	DatabaseUserName NullableString `json:"database_user_name,omitempty"`
	IpAddress        NullableString `json:"ip_address,omitempty"`
}

// NewAccessControlRequest instantiates a new AccessControlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessControlRequest() *AccessControlRequest {
	this := AccessControlRequest{}
	return &this
}

// NewAccessControlRequestWithDefaults instantiates a new AccessControlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessControlRequestWithDefaults() *AccessControlRequest {
	this := AccessControlRequest{}
	return &this
}

// GetDatabaseUserName returns the DatabaseUserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessControlRequest) GetDatabaseUserName() string {
	if o == nil || IsNil(o.DatabaseUserName.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseUserName.Get()
}

// GetDatabaseUserNameOk returns a tuple with the DatabaseUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessControlRequest) GetDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseUserName.Get(), o.DatabaseUserName.IsSet()
}

// HasDatabaseUserName returns a boolean if a field has been set.
func (o *AccessControlRequest) HasDatabaseUserName() bool {
	if o != nil && o.DatabaseUserName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseUserName gets a reference to the given NullableString and assigns it to the DatabaseUserName field.
func (o *AccessControlRequest) SetDatabaseUserName(v string) {
	o.DatabaseUserName.Set(&v)
}

// SetDatabaseUserNameNil sets the value for DatabaseUserName to be an explicit nil
func (o *AccessControlRequest) SetDatabaseUserNameNil() {
	o.DatabaseUserName.Set(nil)
}

// UnsetDatabaseUserName ensures that no value is present for DatabaseUserName, not even an explicit nil
func (o *AccessControlRequest) UnsetDatabaseUserName() {
	o.DatabaseUserName.Unset()
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessControlRequest) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessControlRequest) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *AccessControlRequest) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *AccessControlRequest) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}

// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *AccessControlRequest) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *AccessControlRequest) UnsetIpAddress() {
	o.IpAddress.Unset()
}

func (o AccessControlRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessControlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseUserName.IsSet() {
		toSerialize["database_user_name"] = o.DatabaseUserName.Get()
	}
	if o.IpAddress.IsSet() {
		toSerialize["ip_address"] = o.IpAddress.Get()
	}
	return toSerialize, nil
}

type NullableAccessControlRequest struct {
	value *AccessControlRequest
	isSet bool
}

func (v NullableAccessControlRequest) Get() *AccessControlRequest {
	return v.value
}

func (v *NullableAccessControlRequest) Set(val *AccessControlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessControlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessControlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessControlRequest(val *AccessControlRequest) *NullableAccessControlRequest {
	return &NullableAccessControlRequest{value: val, isSet: true}
}

func (v NullableAccessControlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessControlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
