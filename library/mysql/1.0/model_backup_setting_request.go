/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mysql

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BackupSettingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupSettingRequest{}

// BackupSettingRequest struct for BackupSettingRequest
type BackupSettingRequest struct {
	// Backup starting time (minute)
	ArchiveFrequencyMinute string `json:"archive_frequency_minute" validate:"regexp=^(5|10|30|60)$"`
	// Backup retention period (day)
	RetentionPeriodDay string `json:"retention_period_day" validate:"regexp=^([7-9]|^[1-2]\\\\d|^3[0-5])$"`
	// Backup starting time (hour)
	StartingTimeHour string `json:"starting_time_hour" validate:"regexp=^(\\\\d|1\\\\d|2[0-3])$"`
}

type _BackupSettingRequest BackupSettingRequest

// NewBackupSettingRequest instantiates a new BackupSettingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupSettingRequest(archiveFrequencyMinute string, retentionPeriodDay string, startingTimeHour string) *BackupSettingRequest {
	this := BackupSettingRequest{}
	this.ArchiveFrequencyMinute = archiveFrequencyMinute
	this.RetentionPeriodDay = retentionPeriodDay
	this.StartingTimeHour = startingTimeHour
	return &this
}

// NewBackupSettingRequestWithDefaults instantiates a new BackupSettingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupSettingRequestWithDefaults() *BackupSettingRequest {
	this := BackupSettingRequest{}
	return &this
}

// GetArchiveFrequencyMinute returns the ArchiveFrequencyMinute field value
func (o *BackupSettingRequest) GetArchiveFrequencyMinute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArchiveFrequencyMinute
}

// GetArchiveFrequencyMinuteOk returns a tuple with the ArchiveFrequencyMinute field value
// and a boolean to check if the value has been set.
func (o *BackupSettingRequest) GetArchiveFrequencyMinuteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveFrequencyMinute, true
}

// SetArchiveFrequencyMinute sets field value
func (o *BackupSettingRequest) SetArchiveFrequencyMinute(v string) {
	o.ArchiveFrequencyMinute = v
}

// GetRetentionPeriodDay returns the RetentionPeriodDay field value
func (o *BackupSettingRequest) GetRetentionPeriodDay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RetentionPeriodDay
}

// GetRetentionPeriodDayOk returns a tuple with the RetentionPeriodDay field value
// and a boolean to check if the value has been set.
func (o *BackupSettingRequest) GetRetentionPeriodDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RetentionPeriodDay, true
}

// SetRetentionPeriodDay sets field value
func (o *BackupSettingRequest) SetRetentionPeriodDay(v string) {
	o.RetentionPeriodDay = v
}

// GetStartingTimeHour returns the StartingTimeHour field value
func (o *BackupSettingRequest) GetStartingTimeHour() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartingTimeHour
}

// GetStartingTimeHourOk returns a tuple with the StartingTimeHour field value
// and a boolean to check if the value has been set.
func (o *BackupSettingRequest) GetStartingTimeHourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartingTimeHour, true
}

// SetStartingTimeHour sets field value
func (o *BackupSettingRequest) SetStartingTimeHour(v string) {
	o.StartingTimeHour = v
}

func (o BackupSettingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupSettingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archive_frequency_minute"] = o.ArchiveFrequencyMinute
	toSerialize["retention_period_day"] = o.RetentionPeriodDay
	toSerialize["starting_time_hour"] = o.StartingTimeHour
	return toSerialize, nil
}

func (o *BackupSettingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archive_frequency_minute",
		"retention_period_day",
		"starting_time_hour",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupSettingRequest := _BackupSettingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupSettingRequest)

	if err != nil {
		return err
	}

	*o = BackupSettingRequest(varBackupSettingRequest)

	return err
}

type NullableBackupSettingRequest struct {
	value *BackupSettingRequest
	isSet bool
}

func (v NullableBackupSettingRequest) Get() *BackupSettingRequest {
	return v.value
}

func (v *NullableBackupSettingRequest) Set(val *BackupSettingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupSettingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupSettingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupSettingRequest(val *BackupSettingRequest) *NullableBackupSettingRequest {
	return &NullableBackupSettingRequest{value: val, isSet: true}
}

func (v NullableBackupSettingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupSettingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
