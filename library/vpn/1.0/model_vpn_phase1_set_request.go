/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
)

// checks if the VpnPhase1SetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnPhase1SetRequest{}

// VpnPhase1SetRequest struct for VpnPhase1SetRequest
type VpnPhase1SetRequest struct {
	DpdRetryInterval NullableInt32 `json:"dpd_retry_interval,omitempty"`
	IkeVersion NullableInt32 `json:"ike_version,omitempty"`
	PeerGatewayIp NullableString `json:"peer_gateway_ip,omitempty"`
	Phase1DiffieHellmanGroups []int32 `json:"phase1_diffie_hellman_groups,omitempty"`
	Phase1Encryptions []string `json:"phase1_encryptions,omitempty"`
	Phase1LifeTime NullableInt32 `json:"phase1_life_time,omitempty"`
	PreSharedKey NullableString `json:"pre_shared_key,omitempty"`
}

// NewVpnPhase1SetRequest instantiates a new VpnPhase1SetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnPhase1SetRequest() *VpnPhase1SetRequest {
	this := VpnPhase1SetRequest{}
	return &this
}

// NewVpnPhase1SetRequestWithDefaults instantiates a new VpnPhase1SetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnPhase1SetRequestWithDefaults() *VpnPhase1SetRequest {
	this := VpnPhase1SetRequest{}
	return &this
}

// GetDpdRetryInterval returns the DpdRetryInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase1SetRequest) GetDpdRetryInterval() int32 {
	if o == nil || IsNil(o.DpdRetryInterval.Get()) {
		var ret int32
		return ret
	}
	return *o.DpdRetryInterval.Get()
}

// GetDpdRetryIntervalOk returns a tuple with the DpdRetryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase1SetRequest) GetDpdRetryIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DpdRetryInterval.Get(), o.DpdRetryInterval.IsSet()
}

// HasDpdRetryInterval returns a boolean if a field has been set.
func (o *VpnPhase1SetRequest) HasDpdRetryInterval() bool {
	if o != nil && o.DpdRetryInterval.IsSet() {
		return true
	}

	return false
}

// SetDpdRetryInterval gets a reference to the given NullableInt32 and assigns it to the DpdRetryInterval field.
func (o *VpnPhase1SetRequest) SetDpdRetryInterval(v int32) {
	o.DpdRetryInterval.Set(&v)
}
// SetDpdRetryIntervalNil sets the value for DpdRetryInterval to be an explicit nil
func (o *VpnPhase1SetRequest) SetDpdRetryIntervalNil() {
	o.DpdRetryInterval.Set(nil)
}

// UnsetDpdRetryInterval ensures that no value is present for DpdRetryInterval, not even an explicit nil
func (o *VpnPhase1SetRequest) UnsetDpdRetryInterval() {
	o.DpdRetryInterval.Unset()
}

// GetIkeVersion returns the IkeVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase1SetRequest) GetIkeVersion() int32 {
	if o == nil || IsNil(o.IkeVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.IkeVersion.Get()
}

// GetIkeVersionOk returns a tuple with the IkeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase1SetRequest) GetIkeVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.IkeVersion.Get(), o.IkeVersion.IsSet()
}

// HasIkeVersion returns a boolean if a field has been set.
func (o *VpnPhase1SetRequest) HasIkeVersion() bool {
	if o != nil && o.IkeVersion.IsSet() {
		return true
	}

	return false
}

// SetIkeVersion gets a reference to the given NullableInt32 and assigns it to the IkeVersion field.
func (o *VpnPhase1SetRequest) SetIkeVersion(v int32) {
	o.IkeVersion.Set(&v)
}
// SetIkeVersionNil sets the value for IkeVersion to be an explicit nil
func (o *VpnPhase1SetRequest) SetIkeVersionNil() {
	o.IkeVersion.Set(nil)
}

// UnsetIkeVersion ensures that no value is present for IkeVersion, not even an explicit nil
func (o *VpnPhase1SetRequest) UnsetIkeVersion() {
	o.IkeVersion.Unset()
}

// GetPeerGatewayIp returns the PeerGatewayIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase1SetRequest) GetPeerGatewayIp() string {
	if o == nil || IsNil(o.PeerGatewayIp.Get()) {
		var ret string
		return ret
	}
	return *o.PeerGatewayIp.Get()
}

// GetPeerGatewayIpOk returns a tuple with the PeerGatewayIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase1SetRequest) GetPeerGatewayIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PeerGatewayIp.Get(), o.PeerGatewayIp.IsSet()
}

// HasPeerGatewayIp returns a boolean if a field has been set.
func (o *VpnPhase1SetRequest) HasPeerGatewayIp() bool {
	if o != nil && o.PeerGatewayIp.IsSet() {
		return true
	}

	return false
}

// SetPeerGatewayIp gets a reference to the given NullableString and assigns it to the PeerGatewayIp field.
func (o *VpnPhase1SetRequest) SetPeerGatewayIp(v string) {
	o.PeerGatewayIp.Set(&v)
}
// SetPeerGatewayIpNil sets the value for PeerGatewayIp to be an explicit nil
func (o *VpnPhase1SetRequest) SetPeerGatewayIpNil() {
	o.PeerGatewayIp.Set(nil)
}

// UnsetPeerGatewayIp ensures that no value is present for PeerGatewayIp, not even an explicit nil
func (o *VpnPhase1SetRequest) UnsetPeerGatewayIp() {
	o.PeerGatewayIp.Unset()
}

// GetPhase1DiffieHellmanGroups returns the Phase1DiffieHellmanGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase1SetRequest) GetPhase1DiffieHellmanGroups() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Phase1DiffieHellmanGroups
}

// GetPhase1DiffieHellmanGroupsOk returns a tuple with the Phase1DiffieHellmanGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase1SetRequest) GetPhase1DiffieHellmanGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Phase1DiffieHellmanGroups) {
		return nil, false
	}
	return o.Phase1DiffieHellmanGroups, true
}

// HasPhase1DiffieHellmanGroups returns a boolean if a field has been set.
func (o *VpnPhase1SetRequest) HasPhase1DiffieHellmanGroups() bool {
	if o != nil && !IsNil(o.Phase1DiffieHellmanGroups) {
		return true
	}

	return false
}

// SetPhase1DiffieHellmanGroups gets a reference to the given []int32 and assigns it to the Phase1DiffieHellmanGroups field.
func (o *VpnPhase1SetRequest) SetPhase1DiffieHellmanGroups(v []int32) {
	o.Phase1DiffieHellmanGroups = v
}

// GetPhase1Encryptions returns the Phase1Encryptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase1SetRequest) GetPhase1Encryptions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Phase1Encryptions
}

// GetPhase1EncryptionsOk returns a tuple with the Phase1Encryptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase1SetRequest) GetPhase1EncryptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Phase1Encryptions) {
		return nil, false
	}
	return o.Phase1Encryptions, true
}

// HasPhase1Encryptions returns a boolean if a field has been set.
func (o *VpnPhase1SetRequest) HasPhase1Encryptions() bool {
	if o != nil && !IsNil(o.Phase1Encryptions) {
		return true
	}

	return false
}

// SetPhase1Encryptions gets a reference to the given []string and assigns it to the Phase1Encryptions field.
func (o *VpnPhase1SetRequest) SetPhase1Encryptions(v []string) {
	o.Phase1Encryptions = v
}

// GetPhase1LifeTime returns the Phase1LifeTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase1SetRequest) GetPhase1LifeTime() int32 {
	if o == nil || IsNil(o.Phase1LifeTime.Get()) {
		var ret int32
		return ret
	}
	return *o.Phase1LifeTime.Get()
}

// GetPhase1LifeTimeOk returns a tuple with the Phase1LifeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase1SetRequest) GetPhase1LifeTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase1LifeTime.Get(), o.Phase1LifeTime.IsSet()
}

// HasPhase1LifeTime returns a boolean if a field has been set.
func (o *VpnPhase1SetRequest) HasPhase1LifeTime() bool {
	if o != nil && o.Phase1LifeTime.IsSet() {
		return true
	}

	return false
}

// SetPhase1LifeTime gets a reference to the given NullableInt32 and assigns it to the Phase1LifeTime field.
func (o *VpnPhase1SetRequest) SetPhase1LifeTime(v int32) {
	o.Phase1LifeTime.Set(&v)
}
// SetPhase1LifeTimeNil sets the value for Phase1LifeTime to be an explicit nil
func (o *VpnPhase1SetRequest) SetPhase1LifeTimeNil() {
	o.Phase1LifeTime.Set(nil)
}

// UnsetPhase1LifeTime ensures that no value is present for Phase1LifeTime, not even an explicit nil
func (o *VpnPhase1SetRequest) UnsetPhase1LifeTime() {
	o.Phase1LifeTime.Unset()
}

// GetPreSharedKey returns the PreSharedKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase1SetRequest) GetPreSharedKey() string {
	if o == nil || IsNil(o.PreSharedKey.Get()) {
		var ret string
		return ret
	}
	return *o.PreSharedKey.Get()
}

// GetPreSharedKeyOk returns a tuple with the PreSharedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase1SetRequest) GetPreSharedKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreSharedKey.Get(), o.PreSharedKey.IsSet()
}

// HasPreSharedKey returns a boolean if a field has been set.
func (o *VpnPhase1SetRequest) HasPreSharedKey() bool {
	if o != nil && o.PreSharedKey.IsSet() {
		return true
	}

	return false
}

// SetPreSharedKey gets a reference to the given NullableString and assigns it to the PreSharedKey field.
func (o *VpnPhase1SetRequest) SetPreSharedKey(v string) {
	o.PreSharedKey.Set(&v)
}
// SetPreSharedKeyNil sets the value for PreSharedKey to be an explicit nil
func (o *VpnPhase1SetRequest) SetPreSharedKeyNil() {
	o.PreSharedKey.Set(nil)
}

// UnsetPreSharedKey ensures that no value is present for PreSharedKey, not even an explicit nil
func (o *VpnPhase1SetRequest) UnsetPreSharedKey() {
	o.PreSharedKey.Unset()
}

func (o VpnPhase1SetRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnPhase1SetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DpdRetryInterval.IsSet() {
		toSerialize["dpd_retry_interval"] = o.DpdRetryInterval.Get()
	}
	if o.IkeVersion.IsSet() {
		toSerialize["ike_version"] = o.IkeVersion.Get()
	}
	if o.PeerGatewayIp.IsSet() {
		toSerialize["peer_gateway_ip"] = o.PeerGatewayIp.Get()
	}
	if o.Phase1DiffieHellmanGroups != nil {
		toSerialize["phase1_diffie_hellman_groups"] = o.Phase1DiffieHellmanGroups
	}
	if o.Phase1Encryptions != nil {
		toSerialize["phase1_encryptions"] = o.Phase1Encryptions
	}
	if o.Phase1LifeTime.IsSet() {
		toSerialize["phase1_life_time"] = o.Phase1LifeTime.Get()
	}
	if o.PreSharedKey.IsSet() {
		toSerialize["pre_shared_key"] = o.PreSharedKey.Get()
	}
	return toSerialize, nil
}

type NullableVpnPhase1SetRequest struct {
	value *VpnPhase1SetRequest
	isSet bool
}

func (v NullableVpnPhase1SetRequest) Get() *VpnPhase1SetRequest {
	return v.value
}

func (v *NullableVpnPhase1SetRequest) Set(val *VpnPhase1SetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnPhase1SetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnPhase1SetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnPhase1SetRequest(val *VpnPhase1SetRequest) *NullableVpnPhase1SetRequest {
	return &NullableVpnPhase1SetRequest{value: val, isSet: true}
}

func (v NullableVpnPhase1SetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnPhase1SetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


