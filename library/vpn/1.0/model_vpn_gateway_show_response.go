/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VpnGatewayShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnGatewayShowResponse{}

// VpnGatewayShowResponse struct for VpnGatewayShowResponse
type VpnGatewayShowResponse struct {
	VpnGateway VpnGateway `json:"vpn_gateway"`
}

type _VpnGatewayShowResponse VpnGatewayShowResponse

// NewVpnGatewayShowResponse instantiates a new VpnGatewayShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnGatewayShowResponse(vpnGateway VpnGateway) *VpnGatewayShowResponse {
	this := VpnGatewayShowResponse{}
	this.VpnGateway = vpnGateway
	return &this
}

// NewVpnGatewayShowResponseWithDefaults instantiates a new VpnGatewayShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnGatewayShowResponseWithDefaults() *VpnGatewayShowResponse {
	this := VpnGatewayShowResponse{}
	return &this
}

// GetVpnGateway returns the VpnGateway field value
func (o *VpnGatewayShowResponse) GetVpnGateway() VpnGateway {
	if o == nil {
		var ret VpnGateway
		return ret
	}

	return o.VpnGateway
}

// GetVpnGatewayOk returns a tuple with the VpnGateway field value
// and a boolean to check if the value has been set.
func (o *VpnGatewayShowResponse) GetVpnGatewayOk() (*VpnGateway, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpnGateway, true
}

// SetVpnGateway sets field value
func (o *VpnGatewayShowResponse) SetVpnGateway(v VpnGateway) {
	o.VpnGateway = v
}

func (o VpnGatewayShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnGatewayShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpn_gateway"] = o.VpnGateway
	return toSerialize, nil
}

func (o *VpnGatewayShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpn_gateway",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnGatewayShowResponse := _VpnGatewayShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpnGatewayShowResponse)

	if err != nil {
		return err
	}

	*o = VpnGatewayShowResponse(varVpnGatewayShowResponse)

	return err
}

type NullableVpnGatewayShowResponse struct {
	value *VpnGatewayShowResponse
	isSet bool
}

func (v NullableVpnGatewayShowResponse) Get() *VpnGatewayShowResponse {
	return v.value
}

func (v *NullableVpnGatewayShowResponse) Set(val *VpnGatewayShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnGatewayShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnGatewayShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnGatewayShowResponse(val *VpnGatewayShowResponse) *NullableVpnGatewayShowResponse {
	return &NullableVpnGatewayShowResponse{value: val, isSet: true}
}

func (v NullableVpnGatewayShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnGatewayShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


