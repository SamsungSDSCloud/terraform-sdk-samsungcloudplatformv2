/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VpnTunnelShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnTunnelShowResponse{}

// VpnTunnelShowResponse struct for VpnTunnelShowResponse
type VpnTunnelShowResponse struct {
	VpnTunnel VpnTunnelDetail `json:"vpn_tunnel"`
}

type _VpnTunnelShowResponse VpnTunnelShowResponse

// NewVpnTunnelShowResponse instantiates a new VpnTunnelShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnTunnelShowResponse(vpnTunnel VpnTunnelDetail) *VpnTunnelShowResponse {
	this := VpnTunnelShowResponse{}
	this.VpnTunnel = vpnTunnel
	return &this
}

// NewVpnTunnelShowResponseWithDefaults instantiates a new VpnTunnelShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnTunnelShowResponseWithDefaults() *VpnTunnelShowResponse {
	this := VpnTunnelShowResponse{}
	return &this
}

// GetVpnTunnel returns the VpnTunnel field value
func (o *VpnTunnelShowResponse) GetVpnTunnel() VpnTunnelDetail {
	if o == nil {
		var ret VpnTunnelDetail
		return ret
	}

	return o.VpnTunnel
}

// GetVpnTunnelOk returns a tuple with the VpnTunnel field value
// and a boolean to check if the value has been set.
func (o *VpnTunnelShowResponse) GetVpnTunnelOk() (*VpnTunnelDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpnTunnel, true
}

// SetVpnTunnel sets field value
func (o *VpnTunnelShowResponse) SetVpnTunnel(v VpnTunnelDetail) {
	o.VpnTunnel = v
}

func (o VpnTunnelShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnTunnelShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpn_tunnel"] = o.VpnTunnel
	return toSerialize, nil
}

func (o *VpnTunnelShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpn_tunnel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnTunnelShowResponse := _VpnTunnelShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpnTunnelShowResponse)

	if err != nil {
		return err
	}

	*o = VpnTunnelShowResponse(varVpnTunnelShowResponse)

	return err
}

type NullableVpnTunnelShowResponse struct {
	value *VpnTunnelShowResponse
	isSet bool
}

func (v NullableVpnTunnelShowResponse) Get() *VpnTunnelShowResponse {
	return v.value
}

func (v *NullableVpnTunnelShowResponse) Set(val *VpnTunnelShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnTunnelShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnTunnelShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnTunnelShowResponse(val *VpnTunnelShowResponse) *NullableVpnTunnelShowResponse {
	return &NullableVpnTunnelShowResponse{value: val, isSet: true}
}

func (v NullableVpnTunnelShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnTunnelShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


