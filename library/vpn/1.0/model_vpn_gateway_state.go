/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"fmt"
)

// VpnGatewayState the model 'VpnGatewayState'
type VpnGatewayState string

// List of VpnGatewayState
const (
	VPNGATEWAYSTATE_CREATING VpnGatewayState = "CREATING"
	VPNGATEWAYSTATE_ACTIVE VpnGatewayState = "ACTIVE"
	VPNGATEWAYSTATE_DELETING VpnGatewayState = "DELETING"
	VPNGATEWAYSTATE_DELETED VpnGatewayState = "DELETED"
	VPNGATEWAYSTATE_EDITING VpnGatewayState = "EDITING"
	VPNGATEWAYSTATE_ERROR VpnGatewayState = "ERROR"
)

// All allowed values of VpnGatewayState enum
var AllowedVpnGatewayStateEnumValues = []VpnGatewayState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"EDITING",
	"ERROR",
}

func (v *VpnGatewayState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnGatewayState(value)
	for _, existing := range AllowedVpnGatewayStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnGatewayState", value)
}

// NewVpnGatewayStateFromValue returns a pointer to a valid VpnGatewayState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnGatewayStateFromValue(v string) (*VpnGatewayState, error) {
	ev := VpnGatewayState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnGatewayState: valid values are %v", v, AllowedVpnGatewayStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnGatewayState) IsValid() bool {
	for _, existing := range AllowedVpnGatewayStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpnGatewayState value
func (v VpnGatewayState) Ptr() *VpnGatewayState {
	return &v
}

type NullableVpnGatewayState struct {
	value *VpnGatewayState
	isSet bool
}

func (v NullableVpnGatewayState) Get() *VpnGatewayState {
	return v.value
}

func (v *NullableVpnGatewayState) Set(val *VpnGatewayState) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnGatewayState) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnGatewayState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnGatewayState(val *VpnGatewayState) *NullableVpnGatewayState {
	return &NullableVpnGatewayState{value: val, isSet: true}
}

func (v NullableVpnGatewayState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnGatewayState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

