/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VpnTunnelSubnetAvailability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnTunnelSubnetAvailability{}

// VpnTunnelSubnetAvailability struct for VpnTunnelSubnetAvailability
type VpnTunnelSubnetAvailability struct {
	// VPN Tunnel Remote Subnet Availability
	Availability VpnTunnelRemoteSubnetAvailability `json:"availability"`
	// VPN Tunnel IPSec Remote Subnet
	RemoteSubnet string `json:"remote_subnet"`
	// VPN Gateway ID
	VpnGatewayId string `json:"vpn_gateway_id"`
}

type _VpnTunnelSubnetAvailability VpnTunnelSubnetAvailability

// NewVpnTunnelSubnetAvailability instantiates a new VpnTunnelSubnetAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnTunnelSubnetAvailability(availability VpnTunnelRemoteSubnetAvailability, remoteSubnet string, vpnGatewayId string) *VpnTunnelSubnetAvailability {
	this := VpnTunnelSubnetAvailability{}
	this.Availability = availability
	this.RemoteSubnet = remoteSubnet
	this.VpnGatewayId = vpnGatewayId
	return &this
}

// NewVpnTunnelSubnetAvailabilityWithDefaults instantiates a new VpnTunnelSubnetAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnTunnelSubnetAvailabilityWithDefaults() *VpnTunnelSubnetAvailability {
	this := VpnTunnelSubnetAvailability{}
	return &this
}

// GetAvailability returns the Availability field value
func (o *VpnTunnelSubnetAvailability) GetAvailability() VpnTunnelRemoteSubnetAvailability {
	if o == nil {
		var ret VpnTunnelRemoteSubnetAvailability
		return ret
	}

	return o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value
// and a boolean to check if the value has been set.
func (o *VpnTunnelSubnetAvailability) GetAvailabilityOk() (*VpnTunnelRemoteSubnetAvailability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Availability, true
}

// SetAvailability sets field value
func (o *VpnTunnelSubnetAvailability) SetAvailability(v VpnTunnelRemoteSubnetAvailability) {
	o.Availability = v
}

// GetRemoteSubnet returns the RemoteSubnet field value
func (o *VpnTunnelSubnetAvailability) GetRemoteSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteSubnet
}

// GetRemoteSubnetOk returns a tuple with the RemoteSubnet field value
// and a boolean to check if the value has been set.
func (o *VpnTunnelSubnetAvailability) GetRemoteSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteSubnet, true
}

// SetRemoteSubnet sets field value
func (o *VpnTunnelSubnetAvailability) SetRemoteSubnet(v string) {
	o.RemoteSubnet = v
}

// GetVpnGatewayId returns the VpnGatewayId field value
func (o *VpnTunnelSubnetAvailability) GetVpnGatewayId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VpnGatewayId
}

// GetVpnGatewayIdOk returns a tuple with the VpnGatewayId field value
// and a boolean to check if the value has been set.
func (o *VpnTunnelSubnetAvailability) GetVpnGatewayIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpnGatewayId, true
}

// SetVpnGatewayId sets field value
func (o *VpnTunnelSubnetAvailability) SetVpnGatewayId(v string) {
	o.VpnGatewayId = v
}

func (o VpnTunnelSubnetAvailability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnTunnelSubnetAvailability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["availability"] = o.Availability
	toSerialize["remote_subnet"] = o.RemoteSubnet
	toSerialize["vpn_gateway_id"] = o.VpnGatewayId
	return toSerialize, nil
}

func (o *VpnTunnelSubnetAvailability) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"availability",
		"remote_subnet",
		"vpn_gateway_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnTunnelSubnetAvailability := _VpnTunnelSubnetAvailability{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpnTunnelSubnetAvailability)

	if err != nil {
		return err
	}

	*o = VpnTunnelSubnetAvailability(varVpnTunnelSubnetAvailability)

	return err
}

type NullableVpnTunnelSubnetAvailability struct {
	value *VpnTunnelSubnetAvailability
	isSet bool
}

func (v NullableVpnTunnelSubnetAvailability) Get() *VpnTunnelSubnetAvailability {
	return v.value
}

func (v *NullableVpnTunnelSubnetAvailability) Set(val *VpnTunnelSubnetAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnTunnelSubnetAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnTunnelSubnetAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnTunnelSubnetAvailability(val *VpnTunnelSubnetAvailability) *NullableVpnTunnelSubnetAvailability {
	return &NullableVpnTunnelSubnetAvailability{value: val, isSet: true}
}

func (v NullableVpnTunnelSubnetAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnTunnelSubnetAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


