/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpnV1VpnTunnelsApiAPIService VpnV1VpnTunnelsApiAPI service
type VpnV1VpnTunnelsApiAPIService service

type VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest struct {
	ctx          context.Context
	ApiService   *VpnV1VpnTunnelsApiAPIService
	vpnGatewayId *string
	remoteSubnet *string
}

// VPN Gateway ID
func (r VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest) VpnGatewayId(vpnGatewayId string) VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest {
	r.vpnGatewayId = &vpnGatewayId
	return r
}

// VPN Tunnel IPSec Remote Subnet
func (r VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest) RemoteSubnet(remoteSubnet string) VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest {
	r.remoteSubnet = &remoteSubnet
	return r
}

func (r VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest) Execute() (*VpnTunnelSubnetAvailabilityResponse, *http.Response, error) {
	return r.ApiService.CheckVpnTunnelSubnetAvailabilitiesExecute(r)
}

/*
CheckVpnTunnelSubnetAvailabilities Check VPN Tunnel Subnet Availabilities

Check VPN Tunnel Subnet Availabilities.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest
*/
func (a *VpnV1VpnTunnelsApiAPIService) CheckVpnTunnelSubnetAvailabilities(ctx context.Context) VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest {
	return VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpnTunnelSubnetAvailabilityResponse
func (a *VpnV1VpnTunnelsApiAPIService) CheckVpnTunnelSubnetAvailabilitiesExecute(r VpnV1VpnTunnelsApiAPICheckVpnTunnelSubnetAvailabilitiesRequest) (*VpnTunnelSubnetAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnTunnelSubnetAvailabilityResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-tunnels/vpn-tunnel-subnet-availabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpnGatewayId == nil {
		return localVarReturnValue, nil, reportError("vpnGatewayId is required and must be specified")
	}
	if r.remoteSubnet == nil {
		return localVarReturnValue, nil, reportError("remoteSubnet is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_gateway_id", r.vpnGatewayId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "remote_subnet", r.remoteSubnet, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest struct {
	ctx                    context.Context
	ApiService             *VpnV1VpnTunnelsApiAPIService
	vpnTunnelCreateRequest *VpnTunnelCreateRequest
}

func (r VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest) VpnTunnelCreateRequest(vpnTunnelCreateRequest VpnTunnelCreateRequest) VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest {
	r.vpnTunnelCreateRequest = &vpnTunnelCreateRequest
	return r
}

func (r VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest) Execute() (*VpnTunnelShowResponse, *http.Response, error) {
	return r.ApiService.CreateVpnTunnelExecute(r)
}

/*
CreateVpnTunnel Create VPN Tunnel

Create VPN tunnel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest
*/
func (a *VpnV1VpnTunnelsApiAPIService) CreateVpnTunnel(ctx context.Context) VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest {
	return VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpnTunnelShowResponse
func (a *VpnV1VpnTunnelsApiAPIService) CreateVpnTunnelExecute(r VpnV1VpnTunnelsApiAPICreateVpnTunnelRequest) (*VpnTunnelShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnTunnelShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-tunnels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpnTunnelCreateRequest == nil {
		return localVarReturnValue, nil, reportError("vpnTunnelCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpnTunnelCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnTunnelsApiAPIDeleteVpnTunnelRequest struct {
	ctx         context.Context
	ApiService  *VpnV1VpnTunnelsApiAPIService
	vpnTunnelId string
}

func (r VpnV1VpnTunnelsApiAPIDeleteVpnTunnelRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVpnTunnelExecute(r)
}

/*
DeleteVpnTunnel Delete VPN Tunnel

Delete VPN tunnel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpnTunnelId VPN Tunnel ID
	@return VpnV1VpnTunnelsApiAPIDeleteVpnTunnelRequest
*/
func (a *VpnV1VpnTunnelsApiAPIService) DeleteVpnTunnel(ctx context.Context, vpnTunnelId string) VpnV1VpnTunnelsApiAPIDeleteVpnTunnelRequest {
	return VpnV1VpnTunnelsApiAPIDeleteVpnTunnelRequest{
		ApiService:  a,
		ctx:         ctx,
		vpnTunnelId: vpnTunnelId,
	}
}

// Execute executes the request
func (a *VpnV1VpnTunnelsApiAPIService) DeleteVpnTunnelExecute(r VpnV1VpnTunnelsApiAPIDeleteVpnTunnelRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-tunnels/{vpn_tunnel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpn_tunnel_id"+"}", url.PathEscape(parameterValueToString(r.vpnTunnelId, "vpnTunnelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest struct {
	ctx          context.Context
	ApiService   *VpnV1VpnTunnelsApiAPIService
	vpnGatewayId *string
}

// VPN Gateway ID
func (r VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest) VpnGatewayId(vpnGatewayId string) VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest {
	r.vpnGatewayId = &vpnGatewayId
	return r
}

func (r VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest) Execute() (*VpnTunnelQuotaResponse, *http.Response, error) {
	return r.ApiService.GetVpnTunnelQuotasExecute(r)
}

/*
GetVpnTunnelQuotas Get VPN Tunnel Quotas

Show VPN tunnel quota.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest
*/
func (a *VpnV1VpnTunnelsApiAPIService) GetVpnTunnelQuotas(ctx context.Context) VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest {
	return VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpnTunnelQuotaResponse
func (a *VpnV1VpnTunnelsApiAPIService) GetVpnTunnelQuotasExecute(r VpnV1VpnTunnelsApiAPIGetVpnTunnelQuotasRequest) (*VpnTunnelQuotaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnTunnelQuotaResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-tunnels/metrics/quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.vpnGatewayId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_gateway_id", r.vpnGatewayId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest struct {
	ctx            context.Context
	ApiService     *VpnV1VpnTunnelsApiAPIService
	size           *int32
	page           *int32
	sort           *string
	name           *string
	vpnGatewayId   *string
	vpnGatewayName *string
	peerGatewayIp  *string
	remoteSubnet   *string
}

// size
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) Size(size int32) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.size = &size
	return r
}

// page
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) Page(page int32) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.page = &page
	return r
}

// sort
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) Sort(sort string) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.sort = &sort
	return r
}

// VPN Tunnel Name
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) Name(name string) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.name = &name
	return r
}

// VPN Gateway ID
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) VpnGatewayId(vpnGatewayId string) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.vpnGatewayId = &vpnGatewayId
	return r
}

// VPN Gateway Name
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) VpnGatewayName(vpnGatewayName string) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.vpnGatewayName = &vpnGatewayName
	return r
}

// VPN Tunnel Peer Gateway IP Address
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) PeerGatewayIp(peerGatewayIp string) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.peerGatewayIp = &peerGatewayIp
	return r
}

// VPN Tunnel IPSec Remote Subnet
func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) RemoteSubnet(remoteSubnet string) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	r.remoteSubnet = &remoteSubnet
	return r
}

func (r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) Execute() (*VpnTunnelListResponse, *http.Response, error) {
	return r.ApiService.ListVpnTunnelsExecute(r)
}

/*
ListVpnTunnels List VPN Tunnels

Get VPN tunnel list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest
*/
func (a *VpnV1VpnTunnelsApiAPIService) ListVpnTunnels(ctx context.Context) VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest {
	return VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpnTunnelListResponse
func (a *VpnV1VpnTunnelsApiAPIService) ListVpnTunnelsExecute(r VpnV1VpnTunnelsApiAPIListVpnTunnelsRequest) (*VpnTunnelListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnTunnelListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-tunnels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.vpnGatewayId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_gateway_id", r.vpnGatewayId, "form", "")
	}
	if r.vpnGatewayName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpn_gateway_name", r.vpnGatewayName, "form", "")
	}
	if r.peerGatewayIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "peer_gateway_ip", r.peerGatewayIp, "form", "")
	}
	if r.remoteSubnet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote_subnet", r.remoteSubnet, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnTunnelsApiAPISetVpnTunnelRequest struct {
	ctx                 context.Context
	ApiService          *VpnV1VpnTunnelsApiAPIService
	vpnTunnelId         string
	vpnTunnelSetRequest *VpnTunnelSetRequest
}

func (r VpnV1VpnTunnelsApiAPISetVpnTunnelRequest) VpnTunnelSetRequest(vpnTunnelSetRequest VpnTunnelSetRequest) VpnV1VpnTunnelsApiAPISetVpnTunnelRequest {
	r.vpnTunnelSetRequest = &vpnTunnelSetRequest
	return r
}

func (r VpnV1VpnTunnelsApiAPISetVpnTunnelRequest) Execute() (*VpnTunnelShowResponse, *http.Response, error) {
	return r.ApiService.SetVpnTunnelExecute(r)
}

/*
SetVpnTunnel Set VPN Tunnel

Set VPN tunnel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpnTunnelId VPN Tunnel ID
	@return VpnV1VpnTunnelsApiAPISetVpnTunnelRequest
*/
func (a *VpnV1VpnTunnelsApiAPIService) SetVpnTunnel(ctx context.Context, vpnTunnelId string) VpnV1VpnTunnelsApiAPISetVpnTunnelRequest {
	return VpnV1VpnTunnelsApiAPISetVpnTunnelRequest{
		ApiService:  a,
		ctx:         ctx,
		vpnTunnelId: vpnTunnelId,
	}
}

// Execute executes the request
//
//	@return VpnTunnelShowResponse
func (a *VpnV1VpnTunnelsApiAPIService) SetVpnTunnelExecute(r VpnV1VpnTunnelsApiAPISetVpnTunnelRequest) (*VpnTunnelShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnTunnelShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-tunnels/{vpn_tunnel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpn_tunnel_id"+"}", url.PathEscape(parameterValueToString(r.vpnTunnelId, "vpnTunnelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpnTunnelSetRequest == nil {
		return localVarReturnValue, nil, reportError("vpnTunnelSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpnTunnelSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnTunnelsApiAPIShowVpnTunnelRequest struct {
	ctx         context.Context
	ApiService  *VpnV1VpnTunnelsApiAPIService
	vpnTunnelId string
}

func (r VpnV1VpnTunnelsApiAPIShowVpnTunnelRequest) Execute() (*VpnTunnelShowWithStatusResponse, *http.Response, error) {
	return r.ApiService.ShowVpnTunnelExecute(r)
}

/*
ShowVpnTunnel Show VPN Tunnel

Show VPN tunnel.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpnTunnelId VPN Tunnel ID
	@return VpnV1VpnTunnelsApiAPIShowVpnTunnelRequest
*/
func (a *VpnV1VpnTunnelsApiAPIService) ShowVpnTunnel(ctx context.Context, vpnTunnelId string) VpnV1VpnTunnelsApiAPIShowVpnTunnelRequest {
	return VpnV1VpnTunnelsApiAPIShowVpnTunnelRequest{
		ApiService:  a,
		ctx:         ctx,
		vpnTunnelId: vpnTunnelId,
	}
}

// Execute executes the request
//
//	@return VpnTunnelShowWithStatusResponse
func (a *VpnV1VpnTunnelsApiAPIService) ShowVpnTunnelExecute(r VpnV1VpnTunnelsApiAPIShowVpnTunnelRequest) (*VpnTunnelShowWithStatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnTunnelShowWithStatusResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-tunnels/{vpn_tunnel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpn_tunnel_id"+"}", url.PathEscape(parameterValueToString(r.vpnTunnelId, "vpnTunnelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
