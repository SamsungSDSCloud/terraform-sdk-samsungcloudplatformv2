/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VpnPhase2Detail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnPhase2Detail{}

// VpnPhase2Detail struct for VpnPhase2Detail
type VpnPhase2Detail struct {
	DiffieHellmanGroups []int32 `json:"diffie_hellman_groups,omitempty"`
	// VPN Tunnel IPSec Proposal List
	Encryptions []string `json:"encryptions"`
	// VPN Tunnel IPSec Lifetime (sec)
	LifeTime int32 `json:"life_time"`
	// VPN Tunnel IPSec Perfect Forward Secrecy(PFS)
	PerfectForwardSecrecy string `json:"perfect_forward_secrecy"`
	// VPN Tunnel IPSec Remote Subnet
	RemoteSubnet string `json:"remote_subnet"`
}

type _VpnPhase2Detail VpnPhase2Detail

// NewVpnPhase2Detail instantiates a new VpnPhase2Detail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnPhase2Detail(encryptions []string, lifeTime int32, perfectForwardSecrecy string, remoteSubnet string) *VpnPhase2Detail {
	this := VpnPhase2Detail{}
	this.Encryptions = encryptions
	this.LifeTime = lifeTime
	this.PerfectForwardSecrecy = perfectForwardSecrecy
	this.RemoteSubnet = remoteSubnet
	return &this
}

// NewVpnPhase2DetailWithDefaults instantiates a new VpnPhase2Detail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnPhase2DetailWithDefaults() *VpnPhase2Detail {
	this := VpnPhase2Detail{}
	return &this
}

// GetDiffieHellmanGroups returns the DiffieHellmanGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VpnPhase2Detail) GetDiffieHellmanGroups() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.DiffieHellmanGroups
}

// GetDiffieHellmanGroupsOk returns a tuple with the DiffieHellmanGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VpnPhase2Detail) GetDiffieHellmanGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.DiffieHellmanGroups) {
		return nil, false
	}
	return o.DiffieHellmanGroups, true
}

// HasDiffieHellmanGroups returns a boolean if a field has been set.
func (o *VpnPhase2Detail) HasDiffieHellmanGroups() bool {
	if o != nil && !IsNil(o.DiffieHellmanGroups) {
		return true
	}

	return false
}

// SetDiffieHellmanGroups gets a reference to the given []int32 and assigns it to the DiffieHellmanGroups field.
func (o *VpnPhase2Detail) SetDiffieHellmanGroups(v []int32) {
	o.DiffieHellmanGroups = v
}

// GetEncryptions returns the Encryptions field value
func (o *VpnPhase2Detail) GetEncryptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Encryptions
}

// GetEncryptionsOk returns a tuple with the Encryptions field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2Detail) GetEncryptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Encryptions, true
}

// SetEncryptions sets field value
func (o *VpnPhase2Detail) SetEncryptions(v []string) {
	o.Encryptions = v
}

// GetLifeTime returns the LifeTime field value
func (o *VpnPhase2Detail) GetLifeTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LifeTime
}

// GetLifeTimeOk returns a tuple with the LifeTime field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2Detail) GetLifeTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LifeTime, true
}

// SetLifeTime sets field value
func (o *VpnPhase2Detail) SetLifeTime(v int32) {
	o.LifeTime = v
}

// GetPerfectForwardSecrecy returns the PerfectForwardSecrecy field value
func (o *VpnPhase2Detail) GetPerfectForwardSecrecy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PerfectForwardSecrecy
}

// GetPerfectForwardSecrecyOk returns a tuple with the PerfectForwardSecrecy field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2Detail) GetPerfectForwardSecrecyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerfectForwardSecrecy, true
}

// SetPerfectForwardSecrecy sets field value
func (o *VpnPhase2Detail) SetPerfectForwardSecrecy(v string) {
	o.PerfectForwardSecrecy = v
}

// GetRemoteSubnet returns the RemoteSubnet field value
func (o *VpnPhase2Detail) GetRemoteSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteSubnet
}

// GetRemoteSubnetOk returns a tuple with the RemoteSubnet field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2Detail) GetRemoteSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteSubnet, true
}

// SetRemoteSubnet sets field value
func (o *VpnPhase2Detail) SetRemoteSubnet(v string) {
	o.RemoteSubnet = v
}

func (o VpnPhase2Detail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnPhase2Detail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DiffieHellmanGroups != nil {
		toSerialize["diffie_hellman_groups"] = o.DiffieHellmanGroups
	}
	toSerialize["encryptions"] = o.Encryptions
	toSerialize["life_time"] = o.LifeTime
	toSerialize["perfect_forward_secrecy"] = o.PerfectForwardSecrecy
	toSerialize["remote_subnet"] = o.RemoteSubnet
	return toSerialize, nil
}

func (o *VpnPhase2Detail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"encryptions",
		"life_time",
		"perfect_forward_secrecy",
		"remote_subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnPhase2Detail := _VpnPhase2Detail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpnPhase2Detail)

	if err != nil {
		return err
	}

	*o = VpnPhase2Detail(varVpnPhase2Detail)

	return err
}

type NullableVpnPhase2Detail struct {
	value *VpnPhase2Detail
	isSet bool
}

func (v NullableVpnPhase2Detail) Get() *VpnPhase2Detail {
	return v.value
}

func (v *NullableVpnPhase2Detail) Set(val *VpnPhase2Detail) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnPhase2Detail) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnPhase2Detail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnPhase2Detail(val *VpnPhase2Detail) *NullableVpnPhase2Detail {
	return &NullableVpnPhase2Detail{value: val, isSet: true}
}

func (v NullableVpnPhase2Detail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnPhase2Detail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


