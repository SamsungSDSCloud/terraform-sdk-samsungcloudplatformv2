/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"fmt"
)

// VpnTunnelStatus the model 'VpnTunnelStatus'
type VpnTunnelStatus string

// List of VpnTunnelStatus
const (
	VPNTUNNELSTATUS_UP VpnTunnelStatus = "UP"
	VPNTUNNELSTATUS_DOWN VpnTunnelStatus = "DOWN"
)

// All allowed values of VpnTunnelStatus enum
var AllowedVpnTunnelStatusEnumValues = []VpnTunnelStatus{
	"UP",
	"DOWN",
}

func (v *VpnTunnelStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnTunnelStatus(value)
	for _, existing := range AllowedVpnTunnelStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnTunnelStatus", value)
}

// NewVpnTunnelStatusFromValue returns a pointer to a valid VpnTunnelStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnTunnelStatusFromValue(v string) (*VpnTunnelStatus, error) {
	ev := VpnTunnelStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnTunnelStatus: valid values are %v", v, AllowedVpnTunnelStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnTunnelStatus) IsValid() bool {
	for _, existing := range AllowedVpnTunnelStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpnTunnelStatus value
func (v VpnTunnelStatus) Ptr() *VpnTunnelStatus {
	return &v
}

type NullableVpnTunnelStatus struct {
	value *VpnTunnelStatus
	isSet bool
}

func (v NullableVpnTunnelStatus) Get() *VpnTunnelStatus {
	return v.value
}

func (v *NullableVpnTunnelStatus) Set(val *VpnTunnelStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnTunnelStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnTunnelStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnTunnelStatus(val *VpnTunnelStatus) *NullableVpnTunnelStatus {
	return &NullableVpnTunnelStatus{value: val, isSet: true}
}

func (v NullableVpnTunnelStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnTunnelStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

