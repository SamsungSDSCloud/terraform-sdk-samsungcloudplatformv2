/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"fmt"
)

// VpnTunnelState the model 'VpnTunnelState'
type VpnTunnelState string

// List of VpnTunnelState
const (
	VPNTUNNELSTATE_CREATING VpnTunnelState = "CREATING"
	VPNTUNNELSTATE_ACTIVE VpnTunnelState = "ACTIVE"
	VPNTUNNELSTATE_DELETING VpnTunnelState = "DELETING"
	VPNTUNNELSTATE_DELETED VpnTunnelState = "DELETED"
	VPNTUNNELSTATE_EDITING VpnTunnelState = "EDITING"
	VPNTUNNELSTATE_ERROR VpnTunnelState = "ERROR"
)

// All allowed values of VpnTunnelState enum
var AllowedVpnTunnelStateEnumValues = []VpnTunnelState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"EDITING",
	"ERROR",
}

func (v *VpnTunnelState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnTunnelState(value)
	for _, existing := range AllowedVpnTunnelStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnTunnelState", value)
}

// NewVpnTunnelStateFromValue returns a pointer to a valid VpnTunnelState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnTunnelStateFromValue(v string) (*VpnTunnelState, error) {
	ev := VpnTunnelState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnTunnelState: valid values are %v", v, AllowedVpnTunnelStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnTunnelState) IsValid() bool {
	for _, existing := range AllowedVpnTunnelStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpnTunnelState value
func (v VpnTunnelState) Ptr() *VpnTunnelState {
	return &v
}

type NullableVpnTunnelState struct {
	value *VpnTunnelState
	isSet bool
}

func (v NullableVpnTunnelState) Get() *VpnTunnelState {
	return v.value
}

func (v *NullableVpnTunnelState) Set(val *VpnTunnelState) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnTunnelState) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnTunnelState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnTunnelState(val *VpnTunnelState) *NullableVpnTunnelState {
	return &NullableVpnTunnelState{value: val, isSet: true}
}

func (v NullableVpnTunnelState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnTunnelState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

