/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpnV1VpnGatewaysApiAPIService VpnV1VpnGatewaysApiAPI service
type VpnV1VpnGatewaysApiAPIService service

type VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest struct {
	ctx                     context.Context
	ApiService              *VpnV1VpnGatewaysApiAPIService
	vpnGatewayCreateRequest *VpnGatewayCreateRequest
}

func (r VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest) VpnGatewayCreateRequest(vpnGatewayCreateRequest VpnGatewayCreateRequest) VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest {
	r.vpnGatewayCreateRequest = &vpnGatewayCreateRequest
	return r
}

func (r VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest) Execute() (*VpnGatewayShowResponse, *http.Response, error) {
	return r.ApiService.CreateVpnGatewayExecute(r)
}

/*
CreateVpnGateway Create VPN Gateway

Create VPN gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest
*/
func (a *VpnV1VpnGatewaysApiAPIService) CreateVpnGateway(ctx context.Context) VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest {
	return VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpnGatewayShowResponse
func (a *VpnV1VpnGatewaysApiAPIService) CreateVpnGatewayExecute(r VpnV1VpnGatewaysApiAPICreateVpnGatewayRequest) (*VpnGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpnGatewayCreateRequest == nil {
		return localVarReturnValue, nil, reportError("vpnGatewayCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpnGatewayCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnGatewaysApiAPIDeleteVpnGatewayRequest struct {
	ctx          context.Context
	ApiService   *VpnV1VpnGatewaysApiAPIService
	vpnGatewayId string
}

func (r VpnV1VpnGatewaysApiAPIDeleteVpnGatewayRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVpnGatewayExecute(r)
}

/*
DeleteVpnGateway Delete VPN Gateway

Delete VPN gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpnGatewayId VPN Gateway ID
	@return VpnV1VpnGatewaysApiAPIDeleteVpnGatewayRequest
*/
func (a *VpnV1VpnGatewaysApiAPIService) DeleteVpnGateway(ctx context.Context, vpnGatewayId string) VpnV1VpnGatewaysApiAPIDeleteVpnGatewayRequest {
	return VpnV1VpnGatewaysApiAPIDeleteVpnGatewayRequest{
		ApiService:   a,
		ctx:          ctx,
		vpnGatewayId: vpnGatewayId,
	}
}

// Execute executes the request
func (a *VpnV1VpnGatewaysApiAPIService) DeleteVpnGatewayExecute(r VpnV1VpnGatewaysApiAPIDeleteVpnGatewayRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-gateways/{vpn_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpn_gateway_id"+"}", url.PathEscape(parameterValueToString(r.vpnGatewayId, "vpnGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest struct {
	ctx        context.Context
	ApiService *VpnV1VpnGatewaysApiAPIService
	vpcId      *string
}

// VPC Id
func (r VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest) VpcId(vpcId string) VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest {
	r.vpcId = &vpcId
	return r
}

func (r VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest) Execute() (*VpnGatewayQuotaResponse, *http.Response, error) {
	return r.ApiService.GetVpnGatewayQuotasExecute(r)
}

/*
GetVpnGatewayQuotas Get VPN Gateway Quotas

Show VPN gateway quota.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest
*/
func (a *VpnV1VpnGatewaysApiAPIService) GetVpnGatewayQuotas(ctx context.Context) VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest {
	return VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpnGatewayQuotaResponse
func (a *VpnV1VpnGatewaysApiAPIService) GetVpnGatewayQuotasExecute(r VpnV1VpnGatewaysApiAPIGetVpnGatewayQuotasRequest) (*VpnGatewayQuotaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnGatewayQuotaResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-gateways/metrics/quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest struct {
	ctx        context.Context
	ApiService *VpnV1VpnGatewaysApiAPIService
	size       *int32
	page       *int32
	sort       *string
	name       *string
	ipAddress  *string
	vpcId      *string
	vpcName    *string
}

// size
func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) Size(size int32) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	r.size = &size
	return r
}

// page
func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) Page(page int32) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	r.page = &page
	return r
}

// sort
func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) Sort(sort string) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	r.sort = &sort
	return r
}

// VPN Gateway Name
func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) Name(name string) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	r.name = &name
	return r
}

// VPN Gateway IP Address
func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) IpAddress(ipAddress string) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	r.ipAddress = &ipAddress
	return r
}

// VPC Id
func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) VpcId(vpcId string) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Name
func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) VpcName(vpcName string) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	r.vpcName = &vpcName
	return r
}

func (r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) Execute() (*VpnGatewayListResponse, *http.Response, error) {
	return r.ApiService.ListVpnGatewaysExecute(r)
}

/*
ListVpnGateways List VPN Gateways

Get VPN gateway list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest
*/
func (a *VpnV1VpnGatewaysApiAPIService) ListVpnGateways(ctx context.Context) VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest {
	return VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpnGatewayListResponse
func (a *VpnV1VpnGatewaysApiAPIService) ListVpnGatewaysExecute(r VpnV1VpnGatewaysApiAPIListVpnGatewaysRequest) (*VpnGatewayListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnGatewayListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_address", r.ipAddress, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnGatewaysApiAPISetVpnGatewayRequest struct {
	ctx                  context.Context
	ApiService           *VpnV1VpnGatewaysApiAPIService
	vpnGatewayId         string
	vpnGatewaySetRequest *VpnGatewaySetRequest
}

func (r VpnV1VpnGatewaysApiAPISetVpnGatewayRequest) VpnGatewaySetRequest(vpnGatewaySetRequest VpnGatewaySetRequest) VpnV1VpnGatewaysApiAPISetVpnGatewayRequest {
	r.vpnGatewaySetRequest = &vpnGatewaySetRequest
	return r
}

func (r VpnV1VpnGatewaysApiAPISetVpnGatewayRequest) Execute() (*VpnGatewayShowResponse, *http.Response, error) {
	return r.ApiService.SetVpnGatewayExecute(r)
}

/*
SetVpnGateway Set VPN Gateway

Set VPN gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpnGatewayId VPN Gateway ID
	@return VpnV1VpnGatewaysApiAPISetVpnGatewayRequest
*/
func (a *VpnV1VpnGatewaysApiAPIService) SetVpnGateway(ctx context.Context, vpnGatewayId string) VpnV1VpnGatewaysApiAPISetVpnGatewayRequest {
	return VpnV1VpnGatewaysApiAPISetVpnGatewayRequest{
		ApiService:   a,
		ctx:          ctx,
		vpnGatewayId: vpnGatewayId,
	}
}

// Execute executes the request
//
//	@return VpnGatewayShowResponse
func (a *VpnV1VpnGatewaysApiAPIService) SetVpnGatewayExecute(r VpnV1VpnGatewaysApiAPISetVpnGatewayRequest) (*VpnGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-gateways/{vpn_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpn_gateway_id"+"}", url.PathEscape(parameterValueToString(r.vpnGatewayId, "vpnGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpnGatewaySetRequest == nil {
		return localVarReturnValue, nil, reportError("vpnGatewaySetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpnGatewaySetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpnV1VpnGatewaysApiAPIShowVpnGatewayRequest struct {
	ctx          context.Context
	ApiService   *VpnV1VpnGatewaysApiAPIService
	vpnGatewayId string
}

func (r VpnV1VpnGatewaysApiAPIShowVpnGatewayRequest) Execute() (*VpnGatewayShowResponse, *http.Response, error) {
	return r.ApiService.ShowVpnGatewayExecute(r)
}

/*
ShowVpnGateway Show VPN Gateway

Show VPN gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpnGatewayId VPN Gateway ID
	@return VpnV1VpnGatewaysApiAPIShowVpnGatewayRequest
*/
func (a *VpnV1VpnGatewaysApiAPIService) ShowVpnGateway(ctx context.Context, vpnGatewayId string) VpnV1VpnGatewaysApiAPIShowVpnGatewayRequest {
	return VpnV1VpnGatewaysApiAPIShowVpnGatewayRequest{
		ApiService:   a,
		ctx:          ctx,
		vpnGatewayId: vpnGatewayId,
	}
}

// Execute executes the request
//
//	@return VpnGatewayShowResponse
func (a *VpnV1VpnGatewaysApiAPIService) ShowVpnGatewayExecute(r VpnV1VpnGatewaysApiAPIShowVpnGatewayRequest) (*VpnGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpnGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpn-gateways/{vpn_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpn_gateway_id"+"}", url.PathEscape(parameterValueToString(r.vpnGatewayId, "vpnGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpn 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
