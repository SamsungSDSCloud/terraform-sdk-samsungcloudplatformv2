/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"fmt"
)

// VpnTunnelRemoteSubnetAvailability the model 'VpnTunnelRemoteSubnetAvailability'
type VpnTunnelRemoteSubnetAvailability string

// List of VpnTunnelRemoteSubnetAvailability
const (
	VPNTUNNELREMOTESUBNETAVAILABILITY_AVAILABLE VpnTunnelRemoteSubnetAvailability = "AVAILABLE"
	VPNTUNNELREMOTESUBNETAVAILABILITY_DUPLICATE VpnTunnelRemoteSubnetAvailability = "DUPLICATE"
	VPNTUNNELREMOTESUBNETAVAILABILITY_INVALID VpnTunnelRemoteSubnetAvailability = "INVALID"
)

// All allowed values of VpnTunnelRemoteSubnetAvailability enum
var AllowedVpnTunnelRemoteSubnetAvailabilityEnumValues = []VpnTunnelRemoteSubnetAvailability{
	"AVAILABLE",
	"DUPLICATE",
	"INVALID",
}

func (v *VpnTunnelRemoteSubnetAvailability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnTunnelRemoteSubnetAvailability(value)
	for _, existing := range AllowedVpnTunnelRemoteSubnetAvailabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnTunnelRemoteSubnetAvailability", value)
}

// NewVpnTunnelRemoteSubnetAvailabilityFromValue returns a pointer to a valid VpnTunnelRemoteSubnetAvailability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnTunnelRemoteSubnetAvailabilityFromValue(v string) (*VpnTunnelRemoteSubnetAvailability, error) {
	ev := VpnTunnelRemoteSubnetAvailability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnTunnelRemoteSubnetAvailability: valid values are %v", v, AllowedVpnTunnelRemoteSubnetAvailabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnTunnelRemoteSubnetAvailability) IsValid() bool {
	for _, existing := range AllowedVpnTunnelRemoteSubnetAvailabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpnTunnelRemoteSubnetAvailability value
func (v VpnTunnelRemoteSubnetAvailability) Ptr() *VpnTunnelRemoteSubnetAvailability {
	return &v
}

type NullableVpnTunnelRemoteSubnetAvailability struct {
	value *VpnTunnelRemoteSubnetAvailability
	isSet bool
}

func (v NullableVpnTunnelRemoteSubnetAvailability) Get() *VpnTunnelRemoteSubnetAvailability {
	return v.value
}

func (v *NullableVpnTunnelRemoteSubnetAvailability) Set(val *VpnTunnelRemoteSubnetAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnTunnelRemoteSubnetAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnTunnelRemoteSubnetAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnTunnelRemoteSubnetAvailability(val *VpnTunnelRemoteSubnetAvailability) *NullableVpnTunnelRemoteSubnetAvailability {
	return &NullableVpnTunnelRemoteSubnetAvailability{value: val, isSet: true}
}

func (v NullableVpnTunnelRemoteSubnetAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnTunnelRemoteSubnetAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

