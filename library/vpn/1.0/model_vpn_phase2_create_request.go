/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VpnPhase2CreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnPhase2CreateRequest{}

// VpnPhase2CreateRequest struct for VpnPhase2CreateRequest
type VpnPhase2CreateRequest struct {
	// VPN Tunnel IPSec Perfect Forward Secrecy(PFS)
	PerfectForwardSecrecy VpnPerfectForwardSecrecyType `json:"perfect_forward_secrecy"`
	// VPN Tunnel ISAKMP Diffie-Hellman Group List
	Phase2DiffieHellmanGroups []int32 `json:"phase2_diffie_hellman_groups"`
	// VPN Tunnel ISAKMP Proposal List
	Phase2Encryptions []string `json:"phase2_encryptions"`
	// VPN Tunnel IPSec Lifetime (sec)
	Phase2LifeTime int32 `json:"phase2_life_time"`
	// VPN Tunnel IPSec Remote Subnet
	RemoteSubnet string `json:"remote_subnet"`
}

type _VpnPhase2CreateRequest VpnPhase2CreateRequest

// NewVpnPhase2CreateRequest instantiates a new VpnPhase2CreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnPhase2CreateRequest(perfectForwardSecrecy VpnPerfectForwardSecrecyType, phase2DiffieHellmanGroups []int32, phase2Encryptions []string, phase2LifeTime int32, remoteSubnet string) *VpnPhase2CreateRequest {
	this := VpnPhase2CreateRequest{}
	this.PerfectForwardSecrecy = perfectForwardSecrecy
	this.Phase2DiffieHellmanGroups = phase2DiffieHellmanGroups
	this.Phase2Encryptions = phase2Encryptions
	this.Phase2LifeTime = phase2LifeTime
	this.RemoteSubnet = remoteSubnet
	return &this
}

// NewVpnPhase2CreateRequestWithDefaults instantiates a new VpnPhase2CreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnPhase2CreateRequestWithDefaults() *VpnPhase2CreateRequest {
	this := VpnPhase2CreateRequest{}
	return &this
}

// GetPerfectForwardSecrecy returns the PerfectForwardSecrecy field value
func (o *VpnPhase2CreateRequest) GetPerfectForwardSecrecy() VpnPerfectForwardSecrecyType {
	if o == nil {
		var ret VpnPerfectForwardSecrecyType
		return ret
	}

	return o.PerfectForwardSecrecy
}

// GetPerfectForwardSecrecyOk returns a tuple with the PerfectForwardSecrecy field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2CreateRequest) GetPerfectForwardSecrecyOk() (*VpnPerfectForwardSecrecyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerfectForwardSecrecy, true
}

// SetPerfectForwardSecrecy sets field value
func (o *VpnPhase2CreateRequest) SetPerfectForwardSecrecy(v VpnPerfectForwardSecrecyType) {
	o.PerfectForwardSecrecy = v
}

// GetPhase2DiffieHellmanGroups returns the Phase2DiffieHellmanGroups field value
func (o *VpnPhase2CreateRequest) GetPhase2DiffieHellmanGroups() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Phase2DiffieHellmanGroups
}

// GetPhase2DiffieHellmanGroupsOk returns a tuple with the Phase2DiffieHellmanGroups field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2CreateRequest) GetPhase2DiffieHellmanGroupsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase2DiffieHellmanGroups, true
}

// SetPhase2DiffieHellmanGroups sets field value
func (o *VpnPhase2CreateRequest) SetPhase2DiffieHellmanGroups(v []int32) {
	o.Phase2DiffieHellmanGroups = v
}

// GetPhase2Encryptions returns the Phase2Encryptions field value
func (o *VpnPhase2CreateRequest) GetPhase2Encryptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Phase2Encryptions
}

// GetPhase2EncryptionsOk returns a tuple with the Phase2Encryptions field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2CreateRequest) GetPhase2EncryptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase2Encryptions, true
}

// SetPhase2Encryptions sets field value
func (o *VpnPhase2CreateRequest) SetPhase2Encryptions(v []string) {
	o.Phase2Encryptions = v
}

// GetPhase2LifeTime returns the Phase2LifeTime field value
func (o *VpnPhase2CreateRequest) GetPhase2LifeTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Phase2LifeTime
}

// GetPhase2LifeTimeOk returns a tuple with the Phase2LifeTime field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2CreateRequest) GetPhase2LifeTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase2LifeTime, true
}

// SetPhase2LifeTime sets field value
func (o *VpnPhase2CreateRequest) SetPhase2LifeTime(v int32) {
	o.Phase2LifeTime = v
}

// GetRemoteSubnet returns the RemoteSubnet field value
func (o *VpnPhase2CreateRequest) GetRemoteSubnet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteSubnet
}

// GetRemoteSubnetOk returns a tuple with the RemoteSubnet field value
// and a boolean to check if the value has been set.
func (o *VpnPhase2CreateRequest) GetRemoteSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteSubnet, true
}

// SetRemoteSubnet sets field value
func (o *VpnPhase2CreateRequest) SetRemoteSubnet(v string) {
	o.RemoteSubnet = v
}

func (o VpnPhase2CreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnPhase2CreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["perfect_forward_secrecy"] = o.PerfectForwardSecrecy
	toSerialize["phase2_diffie_hellman_groups"] = o.Phase2DiffieHellmanGroups
	toSerialize["phase2_encryptions"] = o.Phase2Encryptions
	toSerialize["phase2_life_time"] = o.Phase2LifeTime
	toSerialize["remote_subnet"] = o.RemoteSubnet
	return toSerialize, nil
}

func (o *VpnPhase2CreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"perfect_forward_secrecy",
		"phase2_diffie_hellman_groups",
		"phase2_encryptions",
		"phase2_life_time",
		"remote_subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnPhase2CreateRequest := _VpnPhase2CreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpnPhase2CreateRequest)

	if err != nil {
		return err
	}

	*o = VpnPhase2CreateRequest(varVpnPhase2CreateRequest)

	return err
}

type NullableVpnPhase2CreateRequest struct {
	value *VpnPhase2CreateRequest
	isSet bool
}

func (v NullableVpnPhase2CreateRequest) Get() *VpnPhase2CreateRequest {
	return v.value
}

func (v *NullableVpnPhase2CreateRequest) Set(val *VpnPhase2CreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnPhase2CreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnPhase2CreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnPhase2CreateRequest(val *VpnPhase2CreateRequest) *NullableVpnPhase2CreateRequest {
	return &NullableVpnPhase2CreateRequest{value: val, isSet: true}
}

func (v NullableVpnPhase2CreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnPhase2CreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


