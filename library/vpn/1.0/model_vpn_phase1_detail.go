/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VpnPhase1Detail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnPhase1Detail{}

// VpnPhase1Detail struct for VpnPhase1Detail
type VpnPhase1Detail struct {
	// VPN Tunnel ISAKMP Diffie-Hellman Group List
	DiffieHellmanGroups []int32 `json:"diffie_hellman_groups"`
	// VPN Tunnel Dead Peer Detection(DPD) Retry Interval (sec)
	DpdRetryInterval int32 `json:"dpd_retry_interval"`
	// VPN Tunnel ISAKMP Proposal List
	Encryptions []string `json:"encryptions"`
	// VPN Tunnel IKE Version
	IkeVersion int32 `json:"ike_version"`
	// VPN Tunnel ISAKMP Lifetime (sec)
	LifeTime int32 `json:"life_time"`
	// VPN Tunnel Peer Gateway IP Address
	PeerGatewayIp string `json:"peer_gateway_ip"`
}

type _VpnPhase1Detail VpnPhase1Detail

// NewVpnPhase1Detail instantiates a new VpnPhase1Detail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnPhase1Detail(diffieHellmanGroups []int32, dpdRetryInterval int32, encryptions []string, ikeVersion int32, lifeTime int32, peerGatewayIp string) *VpnPhase1Detail {
	this := VpnPhase1Detail{}
	this.DiffieHellmanGroups = diffieHellmanGroups
	this.DpdRetryInterval = dpdRetryInterval
	this.Encryptions = encryptions
	this.IkeVersion = ikeVersion
	this.LifeTime = lifeTime
	this.PeerGatewayIp = peerGatewayIp
	return &this
}

// NewVpnPhase1DetailWithDefaults instantiates a new VpnPhase1Detail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnPhase1DetailWithDefaults() *VpnPhase1Detail {
	this := VpnPhase1Detail{}
	return &this
}

// GetDiffieHellmanGroups returns the DiffieHellmanGroups field value
func (o *VpnPhase1Detail) GetDiffieHellmanGroups() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.DiffieHellmanGroups
}

// GetDiffieHellmanGroupsOk returns a tuple with the DiffieHellmanGroups field value
// and a boolean to check if the value has been set.
func (o *VpnPhase1Detail) GetDiffieHellmanGroupsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiffieHellmanGroups, true
}

// SetDiffieHellmanGroups sets field value
func (o *VpnPhase1Detail) SetDiffieHellmanGroups(v []int32) {
	o.DiffieHellmanGroups = v
}

// GetDpdRetryInterval returns the DpdRetryInterval field value
func (o *VpnPhase1Detail) GetDpdRetryInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DpdRetryInterval
}

// GetDpdRetryIntervalOk returns a tuple with the DpdRetryInterval field value
// and a boolean to check if the value has been set.
func (o *VpnPhase1Detail) GetDpdRetryIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DpdRetryInterval, true
}

// SetDpdRetryInterval sets field value
func (o *VpnPhase1Detail) SetDpdRetryInterval(v int32) {
	o.DpdRetryInterval = v
}

// GetEncryptions returns the Encryptions field value
func (o *VpnPhase1Detail) GetEncryptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Encryptions
}

// GetEncryptionsOk returns a tuple with the Encryptions field value
// and a boolean to check if the value has been set.
func (o *VpnPhase1Detail) GetEncryptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Encryptions, true
}

// SetEncryptions sets field value
func (o *VpnPhase1Detail) SetEncryptions(v []string) {
	o.Encryptions = v
}

// GetIkeVersion returns the IkeVersion field value
func (o *VpnPhase1Detail) GetIkeVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IkeVersion
}

// GetIkeVersionOk returns a tuple with the IkeVersion field value
// and a boolean to check if the value has been set.
func (o *VpnPhase1Detail) GetIkeVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IkeVersion, true
}

// SetIkeVersion sets field value
func (o *VpnPhase1Detail) SetIkeVersion(v int32) {
	o.IkeVersion = v
}

// GetLifeTime returns the LifeTime field value
func (o *VpnPhase1Detail) GetLifeTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LifeTime
}

// GetLifeTimeOk returns a tuple with the LifeTime field value
// and a boolean to check if the value has been set.
func (o *VpnPhase1Detail) GetLifeTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LifeTime, true
}

// SetLifeTime sets field value
func (o *VpnPhase1Detail) SetLifeTime(v int32) {
	o.LifeTime = v
}

// GetPeerGatewayIp returns the PeerGatewayIp field value
func (o *VpnPhase1Detail) GetPeerGatewayIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PeerGatewayIp
}

// GetPeerGatewayIpOk returns a tuple with the PeerGatewayIp field value
// and a boolean to check if the value has been set.
func (o *VpnPhase1Detail) GetPeerGatewayIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerGatewayIp, true
}

// SetPeerGatewayIp sets field value
func (o *VpnPhase1Detail) SetPeerGatewayIp(v string) {
	o.PeerGatewayIp = v
}

func (o VpnPhase1Detail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnPhase1Detail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["diffie_hellman_groups"] = o.DiffieHellmanGroups
	toSerialize["dpd_retry_interval"] = o.DpdRetryInterval
	toSerialize["encryptions"] = o.Encryptions
	toSerialize["ike_version"] = o.IkeVersion
	toSerialize["life_time"] = o.LifeTime
	toSerialize["peer_gateway_ip"] = o.PeerGatewayIp
	return toSerialize, nil
}

func (o *VpnPhase1Detail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"diffie_hellman_groups",
		"dpd_retry_interval",
		"encryptions",
		"ike_version",
		"life_time",
		"peer_gateway_ip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnPhase1Detail := _VpnPhase1Detail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpnPhase1Detail)

	if err != nil {
		return err
	}

	*o = VpnPhase1Detail(varVpnPhase1Detail)

	return err
}

type NullableVpnPhase1Detail struct {
	value *VpnPhase1Detail
	isSet bool
}

func (v NullableVpnPhase1Detail) Get() *VpnPhase1Detail {
	return v.value
}

func (v *NullableVpnPhase1Detail) Set(val *VpnPhase1Detail) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnPhase1Detail) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnPhase1Detail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnPhase1Detail(val *VpnPhase1Detail) *NullableVpnPhase1Detail {
	return &NullableVpnPhase1Detail{value: val, isSet: true}
}

func (v NullableVpnPhase1Detail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnPhase1Detail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


