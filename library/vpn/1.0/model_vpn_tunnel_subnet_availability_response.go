/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VpnTunnelSubnetAvailabilityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpnTunnelSubnetAvailabilityResponse{}

// VpnTunnelSubnetAvailabilityResponse struct for VpnTunnelSubnetAvailabilityResponse
type VpnTunnelSubnetAvailabilityResponse struct {
	VpnTunnelSubnetAvailability VpnTunnelSubnetAvailability `json:"vpn_tunnel_subnet_availability"`
}

type _VpnTunnelSubnetAvailabilityResponse VpnTunnelSubnetAvailabilityResponse

// NewVpnTunnelSubnetAvailabilityResponse instantiates a new VpnTunnelSubnetAvailabilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpnTunnelSubnetAvailabilityResponse(vpnTunnelSubnetAvailability VpnTunnelSubnetAvailability) *VpnTunnelSubnetAvailabilityResponse {
	this := VpnTunnelSubnetAvailabilityResponse{}
	this.VpnTunnelSubnetAvailability = vpnTunnelSubnetAvailability
	return &this
}

// NewVpnTunnelSubnetAvailabilityResponseWithDefaults instantiates a new VpnTunnelSubnetAvailabilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpnTunnelSubnetAvailabilityResponseWithDefaults() *VpnTunnelSubnetAvailabilityResponse {
	this := VpnTunnelSubnetAvailabilityResponse{}
	return &this
}

// GetVpnTunnelSubnetAvailability returns the VpnTunnelSubnetAvailability field value
func (o *VpnTunnelSubnetAvailabilityResponse) GetVpnTunnelSubnetAvailability() VpnTunnelSubnetAvailability {
	if o == nil {
		var ret VpnTunnelSubnetAvailability
		return ret
	}

	return o.VpnTunnelSubnetAvailability
}

// GetVpnTunnelSubnetAvailabilityOk returns a tuple with the VpnTunnelSubnetAvailability field value
// and a boolean to check if the value has been set.
func (o *VpnTunnelSubnetAvailabilityResponse) GetVpnTunnelSubnetAvailabilityOk() (*VpnTunnelSubnetAvailability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpnTunnelSubnetAvailability, true
}

// SetVpnTunnelSubnetAvailability sets field value
func (o *VpnTunnelSubnetAvailabilityResponse) SetVpnTunnelSubnetAvailability(v VpnTunnelSubnetAvailability) {
	o.VpnTunnelSubnetAvailability = v
}

func (o VpnTunnelSubnetAvailabilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpnTunnelSubnetAvailabilityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpn_tunnel_subnet_availability"] = o.VpnTunnelSubnetAvailability
	return toSerialize, nil
}

func (o *VpnTunnelSubnetAvailabilityResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpn_tunnel_subnet_availability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpnTunnelSubnetAvailabilityResponse := _VpnTunnelSubnetAvailabilityResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpnTunnelSubnetAvailabilityResponse)

	if err != nil {
		return err
	}

	*o = VpnTunnelSubnetAvailabilityResponse(varVpnTunnelSubnetAvailabilityResponse)

	return err
}

type NullableVpnTunnelSubnetAvailabilityResponse struct {
	value *VpnTunnelSubnetAvailabilityResponse
	isSet bool
}

func (v NullableVpnTunnelSubnetAvailabilityResponse) Get() *VpnTunnelSubnetAvailabilityResponse {
	return v.value
}

func (v *NullableVpnTunnelSubnetAvailabilityResponse) Set(val *VpnTunnelSubnetAvailabilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnTunnelSubnetAvailabilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnTunnelSubnetAvailabilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnTunnelSubnetAvailabilityResponse(val *VpnTunnelSubnetAvailabilityResponse) *NullableVpnTunnelSubnetAvailabilityResponse {
	return &NullableVpnTunnelSubnetAvailabilityResponse{value: val, isSet: true}
}

func (v NullableVpnTunnelSubnetAvailabilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnTunnelSubnetAvailabilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


