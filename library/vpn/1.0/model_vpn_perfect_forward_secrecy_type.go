/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6973
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpn

import (
	"encoding/json"
	"fmt"
)

// VpnPerfectForwardSecrecyType the model 'VpnPerfectForwardSecrecyType'
type VpnPerfectForwardSecrecyType string

// List of VpnPerfectForwardSecrecyType
const (
	VPNPERFECTFORWARDSECRECYTYPE_ENABLE VpnPerfectForwardSecrecyType = "ENABLE"
	VPNPERFECTFORWARDSECRECYTYPE_DISABLE VpnPerfectForwardSecrecyType = "DISABLE"
)

// All allowed values of VpnPerfectForwardSecrecyType enum
var AllowedVpnPerfectForwardSecrecyTypeEnumValues = []VpnPerfectForwardSecrecyType{
	"ENABLE",
	"DISABLE",
}

func (v *VpnPerfectForwardSecrecyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpnPerfectForwardSecrecyType(value)
	for _, existing := range AllowedVpnPerfectForwardSecrecyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpnPerfectForwardSecrecyType", value)
}

// NewVpnPerfectForwardSecrecyTypeFromValue returns a pointer to a valid VpnPerfectForwardSecrecyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpnPerfectForwardSecrecyTypeFromValue(v string) (*VpnPerfectForwardSecrecyType, error) {
	ev := VpnPerfectForwardSecrecyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpnPerfectForwardSecrecyType: valid values are %v", v, AllowedVpnPerfectForwardSecrecyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpnPerfectForwardSecrecyType) IsValid() bool {
	for _, existing := range AllowedVpnPerfectForwardSecrecyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpnPerfectForwardSecrecyType value
func (v VpnPerfectForwardSecrecyType) Ptr() *VpnPerfectForwardSecrecyType {
	return &v
}

type NullableVpnPerfectForwardSecrecyType struct {
	value *VpnPerfectForwardSecrecyType
	isSet bool
}

func (v NullableVpnPerfectForwardSecrecyType) Get() *VpnPerfectForwardSecrecyType {
	return v.value
}

func (v *NullableVpnPerfectForwardSecrecyType) Set(val *VpnPerfectForwardSecrecyType) {
	v.value = val
	v.isSet = true
}

func (v NullableVpnPerfectForwardSecrecyType) IsSet() bool {
	return v.isSet
}

func (v *NullableVpnPerfectForwardSecrecyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpnPerfectForwardSecrecyType(val *VpnPerfectForwardSecrecyType) *NullableVpnPerfectForwardSecrecyType {
	return &NullableVpnPerfectForwardSecrecyType{value: val, isSet: true}
}

func (v NullableVpnPerfectForwardSecrecyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpnPerfectForwardSecrecyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

