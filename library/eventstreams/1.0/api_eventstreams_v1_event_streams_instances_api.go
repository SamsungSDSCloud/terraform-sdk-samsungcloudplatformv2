/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2187
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventstreams

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EventstreamsV1EventStreamsInstancesApiAPIService EventstreamsV1EventStreamsInstancesApiAPI service
type EventstreamsV1EventStreamsInstancesApiAPIService service

type EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsInstancesApiAPIService
	blockStorageGroupId string
	resizeBlockStorageGroupRequest *ResizeBlockStorageGroupRequest
}

func (r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest) ResizeBlockStorageGroupRequest(resizeBlockStorageGroupRequest ResizeBlockStorageGroupRequest) EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest {
	r.resizeBlockStorageGroupRequest = &resizeBlockStorageGroupRequest
	return r
}

func (r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.EventstreamsSetBlockStorageSizeExecute(r)
}

/*
EventstreamsSetBlockStorageSize Set Block Storage Size

Set Block Storage Size.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param blockStorageGroupId Block storage group ID
 @return EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest
*/
func (a *EventstreamsV1EventStreamsInstancesApiAPIService) EventstreamsSetBlockStorageSize(ctx context.Context, blockStorageGroupId string) EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest {
	return EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest{
		ApiService: a,
		ctx: ctx,
		blockStorageGroupId: blockStorageGroupId,
	}
}

// Execute executes the request
//  @return AsyncResponse
func (a *EventstreamsV1EventStreamsInstancesApiAPIService) EventstreamsSetBlockStorageSizeExecute(r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetBlockStorageSizeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/block-storage-groups/{block_storage_group_id}/resize"
	localVarPath = strings.Replace(localVarPath, "{"+"block_storage_group_id"+"}", url.PathEscape(parameterValueToString(r.blockStorageGroupId, "blockStorageGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resizeBlockStorageGroupRequest == nil {
		return localVarReturnValue, nil, reportError("resizeBlockStorageGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resizeBlockStorageGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsInstancesApiAPIService
	clusterId string
	updateSecurityGroupRulesRequest *UpdateSecurityGroupRulesRequest
}

func (r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest) UpdateSecurityGroupRulesRequest(updateSecurityGroupRulesRequest UpdateSecurityGroupRulesRequest) EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest {
	r.updateSecurityGroupRulesRequest = &updateSecurityGroupRulesRequest
	return r
}

func (r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.EventstreamsSetSecurityGroupRulesExecute(r)
}

/*
EventstreamsSetSecurityGroupRules Set Security Group Rules

Set Security Group Rules.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param clusterId Cluster ID
 @return EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest
*/
func (a *EventstreamsV1EventStreamsInstancesApiAPIService) EventstreamsSetSecurityGroupRules(ctx context.Context, clusterId string) EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest {
	return EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest{
		ApiService: a,
		ctx: ctx,
		clusterId: clusterId,
	}
}

// Execute executes the request
//  @return AsyncResponse
func (a *EventstreamsV1EventStreamsInstancesApiAPIService) EventstreamsSetSecurityGroupRulesExecute(r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetSecurityGroupRulesRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/clusters/{cluster_id}/security-group-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSecurityGroupRulesRequest == nil {
		return localVarReturnValue, nil, reportError("updateSecurityGroupRulesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateSecurityGroupRulesRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsInstancesApiAPIService
	instanceGroupId string
	instanceGroupResizeRequest *InstanceGroupResizeRequest
}

func (r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest) InstanceGroupResizeRequest(instanceGroupResizeRequest InstanceGroupResizeRequest) EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest {
	r.instanceGroupResizeRequest = &instanceGroupResizeRequest
	return r
}

func (r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.EventstreamsSetServerTypeExecute(r)
}

/*
EventstreamsSetServerType Set Server Type

Set Server Type.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param instanceGroupId Instance group ID
 @return EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest
*/
func (a *EventstreamsV1EventStreamsInstancesApiAPIService) EventstreamsSetServerType(ctx context.Context, instanceGroupId string) EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest {
	return EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest{
		ApiService: a,
		ctx: ctx,
		instanceGroupId: instanceGroupId,
	}
}

// Execute executes the request
//  @return AsyncResponse
func (a *EventstreamsV1EventStreamsInstancesApiAPIService) EventstreamsSetServerTypeExecute(r EventstreamsV1EventStreamsInstancesApiAPIEventstreamsSetServerTypeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/instance-groups/{instance_group_id}/resize"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_group_id"+"}", url.PathEscape(parameterValueToString(r.instanceGroupId, "instanceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceGroupResizeRequest == nil {
		return localVarReturnValue, nil, reportError("instanceGroupResizeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.instanceGroupResizeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
