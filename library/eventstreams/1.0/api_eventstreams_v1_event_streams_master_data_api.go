/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2187
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventstreams

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EventstreamsV1EventStreamsMasterDataApiAPIService EventstreamsV1EventStreamsMasterDataApiAPI service
type EventstreamsV1EventStreamsMasterDataApiAPIService service

type EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionPropertiesRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsMasterDataApiAPIService
	dbaasEngineVersionId string
}

func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionPropertiesRequest) Execute() (*EnginePropertyListResponse, *http.Response, error) {
	return r.ApiService.EventstreamsListEngineVersionPropertiesExecute(r)
}

/*
EventstreamsListEngineVersionProperties List Engine Version Properties

List Engine Version Properties.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dbaasEngineVersionId DBaaS engine version ID
 @return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionPropertiesRequest
*/
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListEngineVersionProperties(ctx context.Context, dbaasEngineVersionId string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionPropertiesRequest {
	return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionPropertiesRequest{
		ApiService: a,
		ctx: ctx,
		dbaasEngineVersionId: dbaasEngineVersionId,
	}
}

// Execute executes the request
//  @return EnginePropertyListResponse
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListEngineVersionPropertiesExecute(r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionPropertiesRequest) (*EnginePropertyListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnginePropertyListResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/engine-versions/{dbaas_engine_version_id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"dbaas_engine_version_id"+"}", url.PathEscape(parameterValueToString(r.dbaasEngineVersionId, "dbaasEngineVersionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsMasterDataApiAPIService
	id *string
	productImageType *ProductImageType
	eosIncluded *bool
}

// DBaaS engine version ID
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest) Id(id string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest {
	r.id = &id
	return r
}

// Product image type
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest) ProductImageType(productImageType ProductImageType) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest {
	r.productImageType = &productImageType
	return r
}

// EoS included
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest) EosIncluded(eosIncluded bool) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest {
	r.eosIncluded = &eosIncluded
	return r
}

func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest) Execute() (*EngineListResponse, *http.Response, error) {
	return r.ApiService.EventstreamsListEngineVersionsExecute(r)
}

/*
EventstreamsListEngineVersions List Engine Versions

List Engine Versions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest
*/
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListEngineVersions(ctx context.Context) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest {
	return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EngineListResponse
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListEngineVersionsExecute(r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListEngineVersionsRequest) (*EngineListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EngineListResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/engine-versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
    }
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
    }
	if r.eosIncluded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eos_included", r.eosIncluded, "form", "")
    }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsMasterDataApiAPIService
	majorVersion *string
	productImageType *string
	sort *string
}

// Software major version
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest) MajorVersion(majorVersion string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest {
	r.majorVersion = &majorVersion
	return r
}

// Product image type
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest) ProductImageType(productImageType string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest {
	r.productImageType = &productImageType
	return r
}

// sort
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest) Sort(sort string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest {
	r.sort = &sort
	return r
}

func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest) Execute() (*ParameterGroupListResponse, *http.Response, error) {
	return r.ApiService.EventstreamsListParameterGroupsExecute(r)
}

/*
EventstreamsListParameterGroups List Parameter Groups

List Parameter Groups.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest
*/
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListParameterGroups(ctx context.Context) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest {
	return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ParameterGroupListResponse
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListParameterGroupsExecute(r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParameterGroupsRequest) (*ParameterGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ParameterGroupListResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/parameter-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.majorVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "major_version", r.majorVersion, "form", "")
    }
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
    }
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
    }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsMasterDataApiAPIService
	dbaasParameterGroupId *string
	size *int32
	page *int32
	sort *string
}

// Parameter group ID
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest) DbaasParameterGroupId(dbaasParameterGroupId string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest {
	r.dbaasParameterGroupId = &dbaasParameterGroupId
	return r
}

// size
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest) Size(size int32) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest {
	r.size = &size
	return r
}

// page
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest) Page(page int32) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest {
	r.page = &page
	return r
}

// sort
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest) Sort(sort string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest {
	r.sort = &sort
	return r
}

func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest) Execute() (*ParameterPageResponse, *http.Response, error) {
	return r.ApiService.EventstreamsListParametersExecute(r)
}

/*
EventstreamsListParameters List Parameters

List Parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest
*/
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListParameters(ctx context.Context) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest {
	return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ParameterPageResponse
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListParametersExecute(r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListParametersRequest) (*ParameterPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ParameterPageResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/parameters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dbaasParameterGroupId == nil {
		return localVarReturnValue, nil, reportError("dbaasParameterGroupId is required and must be specified")
	}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
    }
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
    }
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
    }
	parameterAddToHeaderOrQuery(localVarQueryParams, "dbaas_parameter_group_id", r.dbaasParameterGroupId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsMasterDataApiAPIService
	name *string
	productImageType *string
}

// Server type name
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest) Name(name string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest {
	r.name = &name
	return r
}

// Product image type
func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest) ProductImageType(productImageType string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest {
	r.productImageType = &productImageType
	return r
}

func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest) Execute() (*ServerTypeListResponse, *http.Response, error) {
	return r.ApiService.EventstreamsListServerTypesExecute(r)
}

/*
EventstreamsListServerTypes List Server Types

List Server Types.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest
*/
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListServerTypes(ctx context.Context) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest {
	return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServerTypeListResponse
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsListServerTypesExecute(r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsListServerTypesRequest) (*ServerTypeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServerTypeListResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/server-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
    }
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
    }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsShowRequestRequest struct {
	ctx context.Context
	ApiService *EventstreamsV1EventStreamsMasterDataApiAPIService
	requestId string
}

func (r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsShowRequestRequest) Execute() (*RequestStateResponse, *http.Response, error) {
	return r.ApiService.EventstreamsShowRequestExecute(r)
}

/*
EventstreamsShowRequest Show Request

Show Request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param requestId Request ID
 @return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsShowRequestRequest
*/
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsShowRequest(ctx context.Context, requestId string) EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsShowRequestRequest {
	return EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsShowRequestRequest{
		ApiService: a,
		ctx: ctx,
		requestId: requestId,
	}
}

// Execute executes the request
//  @return RequestStateResponse
func (a *EventstreamsV1EventStreamsMasterDataApiAPIService) EventstreamsShowRequestExecute(r EventstreamsV1EventStreamsMasterDataApiAPIEventstreamsShowRequestRequest) (*RequestStateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RequestStateResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/requests/{request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"request_id"+"}", url.PathEscape(parameterValueToString(r.requestId, "requestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "eventstreams 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
