/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2187
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eventstreams

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ServerType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerType{}

// ServerType struct for ServerType
type ServerType struct {
	// Server type cpu core
	CpuCore int32 `json:"cpu_core"`
	// Server type description
	Description string `json:"description"`
	// Server type memory
	MemoryGb int32 `json:"memory_gb"`
	// Server type name
	Name string `json:"name"`
	// Product image type
	ProductImageType string `json:"product_image_type"`
	// Product type
	ProductType string `json:"product_type"`
	// Server type purpose
	Purpose string `json:"purpose"`
	// Server type class
	Type string `json:"type"`
}

type _ServerType ServerType

// NewServerType instantiates a new ServerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerType(cpuCore int32, description string, memoryGb int32, name string, productImageType string, productType string, purpose string, type_ string) *ServerType {
	this := ServerType{}
	this.CpuCore = cpuCore
	this.Description = description
	this.MemoryGb = memoryGb
	this.Name = name
	this.ProductImageType = productImageType
	this.ProductType = productType
	this.Purpose = purpose
	this.Type = type_
	return &this
}

// NewServerTypeWithDefaults instantiates a new ServerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerTypeWithDefaults() *ServerType {
	this := ServerType{}
	return &this
}

// GetCpuCore returns the CpuCore field value
func (o *ServerType) GetCpuCore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CpuCore
}

// GetCpuCoreOk returns a tuple with the CpuCore field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetCpuCoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CpuCore, true
}

// SetCpuCore sets field value
func (o *ServerType) SetCpuCore(v int32) {
	o.CpuCore = v
}

// GetDescription returns the Description field value
func (o *ServerType) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ServerType) SetDescription(v string) {
	o.Description = v
}

// GetMemoryGb returns the MemoryGb field value
func (o *ServerType) GetMemoryGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MemoryGb
}

// GetMemoryGbOk returns a tuple with the MemoryGb field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetMemoryGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryGb, true
}

// SetMemoryGb sets field value
func (o *ServerType) SetMemoryGb(v int32) {
	o.MemoryGb = v
}

// GetName returns the Name field value
func (o *ServerType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServerType) SetName(v string) {
	o.Name = v
}

// GetProductImageType returns the ProductImageType field value
func (o *ServerType) GetProductImageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductImageType
}

// GetProductImageTypeOk returns a tuple with the ProductImageType field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetProductImageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductImageType, true
}

// SetProductImageType sets field value
func (o *ServerType) SetProductImageType(v string) {
	o.ProductImageType = v
}

// GetProductType returns the ProductType field value
func (o *ServerType) GetProductType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetProductTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *ServerType) SetProductType(v string) {
	o.ProductType = v
}

// GetPurpose returns the Purpose field value
func (o *ServerType) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *ServerType) SetPurpose(v string) {
	o.Purpose = v
}

// GetType returns the Type field value
func (o *ServerType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServerType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServerType) SetType(v string) {
	o.Type = v
}

func (o ServerType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu_core"] = o.CpuCore
	toSerialize["description"] = o.Description
	toSerialize["memory_gb"] = o.MemoryGb
	toSerialize["name"] = o.Name
	toSerialize["product_image_type"] = o.ProductImageType
	toSerialize["product_type"] = o.ProductType
	toSerialize["purpose"] = o.Purpose
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ServerType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu_core",
		"description",
		"memory_gb",
		"name",
		"product_image_type",
		"product_type",
		"purpose",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerType := _ServerType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerType)

	if err != nil {
		return err
	}

	*o = ServerType(varServerType)

	return err
}

type NullableServerType struct {
	value *ServerType
	isSet bool
}

func (v NullableServerType) Get() *ServerType {
	return v.value
}

func (v *NullableServerType) Set(val *ServerType) {
	v.value = val
	v.isSet = true
}

func (v NullableServerType) IsSet() bool {
	return v.isSet
}

func (v *NullableServerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerType(val *ServerType) *NullableServerType {
	return &NullableServerType{value: val, isSet: true}
}

func (v NullableServerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


