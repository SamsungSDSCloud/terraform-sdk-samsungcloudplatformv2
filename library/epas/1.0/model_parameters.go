/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package epas

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Parameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Parameters{}

// Parameters struct for Parameters
type Parameters struct {
	// Parameter id
	DbaasParameterGroupId string `json:"dbaas_parameter_group_id"`
	// Parameter default value
	DefaultValue string `json:"default_value"`
	// Parameter description
	Description string `json:"description"`
	// Parameter id
	Id string `json:"id"`
	// Parameter name
	Name string `json:"name"`
	SoftwareType NullableString `json:"software_type"`
}

type _Parameters Parameters

// NewParameters instantiates a new Parameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameters(dbaasParameterGroupId string, defaultValue string, description string, id string, name string, softwareType NullableString) *Parameters {
	this := Parameters{}
	this.DbaasParameterGroupId = dbaasParameterGroupId
	this.DefaultValue = defaultValue
	this.Description = description
	this.Id = id
	this.Name = name
	this.SoftwareType = softwareType
	return &this
}

// NewParametersWithDefaults instantiates a new Parameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParametersWithDefaults() *Parameters {
	this := Parameters{}
	return &this
}

// GetDbaasParameterGroupId returns the DbaasParameterGroupId field value
func (o *Parameters) GetDbaasParameterGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbaasParameterGroupId
}

// GetDbaasParameterGroupIdOk returns a tuple with the DbaasParameterGroupId field value
// and a boolean to check if the value has been set.
func (o *Parameters) GetDbaasParameterGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbaasParameterGroupId, true
}

// SetDbaasParameterGroupId sets field value
func (o *Parameters) SetDbaasParameterGroupId(v string) {
	o.DbaasParameterGroupId = v
}

// GetDefaultValue returns the DefaultValue field value
func (o *Parameters) GetDefaultValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value
// and a boolean to check if the value has been set.
func (o *Parameters) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultValue, true
}

// SetDefaultValue sets field value
func (o *Parameters) SetDefaultValue(v string) {
	o.DefaultValue = v
}

// GetDescription returns the Description field value
func (o *Parameters) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Parameters) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Parameters) SetDescription(v string) {
	o.Description = v
}

// GetId returns the Id field value
func (o *Parameters) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Parameters) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Parameters) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Parameters) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Parameters) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Parameters) SetName(v string) {
	o.Name = v
}

// GetSoftwareType returns the SoftwareType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Parameters) GetSoftwareType() string {
	if o == nil || o.SoftwareType.Get() == nil {
		var ret string
		return ret
	}

	return *o.SoftwareType.Get()
}

// GetSoftwareTypeOk returns a tuple with the SoftwareType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameters) GetSoftwareTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoftwareType.Get(), o.SoftwareType.IsSet()
}

// SetSoftwareType sets field value
func (o *Parameters) SetSoftwareType(v string) {
	o.SoftwareType.Set(&v)
}

func (o Parameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Parameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dbaas_parameter_group_id"] = o.DbaasParameterGroupId
	toSerialize["default_value"] = o.DefaultValue
	toSerialize["description"] = o.Description
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["software_type"] = o.SoftwareType.Get()
	return toSerialize, nil
}

func (o *Parameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dbaas_parameter_group_id",
		"default_value",
		"description",
		"id",
		"name",
		"software_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameters := _Parameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParameters)

	if err != nil {
		return err
	}

	*o = Parameters(varParameters)

	return err
}

type NullableParameters struct {
	value *Parameters
	isSet bool
}

func (v NullableParameters) Get() *Parameters {
	return v.value
}

func (v *NullableParameters) Set(val *Parameters) {
	v.value = val
	v.isSet = true
}

func (v NullableParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameters(val *Parameters) *NullableParameters {
	return &NullableParameters{value: val, isSet: true}
}

func (v NullableParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


