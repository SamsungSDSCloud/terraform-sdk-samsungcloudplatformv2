/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package epas

import (
	"encoding/json"
)

// checks if the EpasBackupOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EpasBackupOption{}

// EpasBackupOption struct for EpasBackupOption
type EpasBackupOption struct {
	ArchiveFrequencyMinute NullableString `json:"archive_frequency_minute,omitempty" validate:"regexp=^(5|10|30|60)$"`
	RetentionPeriodDay NullableString `json:"retention_period_day,omitempty"`
	StartingTimeHour NullableString `json:"starting_time_hour,omitempty"`
}

// NewEpasBackupOption instantiates a new EpasBackupOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpasBackupOption() *EpasBackupOption {
	this := EpasBackupOption{}
	return &this
}

// NewEpasBackupOptionWithDefaults instantiates a new EpasBackupOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpasBackupOptionWithDefaults() *EpasBackupOption {
	this := EpasBackupOption{}
	return &this
}

// GetArchiveFrequencyMinute returns the ArchiveFrequencyMinute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EpasBackupOption) GetArchiveFrequencyMinute() string {
	if o == nil || IsNil(o.ArchiveFrequencyMinute.Get()) {
		var ret string
		return ret
	}
	return *o.ArchiveFrequencyMinute.Get()
}

// GetArchiveFrequencyMinuteOk returns a tuple with the ArchiveFrequencyMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EpasBackupOption) GetArchiveFrequencyMinuteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchiveFrequencyMinute.Get(), o.ArchiveFrequencyMinute.IsSet()
}

// HasArchiveFrequencyMinute returns a boolean if a field has been set.
func (o *EpasBackupOption) HasArchiveFrequencyMinute() bool {
	if o != nil && o.ArchiveFrequencyMinute.IsSet() {
		return true
	}

	return false
}

// SetArchiveFrequencyMinute gets a reference to the given NullableString and assigns it to the ArchiveFrequencyMinute field.
func (o *EpasBackupOption) SetArchiveFrequencyMinute(v string) {
	o.ArchiveFrequencyMinute.Set(&v)
}
// SetArchiveFrequencyMinuteNil sets the value for ArchiveFrequencyMinute to be an explicit nil
func (o *EpasBackupOption) SetArchiveFrequencyMinuteNil() {
	o.ArchiveFrequencyMinute.Set(nil)
}

// UnsetArchiveFrequencyMinute ensures that no value is present for ArchiveFrequencyMinute, not even an explicit nil
func (o *EpasBackupOption) UnsetArchiveFrequencyMinute() {
	o.ArchiveFrequencyMinute.Unset()
}

// GetRetentionPeriodDay returns the RetentionPeriodDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EpasBackupOption) GetRetentionPeriodDay() string {
	if o == nil || IsNil(o.RetentionPeriodDay.Get()) {
		var ret string
		return ret
	}
	return *o.RetentionPeriodDay.Get()
}

// GetRetentionPeriodDayOk returns a tuple with the RetentionPeriodDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EpasBackupOption) GetRetentionPeriodDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetentionPeriodDay.Get(), o.RetentionPeriodDay.IsSet()
}

// HasRetentionPeriodDay returns a boolean if a field has been set.
func (o *EpasBackupOption) HasRetentionPeriodDay() bool {
	if o != nil && o.RetentionPeriodDay.IsSet() {
		return true
	}

	return false
}

// SetRetentionPeriodDay gets a reference to the given NullableString and assigns it to the RetentionPeriodDay field.
func (o *EpasBackupOption) SetRetentionPeriodDay(v string) {
	o.RetentionPeriodDay.Set(&v)
}
// SetRetentionPeriodDayNil sets the value for RetentionPeriodDay to be an explicit nil
func (o *EpasBackupOption) SetRetentionPeriodDayNil() {
	o.RetentionPeriodDay.Set(nil)
}

// UnsetRetentionPeriodDay ensures that no value is present for RetentionPeriodDay, not even an explicit nil
func (o *EpasBackupOption) UnsetRetentionPeriodDay() {
	o.RetentionPeriodDay.Unset()
}

// GetStartingTimeHour returns the StartingTimeHour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EpasBackupOption) GetStartingTimeHour() string {
	if o == nil || IsNil(o.StartingTimeHour.Get()) {
		var ret string
		return ret
	}
	return *o.StartingTimeHour.Get()
}

// GetStartingTimeHourOk returns a tuple with the StartingTimeHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EpasBackupOption) GetStartingTimeHourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartingTimeHour.Get(), o.StartingTimeHour.IsSet()
}

// HasStartingTimeHour returns a boolean if a field has been set.
func (o *EpasBackupOption) HasStartingTimeHour() bool {
	if o != nil && o.StartingTimeHour.IsSet() {
		return true
	}

	return false
}

// SetStartingTimeHour gets a reference to the given NullableString and assigns it to the StartingTimeHour field.
func (o *EpasBackupOption) SetStartingTimeHour(v string) {
	o.StartingTimeHour.Set(&v)
}
// SetStartingTimeHourNil sets the value for StartingTimeHour to be an explicit nil
func (o *EpasBackupOption) SetStartingTimeHourNil() {
	o.StartingTimeHour.Set(nil)
}

// UnsetStartingTimeHour ensures that no value is present for StartingTimeHour, not even an explicit nil
func (o *EpasBackupOption) UnsetStartingTimeHour() {
	o.StartingTimeHour.Unset()
}

func (o EpasBackupOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EpasBackupOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveFrequencyMinute.IsSet() {
		toSerialize["archive_frequency_minute"] = o.ArchiveFrequencyMinute.Get()
	}
	if o.RetentionPeriodDay.IsSet() {
		toSerialize["retention_period_day"] = o.RetentionPeriodDay.Get()
	}
	if o.StartingTimeHour.IsSet() {
		toSerialize["starting_time_hour"] = o.StartingTimeHour.Get()
	}
	return toSerialize, nil
}

type NullableEpasBackupOption struct {
	value *EpasBackupOption
	isSet bool
}

func (v NullableEpasBackupOption) Get() *EpasBackupOption {
	return v.value
}

func (v *NullableEpasBackupOption) Set(val *EpasBackupOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEpasBackupOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEpasBackupOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpasBackupOption(val *EpasBackupOption) *NullableEpasBackupOption {
	return &NullableEpasBackupOption{value: val, isSet: true}
}

func (v NullableEpasBackupOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpasBackupOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


