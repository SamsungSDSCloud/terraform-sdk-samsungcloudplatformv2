/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package epas

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArchiveConfigSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveConfigSetRequest{}

// ArchiveConfigSetRequest struct for ArchiveConfigSetRequest
type ArchiveConfigSetRequest struct {
	// Archive enabled
	ArchiveEnabled bool `json:"archive_enabled"`
	RetentionPeriodDay NullableInt32 `json:"retention_period_day,omitempty"`
}

type _ArchiveConfigSetRequest ArchiveConfigSetRequest

// NewArchiveConfigSetRequest instantiates a new ArchiveConfigSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveConfigSetRequest(archiveEnabled bool) *ArchiveConfigSetRequest {
	this := ArchiveConfigSetRequest{}
	this.ArchiveEnabled = archiveEnabled
	return &this
}

// NewArchiveConfigSetRequestWithDefaults instantiates a new ArchiveConfigSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveConfigSetRequestWithDefaults() *ArchiveConfigSetRequest {
	this := ArchiveConfigSetRequest{}
	return &this
}

// GetArchiveEnabled returns the ArchiveEnabled field value
func (o *ArchiveConfigSetRequest) GetArchiveEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ArchiveEnabled
}

// GetArchiveEnabledOk returns a tuple with the ArchiveEnabled field value
// and a boolean to check if the value has been set.
func (o *ArchiveConfigSetRequest) GetArchiveEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveEnabled, true
}

// SetArchiveEnabled sets field value
func (o *ArchiveConfigSetRequest) SetArchiveEnabled(v bool) {
	o.ArchiveEnabled = v
}

// GetRetentionPeriodDay returns the RetentionPeriodDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchiveConfigSetRequest) GetRetentionPeriodDay() int32 {
	if o == nil || IsNil(o.RetentionPeriodDay.Get()) {
		var ret int32
		return ret
	}
	return *o.RetentionPeriodDay.Get()
}

// GetRetentionPeriodDayOk returns a tuple with the RetentionPeriodDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchiveConfigSetRequest) GetRetentionPeriodDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetentionPeriodDay.Get(), o.RetentionPeriodDay.IsSet()
}

// HasRetentionPeriodDay returns a boolean if a field has been set.
func (o *ArchiveConfigSetRequest) HasRetentionPeriodDay() bool {
	if o != nil && o.RetentionPeriodDay.IsSet() {
		return true
	}

	return false
}

// SetRetentionPeriodDay gets a reference to the given NullableInt32 and assigns it to the RetentionPeriodDay field.
func (o *ArchiveConfigSetRequest) SetRetentionPeriodDay(v int32) {
	o.RetentionPeriodDay.Set(&v)
}
// SetRetentionPeriodDayNil sets the value for RetentionPeriodDay to be an explicit nil
func (o *ArchiveConfigSetRequest) SetRetentionPeriodDayNil() {
	o.RetentionPeriodDay.Set(nil)
}

// UnsetRetentionPeriodDay ensures that no value is present for RetentionPeriodDay, not even an explicit nil
func (o *ArchiveConfigSetRequest) UnsetRetentionPeriodDay() {
	o.RetentionPeriodDay.Unset()
}

func (o ArchiveConfigSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveConfigSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archive_enabled"] = o.ArchiveEnabled
	if o.RetentionPeriodDay.IsSet() {
		toSerialize["retention_period_day"] = o.RetentionPeriodDay.Get()
	}
	return toSerialize, nil
}

func (o *ArchiveConfigSetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archive_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArchiveConfigSetRequest := _ArchiveConfigSetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArchiveConfigSetRequest)

	if err != nil {
		return err
	}

	*o = ArchiveConfigSetRequest(varArchiveConfigSetRequest)

	return err
}

type NullableArchiveConfigSetRequest struct {
	value *ArchiveConfigSetRequest
	isSet bool
}

func (v NullableArchiveConfigSetRequest) Get() *ArchiveConfigSetRequest {
	return v.value
}

func (v *NullableArchiveConfigSetRequest) Set(val *ArchiveConfigSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveConfigSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveConfigSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveConfigSetRequest(val *ArchiveConfigSetRequest) *NullableArchiveConfigSetRequest {
	return &NullableArchiveConfigSetRequest{value: val, isSet: true}
}

func (v NullableArchiveConfigSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveConfigSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


