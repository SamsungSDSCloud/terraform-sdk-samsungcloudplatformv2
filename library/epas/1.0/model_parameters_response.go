/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package epas

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParametersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParametersResponse{}

// ParametersResponse struct for ParametersResponse
type ParametersResponse struct {
	// Parameter contents
	Contents []ParameterDTO `json:"contents"`
	// Parameter count
	Count int32 `json:"count"`
	// Modification time
	ModifiedAt string `json:"modified_at"`
}

type _ParametersResponse ParametersResponse

// NewParametersResponse instantiates a new ParametersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParametersResponse(contents []ParameterDTO, count int32, modifiedAt string) *ParametersResponse {
	this := ParametersResponse{}
	this.Contents = contents
	this.Count = count
	this.ModifiedAt = modifiedAt
	return &this
}

// NewParametersResponseWithDefaults instantiates a new ParametersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParametersResponseWithDefaults() *ParametersResponse {
	this := ParametersResponse{}
	return &this
}

// GetContents returns the Contents field value
func (o *ParametersResponse) GetContents() []ParameterDTO {
	if o == nil {
		var ret []ParameterDTO
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *ParametersResponse) GetContentsOk() ([]ParameterDTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *ParametersResponse) SetContents(v []ParameterDTO) {
	o.Contents = v
}

// GetCount returns the Count field value
func (o *ParametersResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *ParametersResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *ParametersResponse) SetCount(v int32) {
	o.Count = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *ParametersResponse) GetModifiedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *ParametersResponse) GetModifiedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *ParametersResponse) SetModifiedAt(v string) {
	o.ModifiedAt = v
}

func (o ParametersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParametersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contents"] = o.Contents
	toSerialize["count"] = o.Count
	toSerialize["modified_at"] = o.ModifiedAt
	return toSerialize, nil
}

func (o *ParametersResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contents",
		"count",
		"modified_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParametersResponse := _ParametersResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParametersResponse)

	if err != nil {
		return err
	}

	*o = ParametersResponse(varParametersResponse)

	return err
}

type NullableParametersResponse struct {
	value *ParametersResponse
	isSet bool
}

func (v NullableParametersResponse) Get() *ParametersResponse {
	return v.value
}

func (v *NullableParametersResponse) Set(val *ParametersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableParametersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableParametersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParametersResponse(val *ParametersResponse) *NullableParametersResponse {
	return &NullableParametersResponse{value: val, isSet: true}
}

func (v NullableParametersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParametersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


