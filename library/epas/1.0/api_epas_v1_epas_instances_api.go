/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package epas

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EpasV1EpasInstancesApiAPIService EpasV1EpasInstancesApiAPI service
type EpasV1EpasInstancesApiAPIService service

type EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest struct {
	ctx                     context.Context
	ApiService              *EpasV1EpasInstancesApiAPIService
	instanceGroupId         string
	addBlockStoragesRequest *AddBlockStoragesRequest
}

func (r EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest) AddBlockStoragesRequest(addBlockStoragesRequest AddBlockStoragesRequest) EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest {
	r.addBlockStoragesRequest = &addBlockStoragesRequest
	return r
}

func (r EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.EpasAddBlockStoragesExecute(r)
}

/*
EpasAddBlockStorages Add Block Storages

Add Block Storages.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceGroupId Instance group ID
	@return EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest
*/
func (a *EpasV1EpasInstancesApiAPIService) EpasAddBlockStorages(ctx context.Context, instanceGroupId string) EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest {
	return EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest{
		ApiService:      a,
		ctx:             ctx,
		instanceGroupId: instanceGroupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *EpasV1EpasInstancesApiAPIService) EpasAddBlockStoragesExecute(r EpasV1EpasInstancesApiAPIEpasAddBlockStoragesRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/instance-groups/{instance_group_id}/block-storage-groups"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_group_id"+"}", url.PathEscape(parameterValueToString(r.instanceGroupId, "instanceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.addBlockStoragesRequest == nil {
		return localVarReturnValue, nil, reportError("addBlockStoragesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "epas 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.addBlockStoragesRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest struct {
	ctx                            context.Context
	ApiService                     *EpasV1EpasInstancesApiAPIService
	blockStorageGroupId            string
	resizeBlockStorageGroupRequest *ResizeBlockStorageGroupRequest
}

func (r EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest) ResizeBlockStorageGroupRequest(resizeBlockStorageGroupRequest ResizeBlockStorageGroupRequest) EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest {
	r.resizeBlockStorageGroupRequest = &resizeBlockStorageGroupRequest
	return r
}

func (r EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.EpasSetBlockStorageSizeExecute(r)
}

/*
EpasSetBlockStorageSize Set Block Storage Size

Set Block Storage Size.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param blockStorageGroupId Block storage group ID
	@return EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest
*/
func (a *EpasV1EpasInstancesApiAPIService) EpasSetBlockStorageSize(ctx context.Context, blockStorageGroupId string) EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest {
	return EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest{
		ApiService:          a,
		ctx:                 ctx,
		blockStorageGroupId: blockStorageGroupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *EpasV1EpasInstancesApiAPIService) EpasSetBlockStorageSizeExecute(r EpasV1EpasInstancesApiAPIEpasSetBlockStorageSizeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/block-storage-groups/{block_storage_group_id}/resize"
	localVarPath = strings.Replace(localVarPath, "{"+"block_storage_group_id"+"}", url.PathEscape(parameterValueToString(r.blockStorageGroupId, "blockStorageGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resizeBlockStorageGroupRequest == nil {
		return localVarReturnValue, nil, reportError("resizeBlockStorageGroupRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "epas 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resizeBlockStorageGroupRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest struct {
	ctx                             context.Context
	ApiService                      *EpasV1EpasInstancesApiAPIService
	clusterId                       string
	updateSecurityGroupRulesRequest *UpdateSecurityGroupRulesRequest
}

func (r EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest) UpdateSecurityGroupRulesRequest(updateSecurityGroupRulesRequest UpdateSecurityGroupRulesRequest) EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest {
	r.updateSecurityGroupRulesRequest = &updateSecurityGroupRulesRequest
	return r
}

func (r EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.EpasSetSecurityGroupRulesExecute(r)
}

/*
EpasSetSecurityGroupRules Set Security Group Rules

Set Security Group Rules.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Cluster ID
	@return EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest
*/
func (a *EpasV1EpasInstancesApiAPIService) EpasSetSecurityGroupRules(ctx context.Context, clusterId string) EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest {
	return EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *EpasV1EpasInstancesApiAPIService) EpasSetSecurityGroupRulesExecute(r EpasV1EpasInstancesApiAPIEpasSetSecurityGroupRulesRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/clusters/{cluster_id}/security-group-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateSecurityGroupRulesRequest == nil {
		return localVarReturnValue, nil, reportError("updateSecurityGroupRulesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "epas 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateSecurityGroupRulesRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest struct {
	ctx                        context.Context
	ApiService                 *EpasV1EpasInstancesApiAPIService
	instanceGroupId            string
	instanceGroupResizeRequest *InstanceGroupResizeRequest
}

func (r EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest) InstanceGroupResizeRequest(instanceGroupResizeRequest InstanceGroupResizeRequest) EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest {
	r.instanceGroupResizeRequest = &instanceGroupResizeRequest
	return r
}

func (r EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.EpasSetServerTypeExecute(r)
}

/*
EpasSetServerType Set Server Type

Set Server Type.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param instanceGroupId Instance group ID
	@return EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest
*/
func (a *EpasV1EpasInstancesApiAPIService) EpasSetServerType(ctx context.Context, instanceGroupId string) EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest {
	return EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest{
		ApiService:      a,
		ctx:             ctx,
		instanceGroupId: instanceGroupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *EpasV1EpasInstancesApiAPIService) EpasSetServerTypeExecute(r EpasV1EpasInstancesApiAPIEpasSetServerTypeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/instance-groups/{instance_group_id}/resize"
	localVarPath = strings.Replace(localVarPath, "{"+"instance_group_id"+"}", url.PathEscape(parameterValueToString(r.instanceGroupId, "instanceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.instanceGroupResizeRequest == nil {
		return localVarReturnValue, nil, reportError("instanceGroupResizeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "epas 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.instanceGroupResizeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
