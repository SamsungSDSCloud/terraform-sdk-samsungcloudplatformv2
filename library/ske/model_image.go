/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2273
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Image type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Image{}

// Image struct for Image
type Image struct {
	CustomImageName NullableString `json:"custom_image_name,omitempty"`
	// Image OS
	Os string `json:"os"`
	// Image OS Version
	OsVersion string `json:"os_version"`
}

type _Image Image

// NewImage instantiates a new Image object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImage(os string, osVersion string) *Image {
	this := Image{}
	this.Os = os
	this.OsVersion = osVersion
	return &this
}

// NewImageWithDefaults instantiates a new Image object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageWithDefaults() *Image {
	this := Image{}
	return &this
}

// GetCustomImageName returns the CustomImageName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Image) GetCustomImageName() string {
	if o == nil || IsNil(o.CustomImageName.Get()) {
		var ret string
		return ret
	}
	return *o.CustomImageName.Get()
}

// GetCustomImageNameOk returns a tuple with the CustomImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Image) GetCustomImageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomImageName.Get(), o.CustomImageName.IsSet()
}

// HasCustomImageName returns a boolean if a field has been set.
func (o *Image) HasCustomImageName() bool {
	if o != nil && o.CustomImageName.IsSet() {
		return true
	}

	return false
}

// SetCustomImageName gets a reference to the given NullableString and assigns it to the CustomImageName field.
func (o *Image) SetCustomImageName(v string) {
	o.CustomImageName.Set(&v)
}

// SetCustomImageNameNil sets the value for CustomImageName to be an explicit nil
func (o *Image) SetCustomImageNameNil() {
	o.CustomImageName.Set(nil)
}

// UnsetCustomImageName ensures that no value is present for CustomImageName, not even an explicit nil
func (o *Image) UnsetCustomImageName() {
	o.CustomImageName.Unset()
}

// GetOs returns the Os field value
func (o *Image) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *Image) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *Image) SetOs(v string) {
	o.Os = v
}

// GetOsVersion returns the OsVersion field value
func (o *Image) GetOsVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value
// and a boolean to check if the value has been set.
func (o *Image) GetOsVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsVersion, true
}

// SetOsVersion sets field value
func (o *Image) SetOsVersion(v string) {
	o.OsVersion = v
}

func (o Image) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Image) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomImageName.IsSet() {
		toSerialize["custom_image_name"] = o.CustomImageName.Get()
	}
	toSerialize["os"] = o.Os
	toSerialize["os_version"] = o.OsVersion
	return toSerialize, nil
}

func (o *Image) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"os",
		"os_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImage := _Image{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImage)

	if err != nil {
		return err
	}

	*o = Image(varImage)

	return err
}

type NullableImage struct {
	value *Image
	isSet bool
}

func (v NullableImage) Get() *Image {
	return v.value
}

func (v *NullableImage) Set(val *Image) {
	v.value = val
	v.isSet = true
}

func (v NullableImage) IsSet() bool {
	return v.isSet
}

func (v *NullableImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImage(val *Image) *NullableImage {
	return &NullableImage{value: val, isSet: true}
}

func (v NullableImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
