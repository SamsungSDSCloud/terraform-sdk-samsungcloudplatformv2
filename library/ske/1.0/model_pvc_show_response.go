/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PvcShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PvcShowResponse{}

// PvcShowResponse struct for PvcShowResponse
type PvcShowResponse struct {
	Pvc Pvc `json:"pvc"`
}

type _PvcShowResponse PvcShowResponse

// NewPvcShowResponse instantiates a new PvcShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPvcShowResponse(pvc Pvc) *PvcShowResponse {
	this := PvcShowResponse{}
	this.Pvc = pvc
	return &this
}

// NewPvcShowResponseWithDefaults instantiates a new PvcShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPvcShowResponseWithDefaults() *PvcShowResponse {
	this := PvcShowResponse{}
	return &this
}

// GetPvc returns the Pvc field value
func (o *PvcShowResponse) GetPvc() Pvc {
	if o == nil {
		var ret Pvc
		return ret
	}

	return o.Pvc
}

// GetPvcOk returns a tuple with the Pvc field value
// and a boolean to check if the value has been set.
func (o *PvcShowResponse) GetPvcOk() (*Pvc, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pvc, true
}

// SetPvc sets field value
func (o *PvcShowResponse) SetPvc(v Pvc) {
	o.Pvc = v
}

func (o PvcShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PvcShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pvc"] = o.Pvc
	return toSerialize, nil
}

func (o *PvcShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pvc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPvcShowResponse := _PvcShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPvcShowResponse)

	if err != nil {
		return err
	}

	*o = PvcShowResponse(varPvcShowResponse)

	return err
}

type NullablePvcShowResponse struct {
	value *PvcShowResponse
	isSet bool
}

func (v NullablePvcShowResponse) Get() *PvcShowResponse {
	return v.value
}

func (v *NullablePvcShowResponse) Set(val *PvcShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePvcShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePvcShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePvcShowResponse(val *PvcShowResponse) *NullablePvcShowResponse {
	return &NullablePvcShowResponse{value: val, isSet: true}
}

func (v NullablePvcShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePvcShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
