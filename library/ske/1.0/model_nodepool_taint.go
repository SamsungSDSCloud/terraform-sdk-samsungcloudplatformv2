/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodepoolTaint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodepoolTaint{}

// NodepoolTaint struct for NodepoolTaint
type NodepoolTaint struct {
	// Node Pool Taint Effect
	Effect *TaintEffectEnum `json:"effect,omitempty"`
	// Node Pool Taint Key
	Key string `json:"key" validate:"regexp=^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*_\\/)?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$"`
	// Node Pool Taint Value
	Value *string `json:"value,omitempty" validate:"regexp=^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$"`
}

type _NodepoolTaint NodepoolTaint

// NewNodepoolTaint instantiates a new NodepoolTaint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepoolTaint(key string) *NodepoolTaint {
	this := NodepoolTaint{}
	this.Key = key
	var value string = ""
	this.Value = &value
	return &this
}

// NewNodepoolTaintWithDefaults instantiates a new NodepoolTaint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolTaintWithDefaults() *NodepoolTaint {
	this := NodepoolTaint{}
	var value string = ""
	this.Value = &value
	return &this
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *NodepoolTaint) GetEffect() TaintEffectEnum {
	if o == nil || IsNil(o.Effect) {
		var ret TaintEffectEnum
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodepoolTaint) GetEffectOk() (*TaintEffectEnum, bool) {
	if o == nil || IsNil(o.Effect) {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *NodepoolTaint) HasEffect() bool {
	if o != nil && !IsNil(o.Effect) {
		return true
	}

	return false
}

// SetEffect gets a reference to the given TaintEffectEnum and assigns it to the Effect field.
func (o *NodepoolTaint) SetEffect(v TaintEffectEnum) {
	o.Effect = &v
}

// GetKey returns the Key field value
func (o *NodepoolTaint) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *NodepoolTaint) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *NodepoolTaint) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *NodepoolTaint) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodepoolTaint) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *NodepoolTaint) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *NodepoolTaint) SetValue(v string) {
	o.Value = &v
}

func (o NodepoolTaint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodepoolTaint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Effect) {
		toSerialize["effect"] = o.Effect
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *NodepoolTaint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodepoolTaint := _NodepoolTaint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodepoolTaint)

	if err != nil {
		return err
	}

	*o = NodepoolTaint(varNodepoolTaint)

	return err
}

type NullableNodepoolTaint struct {
	value *NodepoolTaint
	isSet bool
}

func (v NullableNodepoolTaint) Get() *NodepoolTaint {
	return v.value
}

func (v *NullableNodepoolTaint) Set(val *NodepoolTaint) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepoolTaint) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepoolTaint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepoolTaint(val *NodepoolTaint) *NullableNodepoolTaint {
	return &NullableNodepoolTaint{value: val, isSet: true}
}

func (v NullableNodepoolTaint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepoolTaint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
