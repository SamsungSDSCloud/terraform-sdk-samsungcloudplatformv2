/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Pvc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pvc{}

// Pvc struct for Pvc
type Pvc struct {
	AccessModes []string       `json:"access_modes"`
	Age         NullableString `json:"age"`
	Annotations []string       `json:"annotations"`
	// Cluster ID
	ClusterId string `json:"cluster_id"`
	// Cluster Name
	ClusterName string       `json:"cluster_name"`
	CreatedAt   NullableTime `json:"created_at"`
	Labels      []string     `json:"labels"`
	// PVC Name
	Name string `json:"name"`
	// Namespace Name
	NamespaceName    string         `json:"namespace_name"`
	PvName           NullableString `json:"pv_name"`
	PvVolumeMode     NullableString `json:"pv_volume_mode"`
	PvcSize          NullableString `json:"pvc_size"`
	PvcStatus        NullableString `json:"pvc_status"`
	StorageClassName NullableString `json:"storage_class_name"`
	// Resource ID
	Uid string `json:"uid"`
	// YAML
	Yaml string `json:"yaml"`
}

type _Pvc Pvc

// NewPvc instantiates a new Pvc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPvc(accessModes []string, age NullableString, annotations []string, clusterId string, clusterName string, createdAt NullableTime, labels []string, name string, namespaceName string, pvName NullableString, pvVolumeMode NullableString, pvcSize NullableString, pvcStatus NullableString, storageClassName NullableString, uid string, yaml string) *Pvc {
	this := Pvc{}
	this.AccessModes = accessModes
	this.Age = age
	this.Annotations = annotations
	this.ClusterId = clusterId
	this.ClusterName = clusterName
	this.CreatedAt = createdAt
	this.Labels = labels
	this.Name = name
	this.NamespaceName = namespaceName
	this.PvName = pvName
	this.PvVolumeMode = pvVolumeMode
	this.PvcSize = pvcSize
	this.PvcStatus = pvcStatus
	this.StorageClassName = storageClassName
	this.Uid = uid
	this.Yaml = yaml
	return &this
}

// NewPvcWithDefaults instantiates a new Pvc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPvcWithDefaults() *Pvc {
	this := Pvc{}
	return &this
}

// GetAccessModes returns the AccessModes field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *Pvc) GetAccessModes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetAccessModesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessModes) {
		return nil, false
	}
	return o.AccessModes, true
}

// SetAccessModes sets field value
func (o *Pvc) SetAccessModes(v []string) {
	o.AccessModes = v
}

// GetAge returns the Age field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Pvc) GetAge() string {
	if o == nil || o.Age.Get() == nil {
		var ret string
		return ret
	}

	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// SetAge sets field value
func (o *Pvc) SetAge(v string) {
	o.Age.Set(&v)
}

// GetAnnotations returns the Annotations field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *Pvc) GetAnnotations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetAnnotationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// SetAnnotations sets field value
func (o *Pvc) SetAnnotations(v []string) {
	o.Annotations = v
}

// GetClusterId returns the ClusterId field value
func (o *Pvc) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *Pvc) SetClusterId(v string) {
	o.ClusterId = v
}

// GetClusterName returns the ClusterName field value
func (o *Pvc) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *Pvc) SetClusterName(v string) {
	o.ClusterName = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Pvc) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *Pvc) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetLabels returns the Labels field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *Pvc) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *Pvc) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *Pvc) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Pvc) SetName(v string) {
	o.Name = v
}

// GetNamespaceName returns the NamespaceName field value
func (o *Pvc) GetNamespaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetNamespaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceName, true
}

// SetNamespaceName sets field value
func (o *Pvc) SetNamespaceName(v string) {
	o.NamespaceName = v
}

// GetPvName returns the PvName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Pvc) GetPvName() string {
	if o == nil || o.PvName.Get() == nil {
		var ret string
		return ret
	}

	return *o.PvName.Get()
}

// GetPvNameOk returns a tuple with the PvName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetPvNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PvName.Get(), o.PvName.IsSet()
}

// SetPvName sets field value
func (o *Pvc) SetPvName(v string) {
	o.PvName.Set(&v)
}

// GetPvVolumeMode returns the PvVolumeMode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Pvc) GetPvVolumeMode() string {
	if o == nil || o.PvVolumeMode.Get() == nil {
		var ret string
		return ret
	}

	return *o.PvVolumeMode.Get()
}

// GetPvVolumeModeOk returns a tuple with the PvVolumeMode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetPvVolumeModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PvVolumeMode.Get(), o.PvVolumeMode.IsSet()
}

// SetPvVolumeMode sets field value
func (o *Pvc) SetPvVolumeMode(v string) {
	o.PvVolumeMode.Set(&v)
}

// GetPvcSize returns the PvcSize field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Pvc) GetPvcSize() string {
	if o == nil || o.PvcSize.Get() == nil {
		var ret string
		return ret
	}

	return *o.PvcSize.Get()
}

// GetPvcSizeOk returns a tuple with the PvcSize field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetPvcSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PvcSize.Get(), o.PvcSize.IsSet()
}

// SetPvcSize sets field value
func (o *Pvc) SetPvcSize(v string) {
	o.PvcSize.Set(&v)
}

// GetPvcStatus returns the PvcStatus field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Pvc) GetPvcStatus() string {
	if o == nil || o.PvcStatus.Get() == nil {
		var ret string
		return ret
	}

	return *o.PvcStatus.Get()
}

// GetPvcStatusOk returns a tuple with the PvcStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetPvcStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PvcStatus.Get(), o.PvcStatus.IsSet()
}

// SetPvcStatus sets field value
func (o *Pvc) SetPvcStatus(v string) {
	o.PvcStatus.Set(&v)
}

// GetStorageClassName returns the StorageClassName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Pvc) GetStorageClassName() string {
	if o == nil || o.StorageClassName.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageClassName.Get()
}

// GetStorageClassNameOk returns a tuple with the StorageClassName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pvc) GetStorageClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageClassName.Get(), o.StorageClassName.IsSet()
}

// SetStorageClassName sets field value
func (o *Pvc) SetStorageClassName(v string) {
	o.StorageClassName.Set(&v)
}

// GetUid returns the Uid field value
func (o *Pvc) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *Pvc) SetUid(v string) {
	o.Uid = v
}

// GetYaml returns the Yaml field value
func (o *Pvc) GetYaml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Yaml
}

// GetYamlOk returns a tuple with the Yaml field value
// and a boolean to check if the value has been set.
func (o *Pvc) GetYamlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Yaml, true
}

// SetYaml sets field value
func (o *Pvc) SetYaml(v string) {
	o.Yaml = v
}

func (o Pvc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pvc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessModes != nil {
		toSerialize["access_modes"] = o.AccessModes
	}
	toSerialize["age"] = o.Age.Get()
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	toSerialize["cluster_id"] = o.ClusterId
	toSerialize["cluster_name"] = o.ClusterName
	toSerialize["created_at"] = o.CreatedAt.Get()
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["namespace_name"] = o.NamespaceName
	toSerialize["pv_name"] = o.PvName.Get()
	toSerialize["pv_volume_mode"] = o.PvVolumeMode.Get()
	toSerialize["pvc_size"] = o.PvcSize.Get()
	toSerialize["pvc_status"] = o.PvcStatus.Get()
	toSerialize["storage_class_name"] = o.StorageClassName.Get()
	toSerialize["uid"] = o.Uid
	toSerialize["yaml"] = o.Yaml
	return toSerialize, nil
}

func (o *Pvc) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_modes",
		"age",
		"annotations",
		"cluster_id",
		"cluster_name",
		"created_at",
		"labels",
		"name",
		"namespace_name",
		"pv_name",
		"pv_volume_mode",
		"pvc_size",
		"pvc_status",
		"storage_class_name",
		"uid",
		"yaml",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPvc := _Pvc{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPvc)

	if err != nil {
		return err
	}

	*o = Pvc(varPvc)

	return err
}

type NullablePvc struct {
	value *Pvc
	isSet bool
}

func (v NullablePvc) Get() *Pvc {
	return v.value
}

func (v *NullablePvc) Set(val *Pvc) {
	v.value = val
	v.isSet = true
}

func (v NullablePvc) IsSet() bool {
	return v.isSet
}

func (v *NullablePvc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePvc(val *Pvc) *NullablePvc {
	return &NullablePvc{value: val, isSet: true}
}

func (v NullablePvc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePvc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
