/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
)

// checks if the NodepoolUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodepoolUpdateRequest{}

// NodepoolUpdateRequest struct for NodepoolUpdateRequest
type NodepoolUpdateRequest struct {
	DesiredNodeCount NullableInt32 `json:"desired_node_count,omitempty"`
	IsAutoRecovery   NullableBool  `json:"is_auto_recovery,omitempty"`
	IsAutoScale      NullableBool  `json:"is_auto_scale,omitempty"`
	MaxNodeCount     NullableInt32 `json:"max_node_count,omitempty"`
	MinNodeCount     NullableInt32 `json:"min_node_count,omitempty"`
}

// NewNodepoolUpdateRequest instantiates a new NodepoolUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepoolUpdateRequest() *NodepoolUpdateRequest {
	this := NodepoolUpdateRequest{}
	return &this
}

// NewNodepoolUpdateRequestWithDefaults instantiates a new NodepoolUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolUpdateRequestWithDefaults() *NodepoolUpdateRequest {
	this := NodepoolUpdateRequest{}
	return &this
}

// GetDesiredNodeCount returns the DesiredNodeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodepoolUpdateRequest) GetDesiredNodeCount() int32 {
	if o == nil || IsNil(o.DesiredNodeCount.Get()) {
		var ret int32
		return ret
	}
	return *o.DesiredNodeCount.Get()
}

// GetDesiredNodeCountOk returns a tuple with the DesiredNodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodepoolUpdateRequest) GetDesiredNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DesiredNodeCount.Get(), o.DesiredNodeCount.IsSet()
}

// HasDesiredNodeCount returns a boolean if a field has been set.
func (o *NodepoolUpdateRequest) HasDesiredNodeCount() bool {
	if o != nil && o.DesiredNodeCount.IsSet() {
		return true
	}

	return false
}

// SetDesiredNodeCount gets a reference to the given NullableInt32 and assigns it to the DesiredNodeCount field.
func (o *NodepoolUpdateRequest) SetDesiredNodeCount(v int32) {
	o.DesiredNodeCount.Set(&v)
}

// SetDesiredNodeCountNil sets the value for DesiredNodeCount to be an explicit nil
func (o *NodepoolUpdateRequest) SetDesiredNodeCountNil() {
	o.DesiredNodeCount.Set(nil)
}

// UnsetDesiredNodeCount ensures that no value is present for DesiredNodeCount, not even an explicit nil
func (o *NodepoolUpdateRequest) UnsetDesiredNodeCount() {
	o.DesiredNodeCount.Unset()
}

// GetIsAutoRecovery returns the IsAutoRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodepoolUpdateRequest) GetIsAutoRecovery() bool {
	if o == nil || IsNil(o.IsAutoRecovery.Get()) {
		var ret bool
		return ret
	}
	return *o.IsAutoRecovery.Get()
}

// GetIsAutoRecoveryOk returns a tuple with the IsAutoRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodepoolUpdateRequest) GetIsAutoRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAutoRecovery.Get(), o.IsAutoRecovery.IsSet()
}

// HasIsAutoRecovery returns a boolean if a field has been set.
func (o *NodepoolUpdateRequest) HasIsAutoRecovery() bool {
	if o != nil && o.IsAutoRecovery.IsSet() {
		return true
	}

	return false
}

// SetIsAutoRecovery gets a reference to the given NullableBool and assigns it to the IsAutoRecovery field.
func (o *NodepoolUpdateRequest) SetIsAutoRecovery(v bool) {
	o.IsAutoRecovery.Set(&v)
}

// SetIsAutoRecoveryNil sets the value for IsAutoRecovery to be an explicit nil
func (o *NodepoolUpdateRequest) SetIsAutoRecoveryNil() {
	o.IsAutoRecovery.Set(nil)
}

// UnsetIsAutoRecovery ensures that no value is present for IsAutoRecovery, not even an explicit nil
func (o *NodepoolUpdateRequest) UnsetIsAutoRecovery() {
	o.IsAutoRecovery.Unset()
}

// GetIsAutoScale returns the IsAutoScale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodepoolUpdateRequest) GetIsAutoScale() bool {
	if o == nil || IsNil(o.IsAutoScale.Get()) {
		var ret bool
		return ret
	}
	return *o.IsAutoScale.Get()
}

// GetIsAutoScaleOk returns a tuple with the IsAutoScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodepoolUpdateRequest) GetIsAutoScaleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAutoScale.Get(), o.IsAutoScale.IsSet()
}

// HasIsAutoScale returns a boolean if a field has been set.
func (o *NodepoolUpdateRequest) HasIsAutoScale() bool {
	if o != nil && o.IsAutoScale.IsSet() {
		return true
	}

	return false
}

// SetIsAutoScale gets a reference to the given NullableBool and assigns it to the IsAutoScale field.
func (o *NodepoolUpdateRequest) SetIsAutoScale(v bool) {
	o.IsAutoScale.Set(&v)
}

// SetIsAutoScaleNil sets the value for IsAutoScale to be an explicit nil
func (o *NodepoolUpdateRequest) SetIsAutoScaleNil() {
	o.IsAutoScale.Set(nil)
}

// UnsetIsAutoScale ensures that no value is present for IsAutoScale, not even an explicit nil
func (o *NodepoolUpdateRequest) UnsetIsAutoScale() {
	o.IsAutoScale.Unset()
}

// GetMaxNodeCount returns the MaxNodeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodepoolUpdateRequest) GetMaxNodeCount() int32 {
	if o == nil || IsNil(o.MaxNodeCount.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxNodeCount.Get()
}

// GetMaxNodeCountOk returns a tuple with the MaxNodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodepoolUpdateRequest) GetMaxNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxNodeCount.Get(), o.MaxNodeCount.IsSet()
}

// HasMaxNodeCount returns a boolean if a field has been set.
func (o *NodepoolUpdateRequest) HasMaxNodeCount() bool {
	if o != nil && o.MaxNodeCount.IsSet() {
		return true
	}

	return false
}

// SetMaxNodeCount gets a reference to the given NullableInt32 and assigns it to the MaxNodeCount field.
func (o *NodepoolUpdateRequest) SetMaxNodeCount(v int32) {
	o.MaxNodeCount.Set(&v)
}

// SetMaxNodeCountNil sets the value for MaxNodeCount to be an explicit nil
func (o *NodepoolUpdateRequest) SetMaxNodeCountNil() {
	o.MaxNodeCount.Set(nil)
}

// UnsetMaxNodeCount ensures that no value is present for MaxNodeCount, not even an explicit nil
func (o *NodepoolUpdateRequest) UnsetMaxNodeCount() {
	o.MaxNodeCount.Unset()
}

// GetMinNodeCount returns the MinNodeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodepoolUpdateRequest) GetMinNodeCount() int32 {
	if o == nil || IsNil(o.MinNodeCount.Get()) {
		var ret int32
		return ret
	}
	return *o.MinNodeCount.Get()
}

// GetMinNodeCountOk returns a tuple with the MinNodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodepoolUpdateRequest) GetMinNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinNodeCount.Get(), o.MinNodeCount.IsSet()
}

// HasMinNodeCount returns a boolean if a field has been set.
func (o *NodepoolUpdateRequest) HasMinNodeCount() bool {
	if o != nil && o.MinNodeCount.IsSet() {
		return true
	}

	return false
}

// SetMinNodeCount gets a reference to the given NullableInt32 and assigns it to the MinNodeCount field.
func (o *NodepoolUpdateRequest) SetMinNodeCount(v int32) {
	o.MinNodeCount.Set(&v)
}

// SetMinNodeCountNil sets the value for MinNodeCount to be an explicit nil
func (o *NodepoolUpdateRequest) SetMinNodeCountNil() {
	o.MinNodeCount.Set(nil)
}

// UnsetMinNodeCount ensures that no value is present for MinNodeCount, not even an explicit nil
func (o *NodepoolUpdateRequest) UnsetMinNodeCount() {
	o.MinNodeCount.Unset()
}

func (o NodepoolUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodepoolUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DesiredNodeCount.IsSet() {
		toSerialize["desired_node_count"] = o.DesiredNodeCount.Get()
	}
	if o.IsAutoRecovery.IsSet() {
		toSerialize["is_auto_recovery"] = o.IsAutoRecovery.Get()
	}
	if o.IsAutoScale.IsSet() {
		toSerialize["is_auto_scale"] = o.IsAutoScale.Get()
	}
	if o.MaxNodeCount.IsSet() {
		toSerialize["max_node_count"] = o.MaxNodeCount.Get()
	}
	if o.MinNodeCount.IsSet() {
		toSerialize["min_node_count"] = o.MinNodeCount.Get()
	}
	return toSerialize, nil
}

type NullableNodepoolUpdateRequest struct {
	value *NodepoolUpdateRequest
	isSet bool
}

func (v NullableNodepoolUpdateRequest) Get() *NodepoolUpdateRequest {
	return v.value
}

func (v *NullableNodepoolUpdateRequest) Set(val *NodepoolUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepoolUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepoolUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepoolUpdateRequest(val *NodepoolUpdateRequest) *NullableNodepoolUpdateRequest {
	return &NullableNodepoolUpdateRequest{value: val, isSet: true}
}

func (v NullableNodepoolUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepoolUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
