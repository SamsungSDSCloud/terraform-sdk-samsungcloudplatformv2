/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ConfigMapShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigMapShowResponse{}

// ConfigMapShowResponse struct for ConfigMapShowResponse
type ConfigMapShowResponse struct {
	ConfigMap ConfigMap `json:"config_map"`
}

type _ConfigMapShowResponse ConfigMapShowResponse

// NewConfigMapShowResponse instantiates a new ConfigMapShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigMapShowResponse(configMap ConfigMap) *ConfigMapShowResponse {
	this := ConfigMapShowResponse{}
	this.ConfigMap = configMap
	return &this
}

// NewConfigMapShowResponseWithDefaults instantiates a new ConfigMapShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigMapShowResponseWithDefaults() *ConfigMapShowResponse {
	this := ConfigMapShowResponse{}
	return &this
}

// GetConfigMap returns the ConfigMap field value
func (o *ConfigMapShowResponse) GetConfigMap() ConfigMap {
	if o == nil {
		var ret ConfigMap
		return ret
	}

	return o.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value
// and a boolean to check if the value has been set.
func (o *ConfigMapShowResponse) GetConfigMapOk() (*ConfigMap, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigMap, true
}

// SetConfigMap sets field value
func (o *ConfigMapShowResponse) SetConfigMap(v ConfigMap) {
	o.ConfigMap = v
}

func (o ConfigMapShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigMapShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config_map"] = o.ConfigMap
	return toSerialize, nil
}

func (o *ConfigMapShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config_map",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigMapShowResponse := _ConfigMapShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConfigMapShowResponse)

	if err != nil {
		return err
	}

	*o = ConfigMapShowResponse(varConfigMapShowResponse)

	return err
}

type NullableConfigMapShowResponse struct {
	value *ConfigMapShowResponse
	isSet bool
}

func (v NullableConfigMapShowResponse) Get() *ConfigMapShowResponse {
	return v.value
}

func (v *NullableConfigMapShowResponse) Set(val *ConfigMapShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigMapShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigMapShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigMapShowResponse(val *ConfigMapShowResponse) *NullableConfigMapShowResponse {
	return &NullableConfigMapShowResponse{value: val, isSet: true}
}

func (v NullableConfigMapShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigMapShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
