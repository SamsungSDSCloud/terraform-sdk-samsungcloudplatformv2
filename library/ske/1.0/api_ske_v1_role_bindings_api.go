/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SkeV1RoleBindingsApiAPIService SkeV1RoleBindingsApiAPI service
type SkeV1RoleBindingsApiAPIService service

type SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest struct {
	ctx           context.Context
	ApiService    *SkeV1RoleBindingsApiAPIService
	clusterId     string
	namespaceName string
	name          *Name1
}

// Names
func (r SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest) Name(name Name1) SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest {
	r.name = &name
	return r
}

func (r SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRoleBindingExecute(r)
}

/*
DeleteRoleBinding Delete Role Binding

delete a role binding

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Cluster ID
	@param namespaceName Namespace Name
	@return SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest
*/
func (a *SkeV1RoleBindingsApiAPIService) DeleteRoleBinding(ctx context.Context, clusterId string, namespaceName string) SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest {
	return SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest{
		ApiService:    a,
		ctx:           ctx,
		clusterId:     clusterId,
		namespaceName: namespaceName,
	}
}

// Execute executes the request
func (a *SkeV1RoleBindingsApiAPIService) DeleteRoleBindingExecute(r SkeV1RoleBindingsApiAPIDeleteRoleBindingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/clusters/{cluster_id}/namespaces/{namespace_name}/rolebindings"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace_name"+"}", url.PathEscape(parameterValueToString(r.namespaceName, "namespaceName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return nil, reportError("name is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "ske 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SkeV1RoleBindingsApiAPIListRoleBindingsRequest struct {
	ctx           context.Context
	ApiService    *SkeV1RoleBindingsApiAPIService
	clusterId     string
	namespaceName string
	size          *int32
	page          *int32
	sort          *string
	name          *string
	systemObject  *bool
}

// size
func (r SkeV1RoleBindingsApiAPIListRoleBindingsRequest) Size(size int32) SkeV1RoleBindingsApiAPIListRoleBindingsRequest {
	r.size = &size
	return r
}

// page
func (r SkeV1RoleBindingsApiAPIListRoleBindingsRequest) Page(page int32) SkeV1RoleBindingsApiAPIListRoleBindingsRequest {
	r.page = &page
	return r
}

// sort
func (r SkeV1RoleBindingsApiAPIListRoleBindingsRequest) Sort(sort string) SkeV1RoleBindingsApiAPIListRoleBindingsRequest {
	r.sort = &sort
	return r
}

// Role Binding Name
func (r SkeV1RoleBindingsApiAPIListRoleBindingsRequest) Name(name string) SkeV1RoleBindingsApiAPIListRoleBindingsRequest {
	r.name = &name
	return r
}

// System Object
func (r SkeV1RoleBindingsApiAPIListRoleBindingsRequest) SystemObject(systemObject bool) SkeV1RoleBindingsApiAPIListRoleBindingsRequest {
	r.systemObject = &systemObject
	return r
}

func (r SkeV1RoleBindingsApiAPIListRoleBindingsRequest) Execute() (*RoleBindingListResponse, *http.Response, error) {
	return r.ApiService.ListRoleBindingsExecute(r)
}

/*
ListRoleBindings List Role Bindings

get role binding list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Cluster ID
	@param namespaceName Namespace Name
	@return SkeV1RoleBindingsApiAPIListRoleBindingsRequest
*/
func (a *SkeV1RoleBindingsApiAPIService) ListRoleBindings(ctx context.Context, clusterId string, namespaceName string) SkeV1RoleBindingsApiAPIListRoleBindingsRequest {
	return SkeV1RoleBindingsApiAPIListRoleBindingsRequest{
		ApiService:    a,
		ctx:           ctx,
		clusterId:     clusterId,
		namespaceName: namespaceName,
	}
}

// Execute executes the request
//
//	@return RoleBindingListResponse
func (a *SkeV1RoleBindingsApiAPIService) ListRoleBindingsExecute(r SkeV1RoleBindingsApiAPIListRoleBindingsRequest) (*RoleBindingListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoleBindingListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/clusters/{cluster_id}/namespaces/{namespace_name}/rolebindings"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace_name"+"}", url.PathEscape(parameterValueToString(r.namespaceName, "namespaceName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.systemObject != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "system_object", r.systemObject, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "ske 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SkeV1RoleBindingsApiAPIShowRoleBindingRequest struct {
	ctx             context.Context
	ApiService      *SkeV1RoleBindingsApiAPIService
	clusterId       string
	namespaceName   string
	roleBindingName string
}

func (r SkeV1RoleBindingsApiAPIShowRoleBindingRequest) Execute() (*RoleBindingShowResponse, *http.Response, error) {
	return r.ApiService.ShowRoleBindingExecute(r)
}

/*
ShowRoleBinding Show Role Binding

show a role binding

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Cluster ID
	@param namespaceName Namespace Name
	@param roleBindingName Role Binding Name
	@return SkeV1RoleBindingsApiAPIShowRoleBindingRequest
*/
func (a *SkeV1RoleBindingsApiAPIService) ShowRoleBinding(ctx context.Context, clusterId string, namespaceName string, roleBindingName string) SkeV1RoleBindingsApiAPIShowRoleBindingRequest {
	return SkeV1RoleBindingsApiAPIShowRoleBindingRequest{
		ApiService:      a,
		ctx:             ctx,
		clusterId:       clusterId,
		namespaceName:   namespaceName,
		roleBindingName: roleBindingName,
	}
}

// Execute executes the request
//
//	@return RoleBindingShowResponse
func (a *SkeV1RoleBindingsApiAPIService) ShowRoleBindingExecute(r SkeV1RoleBindingsApiAPIShowRoleBindingRequest) (*RoleBindingShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RoleBindingShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/clusters/{cluster_id}/namespaces/{namespace_name}/rolebindings/{role_binding_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace_name"+"}", url.PathEscape(parameterValueToString(r.namespaceName, "namespaceName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_binding_name"+"}", url.PathEscape(parameterValueToString(r.roleBindingName, "roleBindingName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "ske 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
