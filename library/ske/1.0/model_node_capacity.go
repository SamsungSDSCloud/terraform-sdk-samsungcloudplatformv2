/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodeCapacity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeCapacity{}

// NodeCapacity struct for NodeCapacity
type NodeCapacity struct {
	// CPU
	Cpu string `json:"cpu"`
	// Ephemeral Storage
	EphemeralStorage string         `json:"ephemeral_storage"`
	Gpu              NullableString `json:"gpu,omitempty"`
	// Hugepages 1Gi
	Hugepages1Gi string `json:"hugepages_1Gi"`
	// Hugepages 2Mi
	Hugepages2Mi string `json:"hugepages_2Mi"`
	// Memory
	Memory string `json:"memory"`
	// Node Capacity Type
	NodeCapacityType string `json:"node_capacity_type"`
	// Pod Count
	PodCount string `json:"pod_count"`
}

type _NodeCapacity NodeCapacity

// NewNodeCapacity instantiates a new NodeCapacity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeCapacity(cpu string, ephemeralStorage string, hugepages1Gi string, hugepages2Mi string, memory string, nodeCapacityType string, podCount string) *NodeCapacity {
	this := NodeCapacity{}
	this.Cpu = cpu
	this.EphemeralStorage = ephemeralStorage
	this.Hugepages1Gi = hugepages1Gi
	this.Hugepages2Mi = hugepages2Mi
	this.Memory = memory
	this.NodeCapacityType = nodeCapacityType
	this.PodCount = podCount
	return &this
}

// NewNodeCapacityWithDefaults instantiates a new NodeCapacity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeCapacityWithDefaults() *NodeCapacity {
	this := NodeCapacity{}
	return &this
}

// GetCpu returns the Cpu field value
func (o *NodeCapacity) GetCpu() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *NodeCapacity) GetCpuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *NodeCapacity) SetCpu(v string) {
	o.Cpu = v
}

// GetEphemeralStorage returns the EphemeralStorage field value
func (o *NodeCapacity) GetEphemeralStorage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EphemeralStorage
}

// GetEphemeralStorageOk returns a tuple with the EphemeralStorage field value
// and a boolean to check if the value has been set.
func (o *NodeCapacity) GetEphemeralStorageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EphemeralStorage, true
}

// SetEphemeralStorage sets field value
func (o *NodeCapacity) SetEphemeralStorage(v string) {
	o.EphemeralStorage = v
}

// GetGpu returns the Gpu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeCapacity) GetGpu() string {
	if o == nil || IsNil(o.Gpu.Get()) {
		var ret string
		return ret
	}
	return *o.Gpu.Get()
}

// GetGpuOk returns a tuple with the Gpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeCapacity) GetGpuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gpu.Get(), o.Gpu.IsSet()
}

// HasGpu returns a boolean if a field has been set.
func (o *NodeCapacity) HasGpu() bool {
	if o != nil && o.Gpu.IsSet() {
		return true
	}

	return false
}

// SetGpu gets a reference to the given NullableString and assigns it to the Gpu field.
func (o *NodeCapacity) SetGpu(v string) {
	o.Gpu.Set(&v)
}

// SetGpuNil sets the value for Gpu to be an explicit nil
func (o *NodeCapacity) SetGpuNil() {
	o.Gpu.Set(nil)
}

// UnsetGpu ensures that no value is present for Gpu, not even an explicit nil
func (o *NodeCapacity) UnsetGpu() {
	o.Gpu.Unset()
}

// GetHugepages1Gi returns the Hugepages1Gi field value
func (o *NodeCapacity) GetHugepages1Gi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hugepages1Gi
}

// GetHugepages1GiOk returns a tuple with the Hugepages1Gi field value
// and a boolean to check if the value has been set.
func (o *NodeCapacity) GetHugepages1GiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hugepages1Gi, true
}

// SetHugepages1Gi sets field value
func (o *NodeCapacity) SetHugepages1Gi(v string) {
	o.Hugepages1Gi = v
}

// GetHugepages2Mi returns the Hugepages2Mi field value
func (o *NodeCapacity) GetHugepages2Mi() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hugepages2Mi
}

// GetHugepages2MiOk returns a tuple with the Hugepages2Mi field value
// and a boolean to check if the value has been set.
func (o *NodeCapacity) GetHugepages2MiOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hugepages2Mi, true
}

// SetHugepages2Mi sets field value
func (o *NodeCapacity) SetHugepages2Mi(v string) {
	o.Hugepages2Mi = v
}

// GetMemory returns the Memory field value
func (o *NodeCapacity) GetMemory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value
// and a boolean to check if the value has been set.
func (o *NodeCapacity) GetMemoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Memory, true
}

// SetMemory sets field value
func (o *NodeCapacity) SetMemory(v string) {
	o.Memory = v
}

// GetNodeCapacityType returns the NodeCapacityType field value
func (o *NodeCapacity) GetNodeCapacityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeCapacityType
}

// GetNodeCapacityTypeOk returns a tuple with the NodeCapacityType field value
// and a boolean to check if the value has been set.
func (o *NodeCapacity) GetNodeCapacityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeCapacityType, true
}

// SetNodeCapacityType sets field value
func (o *NodeCapacity) SetNodeCapacityType(v string) {
	o.NodeCapacityType = v
}

// GetPodCount returns the PodCount field value
func (o *NodeCapacity) GetPodCount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PodCount
}

// GetPodCountOk returns a tuple with the PodCount field value
// and a boolean to check if the value has been set.
func (o *NodeCapacity) GetPodCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PodCount, true
}

// SetPodCount sets field value
func (o *NodeCapacity) SetPodCount(v string) {
	o.PodCount = v
}

func (o NodeCapacity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeCapacity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cpu"] = o.Cpu
	toSerialize["ephemeral_storage"] = o.EphemeralStorage
	if o.Gpu.IsSet() {
		toSerialize["gpu"] = o.Gpu.Get()
	}
	toSerialize["hugepages_1Gi"] = o.Hugepages1Gi
	toSerialize["hugepages_2Mi"] = o.Hugepages2Mi
	toSerialize["memory"] = o.Memory
	toSerialize["node_capacity_type"] = o.NodeCapacityType
	toSerialize["pod_count"] = o.PodCount
	return toSerialize, nil
}

func (o *NodeCapacity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cpu",
		"ephemeral_storage",
		"hugepages_1Gi",
		"hugepages_2Mi",
		"memory",
		"node_capacity_type",
		"pod_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeCapacity := _NodeCapacity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeCapacity)

	if err != nil {
		return err
	}

	*o = NodeCapacity(varNodeCapacity)

	return err
}

type NullableNodeCapacity struct {
	value *NodeCapacity
	isSet bool
}

func (v NullableNodeCapacity) Get() *NodeCapacity {
	return v.value
}

func (v *NullableNodeCapacity) Set(val *NodeCapacity) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeCapacity) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeCapacity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeCapacity(val *NodeCapacity) *NullableNodeCapacity {
	return &NullableNodeCapacity{value: val, isSet: true}
}

func (v NullableNodeCapacity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeCapacity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
