/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"fmt"
)

// ClusterKubeconfigType the model 'ClusterKubeconfigType'
type ClusterKubeconfigType string

// List of ClusterKubeconfigType
const (
	CLUSTERKUBECONFIGTYPE_PRIVATE ClusterKubeconfigType = "private"
	CLUSTERKUBECONFIGTYPE_PUBLIC  ClusterKubeconfigType = "public"
)

// All allowed values of ClusterKubeconfigType enum
var AllowedClusterKubeconfigTypeEnumValues = []ClusterKubeconfigType{
	"private",
	"public",
}

func (v *ClusterKubeconfigType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterKubeconfigType(value)
	for _, existing := range AllowedClusterKubeconfigTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterKubeconfigType", value)
}

// NewClusterKubeconfigTypeFromValue returns a pointer to a valid ClusterKubeconfigType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterKubeconfigTypeFromValue(v string) (*ClusterKubeconfigType, error) {
	ev := ClusterKubeconfigType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterKubeconfigType: valid values are %v", v, AllowedClusterKubeconfigTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterKubeconfigType) IsValid() bool {
	for _, existing := range AllowedClusterKubeconfigTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterKubeconfigType value
func (v ClusterKubeconfigType) Ptr() *ClusterKubeconfigType {
	return &v
}

type NullableClusterKubeconfigType struct {
	value *ClusterKubeconfigType
	isSet bool
}

func (v NullableClusterKubeconfigType) Get() *ClusterKubeconfigType {
	return v.value
}

func (v *NullableClusterKubeconfigType) Set(val *ClusterKubeconfigType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterKubeconfigType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterKubeconfigType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterKubeconfigType(val *ClusterKubeconfigType) *NullableClusterKubeconfigType {
	return &NullableClusterKubeconfigType{value: val, isSet: true}
}

func (v NullableClusterKubeconfigType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterKubeconfigType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
