/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event struct for Event
type Event struct {
	// Age
	Age                string         `json:"age"`
	EventComponent     NullableString `json:"event_component"`
	EventCount         NullableString `json:"event_count"`
	EventFirstSeenDate NullableTime   `json:"event_first_seen_date"`
	EventHost          NullableString `json:"event_host"`
	// Event Kind
	EventKind         string         `json:"event_kind"`
	EventLastSeenDate NullableTime   `json:"event_last_seen_date"`
	EventMessage      NullableString `json:"event_message"`
	EventReason       NullableString `json:"event_reason"`
	EventType         NullableString `json:"event_type"`
	// Name
	Name          string         `json:"name"`
	NamespaceName NullableString `json:"namespace_name"`
	// Resource ID
	Uid string `json:"uid"`
}

type _Event Event

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(age string, eventComponent NullableString, eventCount NullableString, eventFirstSeenDate NullableTime, eventHost NullableString, eventKind string, eventLastSeenDate NullableTime, eventMessage NullableString, eventReason NullableString, eventType NullableString, name string, namespaceName NullableString, uid string) *Event {
	this := Event{}
	this.Age = age
	this.EventComponent = eventComponent
	this.EventCount = eventCount
	this.EventFirstSeenDate = eventFirstSeenDate
	this.EventHost = eventHost
	this.EventKind = eventKind
	this.EventLastSeenDate = eventLastSeenDate
	this.EventMessage = eventMessage
	this.EventReason = eventReason
	this.EventType = eventType
	this.Name = name
	this.NamespaceName = namespaceName
	this.Uid = uid
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetAge returns the Age field value
func (o *Event) GetAge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Age
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
func (o *Event) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Age, true
}

// SetAge sets field value
func (o *Event) SetAge(v string) {
	o.Age = v
}

// GetEventComponent returns the EventComponent field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Event) GetEventComponent() string {
	if o == nil || o.EventComponent.Get() == nil {
		var ret string
		return ret
	}

	return *o.EventComponent.Get()
}

// GetEventComponentOk returns a tuple with the EventComponent field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventComponentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventComponent.Get(), o.EventComponent.IsSet()
}

// SetEventComponent sets field value
func (o *Event) SetEventComponent(v string) {
	o.EventComponent.Set(&v)
}

// GetEventCount returns the EventCount field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Event) GetEventCount() string {
	if o == nil || o.EventCount.Get() == nil {
		var ret string
		return ret
	}

	return *o.EventCount.Get()
}

// GetEventCountOk returns a tuple with the EventCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventCount.Get(), o.EventCount.IsSet()
}

// SetEventCount sets field value
func (o *Event) SetEventCount(v string) {
	o.EventCount.Set(&v)
}

// GetEventFirstSeenDate returns the EventFirstSeenDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Event) GetEventFirstSeenDate() time.Time {
	if o == nil || o.EventFirstSeenDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.EventFirstSeenDate.Get()
}

// GetEventFirstSeenDateOk returns a tuple with the EventFirstSeenDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventFirstSeenDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventFirstSeenDate.Get(), o.EventFirstSeenDate.IsSet()
}

// SetEventFirstSeenDate sets field value
func (o *Event) SetEventFirstSeenDate(v time.Time) {
	o.EventFirstSeenDate.Set(&v)
}

// GetEventHost returns the EventHost field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Event) GetEventHost() string {
	if o == nil || o.EventHost.Get() == nil {
		var ret string
		return ret
	}

	return *o.EventHost.Get()
}

// GetEventHostOk returns a tuple with the EventHost field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventHost.Get(), o.EventHost.IsSet()
}

// SetEventHost sets field value
func (o *Event) SetEventHost(v string) {
	o.EventHost.Set(&v)
}

// GetEventKind returns the EventKind field value
func (o *Event) GetEventKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventKind
}

// GetEventKindOk returns a tuple with the EventKind field value
// and a boolean to check if the value has been set.
func (o *Event) GetEventKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventKind, true
}

// SetEventKind sets field value
func (o *Event) SetEventKind(v string) {
	o.EventKind = v
}

// GetEventLastSeenDate returns the EventLastSeenDate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Event) GetEventLastSeenDate() time.Time {
	if o == nil || o.EventLastSeenDate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.EventLastSeenDate.Get()
}

// GetEventLastSeenDateOk returns a tuple with the EventLastSeenDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventLastSeenDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventLastSeenDate.Get(), o.EventLastSeenDate.IsSet()
}

// SetEventLastSeenDate sets field value
func (o *Event) SetEventLastSeenDate(v time.Time) {
	o.EventLastSeenDate.Set(&v)
}

// GetEventMessage returns the EventMessage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Event) GetEventMessage() string {
	if o == nil || o.EventMessage.Get() == nil {
		var ret string
		return ret
	}

	return *o.EventMessage.Get()
}

// GetEventMessageOk returns a tuple with the EventMessage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventMessage.Get(), o.EventMessage.IsSet()
}

// SetEventMessage sets field value
func (o *Event) SetEventMessage(v string) {
	o.EventMessage.Set(&v)
}

// GetEventReason returns the EventReason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Event) GetEventReason() string {
	if o == nil || o.EventReason.Get() == nil {
		var ret string
		return ret
	}

	return *o.EventReason.Get()
}

// GetEventReasonOk returns a tuple with the EventReason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventReason.Get(), o.EventReason.IsSet()
}

// SetEventReason sets field value
func (o *Event) SetEventReason(v string) {
	o.EventReason.Set(&v)
}

// GetEventType returns the EventType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Event) GetEventType() string {
	if o == nil || o.EventType.Get() == nil {
		var ret string
		return ret
	}

	return *o.EventType.Get()
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetEventTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventType.Get(), o.EventType.IsSet()
}

// SetEventType sets field value
func (o *Event) SetEventType(v string) {
	o.EventType.Set(&v)
}

// GetName returns the Name field value
func (o *Event) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Event) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Event) SetName(v string) {
	o.Name = v
}

// GetNamespaceName returns the NamespaceName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Event) GetNamespaceName() string {
	if o == nil || o.NamespaceName.Get() == nil {
		var ret string
		return ret
	}

	return *o.NamespaceName.Get()
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Event) GetNamespaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NamespaceName.Get(), o.NamespaceName.IsSet()
}

// SetNamespaceName sets field value
func (o *Event) SetNamespaceName(v string) {
	o.NamespaceName.Set(&v)
}

// GetUid returns the Uid field value
func (o *Event) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *Event) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *Event) SetUid(v string) {
	o.Uid = v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["age"] = o.Age
	toSerialize["event_component"] = o.EventComponent.Get()
	toSerialize["event_count"] = o.EventCount.Get()
	toSerialize["event_first_seen_date"] = o.EventFirstSeenDate.Get()
	toSerialize["event_host"] = o.EventHost.Get()
	toSerialize["event_kind"] = o.EventKind
	toSerialize["event_last_seen_date"] = o.EventLastSeenDate.Get()
	toSerialize["event_message"] = o.EventMessage.Get()
	toSerialize["event_reason"] = o.EventReason.Get()
	toSerialize["event_type"] = o.EventType.Get()
	toSerialize["name"] = o.Name
	toSerialize["namespace_name"] = o.NamespaceName.Get()
	toSerialize["uid"] = o.Uid
	return toSerialize, nil
}

func (o *Event) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"age",
		"event_component",
		"event_count",
		"event_first_seen_date",
		"event_host",
		"event_kind",
		"event_last_seen_date",
		"event_message",
		"event_reason",
		"event_type",
		"name",
		"namespace_name",
		"uid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvent := _Event{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvent)

	if err != nil {
		return err
	}

	*o = Event(varEvent)

	return err
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
