/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodeInNodepool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInNodepool{}

// NodeInNodepool struct for NodeInNodepool
type NodeInNodepool struct {
	// Account ID
	AccountId string `json:"account_id"`
	// Kubernetes Version
	KubernetesVersion string `json:"kubernetes_version"`
	// Node Name
	Name string `json:"name"`
	// Node Status
	Status string `json:"status"`
}

type _NodeInNodepool NodeInNodepool

// NewNodeInNodepool instantiates a new NodeInNodepool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInNodepool(accountId string, kubernetesVersion string, name string, status string) *NodeInNodepool {
	this := NodeInNodepool{}
	this.AccountId = accountId
	this.KubernetesVersion = kubernetesVersion
	this.Name = name
	this.Status = status
	return &this
}

// NewNodeInNodepoolWithDefaults instantiates a new NodeInNodepool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInNodepoolWithDefaults() *NodeInNodepool {
	this := NodeInNodepool{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *NodeInNodepool) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *NodeInNodepool) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *NodeInNodepool) SetAccountId(v string) {
	o.AccountId = v
}

// GetKubernetesVersion returns the KubernetesVersion field value
func (o *NodeInNodepool) GetKubernetesVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubernetesVersion
}

// GetKubernetesVersionOk returns a tuple with the KubernetesVersion field value
// and a boolean to check if the value has been set.
func (o *NodeInNodepool) GetKubernetesVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KubernetesVersion, true
}

// SetKubernetesVersion sets field value
func (o *NodeInNodepool) SetKubernetesVersion(v string) {
	o.KubernetesVersion = v
}

// GetName returns the Name field value
func (o *NodeInNodepool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodeInNodepool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodeInNodepool) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *NodeInNodepool) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *NodeInNodepool) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *NodeInNodepool) SetStatus(v string) {
	o.Status = v
}

func (o NodeInNodepool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInNodepool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["kubernetes_version"] = o.KubernetesVersion
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *NodeInNodepool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"kubernetes_version",
		"name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeInNodepool := _NodeInNodepool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeInNodepool)

	if err != nil {
		return err
	}

	*o = NodeInNodepool(varNodeInNodepool)

	return err
}

type NullableNodeInNodepool struct {
	value *NodeInNodepool
	isSet bool
}

func (v NullableNodeInNodepool) Get() *NodeInNodepool {
	return v.value
}

func (v *NullableNodeInNodepool) Set(val *NodeInNodepool) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInNodepool) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInNodepool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInNodepool(val *NodeInNodepool) *NullableNodeInNodepool {
	return &NullableNodeInNodepool{value: val, isSet: true}
}

func (v NullableNodeInNodepool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInNodepool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
