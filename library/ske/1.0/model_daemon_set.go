/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DaemonSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaemonSet{}

// DaemonSet struct for DaemonSet
type DaemonSet struct {
	// Age
	Age string `json:"age"`
	// Annotations
	Annotations []string `json:"annotations"`
	// Cluster ID
	ClusterId string `json:"cluster_id"`
	// Cluster Name
	ClusterName string `json:"cluster_name"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Current Number Scheduled
	CurrentNumberScheduled int32 `json:"current_number_scheduled"`
	// Desired Number Scheduled
	DesiredNumberScheduled int32 `json:"desired_number_scheduled"`
	// Labels
	Labels []string `json:"labels"`
	// Daemon Set Name
	Name string `json:"name"`
	// Namespace Name
	NamespaceName string `json:"namespace_name"`
	// Node Selector
	NodeSelector []string `json:"node_selector"`
	// Number Available
	NumberAvailable int32 `json:"number_available"`
	// Number Misscheduled
	NumberMisscheduled int32 `json:"number_misscheduled"`
	// Number Ready
	NumberReady int32 `json:"number_ready"`
	// Selector Details
	SelectorDetails []string `json:"selector_details"`
	// Selectors
	Selectors []string `json:"selectors"`
	// Resource ID
	Uid string `json:"uid"`
	// Updated Number Scheduled
	UpdatedNumberScheduled int32 `json:"updated_number_scheduled"`
	// YAML
	Yaml string `json:"yaml"`
}

type _DaemonSet DaemonSet

// NewDaemonSet instantiates a new DaemonSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaemonSet(age string, annotations []string, clusterId string, clusterName string, createdAt time.Time, currentNumberScheduled int32, desiredNumberScheduled int32, labels []string, name string, namespaceName string, nodeSelector []string, numberAvailable int32, numberMisscheduled int32, numberReady int32, selectorDetails []string, selectors []string, uid string, updatedNumberScheduled int32, yaml string) *DaemonSet {
	this := DaemonSet{}
	this.Age = age
	this.Annotations = annotations
	this.ClusterId = clusterId
	this.ClusterName = clusterName
	this.CreatedAt = createdAt
	this.CurrentNumberScheduled = currentNumberScheduled
	this.DesiredNumberScheduled = desiredNumberScheduled
	this.Labels = labels
	this.Name = name
	this.NamespaceName = namespaceName
	this.NodeSelector = nodeSelector
	this.NumberAvailable = numberAvailable
	this.NumberMisscheduled = numberMisscheduled
	this.NumberReady = numberReady
	this.SelectorDetails = selectorDetails
	this.Selectors = selectors
	this.Uid = uid
	this.UpdatedNumberScheduled = updatedNumberScheduled
	this.Yaml = yaml
	return &this
}

// NewDaemonSetWithDefaults instantiates a new DaemonSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaemonSetWithDefaults() *DaemonSet {
	this := DaemonSet{}
	return &this
}

// GetAge returns the Age field value
func (o *DaemonSet) GetAge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Age
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Age, true
}

// SetAge sets field value
func (o *DaemonSet) SetAge(v string) {
	o.Age = v
}

// GetAnnotations returns the Annotations field value
func (o *DaemonSet) GetAnnotations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetAnnotationsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Annotations, true
}

// SetAnnotations sets field value
func (o *DaemonSet) SetAnnotations(v []string) {
	o.Annotations = v
}

// GetClusterId returns the ClusterId field value
func (o *DaemonSet) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *DaemonSet) SetClusterId(v string) {
	o.ClusterId = v
}

// GetClusterName returns the ClusterName field value
func (o *DaemonSet) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *DaemonSet) SetClusterName(v string) {
	o.ClusterName = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DaemonSet) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DaemonSet) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCurrentNumberScheduled returns the CurrentNumberScheduled field value
func (o *DaemonSet) GetCurrentNumberScheduled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentNumberScheduled
}

// GetCurrentNumberScheduledOk returns a tuple with the CurrentNumberScheduled field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetCurrentNumberScheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentNumberScheduled, true
}

// SetCurrentNumberScheduled sets field value
func (o *DaemonSet) SetCurrentNumberScheduled(v int32) {
	o.CurrentNumberScheduled = v
}

// GetDesiredNumberScheduled returns the DesiredNumberScheduled field value
func (o *DaemonSet) GetDesiredNumberScheduled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DesiredNumberScheduled
}

// GetDesiredNumberScheduledOk returns a tuple with the DesiredNumberScheduled field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetDesiredNumberScheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DesiredNumberScheduled, true
}

// SetDesiredNumberScheduled sets field value
func (o *DaemonSet) SetDesiredNumberScheduled(v int32) {
	o.DesiredNumberScheduled = v
}

// GetLabels returns the Labels field value
func (o *DaemonSet) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetLabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *DaemonSet) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *DaemonSet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DaemonSet) SetName(v string) {
	o.Name = v
}

// GetNamespaceName returns the NamespaceName field value
func (o *DaemonSet) GetNamespaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetNamespaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceName, true
}

// SetNamespaceName sets field value
func (o *DaemonSet) SetNamespaceName(v string) {
	o.NamespaceName = v
}

// GetNodeSelector returns the NodeSelector field value
func (o *DaemonSet) GetNodeSelector() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NodeSelector
}

// GetNodeSelectorOk returns a tuple with the NodeSelector field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetNodeSelectorOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeSelector, true
}

// SetNodeSelector sets field value
func (o *DaemonSet) SetNodeSelector(v []string) {
	o.NodeSelector = v
}

// GetNumberAvailable returns the NumberAvailable field value
func (o *DaemonSet) GetNumberAvailable() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberAvailable
}

// GetNumberAvailableOk returns a tuple with the NumberAvailable field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetNumberAvailableOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberAvailable, true
}

// SetNumberAvailable sets field value
func (o *DaemonSet) SetNumberAvailable(v int32) {
	o.NumberAvailable = v
}

// GetNumberMisscheduled returns the NumberMisscheduled field value
func (o *DaemonSet) GetNumberMisscheduled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberMisscheduled
}

// GetNumberMisscheduledOk returns a tuple with the NumberMisscheduled field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetNumberMisscheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberMisscheduled, true
}

// SetNumberMisscheduled sets field value
func (o *DaemonSet) SetNumberMisscheduled(v int32) {
	o.NumberMisscheduled = v
}

// GetNumberReady returns the NumberReady field value
func (o *DaemonSet) GetNumberReady() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberReady
}

// GetNumberReadyOk returns a tuple with the NumberReady field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetNumberReadyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberReady, true
}

// SetNumberReady sets field value
func (o *DaemonSet) SetNumberReady(v int32) {
	o.NumberReady = v
}

// GetSelectorDetails returns the SelectorDetails field value
func (o *DaemonSet) GetSelectorDetails() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SelectorDetails
}

// GetSelectorDetailsOk returns a tuple with the SelectorDetails field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetSelectorDetailsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SelectorDetails, true
}

// SetSelectorDetails sets field value
func (o *DaemonSet) SetSelectorDetails(v []string) {
	o.SelectorDetails = v
}

// GetSelectors returns the Selectors field value
func (o *DaemonSet) GetSelectors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetSelectorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Selectors, true
}

// SetSelectors sets field value
func (o *DaemonSet) SetSelectors(v []string) {
	o.Selectors = v
}

// GetUid returns the Uid field value
func (o *DaemonSet) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *DaemonSet) SetUid(v string) {
	o.Uid = v
}

// GetUpdatedNumberScheduled returns the UpdatedNumberScheduled field value
func (o *DaemonSet) GetUpdatedNumberScheduled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedNumberScheduled
}

// GetUpdatedNumberScheduledOk returns a tuple with the UpdatedNumberScheduled field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetUpdatedNumberScheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedNumberScheduled, true
}

// SetUpdatedNumberScheduled sets field value
func (o *DaemonSet) SetUpdatedNumberScheduled(v int32) {
	o.UpdatedNumberScheduled = v
}

// GetYaml returns the Yaml field value
func (o *DaemonSet) GetYaml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Yaml
}

// GetYamlOk returns a tuple with the Yaml field value
// and a boolean to check if the value has been set.
func (o *DaemonSet) GetYamlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Yaml, true
}

// SetYaml sets field value
func (o *DaemonSet) SetYaml(v string) {
	o.Yaml = v
}

func (o DaemonSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaemonSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["age"] = o.Age
	toSerialize["annotations"] = o.Annotations
	toSerialize["cluster_id"] = o.ClusterId
	toSerialize["cluster_name"] = o.ClusterName
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["current_number_scheduled"] = o.CurrentNumberScheduled
	toSerialize["desired_number_scheduled"] = o.DesiredNumberScheduled
	toSerialize["labels"] = o.Labels
	toSerialize["name"] = o.Name
	toSerialize["namespace_name"] = o.NamespaceName
	toSerialize["node_selector"] = o.NodeSelector
	toSerialize["number_available"] = o.NumberAvailable
	toSerialize["number_misscheduled"] = o.NumberMisscheduled
	toSerialize["number_ready"] = o.NumberReady
	toSerialize["selector_details"] = o.SelectorDetails
	toSerialize["selectors"] = o.Selectors
	toSerialize["uid"] = o.Uid
	toSerialize["updated_number_scheduled"] = o.UpdatedNumberScheduled
	toSerialize["yaml"] = o.Yaml
	return toSerialize, nil
}

func (o *DaemonSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"age",
		"annotations",
		"cluster_id",
		"cluster_name",
		"created_at",
		"current_number_scheduled",
		"desired_number_scheduled",
		"labels",
		"name",
		"namespace_name",
		"node_selector",
		"number_available",
		"number_misscheduled",
		"number_ready",
		"selector_details",
		"selectors",
		"uid",
		"updated_number_scheduled",
		"yaml",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaemonSet := _DaemonSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDaemonSet)

	if err != nil {
		return err
	}

	*o = DaemonSet(varDaemonSet)

	return err
}

type NullableDaemonSet struct {
	value *DaemonSet
	isSet bool
}

func (v NullableDaemonSet) Get() *DaemonSet {
	return v.value
}

func (v *NullableDaemonSet) Set(val *DaemonSet) {
	v.value = val
	v.isSet = true
}

func (v NullableDaemonSet) IsSet() bool {
	return v.isSet
}

func (v *NullableDaemonSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaemonSet(val *DaemonSet) *NullableDaemonSet {
	return &NullableDaemonSet{value: val, isSet: true}
}

func (v NullableDaemonSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaemonSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
