/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SecretShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretShowResponse{}

// SecretShowResponse struct for SecretShowResponse
type SecretShowResponse struct {
	Secret Secret `json:"secret"`
}

type _SecretShowResponse SecretShowResponse

// NewSecretShowResponse instantiates a new SecretShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretShowResponse(secret Secret) *SecretShowResponse {
	this := SecretShowResponse{}
	this.Secret = secret
	return &this
}

// NewSecretShowResponseWithDefaults instantiates a new SecretShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretShowResponseWithDefaults() *SecretShowResponse {
	this := SecretShowResponse{}
	return &this
}

// GetSecret returns the Secret field value
func (o *SecretShowResponse) GetSecret() Secret {
	if o == nil {
		var ret Secret
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *SecretShowResponse) GetSecretOk() (*Secret, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *SecretShowResponse) SetSecret(v Secret) {
	o.Secret = v
}

func (o SecretShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["secret"] = o.Secret
	return toSerialize, nil
}

func (o *SecretShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecretShowResponse := _SecretShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecretShowResponse)

	if err != nil {
		return err
	}

	*o = SecretShowResponse(varSecretShowResponse)

	return err
}

type NullableSecretShowResponse struct {
	value *SecretShowResponse
	isSet bool
}

func (v NullableSecretShowResponse) Get() *SecretShowResponse {
	return v.value
}

func (v *NullableSecretShowResponse) Set(val *SecretShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretShowResponse(val *SecretShowResponse) *NullableSecretShowResponse {
	return &NullableSecretShowResponse{value: val, isSet: true}
}

func (v NullableSecretShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
