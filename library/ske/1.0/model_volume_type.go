/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeType{}

// VolumeType struct for VolumeType
type VolumeType struct {
	// Volume Type Encrypt
	Encrypt bool `json:"encrypt"`
	// Volume Type ID
	Id string `json:"id"`
	// Volume Type Name
	Name string `json:"name"`
}

type _VolumeType VolumeType

// NewVolumeType instantiates a new VolumeType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeType(encrypt bool, id string, name string) *VolumeType {
	this := VolumeType{}
	this.Encrypt = encrypt
	this.Id = id
	this.Name = name
	return &this
}

// NewVolumeTypeWithDefaults instantiates a new VolumeType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeTypeWithDefaults() *VolumeType {
	this := VolumeType{}
	return &this
}

// GetEncrypt returns the Encrypt field value
func (o *VolumeType) GetEncrypt() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Encrypt
}

// GetEncryptOk returns a tuple with the Encrypt field value
// and a boolean to check if the value has been set.
func (o *VolumeType) GetEncryptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Encrypt, true
}

// SetEncrypt sets field value
func (o *VolumeType) SetEncrypt(v bool) {
	o.Encrypt = v
}

// GetId returns the Id field value
func (o *VolumeType) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumeType) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumeType) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VolumeType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VolumeType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VolumeType) SetName(v string) {
	o.Name = v
}

func (o VolumeType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["encrypt"] = o.Encrypt
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *VolumeType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"encrypt",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeType := _VolumeType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeType)

	if err != nil {
		return err
	}

	*o = VolumeType(varVolumeType)

	return err
}

type NullableVolumeType struct {
	value *VolumeType
	isSet bool
}

func (v NullableVolumeType) Get() *VolumeType {
	return v.value
}

func (v *NullableVolumeType) Set(val *VolumeType) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeType) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeType(val *VolumeType) *NullableVolumeType {
	return &NullableVolumeType{value: val, isSet: true}
}

func (v NullableVolumeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
