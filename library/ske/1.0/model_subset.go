/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Subset type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subset{}

// Subset struct for Subset
type Subset struct {
	// Addresses
	Addresses []string `json:"addresses"`
	// Not Ready Addresses
	NotReadyAddresses []string `json:"not_ready_addresses"`
	// Ports
	Ports []EndpointPort `json:"ports"`
}

type _Subset Subset

// NewSubset instantiates a new Subset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubset(addresses []string, notReadyAddresses []string, ports []EndpointPort) *Subset {
	this := Subset{}
	this.Addresses = addresses
	this.NotReadyAddresses = notReadyAddresses
	this.Ports = ports
	return &this
}

// NewSubsetWithDefaults instantiates a new Subset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubsetWithDefaults() *Subset {
	this := Subset{}
	return &this
}

// GetAddresses returns the Addresses field value
func (o *Subset) GetAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value
// and a boolean to check if the value has been set.
func (o *Subset) GetAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Addresses, true
}

// SetAddresses sets field value
func (o *Subset) SetAddresses(v []string) {
	o.Addresses = v
}

// GetNotReadyAddresses returns the NotReadyAddresses field value
func (o *Subset) GetNotReadyAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NotReadyAddresses
}

// GetNotReadyAddressesOk returns a tuple with the NotReadyAddresses field value
// and a boolean to check if the value has been set.
func (o *Subset) GetNotReadyAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotReadyAddresses, true
}

// SetNotReadyAddresses sets field value
func (o *Subset) SetNotReadyAddresses(v []string) {
	o.NotReadyAddresses = v
}

// GetPorts returns the Ports field value
func (o *Subset) GetPorts() []EndpointPort {
	if o == nil {
		var ret []EndpointPort
		return ret
	}

	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value
// and a boolean to check if the value has been set.
func (o *Subset) GetPortsOk() ([]EndpointPort, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ports, true
}

// SetPorts sets field value
func (o *Subset) SetPorts(v []EndpointPort) {
	o.Ports = v
}

func (o Subset) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subset) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["addresses"] = o.Addresses
	toSerialize["not_ready_addresses"] = o.NotReadyAddresses
	toSerialize["ports"] = o.Ports
	return toSerialize, nil
}

func (o *Subset) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"addresses",
		"not_ready_addresses",
		"ports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubset := _Subset{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubset)

	if err != nil {
		return err
	}

	*o = Subset(varSubset)

	return err
}

type NullableSubset struct {
	value *Subset
	isSet bool
}

func (v NullableSubset) Get() *Subset {
	return v.value
}

func (v *NullableSubset) Set(val *Subset) {
	v.value = val
	v.isSet = true
}

func (v NullableSubset) IsSet() bool {
	return v.isSet
}

func (v *NullableSubset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubset(val *Subset) *NullableSubset {
	return &NullableSubset{value: val, isSet: true}
}

func (v NullableSubset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
