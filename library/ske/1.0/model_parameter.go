/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Parameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Parameter{}

// Parameter struct for Parameter
type Parameter struct {
	ApiGroup NullableString `json:"api_group"`
	Kind     NullableString `json:"kind"`
	Name     NullableString `json:"name"`
	Scope    NullableString `json:"scope"`
}

type _Parameter Parameter

// NewParameter instantiates a new Parameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameter(apiGroup NullableString, kind NullableString, name NullableString, scope NullableString) *Parameter {
	this := Parameter{}
	this.ApiGroup = apiGroup
	this.Kind = kind
	this.Name = name
	this.Scope = scope
	return &this
}

// NewParameterWithDefaults instantiates a new Parameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterWithDefaults() *Parameter {
	this := Parameter{}
	return &this
}

// GetApiGroup returns the ApiGroup field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Parameter) GetApiGroup() string {
	if o == nil || o.ApiGroup.Get() == nil {
		var ret string
		return ret
	}

	return *o.ApiGroup.Get()
}

// GetApiGroupOk returns a tuple with the ApiGroup field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetApiGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiGroup.Get(), o.ApiGroup.IsSet()
}

// SetApiGroup sets field value
func (o *Parameter) SetApiGroup(v string) {
	o.ApiGroup.Set(&v)
}

// GetKind returns the Kind field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Parameter) GetKind() string {
	if o == nil || o.Kind.Get() == nil {
		var ret string
		return ret
	}

	return *o.Kind.Get()
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Kind.Get(), o.Kind.IsSet()
}

// SetKind sets field value
func (o *Parameter) SetKind(v string) {
	o.Kind.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Parameter) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *Parameter) SetName(v string) {
	o.Name.Set(&v)
}

// GetScope returns the Scope field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Parameter) GetScope() string {
	if o == nil || o.Scope.Get() == nil {
		var ret string
		return ret
	}

	return *o.Scope.Get()
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Parameter) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scope.Get(), o.Scope.IsSet()
}

// SetScope sets field value
func (o *Parameter) SetScope(v string) {
	o.Scope.Set(&v)
}

func (o Parameter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Parameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_group"] = o.ApiGroup.Get()
	toSerialize["kind"] = o.Kind.Get()
	toSerialize["name"] = o.Name.Get()
	toSerialize["scope"] = o.Scope.Get()
	return toSerialize, nil
}

func (o *Parameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_group",
		"kind",
		"name",
		"scope",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameter := _Parameter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParameter)

	if err != nil {
		return err
	}

	*o = Parameter(varParameter)

	return err
}

type NullableParameter struct {
	value *Parameter
	isSet bool
}

func (v NullableParameter) Get() *Parameter {
	return v.value
}

func (v *NullableParameter) Set(val *Parameter) {
	v.value = val
	v.isSet = true
}

func (v NullableParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameter(val *Parameter) *NullableParameter {
	return &NullableParameter{value: val, isSet: true}
}

func (v NullableParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
