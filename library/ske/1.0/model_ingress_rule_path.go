/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IngressRulePath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngressRulePath{}

// IngressRulePath struct for IngressRulePath
type IngressRulePath struct {
	K8sServiceName     NullableString `json:"k8s_service_name"`
	K8sServicePort     NullableString `json:"k8s_service_port"`
	K8sServicePortName NullableString `json:"k8s_service_port_name"`
	Path               NullableString `json:"path"`
}

type _IngressRulePath IngressRulePath

// NewIngressRulePath instantiates a new IngressRulePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngressRulePath(k8sServiceName NullableString, k8sServicePort NullableString, k8sServicePortName NullableString, path NullableString) *IngressRulePath {
	this := IngressRulePath{}
	this.K8sServiceName = k8sServiceName
	this.K8sServicePort = k8sServicePort
	this.K8sServicePortName = k8sServicePortName
	this.Path = path
	return &this
}

// NewIngressRulePathWithDefaults instantiates a new IngressRulePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngressRulePathWithDefaults() *IngressRulePath {
	this := IngressRulePath{}
	return &this
}

// GetK8sServiceName returns the K8sServiceName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IngressRulePath) GetK8sServiceName() string {
	if o == nil || o.K8sServiceName.Get() == nil {
		var ret string
		return ret
	}

	return *o.K8sServiceName.Get()
}

// GetK8sServiceNameOk returns a tuple with the K8sServiceName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngressRulePath) GetK8sServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.K8sServiceName.Get(), o.K8sServiceName.IsSet()
}

// SetK8sServiceName sets field value
func (o *IngressRulePath) SetK8sServiceName(v string) {
	o.K8sServiceName.Set(&v)
}

// GetK8sServicePort returns the K8sServicePort field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IngressRulePath) GetK8sServicePort() string {
	if o == nil || o.K8sServicePort.Get() == nil {
		var ret string
		return ret
	}

	return *o.K8sServicePort.Get()
}

// GetK8sServicePortOk returns a tuple with the K8sServicePort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngressRulePath) GetK8sServicePortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.K8sServicePort.Get(), o.K8sServicePort.IsSet()
}

// SetK8sServicePort sets field value
func (o *IngressRulePath) SetK8sServicePort(v string) {
	o.K8sServicePort.Set(&v)
}

// GetK8sServicePortName returns the K8sServicePortName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IngressRulePath) GetK8sServicePortName() string {
	if o == nil || o.K8sServicePortName.Get() == nil {
		var ret string
		return ret
	}

	return *o.K8sServicePortName.Get()
}

// GetK8sServicePortNameOk returns a tuple with the K8sServicePortName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngressRulePath) GetK8sServicePortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.K8sServicePortName.Get(), o.K8sServicePortName.IsSet()
}

// SetK8sServicePortName sets field value
func (o *IngressRulePath) SetK8sServicePortName(v string) {
	o.K8sServicePortName.Set(&v)
}

// GetPath returns the Path field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IngressRulePath) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}

	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngressRulePath) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// SetPath sets field value
func (o *IngressRulePath) SetPath(v string) {
	o.Path.Set(&v)
}

func (o IngressRulePath) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngressRulePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["k8s_service_name"] = o.K8sServiceName.Get()
	toSerialize["k8s_service_port"] = o.K8sServicePort.Get()
	toSerialize["k8s_service_port_name"] = o.K8sServicePortName.Get()
	toSerialize["path"] = o.Path.Get()
	return toSerialize, nil
}

func (o *IngressRulePath) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"k8s_service_name",
		"k8s_service_port",
		"k8s_service_port_name",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngressRulePath := _IngressRulePath{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngressRulePath)

	if err != nil {
		return err
	}

	*o = IngressRulePath(varIngressRulePath)

	return err
}

type NullableIngressRulePath struct {
	value *IngressRulePath
	isSet bool
}

func (v NullableIngressRulePath) Get() *IngressRulePath {
	return v.value
}

func (v *NullableIngressRulePath) Set(val *IngressRulePath) {
	v.value = val
	v.isSet = true
}

func (v NullableIngressRulePath) IsSet() bool {
	return v.isSet
}

func (v *NullableIngressRulePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngressRulePath(val *IngressRulePath) *NullableIngressRulePath {
	return &NullableIngressRulePath{value: val, isSet: true}
}

func (v NullableIngressRulePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngressRulePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
