/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodepoolShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodepoolShowResponse{}

// NodepoolShowResponse struct for NodepoolShowResponse
type NodepoolShowResponse struct {
	Nodepool Nodepool `json:"nodepool"`
}

type _NodepoolShowResponse NodepoolShowResponse

// NewNodepoolShowResponse instantiates a new NodepoolShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepoolShowResponse(nodepool Nodepool) *NodepoolShowResponse {
	this := NodepoolShowResponse{}
	this.Nodepool = nodepool
	return &this
}

// NewNodepoolShowResponseWithDefaults instantiates a new NodepoolShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolShowResponseWithDefaults() *NodepoolShowResponse {
	this := NodepoolShowResponse{}
	return &this
}

// GetNodepool returns the Nodepool field value
func (o *NodepoolShowResponse) GetNodepool() Nodepool {
	if o == nil {
		var ret Nodepool
		return ret
	}

	return o.Nodepool
}

// GetNodepoolOk returns a tuple with the Nodepool field value
// and a boolean to check if the value has been set.
func (o *NodepoolShowResponse) GetNodepoolOk() (*Nodepool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Nodepool, true
}

// SetNodepool sets field value
func (o *NodepoolShowResponse) SetNodepool(v Nodepool) {
	o.Nodepool = v
}

func (o NodepoolShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodepoolShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodepool"] = o.Nodepool
	return toSerialize, nil
}

func (o *NodepoolShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodepool",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodepoolShowResponse := _NodepoolShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodepoolShowResponse)

	if err != nil {
		return err
	}

	*o = NodepoolShowResponse(varNodepoolShowResponse)

	return err
}

type NullableNodepoolShowResponse struct {
	value *NodepoolShowResponse
	isSet bool
}

func (v NullableNodepoolShowResponse) Get() *NodepoolShowResponse {
	return v.value
}

func (v *NullableNodepoolShowResponse) Set(val *NodepoolShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepoolShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepoolShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepoolShowResponse(val *NodepoolShowResponse) *NullableNodepoolShowResponse {
	return &NullableNodepoolShowResponse{value: val, isSet: true}
}

func (v NullableNodepoolShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepoolShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
