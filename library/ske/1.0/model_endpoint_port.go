/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EndpointPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointPort{}

// EndpointPort struct for EndpointPort
type EndpointPort struct {
	Port     NullableString `json:"port"`
	PortName NullableString `json:"port_name"`
	Protocol NullableString `json:"protocol"`
}

type _EndpointPort EndpointPort

// NewEndpointPort instantiates a new EndpointPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointPort(port NullableString, portName NullableString, protocol NullableString) *EndpointPort {
	this := EndpointPort{}
	this.Port = port
	this.PortName = portName
	this.Protocol = protocol
	return &this
}

// NewEndpointPortWithDefaults instantiates a new EndpointPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointPortWithDefaults() *EndpointPort {
	this := EndpointPort{}
	return &this
}

// GetPort returns the Port field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EndpointPort) GetPort() string {
	if o == nil || o.Port.Get() == nil {
		var ret string
		return ret
	}

	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndpointPort) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// SetPort sets field value
func (o *EndpointPort) SetPort(v string) {
	o.Port.Set(&v)
}

// GetPortName returns the PortName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EndpointPort) GetPortName() string {
	if o == nil || o.PortName.Get() == nil {
		var ret string
		return ret
	}

	return *o.PortName.Get()
}

// GetPortNameOk returns a tuple with the PortName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndpointPort) GetPortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortName.Get(), o.PortName.IsSet()
}

// SetPortName sets field value
func (o *EndpointPort) SetPortName(v string) {
	o.PortName.Set(&v)
}

// GetProtocol returns the Protocol field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EndpointPort) GetProtocol() string {
	if o == nil || o.Protocol.Get() == nil {
		var ret string
		return ret
	}

	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndpointPort) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// SetProtocol sets field value
func (o *EndpointPort) SetProtocol(v string) {
	o.Protocol.Set(&v)
}

func (o EndpointPort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["port"] = o.Port.Get()
	toSerialize["port_name"] = o.PortName.Get()
	toSerialize["protocol"] = o.Protocol.Get()
	return toSerialize, nil
}

func (o *EndpointPort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
		"port_name",
		"protocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointPort := _EndpointPort{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEndpointPort)

	if err != nil {
		return err
	}

	*o = EndpointPort(varEndpointPort)

	return err
}

type NullableEndpointPort struct {
	value *EndpointPort
	isSet bool
}

func (v NullableEndpointPort) Get() *EndpointPort {
	return v.value
}

func (v *NullableEndpointPort) Set(val *EndpointPort) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointPort) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointPort(val *EndpointPort) *NullableEndpointPort {
	return &NullableEndpointPort{value: val, isSet: true}
}

func (v NullableEndpointPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
