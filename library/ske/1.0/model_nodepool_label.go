/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodepoolLabel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodepoolLabel{}

// NodepoolLabel struct for NodepoolLabel
type NodepoolLabel struct {
	// Node Pool Label Key
	Key string `json:"key" validate:"regexp=^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*_\\/)?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$"`
	// Node Pool Label Value
	Value *string `json:"value,omitempty" validate:"regexp=^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$"`
}

type _NodepoolLabel NodepoolLabel

// NewNodepoolLabel instantiates a new NodepoolLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepoolLabel(key string) *NodepoolLabel {
	this := NodepoolLabel{}
	this.Key = key
	var value string = ""
	this.Value = &value
	return &this
}

// NewNodepoolLabelWithDefaults instantiates a new NodepoolLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolLabelWithDefaults() *NodepoolLabel {
	this := NodepoolLabel{}
	var value string = ""
	this.Value = &value
	return &this
}

// GetKey returns the Key field value
func (o *NodepoolLabel) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *NodepoolLabel) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *NodepoolLabel) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *NodepoolLabel) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodepoolLabel) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *NodepoolLabel) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *NodepoolLabel) SetValue(v string) {
	o.Value = &v
}

func (o NodepoolLabel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodepoolLabel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *NodepoolLabel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodepoolLabel := _NodepoolLabel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodepoolLabel)

	if err != nil {
		return err
	}

	*o = NodepoolLabel(varNodepoolLabel)

	return err
}

type NullableNodepoolLabel struct {
	value *NodepoolLabel
	isSet bool
}

func (v NullableNodepoolLabel) Get() *NodepoolLabel {
	return v.value
}

func (v *NullableNodepoolLabel) Set(val *NodepoolLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepoolLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepoolLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepoolLabel(val *NodepoolLabel) *NullableNodepoolLabel {
	return &NullableNodepoolLabel{value: val, isSet: true}
}

func (v NullableNodepoolLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepoolLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
