/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DeploymentSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentSummary{}

// DeploymentSummary struct for DeploymentSummary
type DeploymentSummary struct {
	// Age
	Age string `json:"age"`
	// Available Replicas
	AvailableReplicas int32 `json:"available_replicas"`
	// Cluster ID
	ClusterId string `json:"cluster_id"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Deployment Name
	Name string `json:"name"`
	// Namespace Name
	NamespaceName string `json:"namespace_name"`
	// Ready Replicas
	ReadyReplicas int32 `json:"ready_replicas"`
	// Spec Replicas
	SpecReplicas int32 `json:"spec_replicas"`
	// Resource ID
	Uid string `json:"uid"`
	// Updated Replicas
	UpdatedReplicas int32 `json:"updated_replicas"`
}

type _DeploymentSummary DeploymentSummary

// NewDeploymentSummary instantiates a new DeploymentSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentSummary(age string, availableReplicas int32, clusterId string, createdAt time.Time, name string, namespaceName string, readyReplicas int32, specReplicas int32, uid string, updatedReplicas int32) *DeploymentSummary {
	this := DeploymentSummary{}
	this.Age = age
	this.AvailableReplicas = availableReplicas
	this.ClusterId = clusterId
	this.CreatedAt = createdAt
	this.Name = name
	this.NamespaceName = namespaceName
	this.ReadyReplicas = readyReplicas
	this.SpecReplicas = specReplicas
	this.Uid = uid
	this.UpdatedReplicas = updatedReplicas
	return &this
}

// NewDeploymentSummaryWithDefaults instantiates a new DeploymentSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentSummaryWithDefaults() *DeploymentSummary {
	this := DeploymentSummary{}
	return &this
}

// GetAge returns the Age field value
func (o *DeploymentSummary) GetAge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Age
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Age, true
}

// SetAge sets field value
func (o *DeploymentSummary) SetAge(v string) {
	o.Age = v
}

// GetAvailableReplicas returns the AvailableReplicas field value
func (o *DeploymentSummary) GetAvailableReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AvailableReplicas
}

// GetAvailableReplicasOk returns a tuple with the AvailableReplicas field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetAvailableReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableReplicas, true
}

// SetAvailableReplicas sets field value
func (o *DeploymentSummary) SetAvailableReplicas(v int32) {
	o.AvailableReplicas = v
}

// GetClusterId returns the ClusterId field value
func (o *DeploymentSummary) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *DeploymentSummary) SetClusterId(v string) {
	o.ClusterId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *DeploymentSummary) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DeploymentSummary) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetName returns the Name field value
func (o *DeploymentSummary) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeploymentSummary) SetName(v string) {
	o.Name = v
}

// GetNamespaceName returns the NamespaceName field value
func (o *DeploymentSummary) GetNamespaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetNamespaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceName, true
}

// SetNamespaceName sets field value
func (o *DeploymentSummary) SetNamespaceName(v string) {
	o.NamespaceName = v
}

// GetReadyReplicas returns the ReadyReplicas field value
func (o *DeploymentSummary) GetReadyReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ReadyReplicas
}

// GetReadyReplicasOk returns a tuple with the ReadyReplicas field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetReadyReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadyReplicas, true
}

// SetReadyReplicas sets field value
func (o *DeploymentSummary) SetReadyReplicas(v int32) {
	o.ReadyReplicas = v
}

// GetSpecReplicas returns the SpecReplicas field value
func (o *DeploymentSummary) GetSpecReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SpecReplicas
}

// GetSpecReplicasOk returns a tuple with the SpecReplicas field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetSpecReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecReplicas, true
}

// SetSpecReplicas sets field value
func (o *DeploymentSummary) SetSpecReplicas(v int32) {
	o.SpecReplicas = v
}

// GetUid returns the Uid field value
func (o *DeploymentSummary) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *DeploymentSummary) SetUid(v string) {
	o.Uid = v
}

// GetUpdatedReplicas returns the UpdatedReplicas field value
func (o *DeploymentSummary) GetUpdatedReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedReplicas
}

// GetUpdatedReplicasOk returns a tuple with the UpdatedReplicas field value
// and a boolean to check if the value has been set.
func (o *DeploymentSummary) GetUpdatedReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedReplicas, true
}

// SetUpdatedReplicas sets field value
func (o *DeploymentSummary) SetUpdatedReplicas(v int32) {
	o.UpdatedReplicas = v
}

func (o DeploymentSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["age"] = o.Age
	toSerialize["available_replicas"] = o.AvailableReplicas
	toSerialize["cluster_id"] = o.ClusterId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["name"] = o.Name
	toSerialize["namespace_name"] = o.NamespaceName
	toSerialize["ready_replicas"] = o.ReadyReplicas
	toSerialize["spec_replicas"] = o.SpecReplicas
	toSerialize["uid"] = o.Uid
	toSerialize["updated_replicas"] = o.UpdatedReplicas
	return toSerialize, nil
}

func (o *DeploymentSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"age",
		"available_replicas",
		"cluster_id",
		"created_at",
		"name",
		"namespace_name",
		"ready_replicas",
		"spec_replicas",
		"uid",
		"updated_replicas",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentSummary := _DeploymentSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentSummary)

	if err != nil {
		return err
	}

	*o = DeploymentSummary(varDeploymentSummary)

	return err
}

type NullableDeploymentSummary struct {
	value *DeploymentSummary
	isSet bool
}

func (v NullableDeploymentSummary) Get() *DeploymentSummary {
	return v.value
}

func (v *NullableDeploymentSummary) Set(val *DeploymentSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentSummary(val *DeploymentSummary) *NullableDeploymentSummary {
	return &NullableDeploymentSummary{value: val, isSet: true}
}

func (v NullableDeploymentSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
