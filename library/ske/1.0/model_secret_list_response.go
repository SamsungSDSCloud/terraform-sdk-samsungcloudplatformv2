/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SecretListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretListResponse{}

// SecretListResponse struct for SecretListResponse
type SecretListResponse struct {
	Count   NullableInt32   `json:"count,omitempty"`
	Links   []interface{}   `json:"links,omitempty"`
	Secrets []SecretSummary `json:"secrets"`
}

type _SecretListResponse SecretListResponse

// NewSecretListResponse instantiates a new SecretListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretListResponse(secrets []SecretSummary) *SecretListResponse {
	this := SecretListResponse{}
	this.Secrets = secrets
	return &this
}

// NewSecretListResponseWithDefaults instantiates a new SecretListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretListResponseWithDefaults() *SecretListResponse {
	this := SecretListResponse{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecretListResponse) GetCount() int32 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int32
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecretListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *SecretListResponse) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt32 and assigns it to the Count field.
func (o *SecretListResponse) SetCount(v int32) {
	o.Count.Set(&v)
}

// SetCountNil sets the value for Count to be an explicit nil
func (o *SecretListResponse) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *SecretListResponse) UnsetCount() {
	o.Count.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecretListResponse) GetLinks() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecretListResponse) GetLinksOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *SecretListResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []interface{} and assigns it to the Links field.
func (o *SecretListResponse) SetLinks(v []interface{}) {
	o.Links = v
}

// GetSecrets returns the Secrets field value
func (o *SecretListResponse) GetSecrets() []SecretSummary {
	if o == nil {
		var ret []SecretSummary
		return ret
	}

	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value
// and a boolean to check if the value has been set.
func (o *SecretListResponse) GetSecretsOk() ([]SecretSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Secrets, true
}

// SetSecrets sets field value
func (o *SecretListResponse) SetSecrets(v []SecretSummary) {
	o.Secrets = v
}

func (o SecretListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	toSerialize["secrets"] = o.Secrets
	return toSerialize, nil
}

func (o *SecretListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secrets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecretListResponse := _SecretListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecretListResponse)

	if err != nil {
		return err
	}

	*o = SecretListResponse(varSecretListResponse)

	return err
}

type NullableSecretListResponse struct {
	value *SecretListResponse
	isSet bool
}

func (v NullableSecretListResponse) Get() *SecretListResponse {
	return v.value
}

func (v *NullableSecretListResponse) Set(val *SecretListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretListResponse(val *SecretListResponse) *NullableSecretListResponse {
	return &NullableSecretListResponse{value: val, isSet: true}
}

func (v NullableSecretListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
