/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"encoding/json"
	"fmt"
)

// TaintEffectEnum the model 'TaintEffectEnum'
type TaintEffectEnum string

// List of TaintEffectEnum
const (
	TAINTEFFECTENUM_NO_SCHEDULE        TaintEffectEnum = "NoSchedule"
	TAINTEFFECTENUM_NO_EXECUTE         TaintEffectEnum = "NoExecute"
	TAINTEFFECTENUM_PREFER_NO_SCHEDULE TaintEffectEnum = "PreferNoSchedule"
)

// All allowed values of TaintEffectEnum enum
var AllowedTaintEffectEnumEnumValues = []TaintEffectEnum{
	"NoSchedule",
	"NoExecute",
	"PreferNoSchedule",
}

func (v *TaintEffectEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaintEffectEnum(value)
	for _, existing := range AllowedTaintEffectEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaintEffectEnum", value)
}

// NewTaintEffectEnumFromValue returns a pointer to a valid TaintEffectEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaintEffectEnumFromValue(v string) (*TaintEffectEnum, error) {
	ev := TaintEffectEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaintEffectEnum: valid values are %v", v, AllowedTaintEffectEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaintEffectEnum) IsValid() bool {
	for _, existing := range AllowedTaintEffectEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaintEffectEnum value
func (v TaintEffectEnum) Ptr() *TaintEffectEnum {
	return &v
}

type NullableTaintEffectEnum struct {
	value *TaintEffectEnum
	isSet bool
}

func (v NullableTaintEffectEnum) Get() *TaintEffectEnum {
	return v.value
}

func (v *NullableTaintEffectEnum) Set(val *TaintEffectEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTaintEffectEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTaintEffectEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaintEffectEnum(val *TaintEffectEnum) *NullableTaintEffectEnum {
	return &NullableTaintEffectEnum{value: val, isSet: true}
}

func (v NullableTaintEffectEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaintEffectEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
