/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IngressTls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngressTls{}

// IngressTls struct for IngressTls
type IngressTls struct {
	// hosts
	Hosts      []string       `json:"hosts"`
	SecretName NullableString `json:"secret_name"`
}

type _IngressTls IngressTls

// NewIngressTls instantiates a new IngressTls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngressTls(hosts []string, secretName NullableString) *IngressTls {
	this := IngressTls{}
	this.Hosts = hosts
	this.SecretName = secretName
	return &this
}

// NewIngressTlsWithDefaults instantiates a new IngressTls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngressTlsWithDefaults() *IngressTls {
	this := IngressTls{}
	return &this
}

// GetHosts returns the Hosts field value
func (o *IngressTls) GetHosts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value
// and a boolean to check if the value has been set.
func (o *IngressTls) GetHostsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hosts, true
}

// SetHosts sets field value
func (o *IngressTls) SetHosts(v []string) {
	o.Hosts = v
}

// GetSecretName returns the SecretName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IngressTls) GetSecretName() string {
	if o == nil || o.SecretName.Get() == nil {
		var ret string
		return ret
	}

	return *o.SecretName.Get()
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngressTls) GetSecretNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretName.Get(), o.SecretName.IsSet()
}

// SetSecretName sets field value
func (o *IngressTls) SetSecretName(v string) {
	o.SecretName.Set(&v)
}

func (o IngressTls) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngressTls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hosts"] = o.Hosts
	toSerialize["secret_name"] = o.SecretName.Get()
	return toSerialize, nil
}

func (o *IngressTls) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hosts",
		"secret_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngressTls := _IngressTls{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngressTls)

	if err != nil {
		return err
	}

	*o = IngressTls(varIngressTls)

	return err
}

type NullableIngressTls struct {
	value *IngressTls
	isSet bool
}

func (v NullableIngressTls) Get() *IngressTls {
	return v.value
}

func (v *NullableIngressTls) Set(val *IngressTls) {
	v.value = val
	v.isSet = true
}

func (v NullableIngressTls) IsSet() bool {
	return v.isSet
}

func (v *NullableIngressTls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngressTls(val *IngressTls) *NullableIngressTls {
	return &NullableIngressTls{value: val, isSet: true}
}

func (v NullableIngressTls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngressTls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
