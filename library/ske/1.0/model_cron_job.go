/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CronJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CronJob{}

// CronJob struct for CronJob
type CronJob struct {
	// Active Job Count
	ActiveJobCount int32 `json:"active_job_count"`
	// Active Jobs
	ActiveJobs []string `json:"active_jobs"`
	// Age
	Age string `json:"age"`
	// Annotations
	Annotations []string `json:"annotations"`
	// Cluster ID
	ClusterId string `json:"cluster_id"`
	// Cluster Name
	ClusterName string `json:"cluster_name"`
	// Completions
	Completions       int32          `json:"completions"`
	ConcurrencyPolicy NullableString `json:"concurrency_policy"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Failed Jobs History Limit
	FailedJobsHistoryLimit int32 `json:"failed_jobs_history_limit"`
	// Labels
	Labels           []string     `json:"labels"`
	LastScheduleTime NullableTime `json:"last_schedule_time"`
	// Cron Job Name
	Name string `json:"name"`
	// Namespace Name
	NamespaceName string `json:"namespace_name"`
	// Parallelism
	Parallelism int32          `json:"parallelism"`
	Schedule    NullableString `json:"schedule"`
	// Selector Details
	SelectorDetails []string `json:"selector_details"`
	// Selectors
	Selectors []string `json:"selectors"`
	// Starting Deadline Seconds
	StartingDeadlineSeconds int32 `json:"starting_deadline_seconds"`
	// Successful Jobs History Limit
	SuccessfulJobsHistoryLimit int32 `json:"successful_jobs_history_limit"`
	// Suspended
	Suspended bool `json:"suspended"`
	// Resource ID
	Uid string `json:"uid"`
	// YAML
	Yaml string `json:"yaml"`
}

type _CronJob CronJob

// NewCronJob instantiates a new CronJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCronJob(activeJobCount int32, activeJobs []string, age string, annotations []string, clusterId string, clusterName string, completions int32, concurrencyPolicy NullableString, createdAt time.Time, failedJobsHistoryLimit int32, labels []string, lastScheduleTime NullableTime, name string, namespaceName string, parallelism int32, schedule NullableString, selectorDetails []string, selectors []string, startingDeadlineSeconds int32, successfulJobsHistoryLimit int32, suspended bool, uid string, yaml string) *CronJob {
	this := CronJob{}
	this.ActiveJobCount = activeJobCount
	this.ActiveJobs = activeJobs
	this.Age = age
	this.Annotations = annotations
	this.ClusterId = clusterId
	this.ClusterName = clusterName
	this.Completions = completions
	this.ConcurrencyPolicy = concurrencyPolicy
	this.CreatedAt = createdAt
	this.FailedJobsHistoryLimit = failedJobsHistoryLimit
	this.Labels = labels
	this.LastScheduleTime = lastScheduleTime
	this.Name = name
	this.NamespaceName = namespaceName
	this.Parallelism = parallelism
	this.Schedule = schedule
	this.SelectorDetails = selectorDetails
	this.Selectors = selectors
	this.StartingDeadlineSeconds = startingDeadlineSeconds
	this.SuccessfulJobsHistoryLimit = successfulJobsHistoryLimit
	this.Suspended = suspended
	this.Uid = uid
	this.Yaml = yaml
	return &this
}

// NewCronJobWithDefaults instantiates a new CronJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronJobWithDefaults() *CronJob {
	this := CronJob{}
	return &this
}

// GetActiveJobCount returns the ActiveJobCount field value
func (o *CronJob) GetActiveJobCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActiveJobCount
}

// GetActiveJobCountOk returns a tuple with the ActiveJobCount field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetActiveJobCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActiveJobCount, true
}

// SetActiveJobCount sets field value
func (o *CronJob) SetActiveJobCount(v int32) {
	o.ActiveJobCount = v
}

// GetActiveJobs returns the ActiveJobs field value
func (o *CronJob) GetActiveJobs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ActiveJobs
}

// GetActiveJobsOk returns a tuple with the ActiveJobs field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetActiveJobsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveJobs, true
}

// SetActiveJobs sets field value
func (o *CronJob) SetActiveJobs(v []string) {
	o.ActiveJobs = v
}

// GetAge returns the Age field value
func (o *CronJob) GetAge() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Age
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Age, true
}

// SetAge sets field value
func (o *CronJob) SetAge(v string) {
	o.Age = v
}

// GetAnnotations returns the Annotations field value
func (o *CronJob) GetAnnotations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetAnnotationsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Annotations, true
}

// SetAnnotations sets field value
func (o *CronJob) SetAnnotations(v []string) {
	o.Annotations = v
}

// GetClusterId returns the ClusterId field value
func (o *CronJob) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *CronJob) SetClusterId(v string) {
	o.ClusterId = v
}

// GetClusterName returns the ClusterName field value
func (o *CronJob) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *CronJob) SetClusterName(v string) {
	o.ClusterName = v
}

// GetCompletions returns the Completions field value
func (o *CronJob) GetCompletions() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Completions
}

// GetCompletionsOk returns a tuple with the Completions field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetCompletionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completions, true
}

// SetCompletions sets field value
func (o *CronJob) SetCompletions(v int32) {
	o.Completions = v
}

// GetConcurrencyPolicy returns the ConcurrencyPolicy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CronJob) GetConcurrencyPolicy() string {
	if o == nil || o.ConcurrencyPolicy.Get() == nil {
		var ret string
		return ret
	}

	return *o.ConcurrencyPolicy.Get()
}

// GetConcurrencyPolicyOk returns a tuple with the ConcurrencyPolicy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CronJob) GetConcurrencyPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConcurrencyPolicy.Get(), o.ConcurrencyPolicy.IsSet()
}

// SetConcurrencyPolicy sets field value
func (o *CronJob) SetConcurrencyPolicy(v string) {
	o.ConcurrencyPolicy.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *CronJob) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CronJob) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetFailedJobsHistoryLimit returns the FailedJobsHistoryLimit field value
func (o *CronJob) GetFailedJobsHistoryLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailedJobsHistoryLimit
}

// GetFailedJobsHistoryLimitOk returns a tuple with the FailedJobsHistoryLimit field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetFailedJobsHistoryLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedJobsHistoryLimit, true
}

// SetFailedJobsHistoryLimit sets field value
func (o *CronJob) SetFailedJobsHistoryLimit(v int32) {
	o.FailedJobsHistoryLimit = v
}

// GetLabels returns the Labels field value
func (o *CronJob) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetLabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *CronJob) SetLabels(v []string) {
	o.Labels = v
}

// GetLastScheduleTime returns the LastScheduleTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CronJob) GetLastScheduleTime() time.Time {
	if o == nil || o.LastScheduleTime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastScheduleTime.Get()
}

// GetLastScheduleTimeOk returns a tuple with the LastScheduleTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CronJob) GetLastScheduleTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastScheduleTime.Get(), o.LastScheduleTime.IsSet()
}

// SetLastScheduleTime sets field value
func (o *CronJob) SetLastScheduleTime(v time.Time) {
	o.LastScheduleTime.Set(&v)
}

// GetName returns the Name field value
func (o *CronJob) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CronJob) SetName(v string) {
	o.Name = v
}

// GetNamespaceName returns the NamespaceName field value
func (o *CronJob) GetNamespaceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamespaceName
}

// GetNamespaceNameOk returns a tuple with the NamespaceName field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetNamespaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamespaceName, true
}

// SetNamespaceName sets field value
func (o *CronJob) SetNamespaceName(v string) {
	o.NamespaceName = v
}

// GetParallelism returns the Parallelism field value
func (o *CronJob) GetParallelism() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Parallelism
}

// GetParallelismOk returns a tuple with the Parallelism field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetParallelismOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parallelism, true
}

// SetParallelism sets field value
func (o *CronJob) SetParallelism(v int32) {
	o.Parallelism = v
}

// GetSchedule returns the Schedule field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CronJob) GetSchedule() string {
	if o == nil || o.Schedule.Get() == nil {
		var ret string
		return ret
	}

	return *o.Schedule.Get()
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CronJob) GetScheduleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedule.Get(), o.Schedule.IsSet()
}

// SetSchedule sets field value
func (o *CronJob) SetSchedule(v string) {
	o.Schedule.Set(&v)
}

// GetSelectorDetails returns the SelectorDetails field value
func (o *CronJob) GetSelectorDetails() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SelectorDetails
}

// GetSelectorDetailsOk returns a tuple with the SelectorDetails field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetSelectorDetailsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SelectorDetails, true
}

// SetSelectorDetails sets field value
func (o *CronJob) SetSelectorDetails(v []string) {
	o.SelectorDetails = v
}

// GetSelectors returns the Selectors field value
func (o *CronJob) GetSelectors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Selectors
}

// GetSelectorsOk returns a tuple with the Selectors field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetSelectorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Selectors, true
}

// SetSelectors sets field value
func (o *CronJob) SetSelectors(v []string) {
	o.Selectors = v
}

// GetStartingDeadlineSeconds returns the StartingDeadlineSeconds field value
func (o *CronJob) GetStartingDeadlineSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartingDeadlineSeconds
}

// GetStartingDeadlineSecondsOk returns a tuple with the StartingDeadlineSeconds field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetStartingDeadlineSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartingDeadlineSeconds, true
}

// SetStartingDeadlineSeconds sets field value
func (o *CronJob) SetStartingDeadlineSeconds(v int32) {
	o.StartingDeadlineSeconds = v
}

// GetSuccessfulJobsHistoryLimit returns the SuccessfulJobsHistoryLimit field value
func (o *CronJob) GetSuccessfulJobsHistoryLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SuccessfulJobsHistoryLimit
}

// GetSuccessfulJobsHistoryLimitOk returns a tuple with the SuccessfulJobsHistoryLimit field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetSuccessfulJobsHistoryLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessfulJobsHistoryLimit, true
}

// SetSuccessfulJobsHistoryLimit sets field value
func (o *CronJob) SetSuccessfulJobsHistoryLimit(v int32) {
	o.SuccessfulJobsHistoryLimit = v
}

// GetSuspended returns the Suspended field value
func (o *CronJob) GetSuspended() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Suspended, true
}

// SetSuspended sets field value
func (o *CronJob) SetSuspended(v bool) {
	o.Suspended = v
}

// GetUid returns the Uid field value
func (o *CronJob) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *CronJob) SetUid(v string) {
	o.Uid = v
}

// GetYaml returns the Yaml field value
func (o *CronJob) GetYaml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Yaml
}

// GetYamlOk returns a tuple with the Yaml field value
// and a boolean to check if the value has been set.
func (o *CronJob) GetYamlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Yaml, true
}

// SetYaml sets field value
func (o *CronJob) SetYaml(v string) {
	o.Yaml = v
}

func (o CronJob) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CronJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active_job_count"] = o.ActiveJobCount
	toSerialize["active_jobs"] = o.ActiveJobs
	toSerialize["age"] = o.Age
	toSerialize["annotations"] = o.Annotations
	toSerialize["cluster_id"] = o.ClusterId
	toSerialize["cluster_name"] = o.ClusterName
	toSerialize["completions"] = o.Completions
	toSerialize["concurrency_policy"] = o.ConcurrencyPolicy.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["failed_jobs_history_limit"] = o.FailedJobsHistoryLimit
	toSerialize["labels"] = o.Labels
	toSerialize["last_schedule_time"] = o.LastScheduleTime.Get()
	toSerialize["name"] = o.Name
	toSerialize["namespace_name"] = o.NamespaceName
	toSerialize["parallelism"] = o.Parallelism
	toSerialize["schedule"] = o.Schedule.Get()
	toSerialize["selector_details"] = o.SelectorDetails
	toSerialize["selectors"] = o.Selectors
	toSerialize["starting_deadline_seconds"] = o.StartingDeadlineSeconds
	toSerialize["successful_jobs_history_limit"] = o.SuccessfulJobsHistoryLimit
	toSerialize["suspended"] = o.Suspended
	toSerialize["uid"] = o.Uid
	toSerialize["yaml"] = o.Yaml
	return toSerialize, nil
}

func (o *CronJob) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active_job_count",
		"active_jobs",
		"age",
		"annotations",
		"cluster_id",
		"cluster_name",
		"completions",
		"concurrency_policy",
		"created_at",
		"failed_jobs_history_limit",
		"labels",
		"last_schedule_time",
		"name",
		"namespace_name",
		"parallelism",
		"schedule",
		"selector_details",
		"selectors",
		"starting_deadline_seconds",
		"successful_jobs_history_limit",
		"suspended",
		"uid",
		"yaml",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCronJob := _CronJob{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCronJob)

	if err != nil {
		return err
	}

	*o = CronJob(varCronJob)

	return err
}

type NullableCronJob struct {
	value *CronJob
	isSet bool
}

func (v NullableCronJob) Get() *CronJob {
	return v.value
}

func (v *NullableCronJob) Set(val *CronJob) {
	v.value = val
	v.isSet = true
}

func (v NullableCronJob) IsSet() bool {
	return v.isSet
}

func (v *NullableCronJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronJob(val *CronJob) *NullableCronJob {
	return &NullableCronJob{value: val, isSet: true}
}

func (v NullableCronJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
