/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IngressRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IngressRule{}

// IngressRule struct for IngressRule
type IngressRule struct {
	Host NullableString `json:"host"`
	// Ingress Rule Paths
	IngressRulePaths []IngressRulePath `json:"ingress_rule_paths"`
}

type _IngressRule IngressRule

// NewIngressRule instantiates a new IngressRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngressRule(host NullableString, ingressRulePaths []IngressRulePath) *IngressRule {
	this := IngressRule{}
	this.Host = host
	this.IngressRulePaths = ingressRulePaths
	return &this
}

// NewIngressRuleWithDefaults instantiates a new IngressRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngressRuleWithDefaults() *IngressRule {
	this := IngressRule{}
	return &this
}

// GetHost returns the Host field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IngressRule) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}

	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IngressRule) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// SetHost sets field value
func (o *IngressRule) SetHost(v string) {
	o.Host.Set(&v)
}

// GetIngressRulePaths returns the IngressRulePaths field value
func (o *IngressRule) GetIngressRulePaths() []IngressRulePath {
	if o == nil {
		var ret []IngressRulePath
		return ret
	}

	return o.IngressRulePaths
}

// GetIngressRulePathsOk returns a tuple with the IngressRulePaths field value
// and a boolean to check if the value has been set.
func (o *IngressRule) GetIngressRulePathsOk() ([]IngressRulePath, bool) {
	if o == nil {
		return nil, false
	}
	return o.IngressRulePaths, true
}

// SetIngressRulePaths sets field value
func (o *IngressRule) SetIngressRulePaths(v []IngressRulePath) {
	o.IngressRulePaths = v
}

func (o IngressRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IngressRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host.Get()
	toSerialize["ingress_rule_paths"] = o.IngressRulePaths
	return toSerialize, nil
}

func (o *IngressRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"ingress_rule_paths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIngressRule := _IngressRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIngressRule)

	if err != nil {
		return err
	}

	*o = IngressRule(varIngressRule)

	return err
}

type NullableIngressRule struct {
	value *IngressRule
	isSet bool
}

func (v NullableIngressRule) Get() *IngressRule {
	return v.value
}

func (v *NullableIngressRule) Set(val *IngressRule) {
	v.value = val
	v.isSet = true
}

func (v NullableIngressRule) IsSet() bool {
	return v.isSet
}

func (v *NullableIngressRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngressRule(val *IngressRule) *NullableIngressRule {
	return &NullableIngressRule{value: val, isSet: true}
}

func (v NullableIngressRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngressRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
