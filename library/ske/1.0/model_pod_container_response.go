/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PodContainerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PodContainerResponse{}

// PodContainerResponse struct for PodContainerResponse
type PodContainerResponse struct {
	ContainerName NullableString `json:"container_name"`
	// Restarts
	Restarts int32          `json:"restarts"`
	Status   NullableString `json:"status"`
}

type _PodContainerResponse PodContainerResponse

// NewPodContainerResponse instantiates a new PodContainerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPodContainerResponse(containerName NullableString, restarts int32, status NullableString) *PodContainerResponse {
	this := PodContainerResponse{}
	this.ContainerName = containerName
	this.Restarts = restarts
	this.Status = status
	return &this
}

// NewPodContainerResponseWithDefaults instantiates a new PodContainerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPodContainerResponseWithDefaults() *PodContainerResponse {
	this := PodContainerResponse{}
	return &this
}

// GetContainerName returns the ContainerName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PodContainerResponse) GetContainerName() string {
	if o == nil || o.ContainerName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ContainerName.Get()
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodContainerResponse) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerName.Get(), o.ContainerName.IsSet()
}

// SetContainerName sets field value
func (o *PodContainerResponse) SetContainerName(v string) {
	o.ContainerName.Set(&v)
}

// GetRestarts returns the Restarts field value
func (o *PodContainerResponse) GetRestarts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Restarts
}

// GetRestartsOk returns a tuple with the Restarts field value
// and a boolean to check if the value has been set.
func (o *PodContainerResponse) GetRestartsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Restarts, true
}

// SetRestarts sets field value
func (o *PodContainerResponse) SetRestarts(v int32) {
	o.Restarts = v
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PodContainerResponse) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PodContainerResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *PodContainerResponse) SetStatus(v string) {
	o.Status.Set(&v)
}

func (o PodContainerResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PodContainerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["container_name"] = o.ContainerName.Get()
	toSerialize["restarts"] = o.Restarts
	toSerialize["status"] = o.Status.Get()
	return toSerialize, nil
}

func (o *PodContainerResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"container_name",
		"restarts",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPodContainerResponse := _PodContainerResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPodContainerResponse)

	if err != nil {
		return err
	}

	*o = PodContainerResponse(varPodContainerResponse)

	return err
}

type NullablePodContainerResponse struct {
	value *PodContainerResponse
	isSet bool
}

func (v NullablePodContainerResponse) Get() *PodContainerResponse {
	return v.value
}

func (v *NullablePodContainerResponse) Set(val *PodContainerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePodContainerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePodContainerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePodContainerResponse(val *PodContainerResponse) *NullablePodContainerResponse {
	return &NullablePodContainerResponse{value: val, isSet: true}
}

func (v NullablePodContainerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePodContainerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
