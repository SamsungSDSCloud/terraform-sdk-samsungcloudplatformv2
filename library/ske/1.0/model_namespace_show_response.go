/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NamespaceShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceShowResponse{}

// NamespaceShowResponse struct for NamespaceShowResponse
type NamespaceShowResponse struct {
	Namespace Namespace `json:"namespace"`
}

type _NamespaceShowResponse NamespaceShowResponse

// NewNamespaceShowResponse instantiates a new NamespaceShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceShowResponse(namespace Namespace) *NamespaceShowResponse {
	this := NamespaceShowResponse{}
	this.Namespace = namespace
	return &this
}

// NewNamespaceShowResponseWithDefaults instantiates a new NamespaceShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceShowResponseWithDefaults() *NamespaceShowResponse {
	this := NamespaceShowResponse{}
	return &this
}

// GetNamespace returns the Namespace field value
func (o *NamespaceShowResponse) GetNamespace() Namespace {
	if o == nil {
		var ret Namespace
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *NamespaceShowResponse) GetNamespaceOk() (*Namespace, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *NamespaceShowResponse) SetNamespace(v Namespace) {
	o.Namespace = v
}

func (o NamespaceShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespace"] = o.Namespace
	return toSerialize, nil
}

func (o *NamespaceShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNamespaceShowResponse := _NamespaceShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNamespaceShowResponse)

	if err != nil {
		return err
	}

	*o = NamespaceShowResponse(varNamespaceShowResponse)

	return err
}

type NullableNamespaceShowResponse struct {
	value *NamespaceShowResponse
	isSet bool
}

func (v NullableNamespaceShowResponse) Get() *NamespaceShowResponse {
	return v.value
}

func (v *NullableNamespaceShowResponse) Set(val *NamespaceShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceShowResponse(val *NamespaceShowResponse) *NullableNamespaceShowResponse {
	return &NullableNamespaceShowResponse{value: val, isSet: true}
}

func (v NullableNamespaceShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
