/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DeploymentListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentListResponse{}

// DeploymentListResponse struct for DeploymentListResponse
type DeploymentListResponse struct {
	Count       NullableInt32       `json:"count,omitempty"`
	Deployments []DeploymentSummary `json:"deployments"`
	Links       []interface{}       `json:"links,omitempty"`
}

type _DeploymentListResponse DeploymentListResponse

// NewDeploymentListResponse instantiates a new DeploymentListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentListResponse(deployments []DeploymentSummary) *DeploymentListResponse {
	this := DeploymentListResponse{}
	this.Deployments = deployments
	return &this
}

// NewDeploymentListResponseWithDefaults instantiates a new DeploymentListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentListResponseWithDefaults() *DeploymentListResponse {
	this := DeploymentListResponse{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentListResponse) GetCount() int32 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int32
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *DeploymentListResponse) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt32 and assigns it to the Count field.
func (o *DeploymentListResponse) SetCount(v int32) {
	o.Count.Set(&v)
}

// SetCountNil sets the value for Count to be an explicit nil
func (o *DeploymentListResponse) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *DeploymentListResponse) UnsetCount() {
	o.Count.Unset()
}

// GetDeployments returns the Deployments field value
func (o *DeploymentListResponse) GetDeployments() []DeploymentSummary {
	if o == nil {
		var ret []DeploymentSummary
		return ret
	}

	return o.Deployments
}

// GetDeploymentsOk returns a tuple with the Deployments field value
// and a boolean to check if the value has been set.
func (o *DeploymentListResponse) GetDeploymentsOk() ([]DeploymentSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deployments, true
}

// SetDeployments sets field value
func (o *DeploymentListResponse) SetDeployments(v []DeploymentSummary) {
	o.Deployments = v
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeploymentListResponse) GetLinks() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeploymentListResponse) GetLinksOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DeploymentListResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []interface{} and assigns it to the Links field.
func (o *DeploymentListResponse) SetLinks(v []interface{}) {
	o.Links = v
}

func (o DeploymentListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	toSerialize["deployments"] = o.Deployments
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

func (o *DeploymentListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"deployments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentListResponse := _DeploymentListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentListResponse)

	if err != nil {
		return err
	}

	*o = DeploymentListResponse(varDeploymentListResponse)

	return err
}

type NullableDeploymentListResponse struct {
	value *DeploymentListResponse
	isSet bool
}

func (v NullableDeploymentListResponse) Get() *DeploymentListResponse {
	return v.value
}

func (v *NullableDeploymentListResponse) Set(val *DeploymentListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentListResponse(val *DeploymentListResponse) *NullableDeploymentListResponse {
	return &NullableDeploymentListResponse{value: val, isSet: true}
}

func (v NullableDeploymentListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
