/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the StorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageClass{}

// StorageClass struct for StorageClass
type StorageClass struct {
	Age                  NullableString `json:"age"`
	AllowVolumeExpansion NullableString `json:"allow_volume_expansion"`
	Annotations          []string       `json:"annotations"`
	// Cluster ID
	ClusterId string `json:"cluster_id"`
	// Cluster Name
	ClusterName  string         `json:"cluster_name"`
	CreatedAt    NullableTime   `json:"created_at"`
	DefaultClass NullableString `json:"default_class"`
	Labels       []string       `json:"labels"`
	MountOptions []string       `json:"mount_options"`
	// Storage Class Name
	Name                   string         `json:"name"`
	Provisioner            NullableString `json:"provisioner"`
	PvReclaimPolicy        NullableString `json:"pv_reclaim_policy"`
	StorageClassParameters []string       `json:"storage_class_parameters"`
	// Resource ID
	Uid               string         `json:"uid"`
	VolumeBindingMode NullableString `json:"volume_binding_mode"`
	// YAML
	Yaml string `json:"yaml"`
}

type _StorageClass StorageClass

// NewStorageClass instantiates a new StorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageClass(age NullableString, allowVolumeExpansion NullableString, annotations []string, clusterId string, clusterName string, createdAt NullableTime, defaultClass NullableString, labels []string, mountOptions []string, name string, provisioner NullableString, pvReclaimPolicy NullableString, storageClassParameters []string, uid string, volumeBindingMode NullableString, yaml string) *StorageClass {
	this := StorageClass{}
	this.Age = age
	this.AllowVolumeExpansion = allowVolumeExpansion
	this.Annotations = annotations
	this.ClusterId = clusterId
	this.ClusterName = clusterName
	this.CreatedAt = createdAt
	this.DefaultClass = defaultClass
	this.Labels = labels
	this.MountOptions = mountOptions
	this.Name = name
	this.Provisioner = provisioner
	this.PvReclaimPolicy = pvReclaimPolicy
	this.StorageClassParameters = storageClassParameters
	this.Uid = uid
	this.VolumeBindingMode = volumeBindingMode
	this.Yaml = yaml
	return &this
}

// NewStorageClassWithDefaults instantiates a new StorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageClassWithDefaults() *StorageClass {
	this := StorageClass{}
	return &this
}

// GetAge returns the Age field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClass) GetAge() string {
	if o == nil || o.Age.Get() == nil {
		var ret string
		return ret
	}

	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetAgeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// SetAge sets field value
func (o *StorageClass) SetAge(v string) {
	o.Age.Set(&v)
}

// GetAllowVolumeExpansion returns the AllowVolumeExpansion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClass) GetAllowVolumeExpansion() string {
	if o == nil || o.AllowVolumeExpansion.Get() == nil {
		var ret string
		return ret
	}

	return *o.AllowVolumeExpansion.Get()
}

// GetAllowVolumeExpansionOk returns a tuple with the AllowVolumeExpansion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetAllowVolumeExpansionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowVolumeExpansion.Get(), o.AllowVolumeExpansion.IsSet()
}

// SetAllowVolumeExpansion sets field value
func (o *StorageClass) SetAllowVolumeExpansion(v string) {
	o.AllowVolumeExpansion.Set(&v)
}

// GetAnnotations returns the Annotations field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *StorageClass) GetAnnotations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetAnnotationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// SetAnnotations sets field value
func (o *StorageClass) SetAnnotations(v []string) {
	o.Annotations = v
}

// GetClusterId returns the ClusterId field value
func (o *StorageClass) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *StorageClass) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *StorageClass) SetClusterId(v string) {
	o.ClusterId = v
}

// GetClusterName returns the ClusterName field value
func (o *StorageClass) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *StorageClass) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *StorageClass) SetClusterName(v string) {
	o.ClusterName = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *StorageClass) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *StorageClass) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetDefaultClass returns the DefaultClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClass) GetDefaultClass() string {
	if o == nil || o.DefaultClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.DefaultClass.Get()
}

// GetDefaultClassOk returns a tuple with the DefaultClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetDefaultClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultClass.Get(), o.DefaultClass.IsSet()
}

// SetDefaultClass sets field value
func (o *StorageClass) SetDefaultClass(v string) {
	o.DefaultClass.Set(&v)
}

// GetLabels returns the Labels field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *StorageClass) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *StorageClass) SetLabels(v []string) {
	o.Labels = v
}

// GetMountOptions returns the MountOptions field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *StorageClass) GetMountOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MountOptions
}

// GetMountOptionsOk returns a tuple with the MountOptions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetMountOptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.MountOptions) {
		return nil, false
	}
	return o.MountOptions, true
}

// SetMountOptions sets field value
func (o *StorageClass) SetMountOptions(v []string) {
	o.MountOptions = v
}

// GetName returns the Name field value
func (o *StorageClass) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StorageClass) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StorageClass) SetName(v string) {
	o.Name = v
}

// GetProvisioner returns the Provisioner field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClass) GetProvisioner() string {
	if o == nil || o.Provisioner.Get() == nil {
		var ret string
		return ret
	}

	return *o.Provisioner.Get()
}

// GetProvisionerOk returns a tuple with the Provisioner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetProvisionerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Provisioner.Get(), o.Provisioner.IsSet()
}

// SetProvisioner sets field value
func (o *StorageClass) SetProvisioner(v string) {
	o.Provisioner.Set(&v)
}

// GetPvReclaimPolicy returns the PvReclaimPolicy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClass) GetPvReclaimPolicy() string {
	if o == nil || o.PvReclaimPolicy.Get() == nil {
		var ret string
		return ret
	}

	return *o.PvReclaimPolicy.Get()
}

// GetPvReclaimPolicyOk returns a tuple with the PvReclaimPolicy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetPvReclaimPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PvReclaimPolicy.Get(), o.PvReclaimPolicy.IsSet()
}

// SetPvReclaimPolicy sets field value
func (o *StorageClass) SetPvReclaimPolicy(v string) {
	o.PvReclaimPolicy.Set(&v)
}

// GetStorageClassParameters returns the StorageClassParameters field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *StorageClass) GetStorageClassParameters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StorageClassParameters
}

// GetStorageClassParametersOk returns a tuple with the StorageClassParameters field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetStorageClassParametersOk() ([]string, bool) {
	if o == nil || IsNil(o.StorageClassParameters) {
		return nil, false
	}
	return o.StorageClassParameters, true
}

// SetStorageClassParameters sets field value
func (o *StorageClass) SetStorageClassParameters(v []string) {
	o.StorageClassParameters = v
}

// GetUid returns the Uid field value
func (o *StorageClass) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *StorageClass) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *StorageClass) SetUid(v string) {
	o.Uid = v
}

// GetVolumeBindingMode returns the VolumeBindingMode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StorageClass) GetVolumeBindingMode() string {
	if o == nil || o.VolumeBindingMode.Get() == nil {
		var ret string
		return ret
	}

	return *o.VolumeBindingMode.Get()
}

// GetVolumeBindingModeOk returns a tuple with the VolumeBindingMode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageClass) GetVolumeBindingModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeBindingMode.Get(), o.VolumeBindingMode.IsSet()
}

// SetVolumeBindingMode sets field value
func (o *StorageClass) SetVolumeBindingMode(v string) {
	o.VolumeBindingMode.Set(&v)
}

// GetYaml returns the Yaml field value
func (o *StorageClass) GetYaml() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Yaml
}

// GetYamlOk returns a tuple with the Yaml field value
// and a boolean to check if the value has been set.
func (o *StorageClass) GetYamlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Yaml, true
}

// SetYaml sets field value
func (o *StorageClass) SetYaml(v string) {
	o.Yaml = v
}

func (o StorageClass) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["age"] = o.Age.Get()
	toSerialize["allow_volume_expansion"] = o.AllowVolumeExpansion.Get()
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	toSerialize["cluster_id"] = o.ClusterId
	toSerialize["cluster_name"] = o.ClusterName
	toSerialize["created_at"] = o.CreatedAt.Get()
	toSerialize["default_class"] = o.DefaultClass.Get()
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.MountOptions != nil {
		toSerialize["mount_options"] = o.MountOptions
	}
	toSerialize["name"] = o.Name
	toSerialize["provisioner"] = o.Provisioner.Get()
	toSerialize["pv_reclaim_policy"] = o.PvReclaimPolicy.Get()
	if o.StorageClassParameters != nil {
		toSerialize["storage_class_parameters"] = o.StorageClassParameters
	}
	toSerialize["uid"] = o.Uid
	toSerialize["volume_binding_mode"] = o.VolumeBindingMode.Get()
	toSerialize["yaml"] = o.Yaml
	return toSerialize, nil
}

func (o *StorageClass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"age",
		"allow_volume_expansion",
		"annotations",
		"cluster_id",
		"cluster_name",
		"created_at",
		"default_class",
		"labels",
		"mount_options",
		"name",
		"provisioner",
		"pv_reclaim_policy",
		"storage_class_parameters",
		"uid",
		"volume_binding_mode",
		"yaml",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageClass := _StorageClass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageClass)

	if err != nil {
		return err
	}

	*o = StorageClass(varStorageClass)

	return err
}

type NullableStorageClass struct {
	value *StorageClass
	isSet bool
}

func (v NullableStorageClass) Get() *StorageClass {
	return v.value
}

func (v *NullableStorageClass) Set(val *StorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageClass(val *StorageClass) *NullableStorageClass {
	return &NullableStorageClass{value: val, isSet: true}
}

func (v NullableStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
