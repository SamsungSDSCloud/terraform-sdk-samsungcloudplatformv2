/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NodepoolTaintsSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodepoolTaintsSetRequest{}

// NodepoolTaintsSetRequest struct for NodepoolTaintsSetRequest
type NodepoolTaintsSetRequest struct {
	Taints []NodepoolTaint `json:"taints"`
}

type _NodepoolTaintsSetRequest NodepoolTaintsSetRequest

// NewNodepoolTaintsSetRequest instantiates a new NodepoolTaintsSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepoolTaintsSetRequest(taints []NodepoolTaint) *NodepoolTaintsSetRequest {
	this := NodepoolTaintsSetRequest{}
	this.Taints = taints
	return &this
}

// NewNodepoolTaintsSetRequestWithDefaults instantiates a new NodepoolTaintsSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolTaintsSetRequestWithDefaults() *NodepoolTaintsSetRequest {
	this := NodepoolTaintsSetRequest{}
	return &this
}

// GetTaints returns the Taints field value
func (o *NodepoolTaintsSetRequest) GetTaints() []NodepoolTaint {
	if o == nil {
		var ret []NodepoolTaint
		return ret
	}

	return o.Taints
}

// GetTaintsOk returns a tuple with the Taints field value
// and a boolean to check if the value has been set.
func (o *NodepoolTaintsSetRequest) GetTaintsOk() ([]NodepoolTaint, bool) {
	if o == nil {
		return nil, false
	}
	return o.Taints, true
}

// SetTaints sets field value
func (o *NodepoolTaintsSetRequest) SetTaints(v []NodepoolTaint) {
	o.Taints = v
}

func (o NodepoolTaintsSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodepoolTaintsSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taints"] = o.Taints
	return toSerialize, nil
}

func (o *NodepoolTaintsSetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodepoolTaintsSetRequest := _NodepoolTaintsSetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodepoolTaintsSetRequest)

	if err != nil {
		return err
	}

	*o = NodepoolTaintsSetRequest(varNodepoolTaintsSetRequest)

	return err
}

type NullableNodepoolTaintsSetRequest struct {
	value *NodepoolTaintsSetRequest
	isSet bool
}

func (v NullableNodepoolTaintsSetRequest) Get() *NodepoolTaintsSetRequest {
	return v.value
}

func (v *NullableNodepoolTaintsSetRequest) Set(val *NodepoolTaintsSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepoolTaintsSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepoolTaintsSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepoolTaintsSetRequest(val *NodepoolTaintsSetRequest) *NullableNodepoolTaintsSetRequest {
	return &NullableNodepoolTaintsSetRequest{value: val, isSet: true}
}

func (v NullableNodepoolTaintsSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepoolTaintsSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
