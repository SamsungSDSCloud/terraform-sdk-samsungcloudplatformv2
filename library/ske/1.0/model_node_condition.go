/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2582
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the NodeCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeCondition{}

// NodeCondition struct for NodeCondition
type NodeCondition struct {
	LastHeartbeatTime    NullableTime   `json:"last_heartbeat_time"`
	LastTransitionTime   NullableTime   `json:"last_transition_time"`
	NodeConditionMessage NullableString `json:"node_condition_message"`
	NodeConditionReason  NullableString `json:"node_condition_reason"`
	NodeConditionStatus  NullableString `json:"node_condition_status"`
	NodeConditionType    NullableString `json:"node_condition_type"`
}

type _NodeCondition NodeCondition

// NewNodeCondition instantiates a new NodeCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeCondition(lastHeartbeatTime NullableTime, lastTransitionTime NullableTime, nodeConditionMessage NullableString, nodeConditionReason NullableString, nodeConditionStatus NullableString, nodeConditionType NullableString) *NodeCondition {
	this := NodeCondition{}
	this.LastHeartbeatTime = lastHeartbeatTime
	this.LastTransitionTime = lastTransitionTime
	this.NodeConditionMessage = nodeConditionMessage
	this.NodeConditionReason = nodeConditionReason
	this.NodeConditionStatus = nodeConditionStatus
	this.NodeConditionType = nodeConditionType
	return &this
}

// NewNodeConditionWithDefaults instantiates a new NodeCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeConditionWithDefaults() *NodeCondition {
	this := NodeCondition{}
	return &this
}

// GetLastHeartbeatTime returns the LastHeartbeatTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *NodeCondition) GetLastHeartbeatTime() time.Time {
	if o == nil || o.LastHeartbeatTime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastHeartbeatTime.Get()
}

// GetLastHeartbeatTimeOk returns a tuple with the LastHeartbeatTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeCondition) GetLastHeartbeatTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastHeartbeatTime.Get(), o.LastHeartbeatTime.IsSet()
}

// SetLastHeartbeatTime sets field value
func (o *NodeCondition) SetLastHeartbeatTime(v time.Time) {
	o.LastHeartbeatTime.Set(&v)
}

// GetLastTransitionTime returns the LastTransitionTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *NodeCondition) GetLastTransitionTime() time.Time {
	if o == nil || o.LastTransitionTime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastTransitionTime.Get()
}

// GetLastTransitionTimeOk returns a tuple with the LastTransitionTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeCondition) GetLastTransitionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastTransitionTime.Get(), o.LastTransitionTime.IsSet()
}

// SetLastTransitionTime sets field value
func (o *NodeCondition) SetLastTransitionTime(v time.Time) {
	o.LastTransitionTime.Set(&v)
}

// GetNodeConditionMessage returns the NodeConditionMessage field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NodeCondition) GetNodeConditionMessage() string {
	if o == nil || o.NodeConditionMessage.Get() == nil {
		var ret string
		return ret
	}

	return *o.NodeConditionMessage.Get()
}

// GetNodeConditionMessageOk returns a tuple with the NodeConditionMessage field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeCondition) GetNodeConditionMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeConditionMessage.Get(), o.NodeConditionMessage.IsSet()
}

// SetNodeConditionMessage sets field value
func (o *NodeCondition) SetNodeConditionMessage(v string) {
	o.NodeConditionMessage.Set(&v)
}

// GetNodeConditionReason returns the NodeConditionReason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NodeCondition) GetNodeConditionReason() string {
	if o == nil || o.NodeConditionReason.Get() == nil {
		var ret string
		return ret
	}

	return *o.NodeConditionReason.Get()
}

// GetNodeConditionReasonOk returns a tuple with the NodeConditionReason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeCondition) GetNodeConditionReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeConditionReason.Get(), o.NodeConditionReason.IsSet()
}

// SetNodeConditionReason sets field value
func (o *NodeCondition) SetNodeConditionReason(v string) {
	o.NodeConditionReason.Set(&v)
}

// GetNodeConditionStatus returns the NodeConditionStatus field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NodeCondition) GetNodeConditionStatus() string {
	if o == nil || o.NodeConditionStatus.Get() == nil {
		var ret string
		return ret
	}

	return *o.NodeConditionStatus.Get()
}

// GetNodeConditionStatusOk returns a tuple with the NodeConditionStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeCondition) GetNodeConditionStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeConditionStatus.Get(), o.NodeConditionStatus.IsSet()
}

// SetNodeConditionStatus sets field value
func (o *NodeCondition) SetNodeConditionStatus(v string) {
	o.NodeConditionStatus.Set(&v)
}

// GetNodeConditionType returns the NodeConditionType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NodeCondition) GetNodeConditionType() string {
	if o == nil || o.NodeConditionType.Get() == nil {
		var ret string
		return ret
	}

	return *o.NodeConditionType.Get()
}

// GetNodeConditionTypeOk returns a tuple with the NodeConditionType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeCondition) GetNodeConditionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeConditionType.Get(), o.NodeConditionType.IsSet()
}

// SetNodeConditionType sets field value
func (o *NodeCondition) SetNodeConditionType(v string) {
	o.NodeConditionType.Set(&v)
}

func (o NodeCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["last_heartbeat_time"] = o.LastHeartbeatTime.Get()
	toSerialize["last_transition_time"] = o.LastTransitionTime.Get()
	toSerialize["node_condition_message"] = o.NodeConditionMessage.Get()
	toSerialize["node_condition_reason"] = o.NodeConditionReason.Get()
	toSerialize["node_condition_status"] = o.NodeConditionStatus.Get()
	toSerialize["node_condition_type"] = o.NodeConditionType.Get()
	return toSerialize, nil
}

func (o *NodeCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"last_heartbeat_time",
		"last_transition_time",
		"node_condition_message",
		"node_condition_reason",
		"node_condition_status",
		"node_condition_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeCondition := _NodeCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeCondition)

	if err != nil {
		return err
	}

	*o = NodeCondition(varNodeCondition)

	return err
}

type NullableNodeCondition struct {
	value *NodeCondition
	isSet bool
}

func (v NullableNodeCondition) Get() *NodeCondition {
	return v.value
}

func (v *NullableNodeCondition) Set(val *NodeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeCondition(val *NodeCondition) *NullableNodeCondition {
	return &NullableNodeCondition{value: val, isSet: true}
}

func (v NullableNodeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
