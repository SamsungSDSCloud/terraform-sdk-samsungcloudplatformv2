/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2273
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AsyncResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncResponse{}

// AsyncResponse struct for AsyncResponse
type AsyncResponse struct {
	// Account ID
	AccountId string `json:"account_id"`
	// Request ID
	RequestId string `json:"request_id"`
	// Resource ID
	ResourceId string `json:"resource_id"`
}

type _AsyncResponse AsyncResponse

// NewAsyncResponse instantiates a new AsyncResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncResponse(accountId string, requestId string, resourceId string) *AsyncResponse {
	this := AsyncResponse{}
	this.AccountId = accountId
	this.RequestId = requestId
	this.ResourceId = resourceId
	return &this
}

// NewAsyncResponseWithDefaults instantiates a new AsyncResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncResponseWithDefaults() *AsyncResponse {
	this := AsyncResponse{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *AsyncResponse) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AsyncResponse) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AsyncResponse) SetAccountId(v string) {
	o.AccountId = v
}

// GetRequestId returns the RequestId field value
func (o *AsyncResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *AsyncResponse) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *AsyncResponse) SetRequestId(v string) {
	o.RequestId = v
}

// GetResourceId returns the ResourceId field value
func (o *AsyncResponse) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *AsyncResponse) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *AsyncResponse) SetResourceId(v string) {
	o.ResourceId = v
}

func (o AsyncResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["request_id"] = o.RequestId
	toSerialize["resource_id"] = o.ResourceId
	return toSerialize, nil
}

func (o *AsyncResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"request_id",
		"resource_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAsyncResponse := _AsyncResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAsyncResponse)

	if err != nil {
		return err
	}

	*o = AsyncResponse(varAsyncResponse)

	return err
}

type NullableAsyncResponse struct {
	value *AsyncResponse
	isSet bool
}

func (v NullableAsyncResponse) Get() *AsyncResponse {
	return v.value
}

func (v *NullableAsyncResponse) Set(val *AsyncResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncResponse(val *AsyncResponse) *NullableAsyncResponse {
	return &NullableAsyncResponse{value: val, isSet: true}
}

func (v NullableAsyncResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
