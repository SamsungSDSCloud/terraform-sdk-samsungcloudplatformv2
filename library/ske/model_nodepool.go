/*
SCP Kubernetes Service

SCP Kubernetes Service

API version: 0.0.1.dev2273
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ske

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Nodepool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nodepool{}

// Nodepool struct for Nodepool
type Nodepool struct {
	// Account ID
	AccountId string `json:"account_id"`
	// Is Auto Recovery
	AutoRecoveryEnabled bool `json:"auto_recovery_enabled"`
	// Is Auto Scale
	AutoScaleEnabled bool `json:"auto_scale_enabled"`
	// Cluster
	Cluster ClusterOfNodepool `json:"cluster"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Created By
	CreatedBy string `json:"created_by"`
	// Current Node Count
	CurrentNodeCount int32 `json:"current_node_count"`
	// Desired Node Count
	DesiredNodeCount int32 `json:"desired_node_count"`
	// Nodepool ID
	Id string `json:"id"`
	// Image
	Image Image `json:"image"`
	// Keypair
	Keypair Keypair `json:"keypair"`
	// Kubernetes Version
	KubernetesVersion string `json:"kubernetes_version"`
	// Max Node Count
	MaxNodeCount int32 `json:"max_node_count"`
	// Min Node Count
	MinNodeCount int32 `json:"min_node_count"`
	// Modified At
	ModifiedAt time.Time `json:"modified_at"`
	// Modified By
	ModifiedBy string `json:"modified_by"`
	// Nodepool Name
	Name string `json:"name"`
	// Server Type
	ServerType ServerType `json:"server_type"`
	// Nodepool Status
	Status string `json:"status"`
	// Volume Size
	VolumeSize int32 `json:"volume_size"`
	// Volume Type
	VolumeType VolumeType `json:"volume_type"`
}

type _Nodepool Nodepool

// NewNodepool instantiates a new Nodepool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepool(accountId string, autoRecoveryEnabled bool, autoScaleEnabled bool, cluster ClusterOfNodepool, createdAt time.Time, createdBy string, currentNodeCount int32, desiredNodeCount int32, id string, image Image, keypair Keypair, kubernetesVersion string, maxNodeCount int32, minNodeCount int32, modifiedAt time.Time, modifiedBy string, name string, serverType ServerType, status string, volumeSize int32, volumeType VolumeType) *Nodepool {
	this := Nodepool{}
	this.AccountId = accountId
	this.AutoRecoveryEnabled = autoRecoveryEnabled
	this.AutoScaleEnabled = autoScaleEnabled
	this.Cluster = cluster
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.CurrentNodeCount = currentNodeCount
	this.DesiredNodeCount = desiredNodeCount
	this.Id = id
	this.Image = image
	this.Keypair = keypair
	this.KubernetesVersion = kubernetesVersion
	this.MaxNodeCount = maxNodeCount
	this.MinNodeCount = minNodeCount
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.Name = name
	this.ServerType = serverType
	this.Status = status
	this.VolumeSize = volumeSize
	this.VolumeType = volumeType
	return &this
}

// NewNodepoolWithDefaults instantiates a new Nodepool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolWithDefaults() *Nodepool {
	this := Nodepool{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *Nodepool) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Nodepool) SetAccountId(v string) {
	o.AccountId = v
}

// GetAutoRecoveryEnabled returns the AutoRecoveryEnabled field value
func (o *Nodepool) GetAutoRecoveryEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoRecoveryEnabled
}

// GetAutoRecoveryEnabledOk returns a tuple with the AutoRecoveryEnabled field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetAutoRecoveryEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoRecoveryEnabled, true
}

// SetAutoRecoveryEnabled sets field value
func (o *Nodepool) SetAutoRecoveryEnabled(v bool) {
	o.AutoRecoveryEnabled = v
}

// GetAutoScaleEnabled returns the AutoScaleEnabled field value
func (o *Nodepool) GetAutoScaleEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoScaleEnabled
}

// GetAutoScaleEnabledOk returns a tuple with the AutoScaleEnabled field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetAutoScaleEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoScaleEnabled, true
}

// SetAutoScaleEnabled sets field value
func (o *Nodepool) SetAutoScaleEnabled(v bool) {
	o.AutoScaleEnabled = v
}

// GetCluster returns the Cluster field value
func (o *Nodepool) GetCluster() ClusterOfNodepool {
	if o == nil {
		var ret ClusterOfNodepool
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetClusterOk() (*ClusterOfNodepool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *Nodepool) SetCluster(v ClusterOfNodepool) {
	o.Cluster = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Nodepool) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Nodepool) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Nodepool) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Nodepool) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCurrentNodeCount returns the CurrentNodeCount field value
func (o *Nodepool) GetCurrentNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentNodeCount
}

// GetCurrentNodeCountOk returns a tuple with the CurrentNodeCount field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetCurrentNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentNodeCount, true
}

// SetCurrentNodeCount sets field value
func (o *Nodepool) SetCurrentNodeCount(v int32) {
	o.CurrentNodeCount = v
}

// GetDesiredNodeCount returns the DesiredNodeCount field value
func (o *Nodepool) GetDesiredNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DesiredNodeCount
}

// GetDesiredNodeCountOk returns a tuple with the DesiredNodeCount field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetDesiredNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DesiredNodeCount, true
}

// SetDesiredNodeCount sets field value
func (o *Nodepool) SetDesiredNodeCount(v int32) {
	o.DesiredNodeCount = v
}

// GetId returns the Id field value
func (o *Nodepool) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Nodepool) SetId(v string) {
	o.Id = v
}

// GetImage returns the Image field value
func (o *Nodepool) GetImage() Image {
	if o == nil {
		var ret Image
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetImageOk() (*Image, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *Nodepool) SetImage(v Image) {
	o.Image = v
}

// GetKeypair returns the Keypair field value
func (o *Nodepool) GetKeypair() Keypair {
	if o == nil {
		var ret Keypair
		return ret
	}

	return o.Keypair
}

// GetKeypairOk returns a tuple with the Keypair field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetKeypairOk() (*Keypair, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Keypair, true
}

// SetKeypair sets field value
func (o *Nodepool) SetKeypair(v Keypair) {
	o.Keypair = v
}

// GetKubernetesVersion returns the KubernetesVersion field value
func (o *Nodepool) GetKubernetesVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubernetesVersion
}

// GetKubernetesVersionOk returns a tuple with the KubernetesVersion field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetKubernetesVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KubernetesVersion, true
}

// SetKubernetesVersion sets field value
func (o *Nodepool) SetKubernetesVersion(v string) {
	o.KubernetesVersion = v
}

// GetMaxNodeCount returns the MaxNodeCount field value
func (o *Nodepool) GetMaxNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxNodeCount
}

// GetMaxNodeCountOk returns a tuple with the MaxNodeCount field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetMaxNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxNodeCount, true
}

// SetMaxNodeCount sets field value
func (o *Nodepool) SetMaxNodeCount(v int32) {
	o.MaxNodeCount = v
}

// GetMinNodeCount returns the MinNodeCount field value
func (o *Nodepool) GetMinNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinNodeCount
}

// GetMinNodeCountOk returns a tuple with the MinNodeCount field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetMinNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinNodeCount, true
}

// SetMinNodeCount sets field value
func (o *Nodepool) SetMinNodeCount(v int32) {
	o.MinNodeCount = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *Nodepool) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *Nodepool) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Nodepool) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Nodepool) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetName returns the Name field value
func (o *Nodepool) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Nodepool) SetName(v string) {
	o.Name = v
}

// GetServerType returns the ServerType field value
func (o *Nodepool) GetServerType() ServerType {
	if o == nil {
		var ret ServerType
		return ret
	}

	return o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetServerTypeOk() (*ServerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerType, true
}

// SetServerType sets field value
func (o *Nodepool) SetServerType(v ServerType) {
	o.ServerType = v
}

// GetStatus returns the Status field value
func (o *Nodepool) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Nodepool) SetStatus(v string) {
	o.Status = v
}

// GetVolumeSize returns the VolumeSize field value
func (o *Nodepool) GetVolumeSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VolumeSize
}

// GetVolumeSizeOk returns a tuple with the VolumeSize field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetVolumeSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeSize, true
}

// SetVolumeSize sets field value
func (o *Nodepool) SetVolumeSize(v int32) {
	o.VolumeSize = v
}

// GetVolumeType returns the VolumeType field value
func (o *Nodepool) GetVolumeType() VolumeType {
	if o == nil {
		var ret VolumeType
		return ret
	}

	return o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value
// and a boolean to check if the value has been set.
func (o *Nodepool) GetVolumeTypeOk() (*VolumeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeType, true
}

// SetVolumeType sets field value
func (o *Nodepool) SetVolumeType(v VolumeType) {
	o.VolumeType = v
}

func (o Nodepool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nodepool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["auto_recovery_enabled"] = o.AutoRecoveryEnabled
	toSerialize["auto_scale_enabled"] = o.AutoScaleEnabled
	toSerialize["cluster"] = o.Cluster
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["current_node_count"] = o.CurrentNodeCount
	toSerialize["desired_node_count"] = o.DesiredNodeCount
	toSerialize["id"] = o.Id
	toSerialize["image"] = o.Image
	toSerialize["keypair"] = o.Keypair
	toSerialize["kubernetes_version"] = o.KubernetesVersion
	toSerialize["max_node_count"] = o.MaxNodeCount
	toSerialize["min_node_count"] = o.MinNodeCount
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["name"] = o.Name
	toSerialize["server_type"] = o.ServerType
	toSerialize["status"] = o.Status
	toSerialize["volume_size"] = o.VolumeSize
	toSerialize["volume_type"] = o.VolumeType
	return toSerialize, nil
}

func (o *Nodepool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"auto_recovery_enabled",
		"auto_scale_enabled",
		"cluster",
		"created_at",
		"created_by",
		"current_node_count",
		"desired_node_count",
		"id",
		"image",
		"keypair",
		"kubernetes_version",
		"max_node_count",
		"min_node_count",
		"modified_at",
		"modified_by",
		"name",
		"server_type",
		"status",
		"volume_size",
		"volume_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodepool := _Nodepool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodepool)

	if err != nil {
		return err
	}

	*o = Nodepool(varNodepool)

	return err
}

type NullableNodepool struct {
	value *Nodepool
	isSet bool
}

func (v NullableNodepool) Get() *Nodepool {
	return v.value
}

func (v *NullableNodepool) Set(val *Nodepool) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepool) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepool(val *Nodepool) *NullableNodepool {
	return &NullableNodepool{value: val, isSet: true}
}

func (v NullableNodepool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
