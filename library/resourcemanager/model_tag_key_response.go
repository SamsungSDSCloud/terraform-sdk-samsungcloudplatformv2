/*
SCP Resource manager project

SCP Resource manager project

API version: 0.0.1.dev646
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TagKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagKeyResponse{}

// TagKeyResponse struct for TagKeyResponse
type TagKeyResponse struct {
	Count int32    `json:"count"`
	Keys  []string `json:"keys"`
}

type _TagKeyResponse TagKeyResponse

// NewTagKeyResponse instantiates a new TagKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagKeyResponse(count int32, keys []string) *TagKeyResponse {
	this := TagKeyResponse{}
	this.Count = count
	this.Keys = keys
	return &this
}

// NewTagKeyResponseWithDefaults instantiates a new TagKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagKeyResponseWithDefaults() *TagKeyResponse {
	this := TagKeyResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *TagKeyResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TagKeyResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TagKeyResponse) SetCount(v int32) {
	o.Count = v
}

// GetKeys returns the Keys field value
func (o *TagKeyResponse) GetKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value
// and a boolean to check if the value has been set.
func (o *TagKeyResponse) GetKeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keys, true
}

// SetKeys sets field value
func (o *TagKeyResponse) SetKeys(v []string) {
	o.Keys = v
}

func (o TagKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["keys"] = o.Keys
	return toSerialize, nil
}

func (o *TagKeyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagKeyResponse := _TagKeyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagKeyResponse)

	if err != nil {
		return err
	}

	*o = TagKeyResponse(varTagKeyResponse)

	return err
}

type NullableTagKeyResponse struct {
	value *TagKeyResponse
	isSet bool
}

func (v NullableTagKeyResponse) Get() *TagKeyResponse {
	return v.value
}

func (v *NullableTagKeyResponse) Set(val *TagKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTagKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTagKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagKeyResponse(val *TagKeyResponse) *NullableTagKeyResponse {
	return &NullableTagKeyResponse{value: val, isSet: true}
}

func (v NullableTagKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
