/*
SCP Resource manager project

SCP Resource manager project

API version: 0.0.1.dev646
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSearchRequest{}

// ResourceSearchRequest struct for ResourceSearchRequest
type ResourceSearchRequest struct {
	ResourceType NullableString `json:"resource_type,omitempty"`
	Tags         NullableString `json:"tags"`
}

type _ResourceSearchRequest ResourceSearchRequest

// NewResourceSearchRequest instantiates a new ResourceSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSearchRequest(tags NullableString) *ResourceSearchRequest {
	this := ResourceSearchRequest{}
	this.Tags = tags
	return &this
}

// NewResourceSearchRequestWithDefaults instantiates a new ResourceSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSearchRequestWithDefaults() *ResourceSearchRequest {
	this := ResourceSearchRequest{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceSearchRequest) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceSearchRequest) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceSearchRequest) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given NullableString and assigns it to the ResourceType field.
func (o *ResourceSearchRequest) SetResourceType(v string) {
	o.ResourceType.Set(&v)
}

// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *ResourceSearchRequest) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *ResourceSearchRequest) UnsetResourceType() {
	o.ResourceType.Unset()
}

// GetTags returns the Tags field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ResourceSearchRequest) GetTags() string {
	if o == nil || o.Tags.Get() == nil {
		var ret string
		return ret
	}

	return *o.Tags.Get()
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceSearchRequest) GetTagsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags.Get(), o.Tags.IsSet()
}

// SetTags sets field value
func (o *ResourceSearchRequest) SetTags(v string) {
	o.Tags.Set(&v)
}

func (o ResourceSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceType.IsSet() {
		toSerialize["resource_type"] = o.ResourceType.Get()
	}
	toSerialize["tags"] = o.Tags.Get()
	return toSerialize, nil
}

func (o *ResourceSearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceSearchRequest := _ResourceSearchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceSearchRequest)

	if err != nil {
		return err
	}

	*o = ResourceSearchRequest(varResourceSearchRequest)

	return err
}

type NullableResourceSearchRequest struct {
	value *ResourceSearchRequest
	isSet bool
}

func (v NullableResourceSearchRequest) Get() *ResourceSearchRequest {
	return v.value
}

func (v *NullableResourceSearchRequest) Set(val *ResourceSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSearchRequest(val *ResourceSearchRequest) *NullableResourceSearchRequest {
	return &NullableResourceSearchRequest{value: val, isSet: true}
}

func (v NullableResourceSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
