/*
SCP Resource manager project

SCP Resource manager project

API version: 0.0.1.dev646
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SrnTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SrnTag{}

// SrnTag struct for SrnTag
type SrnTag struct {
	// SRN
	Srn string `json:"srn"`
	Tag Tag    `json:"tag"`
}

type _SrnTag SrnTag

// NewSrnTag instantiates a new SrnTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSrnTag(srn string, tag Tag) *SrnTag {
	this := SrnTag{}
	this.Srn = srn
	this.Tag = tag
	return &this
}

// NewSrnTagWithDefaults instantiates a new SrnTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSrnTagWithDefaults() *SrnTag {
	this := SrnTag{}
	return &this
}

// GetSrn returns the Srn field value
func (o *SrnTag) GetSrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Srn
}

// GetSrnOk returns a tuple with the Srn field value
// and a boolean to check if the value has been set.
func (o *SrnTag) GetSrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Srn, true
}

// SetSrn sets field value
func (o *SrnTag) SetSrn(v string) {
	o.Srn = v
}

// GetTag returns the Tag field value
func (o *SrnTag) GetTag() Tag {
	if o == nil {
		var ret Tag
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *SrnTag) GetTagOk() (*Tag, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *SrnTag) SetTag(v Tag) {
	o.Tag = v
}

func (o SrnTag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SrnTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["srn"] = o.Srn
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *SrnTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"srn",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSrnTag := _SrnTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSrnTag)

	if err != nil {
		return err
	}

	*o = SrnTag(varSrnTag)

	return err
}

type NullableSrnTag struct {
	value *SrnTag
	isSet bool
}

func (v NullableSrnTag) Get() *SrnTag {
	return v.value
}

func (v *NullableSrnTag) Set(val *SrnTag) {
	v.value = val
	v.isSet = true
}

func (v NullableSrnTag) IsSet() bool {
	return v.isSet
}

func (v *NullableSrnTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSrnTag(val *SrnTag) *NullableSrnTag {
	return &NullableSrnTag{value: val, isSet: true}
}

func (v NullableSrnTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSrnTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
