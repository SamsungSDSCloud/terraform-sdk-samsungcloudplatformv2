/*
SCP Resource manager project

SCP Resource manager project

API version: 0.0.1.dev646
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceShowResponse{}

// ResourceShowResponse struct for ResourceShowResponse
type ResourceShowResponse struct {
	Resource Resource `json:"resource"`
}

type _ResourceShowResponse ResourceShowResponse

// NewResourceShowResponse instantiates a new ResourceShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceShowResponse(resource Resource) *ResourceShowResponse {
	this := ResourceShowResponse{}
	this.Resource = resource
	return &this
}

// NewResourceShowResponseWithDefaults instantiates a new ResourceShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceShowResponseWithDefaults() *ResourceShowResponse {
	this := ResourceShowResponse{}
	return &this
}

// GetResource returns the Resource field value
func (o *ResourceShowResponse) GetResource() Resource {
	if o == nil {
		var ret Resource
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *ResourceShowResponse) GetResourceOk() (*Resource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *ResourceShowResponse) SetResource(v Resource) {
	o.Resource = v
}

func (o ResourceShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resource"] = o.Resource
	return toSerialize, nil
}

func (o *ResourceShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceShowResponse := _ResourceShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceShowResponse)

	if err != nil {
		return err
	}

	*o = ResourceShowResponse(varResourceShowResponse)

	return err
}

type NullableResourceShowResponse struct {
	value *ResourceShowResponse
	isSet bool
}

func (v NullableResourceShowResponse) Get() *ResourceShowResponse {
	return v.value
}

func (v *NullableResourceShowResponse) Set(val *ResourceShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceShowResponse(val *ResourceShowResponse) *NullableResourceShowResponse {
	return &NullableResourceShowResponse{value: val, isSet: true}
}

func (v NullableResourceShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
