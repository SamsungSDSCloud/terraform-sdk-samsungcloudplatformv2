/*
SCP Resource manager project

SCP Resource manager project

API version: 0.0.1.dev646
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TagShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagShowResponse{}

// TagShowResponse struct for TagShowResponse
type TagShowResponse struct {
	Content SrnTag `json:"content"`
}

type _TagShowResponse TagShowResponse

// NewTagShowResponse instantiates a new TagShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagShowResponse(content SrnTag) *TagShowResponse {
	this := TagShowResponse{}
	this.Content = content
	return &this
}

// NewTagShowResponseWithDefaults instantiates a new TagShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagShowResponseWithDefaults() *TagShowResponse {
	this := TagShowResponse{}
	return &this
}

// GetContent returns the Content field value
func (o *TagShowResponse) GetContent() SrnTag {
	if o == nil {
		var ret SrnTag
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *TagShowResponse) GetContentOk() (*SrnTag, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *TagShowResponse) SetContent(v SrnTag) {
	o.Content = v
}

func (o TagShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *TagShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagShowResponse := _TagShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagShowResponse)

	if err != nil {
		return err
	}

	*o = TagShowResponse(varTagShowResponse)

	return err
}

type NullableTagShowResponse struct {
	value *TagShowResponse
	isSet bool
}

func (v NullableTagShowResponse) Get() *TagShowResponse {
	return v.value
}

func (v *NullableTagShowResponse) Set(val *TagShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTagShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTagShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagShowResponse(val *TagShowResponse) *NullableTagShowResponse {
	return &NullableTagShowResponse{value: val, isSet: true}
}

func (v NullableTagShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
