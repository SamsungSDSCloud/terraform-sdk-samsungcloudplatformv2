/*
SCP Resource manager project

SCP Resource manager project

API version: 0.0.1.dev646
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Resource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Resource{}

// Resource struct for Resource
type Resource struct {
	AccountId NullableString `json:"account_id"`
	CreatedAt NullableTime   `json:"created_at"`
	CreatedBy NullableString `json:"created_by"`
	// ID
	Id string `json:"id"`
	// Modified At
	ModifiedAt time.Time `json:"modified_at"`
	// Modified By
	ModifiedBy              string                   `json:"modified_by"`
	ProductName             NullableString           `json:"product_name"`
	Region                  NullableString           `json:"region"`
	ResourceName            NullableString           `json:"resource_name"`
	ResourceType            NullableString           `json:"resource_type"`
	ResourceTypeDisplayName NullableString           `json:"resource_type_display_name"`
	Srn                     NullableString           `json:"srn"`
	State                   NullableString           `json:"state"`
	Tags                    []map[string]interface{} `json:"tags"`
}

type _Resource Resource

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource(accountId NullableString, createdAt NullableTime, createdBy NullableString, id string, modifiedAt time.Time, modifiedBy string, productName NullableString, region NullableString, resourceName NullableString, resourceType NullableString, resourceTypeDisplayName NullableString, srn NullableString, state NullableString, tags []map[string]interface{}) *Resource {
	this := Resource{}
	this.AccountId = accountId
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.ProductName = productName
	this.Region = region
	this.ResourceName = resourceName
	this.ResourceType = resourceType
	this.ResourceTypeDisplayName = resourceTypeDisplayName
	this.Srn = srn
	this.State = state
	this.Tags = tags
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetAccountId returns the AccountId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetAccountId() string {
	if o == nil || o.AccountId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// SetAccountId sets field value
func (o *Resource) SetAccountId(v string) {
	o.AccountId.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Resource) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *Resource) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetCreatedBy returns the CreatedBy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetCreatedBy() string {
	if o == nil || o.CreatedBy.Get() == nil {
		var ret string
		return ret
	}

	return *o.CreatedBy.Get()
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBy.Get(), o.CreatedBy.IsSet()
}

// SetCreatedBy sets field value
func (o *Resource) SetCreatedBy(v string) {
	o.CreatedBy.Set(&v)
}

// GetId returns the Id field value
func (o *Resource) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Resource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Resource) SetId(v string) {
	o.Id = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *Resource) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *Resource) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *Resource) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Resource) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Resource) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Resource) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetProductName returns the ProductName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetProductName() string {
	if o == nil || o.ProductName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProductName.Get()
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductName.Get(), o.ProductName.IsSet()
}

// SetProductName sets field value
func (o *Resource) SetProductName(v string) {
	o.ProductName.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *Resource) SetRegion(v string) {
	o.Region.Set(&v)
}

// GetResourceName returns the ResourceName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetResourceName() string {
	if o == nil || o.ResourceName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// SetResourceName sets field value
func (o *Resource) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}

// GetResourceType returns the ResourceType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetResourceType() string {
	if o == nil || o.ResourceType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// SetResourceType sets field value
func (o *Resource) SetResourceType(v string) {
	o.ResourceType.Set(&v)
}

// GetResourceTypeDisplayName returns the ResourceTypeDisplayName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetResourceTypeDisplayName() string {
	if o == nil || o.ResourceTypeDisplayName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ResourceTypeDisplayName.Get()
}

// GetResourceTypeDisplayNameOk returns a tuple with the ResourceTypeDisplayName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetResourceTypeDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceTypeDisplayName.Get(), o.ResourceTypeDisplayName.IsSet()
}

// SetResourceTypeDisplayName sets field value
func (o *Resource) SetResourceTypeDisplayName(v string) {
	o.ResourceTypeDisplayName.Set(&v)
}

// GetSrn returns the Srn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetSrn() string {
	if o == nil || o.Srn.Get() == nil {
		var ret string
		return ret
	}

	return *o.Srn.Get()
}

// GetSrnOk returns a tuple with the Srn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetSrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Srn.Get(), o.Srn.IsSet()
}

// SetSrn sets field value
func (o *Resource) SetSrn(v string) {
	o.Srn.Set(&v)
}

// GetState returns the State field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Resource) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}

	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// SetState sets field value
func (o *Resource) SetState(v string) {
	o.State.Set(&v)
}

// GetTags returns the Tags field value
// If the value is explicit nil, the zero value for []map[string]interface{} will be returned
func (o *Resource) GetTags() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetTagsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Resource) SetTags(v []map[string]interface{}) {
	o.Tags = v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Resource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId.Get()
	toSerialize["created_at"] = o.CreatedAt.Get()
	toSerialize["created_by"] = o.CreatedBy.Get()
	toSerialize["id"] = o.Id
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["product_name"] = o.ProductName.Get()
	toSerialize["region"] = o.Region.Get()
	toSerialize["resource_name"] = o.ResourceName.Get()
	toSerialize["resource_type"] = o.ResourceType.Get()
	toSerialize["resource_type_display_name"] = o.ResourceTypeDisplayName.Get()
	toSerialize["srn"] = o.Srn.Get()
	toSerialize["state"] = o.State.Get()
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *Resource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"created_at",
		"created_by",
		"id",
		"modified_at",
		"modified_by",
		"product_name",
		"region",
		"resource_name",
		"resource_type",
		"resource_type_display_name",
		"srn",
		"state",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResource := _Resource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResource)

	if err != nil {
		return err
	}

	*o = Resource(varResource)

	return err
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
