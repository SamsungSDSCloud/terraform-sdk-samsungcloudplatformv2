/*
SCP Resource manager project

SCP Resource manager project

API version: 0.0.1.dev646
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resourcemanager

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ResourcemanagerV1ResourceGroupsAPIsAPIService ResourcemanagerV1ResourceGroupsAPIsAPI service
type ResourcemanagerV1ResourceGroupsAPIsAPIService service

type ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest struct {
	ctx                        context.Context
	ApiService                 *ResourcemanagerV1ResourceGroupsAPIsAPIService
	resourceGroupCreateRequest *ResourceGroupCreateRequest
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest) ResourceGroupCreateRequest(resourceGroupCreateRequest ResourceGroupCreateRequest) ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest {
	r.resourceGroupCreateRequest = &resourceGroupCreateRequest
	return r
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest) Execute() (*ResourceGroupCreateResponse, *http.Response, error) {
	return r.ApiService.CreateResourceGroupExecute(r)
}

/*
CreateResourceGroup CreateResourceGroup

create a resource_group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) CreateResourceGroup(ctx context.Context) ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResourceGroupCreateResponse
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) CreateResourceGroupExecute(r ResourcemanagerV1ResourceGroupsAPIsAPICreateResourceGroupRequest) (*ResourceGroupCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceGroupCreateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("resourceGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceGroupCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupRequest struct {
	ctx             context.Context
	ApiService      *ResourcemanagerV1ResourceGroupsAPIsAPIService
	resourceGroupId string
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteResourceGroupExecute(r)
}

/*
DeleteResourceGroup DeleteResourceGroup

delete a specific resource_group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceGroupId 리소스 그룹 ID
	@return ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) DeleteResourceGroup(ctx context.Context, resourceGroupId string) ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) DeleteResourceGroupExecute(r ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups/{resource_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest struct {
	ctx                         context.Context
	ApiService                  *ResourcemanagerV1ResourceGroupsAPIsAPIService
	resourceGroupsDeleteRequest *ResourceGroupsDeleteRequest
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest) ResourceGroupsDeleteRequest(resourceGroupsDeleteRequest ResourceGroupsDeleteRequest) ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest {
	r.resourceGroupsDeleteRequest = &resourceGroupsDeleteRequest
	return r
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteResourceGroupsExecute(r)
}

/*
DeleteResourceGroups DeleteResourceGroups

delete a specific resource_groups

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) DeleteResourceGroups(ctx context.Context) ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) DeleteResourceGroupsExecute(r ResourcemanagerV1ResourceGroupsAPIsAPIDeleteResourceGroupsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceGroupsDeleteRequest == nil {
		return nil, reportError("resourceGroupsDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceGroupsDeleteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest struct {
	ctx        context.Context
	ApiService *ResourcemanagerV1ResourceGroupsAPIsAPIService
	size       *int32
	page       *int32
	sort       *string
	id         *string
	name       *string
}

// size
func (r ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest) Size(size int32) ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest {
	r.size = &size
	return r
}

// page
func (r ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest) Page(page int32) ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest {
	r.page = &page
	return r
}

// sort
func (r ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest) Sort(sort string) ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest {
	r.sort = &sort
	return r
}

// 리소스 그룹 ID
func (r ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest) Id(id string) ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest {
	r.id = &id
	return r
}

// 리소스 그룹명
func (r ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest) Name(name string) ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest {
	r.name = &name
	return r
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest) Execute() (*ResourceGroupPageResponse, *http.Response, error) {
	return r.ApiService.ListResourceGroupsExecute(r)
}

/*
ListResourceGroups ListResourceGroups

get resource_groups list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ListResourceGroups(ctx context.Context) ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResourceGroupPageResponse
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ListResourceGroupsExecute(r ResourcemanagerV1ResourceGroupsAPIsAPIListResourceGroupsRequest) (*ResourceGroupPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceGroupPageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest struct {
	ctx                        context.Context
	ApiService                 *ResourcemanagerV1ResourceGroupsAPIsAPIService
	resourceGroupId            string
	resourceGroupCreateRequest *ResourceGroupCreateRequest
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest) ResourceGroupCreateRequest(resourceGroupCreateRequest ResourceGroupCreateRequest) ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest {
	r.resourceGroupCreateRequest = &resourceGroupCreateRequest
	return r
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest) Execute() (*ResourceGroupCreateResponse, *http.Response, error) {
	return r.ApiService.SetResourceGroupExecute(r)
}

/*
SetResourceGroup SetResourceGroup

set resource_group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceGroupId 리소스 그룹 ID
	@return ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) SetResourceGroup(ctx context.Context, resourceGroupId string) ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ResourceGroupCreateResponse
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) SetResourceGroupExecute(r ResourcemanagerV1ResourceGroupsAPIsAPISetResourceGroupRequest) (*ResourceGroupCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceGroupCreateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups/{resource_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("resourceGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceGroupCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupRequest struct {
	ctx             context.Context
	ApiService      *ResourcemanagerV1ResourceGroupsAPIsAPIService
	resourceGroupId string
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupRequest) Execute() (*ResourceGroupShowResponse, *http.Response, error) {
	return r.ApiService.ShowResourceGroupExecute(r)
}

/*
ShowResourceGroup ShowResourceGroup

show a specific resource_group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceGroupId 리소스 그룹 ID
	@return ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ShowResourceGroup(ctx context.Context, resourceGroupId string) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ResourceGroupShowResponse
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ShowResourceGroupExecute(r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupRequest) (*ResourceGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourceGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups/{resource_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest struct {
	ctx                   context.Context
	ApiService            *ResourcemanagerV1ResourceGroupsAPIsAPIService
	resourceSearchRequest *ResourceSearchRequest
	size                  *int32
	page                  *int32
	sort                  *string
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest) ResourceSearchRequest(resourceSearchRequest ResourceSearchRequest) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest {
	r.resourceSearchRequest = &resourceSearchRequest
	return r
}

// size
func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest) Size(size int32) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest {
	r.size = &size
	return r
}

// page
func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest) Page(page int32) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest {
	r.page = &page
	return r
}

// sort
func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest) Sort(sort string) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest {
	r.sort = &sort
	return r
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest) Execute() (*ResourcePageResponse, *http.Response, error) {
	return r.ApiService.ShowResourceGroupResourcesExecute(r)
}

/*
ShowResourceGroupResources ShowResourceGroupResources

show a specific resource_group_resources

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ShowResourceGroupResources(ctx context.Context) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResourcePageResponse
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ShowResourceGroupResourcesExecute(r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesRequest) (*ResourcePageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourcePageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups/resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceSearchRequest == nil {
		return localVarReturnValue, nil, reportError("resourceSearchRequest is required and must be specified")
	}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.resourceSearchRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest struct {
	ctx             context.Context
	ApiService      *ResourcemanagerV1ResourceGroupsAPIsAPIService
	resourceGroupId string
	size            *int32
	page            *int32
	sort            *string
}

// size
func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest) Size(size int32) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest {
	r.size = &size
	return r
}

// page
func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest) Page(page int32) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest {
	r.page = &page
	return r
}

// sort
func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest) Sort(sort string) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest {
	r.sort = &sort
	return r
}

func (r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest) Execute() (*ResourcePageResponse, *http.Response, error) {
	return r.ApiService.ShowResourceGroupResourcesByGroupIdExecute(r)
}

/*
ShowResourceGroupResourcesByGroupId ShowResourceGroupResources

show a specific resource_group_resources

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceGroupId 리소스 그룹 ID
	@return ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest
*/
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ShowResourceGroupResourcesByGroupId(ctx context.Context, resourceGroupId string) ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest {
	return ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest{
		ApiService:      a,
		ctx:             ctx,
		resourceGroupId: resourceGroupId,
	}
}

// Execute executes the request
//
//	@return ResourcePageResponse
func (a *ResourcemanagerV1ResourceGroupsAPIsAPIService) ShowResourceGroupResourcesByGroupIdExecute(r ResourcemanagerV1ResourceGroupsAPIsAPIShowResourceGroupResourcesByGroupIdRequest) (*ResourcePageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResourcePageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/resource-groups/{resource_group_id}/resources"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_group_id"+"}", url.PathEscape(parameterValueToString(r.resourceGroupId, "resourceGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
