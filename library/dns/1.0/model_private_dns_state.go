/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7263
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// PrivateDnsState the model 'PrivateDnsState'
type PrivateDnsState string

// List of PrivateDnsState
const (
	PRIVATEDNSSTATE_CREATING   PrivateDnsState = "CREATING"
	PRIVATEDNSSTATE_EDITING    PrivateDnsState = "EDITING"
	PRIVATEDNSSTATE_ACTIVE     PrivateDnsState = "ACTIVE"
	PRIVATEDNSSTATE_ACTIVATING PrivateDnsState = "ACTIVATING"
	PRIVATEDNSSTATE_INACTIVE   PrivateDnsState = "INACTIVE"
	PRIVATEDNSSTATE_DELETING   PrivateDnsState = "DELETING"
	PRIVATEDNSSTATE_DELETED    PrivateDnsState = "DELETED"
	PRIVATEDNSSTATE_ERROR      PrivateDnsState = "ERROR"
)

// All allowed values of PrivateDnsState enum
var AllowedPrivateDnsStateEnumValues = []PrivateDnsState{
	"CREATING",
	"EDITING",
	"ACTIVE",
	"ACTIVATING",
	"INACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *PrivateDnsState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivateDnsState(value)
	for _, existing := range AllowedPrivateDnsStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivateDnsState", value)
}

// NewPrivateDnsStateFromValue returns a pointer to a valid PrivateDnsState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivateDnsStateFromValue(v string) (*PrivateDnsState, error) {
	ev := PrivateDnsState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivateDnsState: valid values are %v", v, AllowedPrivateDnsStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivateDnsState) IsValid() bool {
	for _, existing := range AllowedPrivateDnsStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrivateDnsState value
func (v PrivateDnsState) Ptr() *PrivateDnsState {
	return &v
}

type NullablePrivateDnsState struct {
	value *PrivateDnsState
	isSet bool
}

func (v NullablePrivateDnsState) Get() *PrivateDnsState {
	return v.value
}

func (v *NullablePrivateDnsState) Set(val *PrivateDnsState) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateDnsState) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateDnsState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateDnsState(val *PrivateDnsState) *NullablePrivateDnsState {
	return &NullablePrivateDnsState{value: val, isSet: true}
}

func (v NullablePrivateDnsState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateDnsState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
