/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7263
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DnsV1HostedZonesApiAPIService DnsV1HostedZonesApiAPI service
type DnsV1HostedZonesApiAPIService service

type DnsV1HostedZonesApiAPICreateHostedZoneRequest struct {
	ctx                     context.Context
	ApiService              *DnsV1HostedZonesApiAPIService
	hostedZoneCreateRequest *HostedZoneCreateRequest
}

func (r DnsV1HostedZonesApiAPICreateHostedZoneRequest) HostedZoneCreateRequest(hostedZoneCreateRequest HostedZoneCreateRequest) DnsV1HostedZonesApiAPICreateHostedZoneRequest {
	r.hostedZoneCreateRequest = &hostedZoneCreateRequest
	return r
}

func (r DnsV1HostedZonesApiAPICreateHostedZoneRequest) Execute() (*HostedZoneCreateResponse, *http.Response, error) {
	return r.ApiService.CreateHostedZoneExecute(r)
}

/*
CreateHostedZone Create Hosted Zone

Create a new hosted zone

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DnsV1HostedZonesApiAPICreateHostedZoneRequest
*/
func (a *DnsV1HostedZonesApiAPIService) CreateHostedZone(ctx context.Context) DnsV1HostedZonesApiAPICreateHostedZoneRequest {
	return DnsV1HostedZonesApiAPICreateHostedZoneRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return HostedZoneCreateResponse
func (a *DnsV1HostedZonesApiAPIService) CreateHostedZoneExecute(r DnsV1HostedZonesApiAPICreateHostedZoneRequest) (*HostedZoneCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HostedZoneCreateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/hosted-zones"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hostedZoneCreateRequest == nil {
		return localVarReturnValue, nil, reportError("hostedZoneCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "dns 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hostedZoneCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DnsV1HostedZonesApiAPIDeleteHostedZoneRequest struct {
	ctx          context.Context
	ApiService   *DnsV1HostedZonesApiAPIService
	hostedZoneId string
}

func (r DnsV1HostedZonesApiAPIDeleteHostedZoneRequest) Execute() (*HostedZoneDeleteResponse, *http.Response, error) {
	return r.ApiService.DeleteHostedZoneExecute(r)
}

/*
DeleteHostedZone Delete Hosted Zone

Delete a hosted zone

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param hostedZoneId ID
	@return DnsV1HostedZonesApiAPIDeleteHostedZoneRequest
*/
func (a *DnsV1HostedZonesApiAPIService) DeleteHostedZone(ctx context.Context, hostedZoneId string) DnsV1HostedZonesApiAPIDeleteHostedZoneRequest {
	return DnsV1HostedZonesApiAPIDeleteHostedZoneRequest{
		ApiService:   a,
		ctx:          ctx,
		hostedZoneId: hostedZoneId,
	}
}

// Execute executes the request
//
//	@return HostedZoneDeleteResponse
func (a *DnsV1HostedZonesApiAPIService) DeleteHostedZoneExecute(r DnsV1HostedZonesApiAPIDeleteHostedZoneRequest) (*HostedZoneDeleteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HostedZoneDeleteResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/hosted-zones/{hosted_zone_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"hosted_zone_id"+"}", url.PathEscape(parameterValueToString(r.hostedZoneId, "hostedZoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "dns 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DnsV1HostedZonesApiAPIListHostedZoneRequest struct {
	ctx         context.Context
	ApiService  *DnsV1HostedZonesApiAPIService
	limit       *int32
	marker      *string
	sortDir     *string
	sortKey     *string
	name        *string
	exactName   *string
	type_       *string
	email       *string
	status      *string
	description *string
	ttl         *int32
}

// limit
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Limit(limit int32) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.limit = &limit
	return r
}

// marker
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Marker(marker string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.marker = &marker
	return r
}

// sort direction
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) SortDir(sortDir string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.sortDir = &sortDir
	return r
}

// sort key
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) SortKey(sortKey string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.sortKey = &sortKey
	return r
}

// name
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Name(name string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.name = &name
	return r
}

// name
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) ExactName(exactName string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.exactName = &exactName
	return r
}

// Type of zone
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Type_(type_ string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.type_ = &type_
	return r
}

// email
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Email(email string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.email = &email
	return r
}

// The status
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Status(status string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.status = &status
	return r
}

// description
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Description(description string) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.description = &description
	return r
}

// TTL for the zone.
func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Ttl(ttl int32) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	r.ttl = &ttl
	return r
}

func (r DnsV1HostedZonesApiAPIListHostedZoneRequest) Execute() (*HostedZoneListResponse, *http.Response, error) {
	return r.ApiService.ListHostedZoneExecute(r)
}

/*
ListHostedZone List Hosted Zones

Return list of hosted zones

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DnsV1HostedZonesApiAPIListHostedZoneRequest
*/
func (a *DnsV1HostedZonesApiAPIService) ListHostedZone(ctx context.Context) DnsV1HostedZonesApiAPIListHostedZoneRequest {
	return DnsV1HostedZonesApiAPIListHostedZoneRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return HostedZoneListResponse
func (a *DnsV1HostedZonesApiAPIService) ListHostedZoneExecute(r DnsV1HostedZonesApiAPIListHostedZoneRequest) (*HostedZoneListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HostedZoneListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/hosted-zones"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "form", "")
	}
	if r.sortKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_key", r.sortKey, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.exactName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact_name", r.exactName, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "form", "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	if r.ttl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ttl", r.ttl, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "dns 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DnsV1HostedZonesApiAPISetHostedZoneRequest struct {
	ctx                  context.Context
	ApiService           *DnsV1HostedZonesApiAPIService
	hostedZoneId         string
	hostedZoneSetRequest *HostedZoneSetRequest
}

func (r DnsV1HostedZonesApiAPISetHostedZoneRequest) HostedZoneSetRequest(hostedZoneSetRequest HostedZoneSetRequest) DnsV1HostedZonesApiAPISetHostedZoneRequest {
	r.hostedZoneSetRequest = &hostedZoneSetRequest
	return r
}

func (r DnsV1HostedZonesApiAPISetHostedZoneRequest) Execute() (*HostedZoneSetResponse, *http.Response, error) {
	return r.ApiService.SetHostedZoneExecute(r)
}

/*
SetHostedZone Update Hosted Zone

Update a hosted zone

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param hostedZoneId ID
	@return DnsV1HostedZonesApiAPISetHostedZoneRequest
*/
func (a *DnsV1HostedZonesApiAPIService) SetHostedZone(ctx context.Context, hostedZoneId string) DnsV1HostedZonesApiAPISetHostedZoneRequest {
	return DnsV1HostedZonesApiAPISetHostedZoneRequest{
		ApiService:   a,
		ctx:          ctx,
		hostedZoneId: hostedZoneId,
	}
}

// Execute executes the request
//
//	@return HostedZoneSetResponse
func (a *DnsV1HostedZonesApiAPIService) SetHostedZoneExecute(r DnsV1HostedZonesApiAPISetHostedZoneRequest) (*HostedZoneSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HostedZoneSetResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/hosted-zones/{hosted_zone_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"hosted_zone_id"+"}", url.PathEscape(parameterValueToString(r.hostedZoneId, "hostedZoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hostedZoneSetRequest == nil {
		return localVarReturnValue, nil, reportError("hostedZoneSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "dns 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.hostedZoneSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DnsV1HostedZonesApiAPIShowHostedZoneRequest struct {
	ctx          context.Context
	ApiService   *DnsV1HostedZonesApiAPIService
	hostedZoneId string
}

func (r DnsV1HostedZonesApiAPIShowHostedZoneRequest) Execute() (*HostedZoneShowResponse, *http.Response, error) {
	return r.ApiService.ShowHostedZoneExecute(r)
}

/*
ShowHostedZone Show Hosted Zone

Return details of a hosted zone

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param hostedZoneId ID
	@return DnsV1HostedZonesApiAPIShowHostedZoneRequest
*/
func (a *DnsV1HostedZonesApiAPIService) ShowHostedZone(ctx context.Context, hostedZoneId string) DnsV1HostedZonesApiAPIShowHostedZoneRequest {
	return DnsV1HostedZonesApiAPIShowHostedZoneRequest{
		ApiService:   a,
		ctx:          ctx,
		hostedZoneId: hostedZoneId,
	}
}

// Execute executes the request
//
//	@return HostedZoneShowResponse
func (a *DnsV1HostedZonesApiAPIService) ShowHostedZoneExecute(r DnsV1HostedZonesApiAPIShowHostedZoneRequest) (*HostedZoneShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *HostedZoneShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/hosted-zones/{hosted_zone_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"hosted_zone_id"+"}", url.PathEscape(parameterValueToString(r.hostedZoneId, "hostedZoneId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "dns 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
