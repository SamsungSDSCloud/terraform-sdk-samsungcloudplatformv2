/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7263
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RecordCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordCreateRequest{}

// RecordCreateRequest struct for RecordCreateRequest
type RecordCreateRequest struct {
	Description NullableString `json:"description,omitempty"`
	// name
	Name string `json:"name"`
	// A list of data for this record
	Records []interface{} `json:"records"`
	Ttl     NullableInt32 `json:"ttl,omitempty"`
	// Type of the record
	Type string `json:"type"`
}

type _RecordCreateRequest RecordCreateRequest

// NewRecordCreateRequest instantiates a new RecordCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordCreateRequest(name string, records []interface{}, type_ string) *RecordCreateRequest {
	this := RecordCreateRequest{}
	this.Name = name
	this.Records = records
	this.Type = type_
	return &this
}

// NewRecordCreateRequestWithDefaults instantiates a new RecordCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordCreateRequestWithDefaults() *RecordCreateRequest {
	this := RecordCreateRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecordCreateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *RecordCreateRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *RecordCreateRequest) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *RecordCreateRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *RecordCreateRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetName returns the Name field value
func (o *RecordCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RecordCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RecordCreateRequest) SetName(v string) {
	o.Name = v
}

// GetRecords returns the Records field value
func (o *RecordCreateRequest) GetRecords() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *RecordCreateRequest) GetRecordsOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *RecordCreateRequest) SetRecords(v []interface{}) {
	o.Records = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecordCreateRequest) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl.Get()) {
		var ret int32
		return ret
	}
	return *o.Ttl.Get()
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordCreateRequest) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ttl.Get(), o.Ttl.IsSet()
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordCreateRequest) HasTtl() bool {
	if o != nil && o.Ttl.IsSet() {
		return true
	}

	return false
}

// SetTtl gets a reference to the given NullableInt32 and assigns it to the Ttl field.
func (o *RecordCreateRequest) SetTtl(v int32) {
	o.Ttl.Set(&v)
}

// SetTtlNil sets the value for Ttl to be an explicit nil
func (o *RecordCreateRequest) SetTtlNil() {
	o.Ttl.Set(nil)
}

// UnsetTtl ensures that no value is present for Ttl, not even an explicit nil
func (o *RecordCreateRequest) UnsetTtl() {
	o.Ttl.Unset()
}

// GetType returns the Type field value
func (o *RecordCreateRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecordCreateRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecordCreateRequest) SetType(v string) {
	o.Type = v
}

func (o RecordCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["records"] = o.Records
	if o.Ttl.IsSet() {
		toSerialize["ttl"] = o.Ttl.Get()
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *RecordCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"records",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecordCreateRequest := _RecordCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecordCreateRequest)

	if err != nil {
		return err
	}

	*o = RecordCreateRequest(varRecordCreateRequest)

	return err
}

type NullableRecordCreateRequest struct {
	value *RecordCreateRequest
	isSet bool
}

func (v NullableRecordCreateRequest) Get() *RecordCreateRequest {
	return v.value
}

func (v *NullableRecordCreateRequest) Set(val *RecordCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordCreateRequest(val *RecordCreateRequest) *NullableRecordCreateRequest {
	return &NullableRecordCreateRequest{value: val, isSet: true}
}

func (v NullableRecordCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
