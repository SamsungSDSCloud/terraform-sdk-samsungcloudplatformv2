/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7263
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
)

// checks if the RecordSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordSetRequest{}

// RecordSetRequest struct for RecordSetRequest
type RecordSetRequest struct {
	Records []interface{} `json:"records,omitempty"`
	Ttl     NullableInt32 `json:"ttl,omitempty"`
}

// NewRecordSetRequest instantiates a new RecordSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordSetRequest() *RecordSetRequest {
	this := RecordSetRequest{}
	return &this
}

// NewRecordSetRequestWithDefaults instantiates a new RecordSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordSetRequestWithDefaults() *RecordSetRequest {
	this := RecordSetRequest{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecordSetRequest) GetRecords() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordSetRequest) GetRecordsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *RecordSetRequest) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []interface{} and assigns it to the Records field.
func (o *RecordSetRequest) SetRecords(v []interface{}) {
	o.Records = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecordSetRequest) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl.Get()) {
		var ret int32
		return ret
	}
	return *o.Ttl.Get()
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecordSetRequest) GetTtlOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ttl.Get(), o.Ttl.IsSet()
}

// HasTtl returns a boolean if a field has been set.
func (o *RecordSetRequest) HasTtl() bool {
	if o != nil && o.Ttl.IsSet() {
		return true
	}

	return false
}

// SetTtl gets a reference to the given NullableInt32 and assigns it to the Ttl field.
func (o *RecordSetRequest) SetTtl(v int32) {
	o.Ttl.Set(&v)
}

// SetTtlNil sets the value for Ttl to be an explicit nil
func (o *RecordSetRequest) SetTtlNil() {
	o.Ttl.Set(nil)
}

// UnsetTtl ensures that no value is present for Ttl, not even an explicit nil
func (o *RecordSetRequest) UnsetTtl() {
	o.Ttl.Unset()
}

func (o RecordSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	if o.Ttl.IsSet() {
		toSerialize["ttl"] = o.Ttl.Get()
	}
	return toSerialize, nil
}

type NullableRecordSetRequest struct {
	value *RecordSetRequest
	isSet bool
}

func (v NullableRecordSetRequest) Get() *RecordSetRequest {
	return v.value
}

func (v *NullableRecordSetRequest) Set(val *RecordSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordSetRequest(val *RecordSetRequest) *NullableRecordSetRequest {
	return &NullableRecordSetRequest{value: val, isSet: true}
}

func (v NullableRecordSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
