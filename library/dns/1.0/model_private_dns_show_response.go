/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7263
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrivateDnsShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateDnsShowResponse{}

// PrivateDnsShowResponse struct for PrivateDnsShowResponse
type PrivateDnsShowResponse struct {
	PrivateDns PrivateDns `json:"private_dns"`
}

type _PrivateDnsShowResponse PrivateDnsShowResponse

// NewPrivateDnsShowResponse instantiates a new PrivateDnsShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateDnsShowResponse(privateDns PrivateDns) *PrivateDnsShowResponse {
	this := PrivateDnsShowResponse{}
	this.PrivateDns = privateDns
	return &this
}

// NewPrivateDnsShowResponseWithDefaults instantiates a new PrivateDnsShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateDnsShowResponseWithDefaults() *PrivateDnsShowResponse {
	this := PrivateDnsShowResponse{}
	return &this
}

// GetPrivateDns returns the PrivateDns field value
func (o *PrivateDnsShowResponse) GetPrivateDns() PrivateDns {
	if o == nil {
		var ret PrivateDns
		return ret
	}

	return o.PrivateDns
}

// GetPrivateDnsOk returns a tuple with the PrivateDns field value
// and a boolean to check if the value has been set.
func (o *PrivateDnsShowResponse) GetPrivateDnsOk() (*PrivateDns, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateDns, true
}

// SetPrivateDns sets field value
func (o *PrivateDnsShowResponse) SetPrivateDns(v PrivateDns) {
	o.PrivateDns = v
}

func (o PrivateDnsShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateDnsShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["private_dns"] = o.PrivateDns
	return toSerialize, nil
}

func (o *PrivateDnsShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"private_dns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateDnsShowResponse := _PrivateDnsShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrivateDnsShowResponse)

	if err != nil {
		return err
	}

	*o = PrivateDnsShowResponse(varPrivateDnsShowResponse)

	return err
}

type NullablePrivateDnsShowResponse struct {
	value *PrivateDnsShowResponse
	isSet bool
}

func (v NullablePrivateDnsShowResponse) Get() *PrivateDnsShowResponse {
	return v.value
}

func (v *NullablePrivateDnsShowResponse) Set(val *PrivateDnsShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateDnsShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateDnsShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateDnsShowResponse(val *PrivateDnsShowResponse) *NullablePrivateDnsShowResponse {
	return &NullablePrivateDnsShowResponse{value: val, isSet: true}
}

func (v NullablePrivateDnsShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateDnsShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
