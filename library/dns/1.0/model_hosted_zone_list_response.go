/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7263
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HostedZoneListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostedZoneListResponse{}

// HostedZoneListResponse struct for HostedZoneListResponse
type HostedZoneListResponse struct {
	Count NullableInt32 `json:"count,omitempty"`
	// hosted zones list
	HostedZones []HostedZone           `json:"hosted_zones"`
	Links       map[string]interface{} `json:"links,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

type _HostedZoneListResponse HostedZoneListResponse

// NewHostedZoneListResponse instantiates a new HostedZoneListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostedZoneListResponse(hostedZones []HostedZone) *HostedZoneListResponse {
	this := HostedZoneListResponse{}
	this.HostedZones = hostedZones
	return &this
}

// NewHostedZoneListResponseWithDefaults instantiates a new HostedZoneListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostedZoneListResponseWithDefaults() *HostedZoneListResponse {
	this := HostedZoneListResponse{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostedZoneListResponse) GetCount() int32 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int32
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostedZoneListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *HostedZoneListResponse) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt32 and assigns it to the Count field.
func (o *HostedZoneListResponse) SetCount(v int32) {
	o.Count.Set(&v)
}

// SetCountNil sets the value for Count to be an explicit nil
func (o *HostedZoneListResponse) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *HostedZoneListResponse) UnsetCount() {
	o.Count.Unset()
}

// GetHostedZones returns the HostedZones field value
func (o *HostedZoneListResponse) GetHostedZones() []HostedZone {
	if o == nil {
		var ret []HostedZone
		return ret
	}

	return o.HostedZones
}

// GetHostedZonesOk returns a tuple with the HostedZones field value
// and a boolean to check if the value has been set.
func (o *HostedZoneListResponse) GetHostedZonesOk() ([]HostedZone, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostedZones, true
}

// SetHostedZones sets field value
func (o *HostedZoneListResponse) SetHostedZones(v []HostedZone) {
	o.HostedZones = v
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostedZoneListResponse) GetLinks() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostedZoneListResponse) GetLinksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]interface{}{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *HostedZoneListResponse) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]interface{} and assigns it to the Links field.
func (o *HostedZoneListResponse) SetLinks(v map[string]interface{}) {
	o.Links = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostedZoneListResponse) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostedZoneListResponse) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *HostedZoneListResponse) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *HostedZoneListResponse) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o HostedZoneListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostedZoneListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	toSerialize["hosted_zones"] = o.HostedZones
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *HostedZoneListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hosted_zones",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHostedZoneListResponse := _HostedZoneListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHostedZoneListResponse)

	if err != nil {
		return err
	}

	*o = HostedZoneListResponse(varHostedZoneListResponse)

	return err
}

type NullableHostedZoneListResponse struct {
	value *HostedZoneListResponse
	isSet bool
}

func (v NullableHostedZoneListResponse) Get() *HostedZoneListResponse {
	return v.value
}

func (v *NullableHostedZoneListResponse) Set(val *HostedZoneListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHostedZoneListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHostedZoneListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostedZoneListResponse(val *HostedZoneListResponse) *NullableHostedZoneListResponse {
	return &NullableHostedZoneListResponse{value: val, isSet: true}
}

func (v NullableHostedZoneListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostedZoneListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
