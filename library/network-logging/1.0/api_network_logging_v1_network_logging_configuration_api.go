/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networklogging

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
)

// NetworkLoggingV1NetworkLoggingConfigurationApiAPIService NetworkLoggingV1NetworkLoggingConfigurationApiAPI service
type NetworkLoggingV1NetworkLoggingConfigurationApiAPIService service

type NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest struct {
	ctx          context.Context
	ApiService   *NetworkLoggingV1NetworkLoggingConfigurationApiAPIService
	resourceType *NetworkLoggingResourceType
	withCount    *string
	limit        *int32
	marker       *string
	sort         *string
	resourceId   *string
	resourceName *string
}

// Resource Type
func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) ResourceType(resourceType NetworkLoggingResourceType) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	r.resourceType = &resourceType
	return r
}

// with count
func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) WithCount(withCount string) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) Limit(limit int32) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	r.limit = &limit
	return r
}

// marker
func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) Marker(marker string) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	r.marker = &marker
	return r
}

// sort
func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) Sort(sort string) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	r.sort = &sort
	return r
}

// Resource ID
func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) ResourceId(resourceId string) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	r.resourceId = &resourceId
	return r
}

// Resource Name
func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) ResourceName(resourceName string) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	r.resourceName = &resourceName
	return r
}

func (r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) Execute() (*NetworkLoggingConfigurationListResponse, *http.Response, error) {
	return r.ApiService.ListNetworkLoggingConfigurationsExecute(r)
}

/*
ListNetworkLoggingConfigurations List Network Logging Configurations

Get Network Logging Configuration list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest
*/
func (a *NetworkLoggingV1NetworkLoggingConfigurationApiAPIService) ListNetworkLoggingConfigurations(ctx context.Context) NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest {
	return NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return NetworkLoggingConfigurationListResponse
func (a *NetworkLoggingV1NetworkLoggingConfigurationApiAPIService) ListNetworkLoggingConfigurationsExecute(r NetworkLoggingV1NetworkLoggingConfigurationApiAPIListNetworkLoggingConfigurationsRequest) (*NetworkLoggingConfigurationListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NetworkLoggingConfigurationListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/network-logging/configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.resourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "form", "")
	}
	if r.resourceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_name", r.resourceName, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "networklogging 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
