/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networklogging

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the NetworkLoggingStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkLoggingStorage{}

// NetworkLoggingStorage struct for NetworkLoggingStorage
type NetworkLoggingStorage struct {
	// Account ID
	AccountId string `json:"account_id"`
	// Storage Bucket Name
	BucketName string `json:"bucket_name"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Created By
	CreatedBy string `json:"created_by"`
	// Network Logging Storage ID
	Id string `json:"id"`
	// Modified At
	ModifiedAt time.Time `json:"modified_at"`
	// Modified By
	ModifiedBy string `json:"modified_by"`
	// Resource Type
	ResourceType NetworkLoggingResourceType `json:"resource_type"`
}

type _NetworkLoggingStorage NetworkLoggingStorage

// NewNetworkLoggingStorage instantiates a new NetworkLoggingStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkLoggingStorage(accountId string, bucketName string, createdAt time.Time, createdBy string, id string, modifiedAt time.Time, modifiedBy string, resourceType NetworkLoggingResourceType) *NetworkLoggingStorage {
	this := NetworkLoggingStorage{}
	this.AccountId = accountId
	this.BucketName = bucketName
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.ResourceType = resourceType
	return &this
}

// NewNetworkLoggingStorageWithDefaults instantiates a new NetworkLoggingStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkLoggingStorageWithDefaults() *NetworkLoggingStorage {
	this := NetworkLoggingStorage{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *NetworkLoggingStorage) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *NetworkLoggingStorage) SetAccountId(v string) {
	o.AccountId = v
}

// GetBucketName returns the BucketName field value
func (o *NetworkLoggingStorage) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *NetworkLoggingStorage) SetBucketName(v string) {
	o.BucketName = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *NetworkLoggingStorage) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *NetworkLoggingStorage) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *NetworkLoggingStorage) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *NetworkLoggingStorage) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetId returns the Id field value
func (o *NetworkLoggingStorage) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NetworkLoggingStorage) SetId(v string) {
	o.Id = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *NetworkLoggingStorage) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *NetworkLoggingStorage) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *NetworkLoggingStorage) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *NetworkLoggingStorage) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetResourceType returns the ResourceType field value
func (o *NetworkLoggingStorage) GetResourceType() NetworkLoggingResourceType {
	if o == nil {
		var ret NetworkLoggingResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorage) GetResourceTypeOk() (*NetworkLoggingResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *NetworkLoggingStorage) SetResourceType(v NetworkLoggingResourceType) {
	o.ResourceType = v
}

func (o NetworkLoggingStorage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkLoggingStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["id"] = o.Id
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["resource_type"] = o.ResourceType
	return toSerialize, nil
}

func (o *NetworkLoggingStorage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"bucket_name",
		"created_at",
		"created_by",
		"id",
		"modified_at",
		"modified_by",
		"resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkLoggingStorage := _NetworkLoggingStorage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkLoggingStorage)

	if err != nil {
		return err
	}

	*o = NetworkLoggingStorage(varNetworkLoggingStorage)

	return err
}

type NullableNetworkLoggingStorage struct {
	value *NetworkLoggingStorage
	isSet bool
}

func (v NullableNetworkLoggingStorage) Get() *NetworkLoggingStorage {
	return v.value
}

func (v *NullableNetworkLoggingStorage) Set(val *NetworkLoggingStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkLoggingStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkLoggingStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkLoggingStorage(val *NetworkLoggingStorage) *NullableNetworkLoggingStorage {
	return &NullableNetworkLoggingStorage{value: val, isSet: true}
}

func (v NullableNetworkLoggingStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkLoggingStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
