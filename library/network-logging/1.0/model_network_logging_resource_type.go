/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networklogging

import (
	"encoding/json"
	"fmt"
)

// NetworkLoggingResourceType the model 'NetworkLoggingResourceType'
type NetworkLoggingResourceType string

// List of NetworkLoggingResourceType
const (
	NETWORKLOGGINGRESOURCETYPE_FIREWALL       NetworkLoggingResourceType = "FIREWALL"
	NETWORKLOGGINGRESOURCETYPE_SECURITY_GROUP NetworkLoggingResourceType = "SECURITY_GROUP"
	NETWORKLOGGINGRESOURCETYPE_NAT            NetworkLoggingResourceType = "NAT"
)

// All allowed values of NetworkLoggingResourceType enum
var AllowedNetworkLoggingResourceTypeEnumValues = []NetworkLoggingResourceType{
	"FIREWALL",
	"SECURITY_GROUP",
	"NAT",
}

func (v *NetworkLoggingResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkLoggingResourceType(value)
	for _, existing := range AllowedNetworkLoggingResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkLoggingResourceType", value)
}

// NewNetworkLoggingResourceTypeFromValue returns a pointer to a valid NetworkLoggingResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkLoggingResourceTypeFromValue(v string) (*NetworkLoggingResourceType, error) {
	ev := NetworkLoggingResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkLoggingResourceType: valid values are %v", v, AllowedNetworkLoggingResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkLoggingResourceType) IsValid() bool {
	for _, existing := range AllowedNetworkLoggingResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkLoggingResourceType value
func (v NetworkLoggingResourceType) Ptr() *NetworkLoggingResourceType {
	return &v
}

type NullableNetworkLoggingResourceType struct {
	value *NetworkLoggingResourceType
	isSet bool
}

func (v NullableNetworkLoggingResourceType) Get() *NetworkLoggingResourceType {
	return v.value
}

func (v *NullableNetworkLoggingResourceType) Set(val *NetworkLoggingResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkLoggingResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkLoggingResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkLoggingResourceType(val *NetworkLoggingResourceType) *NullableNetworkLoggingResourceType {
	return &NullableNetworkLoggingResourceType{value: val, isSet: true}
}

func (v NullableNetworkLoggingResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkLoggingResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
