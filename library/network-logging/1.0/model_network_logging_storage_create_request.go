/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package networklogging

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NetworkLoggingStorageCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkLoggingStorageCreateRequest{}

// NetworkLoggingStorageCreateRequest struct for NetworkLoggingStorageCreateRequest
type NetworkLoggingStorageCreateRequest struct {
	// Storage Bucket Name
	BucketName string `json:"bucket_name"`
	// Resource Type
	ResourceType NetworkLoggingResourceType `json:"resource_type"`
}

type _NetworkLoggingStorageCreateRequest NetworkLoggingStorageCreateRequest

// NewNetworkLoggingStorageCreateRequest instantiates a new NetworkLoggingStorageCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkLoggingStorageCreateRequest(bucketName string, resourceType NetworkLoggingResourceType) *NetworkLoggingStorageCreateRequest {
	this := NetworkLoggingStorageCreateRequest{}
	this.BucketName = bucketName
	this.ResourceType = resourceType
	return &this
}

// NewNetworkLoggingStorageCreateRequestWithDefaults instantiates a new NetworkLoggingStorageCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkLoggingStorageCreateRequestWithDefaults() *NetworkLoggingStorageCreateRequest {
	this := NetworkLoggingStorageCreateRequest{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *NetworkLoggingStorageCreateRequest) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorageCreateRequest) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *NetworkLoggingStorageCreateRequest) SetBucketName(v string) {
	o.BucketName = v
}

// GetResourceType returns the ResourceType field value
func (o *NetworkLoggingStorageCreateRequest) GetResourceType() NetworkLoggingResourceType {
	if o == nil {
		var ret NetworkLoggingResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *NetworkLoggingStorageCreateRequest) GetResourceTypeOk() (*NetworkLoggingResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *NetworkLoggingStorageCreateRequest) SetResourceType(v NetworkLoggingResourceType) {
	o.ResourceType = v
}

func (o NetworkLoggingStorageCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkLoggingStorageCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["resource_type"] = o.ResourceType
	return toSerialize, nil
}

func (o *NetworkLoggingStorageCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket_name",
		"resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkLoggingStorageCreateRequest := _NetworkLoggingStorageCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkLoggingStorageCreateRequest)

	if err != nil {
		return err
	}

	*o = NetworkLoggingStorageCreateRequest(varNetworkLoggingStorageCreateRequest)

	return err
}

type NullableNetworkLoggingStorageCreateRequest struct {
	value *NetworkLoggingStorageCreateRequest
	isSet bool
}

func (v NullableNetworkLoggingStorageCreateRequest) Get() *NetworkLoggingStorageCreateRequest {
	return v.value
}

func (v *NullableNetworkLoggingStorageCreateRequest) Set(val *NetworkLoggingStorageCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkLoggingStorageCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkLoggingStorageCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkLoggingStorageCreateRequest(val *NetworkLoggingStorageCreateRequest) *NullableNetworkLoggingStorageCreateRequest {
	return &NullableNetworkLoggingStorageCreateRequest{value: val, isSet: true}
}

func (v NullableNetworkLoggingStorageCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkLoggingStorageCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
