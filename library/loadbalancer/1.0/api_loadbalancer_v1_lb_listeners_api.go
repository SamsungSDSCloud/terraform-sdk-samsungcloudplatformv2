/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LoadbalancerV1LbListenersApiAPIService LoadbalancerV1LbListenersApiAPI service
type LoadbalancerV1LbListenersApiAPIService service

type LoadbalancerV1LbListenersApiAPICreateLbListenerRequest struct {
	ctx                     context.Context
	ApiService              *LoadbalancerV1LbListenersApiAPIService
	lbListenerCreateRequest *LbListenerCreateRequest
}

func (r LoadbalancerV1LbListenersApiAPICreateLbListenerRequest) LbListenerCreateRequest(lbListenerCreateRequest LbListenerCreateRequest) LoadbalancerV1LbListenersApiAPICreateLbListenerRequest {
	r.lbListenerCreateRequest = &lbListenerCreateRequest
	return r
}

func (r LoadbalancerV1LbListenersApiAPICreateLbListenerRequest) Execute() (*LbListenerShowResponse, *http.Response, error) {
	return r.ApiService.CreateLbListenerExecute(r)
}

/*
CreateLbListener CreateLbListener

create LB listener

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoadbalancerV1LbListenersApiAPICreateLbListenerRequest
*/
func (a *LoadbalancerV1LbListenersApiAPIService) CreateLbListener(ctx context.Context) LoadbalancerV1LbListenersApiAPICreateLbListenerRequest {
	return LoadbalancerV1LbListenersApiAPICreateLbListenerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LbListenerShowResponse
func (a *LoadbalancerV1LbListenersApiAPIService) CreateLbListenerExecute(r LoadbalancerV1LbListenersApiAPICreateLbListenerRequest) (*LbListenerShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbListenerShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-listeners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lbListenerCreateRequest == nil {
		return localVarReturnValue, nil, reportError("lbListenerCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lbListenerCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1LbListenersApiAPIDeleteLbListenerRequest struct {
	ctx        context.Context
	ApiService *LoadbalancerV1LbListenersApiAPIService
	listenerId string
}

func (r LoadbalancerV1LbListenersApiAPIDeleteLbListenerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLbListenerExecute(r)
}

/*
DeleteLbListener DeleteLbListener

delete LB listener

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param listenerId The ID of the listener.
	@return LoadbalancerV1LbListenersApiAPIDeleteLbListenerRequest
*/
func (a *LoadbalancerV1LbListenersApiAPIService) DeleteLbListener(ctx context.Context, listenerId string) LoadbalancerV1LbListenersApiAPIDeleteLbListenerRequest {
	return LoadbalancerV1LbListenersApiAPIDeleteLbListenerRequest{
		ApiService: a,
		ctx:        ctx,
		listenerId: listenerId,
	}
}

// Execute executes the request
func (a *LoadbalancerV1LbListenersApiAPIService) DeleteLbListenerExecute(r LoadbalancerV1LbListenersApiAPIDeleteLbListenerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-listeners/{listener_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"listener_id"+"}", url.PathEscape(parameterValueToString(r.listenerId, "listenerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LoadbalancerV1LbListenersApiAPIListLbListenersRequest struct {
	ctx            context.Context
	ApiService     *LoadbalancerV1LbListenersApiAPIService
	size           *int32
	page           *int32
	sort           *string
	loadbalancerId *string
	state          *string
	name           *string
	servicePort    *int32
	protocol       *Protocol1
}

// size
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) Size(size int32) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.size = &size
	return r
}

// page
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) Page(page int32) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.page = &page
	return r
}

// sort
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) Sort(sort string) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.sort = &sort
	return r
}

// The ID of the load balancer.
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) LoadbalancerId(loadbalancerId string) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.loadbalancerId = &loadbalancerId
	return r
}

// The State of the listener.
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) State(state string) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.state = &state
	return r
}

// The Name of the listener.
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) Name(name string) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.name = &name
	return r
}

// The Port of the listener.
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) ServicePort(servicePort int32) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.servicePort = &servicePort
	return r
}

// Protocol
func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) Protocol(protocol Protocol1) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	r.protocol = &protocol
	return r
}

func (r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) Execute() (*LbListenerListResponse, *http.Response, error) {
	return r.ApiService.ListLbListenersExecute(r)
}

/*
ListLbListeners ListLbListeners

get LB listener list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoadbalancerV1LbListenersApiAPIListLbListenersRequest
*/
func (a *LoadbalancerV1LbListenersApiAPIService) ListLbListeners(ctx context.Context) LoadbalancerV1LbListenersApiAPIListLbListenersRequest {
	return LoadbalancerV1LbListenersApiAPIListLbListenersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LbListenerListResponse
func (a *LoadbalancerV1LbListenersApiAPIService) ListLbListenersExecute(r LoadbalancerV1LbListenersApiAPIListLbListenersRequest) (*LbListenerListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbListenerListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-listeners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.loadbalancerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loadbalancer_id", r.loadbalancerId, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.servicePort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service_port", r.servicePort, "form", "")
	}
	if r.protocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1LbListenersApiAPISetLbListenerRequest struct {
	ctx                  context.Context
	ApiService           *LoadbalancerV1LbListenersApiAPIService
	listenerId           string
	lbListenerSetRequest *LbListenerSetRequest
}

func (r LoadbalancerV1LbListenersApiAPISetLbListenerRequest) LbListenerSetRequest(lbListenerSetRequest LbListenerSetRequest) LoadbalancerV1LbListenersApiAPISetLbListenerRequest {
	r.lbListenerSetRequest = &lbListenerSetRequest
	return r
}

func (r LoadbalancerV1LbListenersApiAPISetLbListenerRequest) Execute() (*LbListenerShowResponse, *http.Response, error) {
	return r.ApiService.SetLbListenerExecute(r)
}

/*
SetLbListener SetLbListener

set loadbalancer listener

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param listenerId The ID of the listener.
	@return LoadbalancerV1LbListenersApiAPISetLbListenerRequest
*/
func (a *LoadbalancerV1LbListenersApiAPIService) SetLbListener(ctx context.Context, listenerId string) LoadbalancerV1LbListenersApiAPISetLbListenerRequest {
	return LoadbalancerV1LbListenersApiAPISetLbListenerRequest{
		ApiService: a,
		ctx:        ctx,
		listenerId: listenerId,
	}
}

// Execute executes the request
//
//	@return LbListenerShowResponse
func (a *LoadbalancerV1LbListenersApiAPIService) SetLbListenerExecute(r LoadbalancerV1LbListenersApiAPISetLbListenerRequest) (*LbListenerShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbListenerShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-listeners/{listener_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"listener_id"+"}", url.PathEscape(parameterValueToString(r.listenerId, "listenerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lbListenerSetRequest == nil {
		return localVarReturnValue, nil, reportError("lbListenerSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lbListenerSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1LbListenersApiAPIShowLbListenerRequest struct {
	ctx        context.Context
	ApiService *LoadbalancerV1LbListenersApiAPIService
	listenerId string
}

func (r LoadbalancerV1LbListenersApiAPIShowLbListenerRequest) Execute() (*LbListenerShowResponse, *http.Response, error) {
	return r.ApiService.ShowLbListenerExecute(r)
}

/*
ShowLbListener ShowLbListener

show LB listener

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param listenerId The ID of the listener.
	@return LoadbalancerV1LbListenersApiAPIShowLbListenerRequest
*/
func (a *LoadbalancerV1LbListenersApiAPIService) ShowLbListener(ctx context.Context, listenerId string) LoadbalancerV1LbListenersApiAPIShowLbListenerRequest {
	return LoadbalancerV1LbListenersApiAPIShowLbListenerRequest{
		ApiService: a,
		ctx:        ctx,
		listenerId: listenerId,
	}
}

// Execute executes the request
//
//	@return LbListenerShowResponse
func (a *LoadbalancerV1LbListenersApiAPIService) ShowLbListenerExecute(r LoadbalancerV1LbListenersApiAPIShowLbListenerRequest) (*LbListenerShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbListenerShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-listeners/{listener_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"listener_id"+"}", url.PathEscape(parameterValueToString(r.listenerId, "listenerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
