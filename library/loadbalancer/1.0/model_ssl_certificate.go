/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
)

// checks if the SslCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslCertificate{}

// SslCertificate struct for SslCertificate
type SslCertificate struct {
	ClientCertId    NullableString `json:"client_cert_id,omitempty"`
	ClientCertLevel NullableString `json:"client_cert_level,omitempty"`
	ServerCertId    NullableString `json:"server_cert_id,omitempty"`
	ServerCertLevel NullableString `json:"server_cert_level,omitempty"`
}

// NewSslCertificate instantiates a new SslCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslCertificate() *SslCertificate {
	this := SslCertificate{}
	return &this
}

// NewSslCertificateWithDefaults instantiates a new SslCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslCertificateWithDefaults() *SslCertificate {
	this := SslCertificate{}
	return &this
}

// GetClientCertId returns the ClientCertId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslCertificate) GetClientCertId() string {
	if o == nil || IsNil(o.ClientCertId.Get()) {
		var ret string
		return ret
	}
	return *o.ClientCertId.Get()
}

// GetClientCertIdOk returns a tuple with the ClientCertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslCertificate) GetClientCertIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientCertId.Get(), o.ClientCertId.IsSet()
}

// HasClientCertId returns a boolean if a field has been set.
func (o *SslCertificate) HasClientCertId() bool {
	if o != nil && o.ClientCertId.IsSet() {
		return true
	}

	return false
}

// SetClientCertId gets a reference to the given NullableString and assigns it to the ClientCertId field.
func (o *SslCertificate) SetClientCertId(v string) {
	o.ClientCertId.Set(&v)
}

// SetClientCertIdNil sets the value for ClientCertId to be an explicit nil
func (o *SslCertificate) SetClientCertIdNil() {
	o.ClientCertId.Set(nil)
}

// UnsetClientCertId ensures that no value is present for ClientCertId, not even an explicit nil
func (o *SslCertificate) UnsetClientCertId() {
	o.ClientCertId.Unset()
}

// GetClientCertLevel returns the ClientCertLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslCertificate) GetClientCertLevel() string {
	if o == nil || IsNil(o.ClientCertLevel.Get()) {
		var ret string
		return ret
	}
	return *o.ClientCertLevel.Get()
}

// GetClientCertLevelOk returns a tuple with the ClientCertLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslCertificate) GetClientCertLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientCertLevel.Get(), o.ClientCertLevel.IsSet()
}

// HasClientCertLevel returns a boolean if a field has been set.
func (o *SslCertificate) HasClientCertLevel() bool {
	if o != nil && o.ClientCertLevel.IsSet() {
		return true
	}

	return false
}

// SetClientCertLevel gets a reference to the given NullableString and assigns it to the ClientCertLevel field.
func (o *SslCertificate) SetClientCertLevel(v string) {
	o.ClientCertLevel.Set(&v)
}

// SetClientCertLevelNil sets the value for ClientCertLevel to be an explicit nil
func (o *SslCertificate) SetClientCertLevelNil() {
	o.ClientCertLevel.Set(nil)
}

// UnsetClientCertLevel ensures that no value is present for ClientCertLevel, not even an explicit nil
func (o *SslCertificate) UnsetClientCertLevel() {
	o.ClientCertLevel.Unset()
}

// GetServerCertId returns the ServerCertId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslCertificate) GetServerCertId() string {
	if o == nil || IsNil(o.ServerCertId.Get()) {
		var ret string
		return ret
	}
	return *o.ServerCertId.Get()
}

// GetServerCertIdOk returns a tuple with the ServerCertId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslCertificate) GetServerCertIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerCertId.Get(), o.ServerCertId.IsSet()
}

// HasServerCertId returns a boolean if a field has been set.
func (o *SslCertificate) HasServerCertId() bool {
	if o != nil && o.ServerCertId.IsSet() {
		return true
	}

	return false
}

// SetServerCertId gets a reference to the given NullableString and assigns it to the ServerCertId field.
func (o *SslCertificate) SetServerCertId(v string) {
	o.ServerCertId.Set(&v)
}

// SetServerCertIdNil sets the value for ServerCertId to be an explicit nil
func (o *SslCertificate) SetServerCertIdNil() {
	o.ServerCertId.Set(nil)
}

// UnsetServerCertId ensures that no value is present for ServerCertId, not even an explicit nil
func (o *SslCertificate) UnsetServerCertId() {
	o.ServerCertId.Unset()
}

// GetServerCertLevel returns the ServerCertLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslCertificate) GetServerCertLevel() string {
	if o == nil || IsNil(o.ServerCertLevel.Get()) {
		var ret string
		return ret
	}
	return *o.ServerCertLevel.Get()
}

// GetServerCertLevelOk returns a tuple with the ServerCertLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslCertificate) GetServerCertLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerCertLevel.Get(), o.ServerCertLevel.IsSet()
}

// HasServerCertLevel returns a boolean if a field has been set.
func (o *SslCertificate) HasServerCertLevel() bool {
	if o != nil && o.ServerCertLevel.IsSet() {
		return true
	}

	return false
}

// SetServerCertLevel gets a reference to the given NullableString and assigns it to the ServerCertLevel field.
func (o *SslCertificate) SetServerCertLevel(v string) {
	o.ServerCertLevel.Set(&v)
}

// SetServerCertLevelNil sets the value for ServerCertLevel to be an explicit nil
func (o *SslCertificate) SetServerCertLevelNil() {
	o.ServerCertLevel.Set(nil)
}

// UnsetServerCertLevel ensures that no value is present for ServerCertLevel, not even an explicit nil
func (o *SslCertificate) UnsetServerCertLevel() {
	o.ServerCertLevel.Unset()
}

func (o SslCertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientCertId.IsSet() {
		toSerialize["client_cert_id"] = o.ClientCertId.Get()
	}
	if o.ClientCertLevel.IsSet() {
		toSerialize["client_cert_level"] = o.ClientCertLevel.Get()
	}
	if o.ServerCertId.IsSet() {
		toSerialize["server_cert_id"] = o.ServerCertId.Get()
	}
	if o.ServerCertLevel.IsSet() {
		toSerialize["server_cert_level"] = o.ServerCertLevel.Get()
	}
	return toSerialize, nil
}

type NullableSslCertificate struct {
	value *SslCertificate
	isSet bool
}

func (v NullableSslCertificate) Get() *SslCertificate {
	return v.value
}

func (v *NullableSslCertificate) Set(val *SslCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSslCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSslCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslCertificate(val *SslCertificate) *NullableSslCertificate {
	return &NullableSslCertificate{value: val, isSet: true}
}

func (v NullableSslCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
