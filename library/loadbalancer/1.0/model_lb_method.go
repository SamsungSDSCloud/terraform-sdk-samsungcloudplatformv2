/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LbMethod LB Method
type LbMethod struct {
	LbServerGroupLbMethod        *LbServerGroupLbMethod
	ArrayOfLbServerGroupLbMethod *[]LbServerGroupLbMethod
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *LbMethod) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into LbServerGroupLbMethod
	err = json.Unmarshal(data, &dst.LbServerGroupLbMethod)
	if err == nil {
		jsonLbServerGroupLbMethod, _ := json.Marshal(dst.LbServerGroupLbMethod)
		if string(jsonLbServerGroupLbMethod) == "{}" { // empty struct
			dst.LbServerGroupLbMethod = nil
		} else {
			return nil // data stored in dst.LbServerGroupLbMethod, return on the first match
		}
	} else {
		dst.LbServerGroupLbMethod = nil
	}

	// try to unmarshal JSON data into ArrayOfLbServerGroupLbMethod
	err = json.Unmarshal(data, &dst.ArrayOfLbServerGroupLbMethod)
	if err == nil {
		jsonArrayOfLbServerGroupLbMethod, _ := json.Marshal(dst.ArrayOfLbServerGroupLbMethod)
		if string(jsonArrayOfLbServerGroupLbMethod) == "{}" { // empty struct
			dst.ArrayOfLbServerGroupLbMethod = nil
		} else {
			return nil // data stored in dst.ArrayOfLbServerGroupLbMethod, return on the first match
		}
	} else {
		dst.ArrayOfLbServerGroupLbMethod = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(LbMethod)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *LbMethod) MarshalJSON() ([]byte, error) {
	if src.LbServerGroupLbMethod != nil {
		return json.Marshal(&src.LbServerGroupLbMethod)
	}

	if src.ArrayOfLbServerGroupLbMethod != nil {
		return json.Marshal(&src.ArrayOfLbServerGroupLbMethod)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableLbMethod struct {
	value *LbMethod
	isSet bool
}

func (v NullableLbMethod) Get() *LbMethod {
	return v.value
}

func (v *NullableLbMethod) Set(val *LbMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableLbMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableLbMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbMethod(val *LbMethod) *NullableLbMethod {
	return &NullableLbMethod{value: val, isSet: true}
}

func (v NullableLbMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
