/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
)

// checks if the ListenerForSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListenerForSet{}

// ListenerForSet struct for ListenerForSet
type ListenerForSet struct {
	Description         NullableString         `json:"description,omitempty"`
	HttpsRedirection    NullableBool           `json:"https_redirection,omitempty"`
	InsertClientIp      NullableBool           `json:"insert_client_ip,omitempty"`
	Persistence         NullableString         `json:"persistence,omitempty"`
	ResponseTimeout     NullableInt32          `json:"response_timeout,omitempty"`
	ServerGroupId       NullableString         `json:"server_group_id,omitempty"`
	SessionDurationTime NullableInt32          `json:"session_duration_time,omitempty"`
	SslCertificate      NullableSslCertificate `json:"ssl_certificate,omitempty"`
	// Whether the HTTP 2.0 is supported
	SupportHttp2    *bool         `json:"support_http2,omitempty"`
	UrlHandler      []interface{} `json:"url_handler,omitempty"`
	UrlRedirection  []interface{} `json:"url_redirection,omitempty"`
	XForwardedFor   NullableBool  `json:"x_forwarded_for,omitempty"`
	XForwardedPort  NullableBool  `json:"x_forwarded_port,omitempty"`
	XForwardedProto NullableBool  `json:"x_forwarded_proto,omitempty"`
}

// NewListenerForSet instantiates a new ListenerForSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListenerForSet() *ListenerForSet {
	this := ListenerForSet{}
	return &this
}

// NewListenerForSetWithDefaults instantiates a new ListenerForSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListenerForSetWithDefaults() *ListenerForSet {
	this := ListenerForSet{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ListenerForSet) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ListenerForSet) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ListenerForSet) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ListenerForSet) UnsetDescription() {
	o.Description.Unset()
}

// GetHttpsRedirection returns the HttpsRedirection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetHttpsRedirection() bool {
	if o == nil || IsNil(o.HttpsRedirection.Get()) {
		var ret bool
		return ret
	}
	return *o.HttpsRedirection.Get()
}

// GetHttpsRedirectionOk returns a tuple with the HttpsRedirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetHttpsRedirectionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HttpsRedirection.Get(), o.HttpsRedirection.IsSet()
}

// HasHttpsRedirection returns a boolean if a field has been set.
func (o *ListenerForSet) HasHttpsRedirection() bool {
	if o != nil && o.HttpsRedirection.IsSet() {
		return true
	}

	return false
}

// SetHttpsRedirection gets a reference to the given NullableBool and assigns it to the HttpsRedirection field.
func (o *ListenerForSet) SetHttpsRedirection(v bool) {
	o.HttpsRedirection.Set(&v)
}

// SetHttpsRedirectionNil sets the value for HttpsRedirection to be an explicit nil
func (o *ListenerForSet) SetHttpsRedirectionNil() {
	o.HttpsRedirection.Set(nil)
}

// UnsetHttpsRedirection ensures that no value is present for HttpsRedirection, not even an explicit nil
func (o *ListenerForSet) UnsetHttpsRedirection() {
	o.HttpsRedirection.Unset()
}

// GetInsertClientIp returns the InsertClientIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetInsertClientIp() bool {
	if o == nil || IsNil(o.InsertClientIp.Get()) {
		var ret bool
		return ret
	}
	return *o.InsertClientIp.Get()
}

// GetInsertClientIpOk returns a tuple with the InsertClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetInsertClientIpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InsertClientIp.Get(), o.InsertClientIp.IsSet()
}

// HasInsertClientIp returns a boolean if a field has been set.
func (o *ListenerForSet) HasInsertClientIp() bool {
	if o != nil && o.InsertClientIp.IsSet() {
		return true
	}

	return false
}

// SetInsertClientIp gets a reference to the given NullableBool and assigns it to the InsertClientIp field.
func (o *ListenerForSet) SetInsertClientIp(v bool) {
	o.InsertClientIp.Set(&v)
}

// SetInsertClientIpNil sets the value for InsertClientIp to be an explicit nil
func (o *ListenerForSet) SetInsertClientIpNil() {
	o.InsertClientIp.Set(nil)
}

// UnsetInsertClientIp ensures that no value is present for InsertClientIp, not even an explicit nil
func (o *ListenerForSet) UnsetInsertClientIp() {
	o.InsertClientIp.Unset()
}

// GetPersistence returns the Persistence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetPersistence() string {
	if o == nil || IsNil(o.Persistence.Get()) {
		var ret string
		return ret
	}
	return *o.Persistence.Get()
}

// GetPersistenceOk returns a tuple with the Persistence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetPersistenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Persistence.Get(), o.Persistence.IsSet()
}

// HasPersistence returns a boolean if a field has been set.
func (o *ListenerForSet) HasPersistence() bool {
	if o != nil && o.Persistence.IsSet() {
		return true
	}

	return false
}

// SetPersistence gets a reference to the given NullableString and assigns it to the Persistence field.
func (o *ListenerForSet) SetPersistence(v string) {
	o.Persistence.Set(&v)
}

// SetPersistenceNil sets the value for Persistence to be an explicit nil
func (o *ListenerForSet) SetPersistenceNil() {
	o.Persistence.Set(nil)
}

// UnsetPersistence ensures that no value is present for Persistence, not even an explicit nil
func (o *ListenerForSet) UnsetPersistence() {
	o.Persistence.Unset()
}

// GetResponseTimeout returns the ResponseTimeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetResponseTimeout() int32 {
	if o == nil || IsNil(o.ResponseTimeout.Get()) {
		var ret int32
		return ret
	}
	return *o.ResponseTimeout.Get()
}

// GetResponseTimeoutOk returns a tuple with the ResponseTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetResponseTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResponseTimeout.Get(), o.ResponseTimeout.IsSet()
}

// HasResponseTimeout returns a boolean if a field has been set.
func (o *ListenerForSet) HasResponseTimeout() bool {
	if o != nil && o.ResponseTimeout.IsSet() {
		return true
	}

	return false
}

// SetResponseTimeout gets a reference to the given NullableInt32 and assigns it to the ResponseTimeout field.
func (o *ListenerForSet) SetResponseTimeout(v int32) {
	o.ResponseTimeout.Set(&v)
}

// SetResponseTimeoutNil sets the value for ResponseTimeout to be an explicit nil
func (o *ListenerForSet) SetResponseTimeoutNil() {
	o.ResponseTimeout.Set(nil)
}

// UnsetResponseTimeout ensures that no value is present for ResponseTimeout, not even an explicit nil
func (o *ListenerForSet) UnsetResponseTimeout() {
	o.ResponseTimeout.Unset()
}

// GetServerGroupId returns the ServerGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetServerGroupId() string {
	if o == nil || IsNil(o.ServerGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.ServerGroupId.Get()
}

// GetServerGroupIdOk returns a tuple with the ServerGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetServerGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerGroupId.Get(), o.ServerGroupId.IsSet()
}

// HasServerGroupId returns a boolean if a field has been set.
func (o *ListenerForSet) HasServerGroupId() bool {
	if o != nil && o.ServerGroupId.IsSet() {
		return true
	}

	return false
}

// SetServerGroupId gets a reference to the given NullableString and assigns it to the ServerGroupId field.
func (o *ListenerForSet) SetServerGroupId(v string) {
	o.ServerGroupId.Set(&v)
}

// SetServerGroupIdNil sets the value for ServerGroupId to be an explicit nil
func (o *ListenerForSet) SetServerGroupIdNil() {
	o.ServerGroupId.Set(nil)
}

// UnsetServerGroupId ensures that no value is present for ServerGroupId, not even an explicit nil
func (o *ListenerForSet) UnsetServerGroupId() {
	o.ServerGroupId.Unset()
}

// GetSessionDurationTime returns the SessionDurationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetSessionDurationTime() int32 {
	if o == nil || IsNil(o.SessionDurationTime.Get()) {
		var ret int32
		return ret
	}
	return *o.SessionDurationTime.Get()
}

// GetSessionDurationTimeOk returns a tuple with the SessionDurationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetSessionDurationTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SessionDurationTime.Get(), o.SessionDurationTime.IsSet()
}

// HasSessionDurationTime returns a boolean if a field has been set.
func (o *ListenerForSet) HasSessionDurationTime() bool {
	if o != nil && o.SessionDurationTime.IsSet() {
		return true
	}

	return false
}

// SetSessionDurationTime gets a reference to the given NullableInt32 and assigns it to the SessionDurationTime field.
func (o *ListenerForSet) SetSessionDurationTime(v int32) {
	o.SessionDurationTime.Set(&v)
}

// SetSessionDurationTimeNil sets the value for SessionDurationTime to be an explicit nil
func (o *ListenerForSet) SetSessionDurationTimeNil() {
	o.SessionDurationTime.Set(nil)
}

// UnsetSessionDurationTime ensures that no value is present for SessionDurationTime, not even an explicit nil
func (o *ListenerForSet) UnsetSessionDurationTime() {
	o.SessionDurationTime.Unset()
}

// GetSslCertificate returns the SslCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetSslCertificate() SslCertificate {
	if o == nil || IsNil(o.SslCertificate.Get()) {
		var ret SslCertificate
		return ret
	}
	return *o.SslCertificate.Get()
}

// GetSslCertificateOk returns a tuple with the SslCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetSslCertificateOk() (*SslCertificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.SslCertificate.Get(), o.SslCertificate.IsSet()
}

// HasSslCertificate returns a boolean if a field has been set.
func (o *ListenerForSet) HasSslCertificate() bool {
	if o != nil && o.SslCertificate.IsSet() {
		return true
	}

	return false
}

// SetSslCertificate gets a reference to the given NullableSslCertificate and assigns it to the SslCertificate field.
func (o *ListenerForSet) SetSslCertificate(v SslCertificate) {
	o.SslCertificate.Set(&v)
}

// SetSslCertificateNil sets the value for SslCertificate to be an explicit nil
func (o *ListenerForSet) SetSslCertificateNil() {
	o.SslCertificate.Set(nil)
}

// UnsetSslCertificate ensures that no value is present for SslCertificate, not even an explicit nil
func (o *ListenerForSet) UnsetSslCertificate() {
	o.SslCertificate.Unset()
}

// GetSupportHttp2 returns the SupportHttp2 field value if set, zero value otherwise.
func (o *ListenerForSet) GetSupportHttp2() bool {
	if o == nil || IsNil(o.SupportHttp2) {
		var ret bool
		return ret
	}
	return *o.SupportHttp2
}

// GetSupportHttp2Ok returns a tuple with the SupportHttp2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListenerForSet) GetSupportHttp2Ok() (*bool, bool) {
	if o == nil || IsNil(o.SupportHttp2) {
		return nil, false
	}
	return o.SupportHttp2, true
}

// HasSupportHttp2 returns a boolean if a field has been set.
func (o *ListenerForSet) HasSupportHttp2() bool {
	if o != nil && !IsNil(o.SupportHttp2) {
		return true
	}

	return false
}

// SetSupportHttp2 gets a reference to the given bool and assigns it to the SupportHttp2 field.
func (o *ListenerForSet) SetSupportHttp2(v bool) {
	o.SupportHttp2 = &v
}

// GetUrlHandler returns the UrlHandler field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetUrlHandler() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.UrlHandler
}

// GetUrlHandlerOk returns a tuple with the UrlHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetUrlHandlerOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.UrlHandler) {
		return nil, false
	}
	return o.UrlHandler, true
}

// HasUrlHandler returns a boolean if a field has been set.
func (o *ListenerForSet) HasUrlHandler() bool {
	if o != nil && !IsNil(o.UrlHandler) {
		return true
	}

	return false
}

// SetUrlHandler gets a reference to the given []interface{} and assigns it to the UrlHandler field.
func (o *ListenerForSet) SetUrlHandler(v []interface{}) {
	o.UrlHandler = v
}

// GetUrlRedirection returns the UrlRedirection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetUrlRedirection() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}
	return o.UrlRedirection
}

// GetUrlRedirectionOk returns a tuple with the UrlRedirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetUrlRedirectionOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.UrlRedirection) {
		return nil, false
	}
	return o.UrlRedirection, true
}

// HasUrlRedirection returns a boolean if a field has been set.
func (o *ListenerForSet) HasUrlRedirection() bool {
	if o != nil && !IsNil(o.UrlRedirection) {
		return true
	}

	return false
}

// SetUrlRedirection gets a reference to the given []interface{} and assigns it to the UrlRedirection field.
func (o *ListenerForSet) SetUrlRedirection(v []interface{}) {
	o.UrlRedirection = v
}

// GetXForwardedFor returns the XForwardedFor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetXForwardedFor() bool {
	if o == nil || IsNil(o.XForwardedFor.Get()) {
		var ret bool
		return ret
	}
	return *o.XForwardedFor.Get()
}

// GetXForwardedForOk returns a tuple with the XForwardedFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetXForwardedForOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.XForwardedFor.Get(), o.XForwardedFor.IsSet()
}

// HasXForwardedFor returns a boolean if a field has been set.
func (o *ListenerForSet) HasXForwardedFor() bool {
	if o != nil && o.XForwardedFor.IsSet() {
		return true
	}

	return false
}

// SetXForwardedFor gets a reference to the given NullableBool and assigns it to the XForwardedFor field.
func (o *ListenerForSet) SetXForwardedFor(v bool) {
	o.XForwardedFor.Set(&v)
}

// SetXForwardedForNil sets the value for XForwardedFor to be an explicit nil
func (o *ListenerForSet) SetXForwardedForNil() {
	o.XForwardedFor.Set(nil)
}

// UnsetXForwardedFor ensures that no value is present for XForwardedFor, not even an explicit nil
func (o *ListenerForSet) UnsetXForwardedFor() {
	o.XForwardedFor.Unset()
}

// GetXForwardedPort returns the XForwardedPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetXForwardedPort() bool {
	if o == nil || IsNil(o.XForwardedPort.Get()) {
		var ret bool
		return ret
	}
	return *o.XForwardedPort.Get()
}

// GetXForwardedPortOk returns a tuple with the XForwardedPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetXForwardedPortOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.XForwardedPort.Get(), o.XForwardedPort.IsSet()
}

// HasXForwardedPort returns a boolean if a field has been set.
func (o *ListenerForSet) HasXForwardedPort() bool {
	if o != nil && o.XForwardedPort.IsSet() {
		return true
	}

	return false
}

// SetXForwardedPort gets a reference to the given NullableBool and assigns it to the XForwardedPort field.
func (o *ListenerForSet) SetXForwardedPort(v bool) {
	o.XForwardedPort.Set(&v)
}

// SetXForwardedPortNil sets the value for XForwardedPort to be an explicit nil
func (o *ListenerForSet) SetXForwardedPortNil() {
	o.XForwardedPort.Set(nil)
}

// UnsetXForwardedPort ensures that no value is present for XForwardedPort, not even an explicit nil
func (o *ListenerForSet) UnsetXForwardedPort() {
	o.XForwardedPort.Unset()
}

// GetXForwardedProto returns the XForwardedProto field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListenerForSet) GetXForwardedProto() bool {
	if o == nil || IsNil(o.XForwardedProto.Get()) {
		var ret bool
		return ret
	}
	return *o.XForwardedProto.Get()
}

// GetXForwardedProtoOk returns a tuple with the XForwardedProto field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListenerForSet) GetXForwardedProtoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.XForwardedProto.Get(), o.XForwardedProto.IsSet()
}

// HasXForwardedProto returns a boolean if a field has been set.
func (o *ListenerForSet) HasXForwardedProto() bool {
	if o != nil && o.XForwardedProto.IsSet() {
		return true
	}

	return false
}

// SetXForwardedProto gets a reference to the given NullableBool and assigns it to the XForwardedProto field.
func (o *ListenerForSet) SetXForwardedProto(v bool) {
	o.XForwardedProto.Set(&v)
}

// SetXForwardedProtoNil sets the value for XForwardedProto to be an explicit nil
func (o *ListenerForSet) SetXForwardedProtoNil() {
	o.XForwardedProto.Set(nil)
}

// UnsetXForwardedProto ensures that no value is present for XForwardedProto, not even an explicit nil
func (o *ListenerForSet) UnsetXForwardedProto() {
	o.XForwardedProto.Unset()
}

func (o ListenerForSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListenerForSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.HttpsRedirection.IsSet() {
		toSerialize["https_redirection"] = o.HttpsRedirection.Get()
	}
	if o.InsertClientIp.IsSet() {
		toSerialize["insert_client_ip"] = o.InsertClientIp.Get()
	}
	if o.Persistence.IsSet() {
		toSerialize["persistence"] = o.Persistence.Get()
	}
	if o.ResponseTimeout.IsSet() {
		toSerialize["response_timeout"] = o.ResponseTimeout.Get()
	}
	if o.ServerGroupId.IsSet() {
		toSerialize["server_group_id"] = o.ServerGroupId.Get()
	}
	if o.SessionDurationTime.IsSet() {
		toSerialize["session_duration_time"] = o.SessionDurationTime.Get()
	}
	if o.SslCertificate.IsSet() {
		toSerialize["ssl_certificate"] = o.SslCertificate.Get()
	}
	if !IsNil(o.SupportHttp2) {
		toSerialize["support_http2"] = o.SupportHttp2
	}
	if o.UrlHandler != nil {
		toSerialize["url_handler"] = o.UrlHandler
	}
	if o.UrlRedirection != nil {
		toSerialize["url_redirection"] = o.UrlRedirection
	}
	if o.XForwardedFor.IsSet() {
		toSerialize["x_forwarded_for"] = o.XForwardedFor.Get()
	}
	if o.XForwardedPort.IsSet() {
		toSerialize["x_forwarded_port"] = o.XForwardedPort.Get()
	}
	if o.XForwardedProto.IsSet() {
		toSerialize["x_forwarded_proto"] = o.XForwardedProto.Get()
	}
	return toSerialize, nil
}

type NullableListenerForSet struct {
	value *ListenerForSet
	isSet bool
}

func (v NullableListenerForSet) Get() *ListenerForSet {
	return v.value
}

func (v *NullableListenerForSet) Set(val *ListenerForSet) {
	v.value = val
	v.isSet = true
}

func (v NullableListenerForSet) IsSet() bool {
	return v.isSet
}

func (v *NullableListenerForSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListenerForSet(val *ListenerForSet) *NullableListenerForSet {
	return &NullableListenerForSet{value: val, isSet: true}
}

func (v NullableListenerForSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListenerForSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
