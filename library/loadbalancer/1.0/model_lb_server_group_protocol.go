/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LbServerGroupProtocol the model 'LbServerGroupProtocol'
type LbServerGroupProtocol string

// List of LbServerGroupProtocol
const (
	LBSERVERGROUPPROTOCOL_TCP LbServerGroupProtocol = "TCP"
	LBSERVERGROUPPROTOCOL_UDP LbServerGroupProtocol = "UDP"
)

// All allowed values of LbServerGroupProtocol enum
var AllowedLbServerGroupProtocolEnumValues = []LbServerGroupProtocol{
	"TCP",
	"UDP",
}

func (v *LbServerGroupProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LbServerGroupProtocol(value)
	for _, existing := range AllowedLbServerGroupProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LbServerGroupProtocol", value)
}

// NewLbServerGroupProtocolFromValue returns a pointer to a valid LbServerGroupProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLbServerGroupProtocolFromValue(v string) (*LbServerGroupProtocol, error) {
	ev := LbServerGroupProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LbServerGroupProtocol: valid values are %v", v, AllowedLbServerGroupProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LbServerGroupProtocol) IsValid() bool {
	for _, existing := range AllowedLbServerGroupProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LbServerGroupProtocol value
func (v LbServerGroupProtocol) Ptr() *LbServerGroupProtocol {
	return &v
}

type NullableLbServerGroupProtocol struct {
	value *LbServerGroupProtocol
	isSet bool
}

func (v NullableLbServerGroupProtocol) Get() *LbServerGroupProtocol {
	return v.value
}

func (v *NullableLbServerGroupProtocol) Set(val *LbServerGroupProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableLbServerGroupProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableLbServerGroupProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbServerGroupProtocol(val *LbServerGroupProtocol) *NullableLbServerGroupProtocol {
	return &NullableLbServerGroupProtocol{value: val, isSet: true}
}

func (v NullableLbServerGroupProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbServerGroupProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
