/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LoadbalancerV1LBServerGroupsApiAPIService LoadbalancerV1LBServerGroupsApiAPI service
type LoadbalancerV1LBServerGroupsApiAPIService service

type LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest struct {
	ctx                        context.Context
	ApiService                 *LoadbalancerV1LBServerGroupsApiAPIService
	lbServerGroupCreateRequest *LbServerGroupCreateRequest
}

func (r LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest) LbServerGroupCreateRequest(lbServerGroupCreateRequest LbServerGroupCreateRequest) LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest {
	r.lbServerGroupCreateRequest = &lbServerGroupCreateRequest
	return r
}

func (r LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest) Execute() (*LbServerGroupShowResponse, *http.Response, error) {
	return r.ApiService.CreateLbServerGroupExecute(r)
}

/*
CreateLbServerGroup CreateLBServerGroup

Create LB Server Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest
*/
func (a *LoadbalancerV1LBServerGroupsApiAPIService) CreateLbServerGroup(ctx context.Context) LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest {
	return LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LbServerGroupShowResponse
func (a *LoadbalancerV1LBServerGroupsApiAPIService) CreateLbServerGroupExecute(r LoadbalancerV1LBServerGroupsApiAPICreateLbServerGroupRequest) (*LbServerGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbServerGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lbServerGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("lbServerGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lbServerGroupCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1LBServerGroupsApiAPIDeleteLbServerGroupRequest struct {
	ctx             context.Context
	ApiService      *LoadbalancerV1LBServerGroupsApiAPIService
	lbServerGroupId string
}

func (r LoadbalancerV1LBServerGroupsApiAPIDeleteLbServerGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLbServerGroupExecute(r)
}

/*
DeleteLbServerGroup DeleteLBServerGroup

Delete LB Server Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId LB Server Group ID
	@return LoadbalancerV1LBServerGroupsApiAPIDeleteLbServerGroupRequest
*/
func (a *LoadbalancerV1LBServerGroupsApiAPIService) DeleteLbServerGroup(ctx context.Context, lbServerGroupId string) LoadbalancerV1LBServerGroupsApiAPIDeleteLbServerGroupRequest {
	return LoadbalancerV1LBServerGroupsApiAPIDeleteLbServerGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
	}
}

// Execute executes the request
func (a *LoadbalancerV1LBServerGroupsApiAPIService) DeleteLbServerGroupExecute(r LoadbalancerV1LBServerGroupsApiAPIDeleteLbServerGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest struct {
	ctx             context.Context
	ApiService      *LoadbalancerV1LBServerGroupsApiAPIService
	size            *int32
	page            *int32
	sort            *string
	name            *string
	protocol        *Protocol1
	subnetId        *string
	vpcId           *string
	lbHealthCheckId *string
	lbMethod        *LbMethod
}

// size
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) Size(size int32) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.size = &size
	return r
}

// page
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) Page(page int32) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.page = &page
	return r
}

// sort
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) Sort(sort string) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.sort = &sort
	return r
}

// LB Server Group name
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) Name(name string) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.name = &name
	return r
}

// Protocol
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) Protocol(protocol Protocol1) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.protocol = &protocol
	return r
}

// Service Subnet ID
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) SubnetId(subnetId string) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.subnetId = &subnetId
	return r
}

// VPC ID
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) VpcId(vpcId string) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.vpcId = &vpcId
	return r
}

// LB Health Check ID
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) LbHealthCheckId(lbHealthCheckId string) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.lbHealthCheckId = &lbHealthCheckId
	return r
}

// LB Method
func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) LbMethod(lbMethod LbMethod) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	r.lbMethod = &lbMethod
	return r
}

func (r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) Execute() (*LbServerGroupListResponse, *http.Response, error) {
	return r.ApiService.ListLbServerGroupsExecute(r)
}

/*
ListLbServerGroups ListLBServerGroups

Get LB Server Group list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest
*/
func (a *LoadbalancerV1LBServerGroupsApiAPIService) ListLbServerGroups(ctx context.Context) LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest {
	return LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return LbServerGroupListResponse
func (a *LoadbalancerV1LBServerGroupsApiAPIService) ListLbServerGroupsExecute(r LoadbalancerV1LBServerGroupsApiAPIListLbServerGroupsRequest) (*LbServerGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbServerGroupListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.protocol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "protocol", r.protocol, "form", "")
	}
	if r.subnetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_id", r.subnetId, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.lbHealthCheckId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lb_health_check_id", r.lbHealthCheckId, "form", "")
	}
	if r.lbMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lb_method", r.lbMethod, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest struct {
	ctx                     context.Context
	ApiService              *LoadbalancerV1LBServerGroupsApiAPIService
	lbServerGroupId         string
	lbServerGroupSetRequest *LbServerGroupSetRequest
}

func (r LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest) LbServerGroupSetRequest(lbServerGroupSetRequest LbServerGroupSetRequest) LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest {
	r.lbServerGroupSetRequest = &lbServerGroupSetRequest
	return r
}

func (r LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest) Execute() (*LbServerGroupShowResponse, *http.Response, error) {
	return r.ApiService.SetLbServerGroupExecute(r)
}

/*
SetLbServerGroup SetLBServerGroup

Set LB Server Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId LB Server Group ID
	@return LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest
*/
func (a *LoadbalancerV1LBServerGroupsApiAPIService) SetLbServerGroup(ctx context.Context, lbServerGroupId string) LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest {
	return LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
	}
}

// Execute executes the request
//
//	@return LbServerGroupShowResponse
func (a *LoadbalancerV1LBServerGroupsApiAPIService) SetLbServerGroupExecute(r LoadbalancerV1LBServerGroupsApiAPISetLbServerGroupRequest) (*LbServerGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbServerGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.lbServerGroupSetRequest == nil {
		return localVarReturnValue, nil, reportError("lbServerGroupSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.lbServerGroupSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1LBServerGroupsApiAPIShowLbServerGroupRequest struct {
	ctx             context.Context
	ApiService      *LoadbalancerV1LBServerGroupsApiAPIService
	lbServerGroupId string
}

func (r LoadbalancerV1LBServerGroupsApiAPIShowLbServerGroupRequest) Execute() (*LbServerGroupShowResponse, *http.Response, error) {
	return r.ApiService.ShowLbServerGroupExecute(r)
}

/*
ShowLbServerGroup ShowLBServerGroup

Show LB Server Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId LB Server Group ID
	@return LoadbalancerV1LBServerGroupsApiAPIShowLbServerGroupRequest
*/
func (a *LoadbalancerV1LBServerGroupsApiAPIService) ShowLbServerGroup(ctx context.Context, lbServerGroupId string) LoadbalancerV1LBServerGroupsApiAPIShowLbServerGroupRequest {
	return LoadbalancerV1LBServerGroupsApiAPIShowLbServerGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
	}
}

// Execute executes the request
//
//	@return LbServerGroupShowResponse
func (a *LoadbalancerV1LBServerGroupsApiAPIService) ShowLbServerGroupExecute(r LoadbalancerV1LBServerGroupsApiAPIShowLbServerGroupRequest) (*LbServerGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LbServerGroupShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
