/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// ResourceUsageLimitType the model 'ResourceUsageLimitType'
type ResourceUsageLimitType string

// List of ResourceUsageLimitType
const (
	RESOURCEUSAGELIMITTYPE_LOADBALANCER    ResourceUsageLimitType = "LOADBALANCER"
	RESOURCEUSAGELIMITTYPE_LISTENER        ResourceUsageLimitType = "LISTENER"
	RESOURCEUSAGELIMITTYPE_LB_SERVER_GROUP ResourceUsageLimitType = "LB_SERVER_GROUP"
	RESOURCEUSAGELIMITTYPE_MEMBER          ResourceUsageLimitType = "MEMBER"
)

// All allowed values of ResourceUsageLimitType enum
var AllowedResourceUsageLimitTypeEnumValues = []ResourceUsageLimitType{
	"LOADBALANCER",
	"LISTENER",
	"LB_SERVER_GROUP",
	"MEMBER",
}

func (v *ResourceUsageLimitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceUsageLimitType(value)
	for _, existing := range AllowedResourceUsageLimitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceUsageLimitType", value)
}

// NewResourceUsageLimitTypeFromValue returns a pointer to a valid ResourceUsageLimitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceUsageLimitTypeFromValue(v string) (*ResourceUsageLimitType, error) {
	ev := ResourceUsageLimitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceUsageLimitType: valid values are %v", v, AllowedResourceUsageLimitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceUsageLimitType) IsValid() bool {
	for _, existing := range AllowedResourceUsageLimitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceUsageLimitType value
func (v ResourceUsageLimitType) Ptr() *ResourceUsageLimitType {
	return &v
}

type NullableResourceUsageLimitType struct {
	value *ResourceUsageLimitType
	isSet bool
}

func (v NullableResourceUsageLimitType) Get() *ResourceUsageLimitType {
	return v.value
}

func (v *NullableResourceUsageLimitType) Set(val *ResourceUsageLimitType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUsageLimitType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUsageLimitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUsageLimitType(val *ResourceUsageLimitType) *NullableResourceUsageLimitType {
	return &NullableResourceUsageLimitType{value: val, isSet: true}
}

func (v NullableResourceUsageLimitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUsageLimitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
