/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LoadbalancerCreateValidateResponseDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadbalancerCreateValidateResponseDetail{}

// LoadbalancerCreateValidateResponseDetail struct for LoadbalancerCreateValidateResponseDetail
type LoadbalancerCreateValidateResponseDetail struct {
	// Available IP Quantity Check Result
	Ip bool `json:"ip"`
	// Load balancer creation availability
	Result bool `json:"result"`
	// Subnet quantity check result
	Subnet bool `json:"subnet"`
}

type _LoadbalancerCreateValidateResponseDetail LoadbalancerCreateValidateResponseDetail

// NewLoadbalancerCreateValidateResponseDetail instantiates a new LoadbalancerCreateValidateResponseDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadbalancerCreateValidateResponseDetail(ip bool, result bool, subnet bool) *LoadbalancerCreateValidateResponseDetail {
	this := LoadbalancerCreateValidateResponseDetail{}
	this.Ip = ip
	this.Result = result
	this.Subnet = subnet
	return &this
}

// NewLoadbalancerCreateValidateResponseDetailWithDefaults instantiates a new LoadbalancerCreateValidateResponseDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadbalancerCreateValidateResponseDetailWithDefaults() *LoadbalancerCreateValidateResponseDetail {
	this := LoadbalancerCreateValidateResponseDetail{}
	return &this
}

// GetIp returns the Ip field value
func (o *LoadbalancerCreateValidateResponseDetail) GetIp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *LoadbalancerCreateValidateResponseDetail) GetIpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *LoadbalancerCreateValidateResponseDetail) SetIp(v bool) {
	o.Ip = v
}

// GetResult returns the Result field value
func (o *LoadbalancerCreateValidateResponseDetail) GetResult() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *LoadbalancerCreateValidateResponseDetail) GetResultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *LoadbalancerCreateValidateResponseDetail) SetResult(v bool) {
	o.Result = v
}

// GetSubnet returns the Subnet field value
func (o *LoadbalancerCreateValidateResponseDetail) GetSubnet() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *LoadbalancerCreateValidateResponseDetail) GetSubnetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *LoadbalancerCreateValidateResponseDetail) SetSubnet(v bool) {
	o.Subnet = v
}

func (o LoadbalancerCreateValidateResponseDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadbalancerCreateValidateResponseDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["result"] = o.Result
	toSerialize["subnet"] = o.Subnet
	return toSerialize, nil
}

func (o *LoadbalancerCreateValidateResponseDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
		"result",
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadbalancerCreateValidateResponseDetail := _LoadbalancerCreateValidateResponseDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoadbalancerCreateValidateResponseDetail)

	if err != nil {
		return err
	}

	*o = LoadbalancerCreateValidateResponseDetail(varLoadbalancerCreateValidateResponseDetail)

	return err
}

type NullableLoadbalancerCreateValidateResponseDetail struct {
	value *LoadbalancerCreateValidateResponseDetail
	isSet bool
}

func (v NullableLoadbalancerCreateValidateResponseDetail) Get() *LoadbalancerCreateValidateResponseDetail {
	return v.value
}

func (v *NullableLoadbalancerCreateValidateResponseDetail) Set(val *LoadbalancerCreateValidateResponseDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadbalancerCreateValidateResponseDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadbalancerCreateValidateResponseDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadbalancerCreateValidateResponseDetail(val *LoadbalancerCreateValidateResponseDetail) *NullableLoadbalancerCreateValidateResponseDetail {
	return &NullableLoadbalancerCreateValidateResponseDetail{value: val, isSet: true}
}

func (v NullableLoadbalancerCreateValidateResponseDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadbalancerCreateValidateResponseDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
