/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceUsageLimitResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceUsageLimitResponse{}

// ResourceUsageLimitResponse struct for ResourceUsageLimitResponse
type ResourceUsageLimitResponse struct {
	// resource limitation count
	Limitation int32 `json:"limitation"`
	// resource remain count
	Remain int32 `json:"remain"`
	// resource usage count
	Usage int32 `json:"usage"`
}

type _ResourceUsageLimitResponse ResourceUsageLimitResponse

// NewResourceUsageLimitResponse instantiates a new ResourceUsageLimitResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUsageLimitResponse(limitation int32, remain int32, usage int32) *ResourceUsageLimitResponse {
	this := ResourceUsageLimitResponse{}
	this.Limitation = limitation
	this.Remain = remain
	this.Usage = usage
	return &this
}

// NewResourceUsageLimitResponseWithDefaults instantiates a new ResourceUsageLimitResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUsageLimitResponseWithDefaults() *ResourceUsageLimitResponse {
	this := ResourceUsageLimitResponse{}
	return &this
}

// GetLimitation returns the Limitation field value
func (o *ResourceUsageLimitResponse) GetLimitation() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limitation
}

// GetLimitationOk returns a tuple with the Limitation field value
// and a boolean to check if the value has been set.
func (o *ResourceUsageLimitResponse) GetLimitationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limitation, true
}

// SetLimitation sets field value
func (o *ResourceUsageLimitResponse) SetLimitation(v int32) {
	o.Limitation = v
}

// GetRemain returns the Remain field value
func (o *ResourceUsageLimitResponse) GetRemain() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Remain
}

// GetRemainOk returns a tuple with the Remain field value
// and a boolean to check if the value has been set.
func (o *ResourceUsageLimitResponse) GetRemainOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Remain, true
}

// SetRemain sets field value
func (o *ResourceUsageLimitResponse) SetRemain(v int32) {
	o.Remain = v
}

// GetUsage returns the Usage field value
func (o *ResourceUsageLimitResponse) GetUsage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *ResourceUsageLimitResponse) GetUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *ResourceUsageLimitResponse) SetUsage(v int32) {
	o.Usage = v
}

func (o ResourceUsageLimitResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceUsageLimitResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["limitation"] = o.Limitation
	toSerialize["remain"] = o.Remain
	toSerialize["usage"] = o.Usage
	return toSerialize, nil
}

func (o *ResourceUsageLimitResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"limitation",
		"remain",
		"usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceUsageLimitResponse := _ResourceUsageLimitResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceUsageLimitResponse)

	if err != nil {
		return err
	}

	*o = ResourceUsageLimitResponse(varResourceUsageLimitResponse)

	return err
}

type NullableResourceUsageLimitResponse struct {
	value *ResourceUsageLimitResponse
	isSet bool
}

func (v NullableResourceUsageLimitResponse) Get() *ResourceUsageLimitResponse {
	return v.value
}

func (v *NullableResourceUsageLimitResponse) Set(val *ResourceUsageLimitResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUsageLimitResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUsageLimitResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUsageLimitResponse(val *ResourceUsageLimitResponse) *NullableResourceUsageLimitResponse {
	return &NullableResourceUsageLimitResponse{value: val, isSet: true}
}

func (v NullableResourceUsageLimitResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUsageLimitResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
