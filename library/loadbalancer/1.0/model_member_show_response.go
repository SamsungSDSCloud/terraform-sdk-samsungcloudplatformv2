/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MemberShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberShowResponse{}

// MemberShowResponse struct for MemberShowResponse
type MemberShowResponse struct {
	Member NullableMember `json:"member"`
}

type _MemberShowResponse MemberShowResponse

// NewMemberShowResponse instantiates a new MemberShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberShowResponse(member NullableMember) *MemberShowResponse {
	this := MemberShowResponse{}
	this.Member = member
	return &this
}

// NewMemberShowResponseWithDefaults instantiates a new MemberShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberShowResponseWithDefaults() *MemberShowResponse {
	this := MemberShowResponse{}
	return &this
}

// GetMember returns the Member field value
// If the value is explicit nil, the zero value for Member will be returned
func (o *MemberShowResponse) GetMember() Member {
	if o == nil || o.Member.Get() == nil {
		var ret Member
		return ret
	}

	return *o.Member.Get()
}

// GetMemberOk returns a tuple with the Member field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberShowResponse) GetMemberOk() (*Member, bool) {
	if o == nil {
		return nil, false
	}
	return o.Member.Get(), o.Member.IsSet()
}

// SetMember sets field value
func (o *MemberShowResponse) SetMember(v Member) {
	o.Member.Set(&v)
}

func (o MemberShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["member"] = o.Member.Get()
	return toSerialize, nil
}

func (o *MemberShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"member",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberShowResponse := _MemberShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMemberShowResponse)

	if err != nil {
		return err
	}

	*o = MemberShowResponse(varMemberShowResponse)

	return err
}

type NullableMemberShowResponse struct {
	value *MemberShowResponse
	isSet bool
}

func (v NullableMemberShowResponse) Get() *MemberShowResponse {
	return v.value
}

func (v *NullableMemberShowResponse) Set(val *MemberShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberShowResponse(val *MemberShowResponse) *NullableMemberShowResponse {
	return &NullableMemberShowResponse{value: val, isSet: true}
}

func (v NullableMemberShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
