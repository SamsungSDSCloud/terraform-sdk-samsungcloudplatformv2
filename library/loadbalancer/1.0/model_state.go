/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// State The state of the load balancer.
type State struct {
	LoadBalancerState        *LoadBalancerState
	ArrayOfLoadBalancerState *[]LoadBalancerState
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *State) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into LoadBalancerState
	err = json.Unmarshal(data, &dst.LoadBalancerState)
	if err == nil {
		jsonLoadBalancerState, _ := json.Marshal(dst.LoadBalancerState)
		if string(jsonLoadBalancerState) == "{}" { // empty struct
			dst.LoadBalancerState = nil
		} else {
			return nil // data stored in dst.LoadBalancerState, return on the first match
		}
	} else {
		dst.LoadBalancerState = nil
	}

	// try to unmarshal JSON data into ArrayOfLoadBalancerState
	err = json.Unmarshal(data, &dst.ArrayOfLoadBalancerState)
	if err == nil {
		jsonArrayOfLoadBalancerState, _ := json.Marshal(dst.ArrayOfLoadBalancerState)
		if string(jsonArrayOfLoadBalancerState) == "{}" { // empty struct
			dst.ArrayOfLoadBalancerState = nil
		} else {
			return nil // data stored in dst.ArrayOfLoadBalancerState, return on the first match
		}
	} else {
		dst.ArrayOfLoadBalancerState = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(State)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *State) MarshalJSON() ([]byte, error) {
	if src.LoadBalancerState != nil {
		return json.Marshal(&src.LoadBalancerState)
	}

	if src.ArrayOfLoadBalancerState != nil {
		return json.Marshal(&src.ArrayOfLoadBalancerState)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableState struct {
	value *State
	isSet bool
}

func (v NullableState) Get() *State {
	return v.value
}

func (v *NullableState) Set(val *State) {
	v.value = val
	v.isSet = true
}

func (v NullableState) IsSet() bool {
	return v.isSet
}

func (v *NullableState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableState(val *State) *NullableState {
	return &NullableState{value: val, isSet: true}
}

func (v NullableState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
