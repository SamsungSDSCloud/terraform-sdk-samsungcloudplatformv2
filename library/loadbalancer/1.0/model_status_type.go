/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// StatusType the model 'StatusType'
type StatusType string

// List of StatusType
const (
	STATUSTYPE_ENABLE  StatusType = "ENABLE"
	STATUSTYPE_DISABLE StatusType = "DISABLE"
)

// All allowed values of StatusType enum
var AllowedStatusTypeEnumValues = []StatusType{
	"ENABLE",
	"DISABLE",
}

func (v *StatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusType(value)
	for _, existing := range AllowedStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusType", value)
}

// NewStatusTypeFromValue returns a pointer to a valid StatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusTypeFromValue(v string) (*StatusType, error) {
	ev := StatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusType: valid values are %v", v, AllowedStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusType) IsValid() bool {
	for _, existing := range AllowedStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusType value
func (v StatusType) Ptr() *StatusType {
	return &v
}

type NullableStatusType struct {
	value *StatusType
	isSet bool
}

func (v NullableStatusType) Get() *StatusType {
	return v.value
}

func (v *NullableStatusType) Set(val *StatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusType(val *StatusType) *NullableStatusType {
	return &NullableStatusType{value: val, isSet: true}
}

func (v NullableStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
