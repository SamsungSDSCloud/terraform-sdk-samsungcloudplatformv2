/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the LbCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LbCertificate{}

// LbCertificate struct for LbCertificate
type LbCertificate struct {
	CertKind *string `json:"cert_kind,omitempty"`
	Cn       *string `json:"cn,omitempty"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Created By
	CreatedBy string `json:"created_by"`
	// ID
	Id string `json:"id"`
	// Modified At
	ModifiedAt time.Time `json:"modified_at"`
	// Modified By
	ModifiedBy  string     `json:"modified_by"`
	Name        *string    `json:"name,omitempty"`
	NotAfterDt  *time.Time `json:"not_after_dt,omitempty"`
	NotBeforeDt *time.Time `json:"not_before_dt,omitempty"`
	State       *string    `json:"state,omitempty"`
}

type _LbCertificate LbCertificate

// NewLbCertificate instantiates a new LbCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLbCertificate(createdAt time.Time, createdBy string, id string, modifiedAt time.Time, modifiedBy string) *LbCertificate {
	this := LbCertificate{}
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	return &this
}

// NewLbCertificateWithDefaults instantiates a new LbCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLbCertificateWithDefaults() *LbCertificate {
	this := LbCertificate{}
	return &this
}

// GetCertKind returns the CertKind field value if set, zero value otherwise.
func (o *LbCertificate) GetCertKind() string {
	if o == nil || IsNil(o.CertKind) {
		var ret string
		return ret
	}
	return *o.CertKind
}

// GetCertKindOk returns a tuple with the CertKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetCertKindOk() (*string, bool) {
	if o == nil || IsNil(o.CertKind) {
		return nil, false
	}
	return o.CertKind, true
}

// HasCertKind returns a boolean if a field has been set.
func (o *LbCertificate) HasCertKind() bool {
	if o != nil && !IsNil(o.CertKind) {
		return true
	}

	return false
}

// SetCertKind gets a reference to the given string and assigns it to the CertKind field.
func (o *LbCertificate) SetCertKind(v string) {
	o.CertKind = &v
}

// GetCn returns the Cn field value if set, zero value otherwise.
func (o *LbCertificate) GetCn() string {
	if o == nil || IsNil(o.Cn) {
		var ret string
		return ret
	}
	return *o.Cn
}

// GetCnOk returns a tuple with the Cn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetCnOk() (*string, bool) {
	if o == nil || IsNil(o.Cn) {
		return nil, false
	}
	return o.Cn, true
}

// HasCn returns a boolean if a field has been set.
func (o *LbCertificate) HasCn() bool {
	if o != nil && !IsNil(o.Cn) {
		return true
	}

	return false
}

// SetCn gets a reference to the given string and assigns it to the Cn field.
func (o *LbCertificate) SetCn(v string) {
	o.Cn = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *LbCertificate) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *LbCertificate) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *LbCertificate) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *LbCertificate) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetId returns the Id field value
func (o *LbCertificate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LbCertificate) SetId(v string) {
	o.Id = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *LbCertificate) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *LbCertificate) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *LbCertificate) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *LbCertificate) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LbCertificate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LbCertificate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LbCertificate) SetName(v string) {
	o.Name = &v
}

// GetNotAfterDt returns the NotAfterDt field value if set, zero value otherwise.
func (o *LbCertificate) GetNotAfterDt() time.Time {
	if o == nil || IsNil(o.NotAfterDt) {
		var ret time.Time
		return ret
	}
	return *o.NotAfterDt
}

// GetNotAfterDtOk returns a tuple with the NotAfterDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetNotAfterDtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotAfterDt) {
		return nil, false
	}
	return o.NotAfterDt, true
}

// HasNotAfterDt returns a boolean if a field has been set.
func (o *LbCertificate) HasNotAfterDt() bool {
	if o != nil && !IsNil(o.NotAfterDt) {
		return true
	}

	return false
}

// SetNotAfterDt gets a reference to the given time.Time and assigns it to the NotAfterDt field.
func (o *LbCertificate) SetNotAfterDt(v time.Time) {
	o.NotAfterDt = &v
}

// GetNotBeforeDt returns the NotBeforeDt field value if set, zero value otherwise.
func (o *LbCertificate) GetNotBeforeDt() time.Time {
	if o == nil || IsNil(o.NotBeforeDt) {
		var ret time.Time
		return ret
	}
	return *o.NotBeforeDt
}

// GetNotBeforeDtOk returns a tuple with the NotBeforeDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetNotBeforeDtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NotBeforeDt) {
		return nil, false
	}
	return o.NotBeforeDt, true
}

// HasNotBeforeDt returns a boolean if a field has been set.
func (o *LbCertificate) HasNotBeforeDt() bool {
	if o != nil && !IsNil(o.NotBeforeDt) {
		return true
	}

	return false
}

// SetNotBeforeDt gets a reference to the given time.Time and assigns it to the NotBeforeDt field.
func (o *LbCertificate) SetNotBeforeDt(v time.Time) {
	o.NotBeforeDt = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *LbCertificate) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LbCertificate) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *LbCertificate) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *LbCertificate) SetState(v string) {
	o.State = &v
}

func (o LbCertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LbCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertKind) {
		toSerialize["cert_kind"] = o.CertKind
	}
	if !IsNil(o.Cn) {
		toSerialize["cn"] = o.Cn
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["id"] = o.Id
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotAfterDt) {
		toSerialize["not_after_dt"] = o.NotAfterDt
	}
	if !IsNil(o.NotBeforeDt) {
		toSerialize["not_before_dt"] = o.NotBeforeDt
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

func (o *LbCertificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"created_by",
		"id",
		"modified_at",
		"modified_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLbCertificate := _LbCertificate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLbCertificate)

	if err != nil {
		return err
	}

	*o = LbCertificate(varLbCertificate)

	return err
}

type NullableLbCertificate struct {
	value *LbCertificate
	isSet bool
}

func (v NullableLbCertificate) Get() *LbCertificate {
	return v.value
}

func (v *NullableLbCertificate) Set(val *LbCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableLbCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableLbCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbCertificate(val *LbCertificate) *NullableLbCertificate {
	return &NullableLbCertificate{value: val, isSet: true}
}

func (v NullableLbCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
