/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LoadbalancerV1MemberApiAPIService LoadbalancerV1MemberApiAPI service
type LoadbalancerV1MemberApiAPIService service

type LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest struct {
	ctx                     context.Context
	ApiService              *LoadbalancerV1MemberApiAPIService
	lbServerGroupId         string
	memberListCreateRequest *MemberListCreateRequest
}

func (r LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest) MemberListCreateRequest(memberListCreateRequest MemberListCreateRequest) LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest {
	r.memberListCreateRequest = &memberListCreateRequest
	return r
}

func (r LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest) Execute() (*MemberListResponse, *http.Response, error) {
	return r.ApiService.AddLbServerGroupMembersExecute(r)
}

/*
AddLbServerGroupMembers AddLbServerGroupMembers

Add Lb Server Group Member bulk

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId ID of Lb Server Group
	@return LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest
*/
func (a *LoadbalancerV1MemberApiAPIService) AddLbServerGroupMembers(ctx context.Context, lbServerGroupId string) LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest {
	return LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
	}
}

// Execute executes the request
//
//	@return MemberListResponse
func (a *LoadbalancerV1MemberApiAPIService) AddLbServerGroupMembersExecute(r LoadbalancerV1MemberApiAPIAddLbServerGroupMembersRequest) (*MemberListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberListCreateRequest == nil {
		return localVarReturnValue, nil, reportError("memberListCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.memberListCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest struct {
	ctx             context.Context
	ApiService      *LoadbalancerV1MemberApiAPIService
	lbServerGroupId string
	memberIp        *string
	memberPort      *int32
}

// IP of Member
func (r LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest) MemberIp(memberIp string) LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest {
	r.memberIp = &memberIp
	return r
}

// Protocol port of Member
func (r LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest) MemberPort(memberPort int32) LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest {
	r.memberPort = &memberPort
	return r
}

func (r LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest) Execute() (*CheckMemberExistsResponse, *http.Response, error) {
	return r.ApiService.CheckMemberExistsInServerGroupExecute(r)
}

/*
CheckMemberExistsInServerGroup CheckMemberExistsInServerGroup

Check member exists in server group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId ID of Lb Server Group
	@return LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest
*/
func (a *LoadbalancerV1MemberApiAPIService) CheckMemberExistsInServerGroup(ctx context.Context, lbServerGroupId string) LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest {
	return LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
	}
}

// Execute executes the request
//
//	@return CheckMemberExistsResponse
func (a *LoadbalancerV1MemberApiAPIService) CheckMemberExistsInServerGroupExecute(r LoadbalancerV1MemberApiAPICheckMemberExistsInServerGroupRequest) (*CheckMemberExistsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CheckMemberExistsResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}/members/check-member-exists"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberIp == nil {
		return localVarReturnValue, nil, reportError("memberIp is required and must be specified")
	}
	if r.memberPort == nil {
		return localVarReturnValue, nil, reportError("memberPort is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "member_ip", r.memberIp, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "member_port", r.memberPort, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest struct {
	ctx             context.Context
	ApiService      *LoadbalancerV1MemberApiAPIService
	lbServerGroupId string
	size            *int32
	page            *int32
	sort            *string
	name            *string
	memberIp        *string
	memberPort      *int32
}

// size
func (r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) Size(size int32) LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest {
	r.size = &size
	return r
}

// page
func (r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) Page(page int32) LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest {
	r.page = &page
	return r
}

// sort
func (r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) Sort(sort string) LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest {
	r.sort = &sort
	return r
}

// Name of Member
func (r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) Name(name string) LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest {
	r.name = &name
	return r
}

// IP of Member
func (r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) MemberIp(memberIp string) LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest {
	r.memberIp = &memberIp
	return r
}

// Protocol port of Member
func (r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) MemberPort(memberPort int32) LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest {
	r.memberPort = &memberPort
	return r
}

func (r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) Execute() (*MemberWithHealthStateListResponse, *http.Response, error) {
	return r.ApiService.ListLbServerGroupMembersExecute(r)
}

/*
ListLbServerGroupMembers ListLbServerGroupMembers

Get Lb Server Group Member List

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId ID of Lb Server Group
	@return LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest
*/
func (a *LoadbalancerV1MemberApiAPIService) ListLbServerGroupMembers(ctx context.Context, lbServerGroupId string) LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest {
	return LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
	}
}

// Execute executes the request
//
//	@return MemberWithHealthStateListResponse
func (a *LoadbalancerV1MemberApiAPIService) ListLbServerGroupMembersExecute(r LoadbalancerV1MemberApiAPIListLbServerGroupMembersRequest) (*MemberWithHealthStateListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberWithHealthStateListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.memberIp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "member_ip", r.memberIp, "form", "")
	}
	if r.memberPort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "member_port", r.memberPort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1MemberApiAPIRemoveLbServerGroupMemberRequest struct {
	ctx             context.Context
	ApiService      *LoadbalancerV1MemberApiAPIService
	lbServerGroupId string
	memberId        string
}

func (r LoadbalancerV1MemberApiAPIRemoveLbServerGroupMemberRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveLbServerGroupMemberExecute(r)
}

/*
RemoveLbServerGroupMember RemoveLbServerGroupMember

Remove Lb Server Group Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId ID of Lb Server Group
	@param memberId ID of Member
	@return LoadbalancerV1MemberApiAPIRemoveLbServerGroupMemberRequest
*/
func (a *LoadbalancerV1MemberApiAPIService) RemoveLbServerGroupMember(ctx context.Context, lbServerGroupId string, memberId string) LoadbalancerV1MemberApiAPIRemoveLbServerGroupMemberRequest {
	return LoadbalancerV1MemberApiAPIRemoveLbServerGroupMemberRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
		memberId:        memberId,
	}
}

// Execute executes the request
func (a *LoadbalancerV1MemberApiAPIService) RemoveLbServerGroupMemberExecute(r LoadbalancerV1MemberApiAPIRemoveLbServerGroupMemberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}/members/{member_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_id"+"}", url.PathEscape(parameterValueToString(r.memberId, "memberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest struct {
	ctx              context.Context
	ApiService       *LoadbalancerV1MemberApiAPIService
	lbServerGroupId  string
	memberId         string
	memberSetRequest *MemberSetRequest
}

func (r LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest) MemberSetRequest(memberSetRequest MemberSetRequest) LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest {
	r.memberSetRequest = &memberSetRequest
	return r
}

func (r LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest) Execute() (*MemberShowResponse, *http.Response, error) {
	return r.ApiService.SetLbServerGroupMemberExecute(r)
}

/*
SetLbServerGroupMember SetLbServerGroupMember

Set Lb Server Group Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId ID of Lb Server Group
	@param memberId ID of Member
	@return LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest
*/
func (a *LoadbalancerV1MemberApiAPIService) SetLbServerGroupMember(ctx context.Context, lbServerGroupId string, memberId string) LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest {
	return LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
		memberId:        memberId,
	}
}

// Execute executes the request
//
//	@return MemberShowResponse
func (a *LoadbalancerV1MemberApiAPIService) SetLbServerGroupMemberExecute(r LoadbalancerV1MemberApiAPISetLbServerGroupMemberRequest) (*MemberShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}/members/{member_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_id"+"}", url.PathEscape(parameterValueToString(r.memberId, "memberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberSetRequest == nil {
		return localVarReturnValue, nil, reportError("memberSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.memberSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LoadbalancerV1MemberApiAPIShowLbServerGroupMemberRequest struct {
	ctx             context.Context
	ApiService      *LoadbalancerV1MemberApiAPIService
	lbServerGroupId string
	memberId        string
}

func (r LoadbalancerV1MemberApiAPIShowLbServerGroupMemberRequest) Execute() (*MemberShowResponse, *http.Response, error) {
	return r.ApiService.ShowLbServerGroupMemberExecute(r)
}

/*
ShowLbServerGroupMember ShowLbServerGroupMember

Show Lb Server Group Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param lbServerGroupId ID of Lb Server Group
	@param memberId ID of Member
	@return LoadbalancerV1MemberApiAPIShowLbServerGroupMemberRequest
*/
func (a *LoadbalancerV1MemberApiAPIService) ShowLbServerGroupMember(ctx context.Context, lbServerGroupId string, memberId string) LoadbalancerV1MemberApiAPIShowLbServerGroupMemberRequest {
	return LoadbalancerV1MemberApiAPIShowLbServerGroupMemberRequest{
		ApiService:      a,
		ctx:             ctx,
		lbServerGroupId: lbServerGroupId,
		memberId:        memberId,
	}
}

// Execute executes the request
//
//	@return MemberShowResponse
func (a *LoadbalancerV1MemberApiAPIService) ShowLbServerGroupMemberExecute(r LoadbalancerV1MemberApiAPIShowLbServerGroupMemberRequest) (*MemberShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/lb-server-groups/{lb_server_group_id}/members/{member_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"lb_server_group_id"+"}", url.PathEscape(parameterValueToString(r.lbServerGroupId, "lbServerGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_id"+"}", url.PathEscape(parameterValueToString(r.memberId, "memberId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "loadbalancer 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
