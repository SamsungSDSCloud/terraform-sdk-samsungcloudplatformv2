/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LbCertificateShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LbCertificateShowResponse{}

// LbCertificateShowResponse struct for LbCertificateShowResponse
type LbCertificateShowResponse struct {
	Certificate LbCertificateForShow `json:"certificate"`
}

type _LbCertificateShowResponse LbCertificateShowResponse

// NewLbCertificateShowResponse instantiates a new LbCertificateShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLbCertificateShowResponse(certificate LbCertificateForShow) *LbCertificateShowResponse {
	this := LbCertificateShowResponse{}
	this.Certificate = certificate
	return &this
}

// NewLbCertificateShowResponseWithDefaults instantiates a new LbCertificateShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLbCertificateShowResponseWithDefaults() *LbCertificateShowResponse {
	this := LbCertificateShowResponse{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *LbCertificateShowResponse) GetCertificate() LbCertificateForShow {
	if o == nil {
		var ret LbCertificateForShow
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *LbCertificateShowResponse) GetCertificateOk() (*LbCertificateForShow, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *LbCertificateShowResponse) SetCertificate(v LbCertificateForShow) {
	o.Certificate = v
}

func (o LbCertificateShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LbCertificateShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate
	return toSerialize, nil
}

func (o *LbCertificateShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLbCertificateShowResponse := _LbCertificateShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLbCertificateShowResponse)

	if err != nil {
		return err
	}

	*o = LbCertificateShowResponse(varLbCertificateShowResponse)

	return err
}

type NullableLbCertificateShowResponse struct {
	value *LbCertificateShowResponse
	isSet bool
}

func (v NullableLbCertificateShowResponse) Get() *LbCertificateShowResponse {
	return v.value
}

func (v *NullableLbCertificateShowResponse) Set(val *LbCertificateShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLbCertificateShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLbCertificateShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbCertificateShowResponse(val *LbCertificateShowResponse) *NullableLbCertificateShowResponse {
	return &NullableLbCertificateShowResponse{value: val, isSet: true}
}

func (v NullableLbCertificateShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbCertificateShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
