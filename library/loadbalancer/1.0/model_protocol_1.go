/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// Protocol1 Protocol
type Protocol1 struct {
	LbServerGroupProtocol        *LbServerGroupProtocol
	ArrayOfLbServerGroupProtocol *[]LbServerGroupProtocol
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Protocol1) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into LbServerGroupProtocol
	err = json.Unmarshal(data, &dst.LbServerGroupProtocol)
	if err == nil {
		jsonLbServerGroupProtocol, _ := json.Marshal(dst.LbServerGroupProtocol)
		if string(jsonLbServerGroupProtocol) == "{}" { // empty struct
			dst.LbServerGroupProtocol = nil
		} else {
			return nil // data stored in dst.LbServerGroupProtocol, return on the first match
		}
	} else {
		dst.LbServerGroupProtocol = nil
	}

	// try to unmarshal JSON data into ArrayOfLbServerGroupProtocol
	err = json.Unmarshal(data, &dst.ArrayOfLbServerGroupProtocol)
	if err == nil {
		jsonArrayOfLbServerGroupProtocol, _ := json.Marshal(dst.ArrayOfLbServerGroupProtocol)
		if string(jsonArrayOfLbServerGroupProtocol) == "{}" { // empty struct
			dst.ArrayOfLbServerGroupProtocol = nil
		} else {
			return nil // data stored in dst.ArrayOfLbServerGroupProtocol, return on the first match
		}
	} else {
		dst.ArrayOfLbServerGroupProtocol = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Protocol1)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Protocol1) MarshalJSON() ([]byte, error) {
	if src.LbServerGroupProtocol != nil {
		return json.Marshal(&src.LbServerGroupProtocol)
	}

	if src.ArrayOfLbServerGroupProtocol != nil {
		return json.Marshal(&src.ArrayOfLbServerGroupProtocol)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableProtocol1 struct {
	value *Protocol1
	isSet bool
}

func (v NullableProtocol1) Get() *Protocol1 {
	return v.value
}

func (v *NullableProtocol1) Set(val *Protocol1) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocol1) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocol1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocol1(val *Protocol1) *NullableProtocol1 {
	return &NullableProtocol1{value: val, isSet: true}
}

func (v NullableProtocol1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocol1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
