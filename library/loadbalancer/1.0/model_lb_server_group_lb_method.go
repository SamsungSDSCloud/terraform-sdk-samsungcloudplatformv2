/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LbServerGroupLbMethod the model 'LbServerGroupLbMethod'
type LbServerGroupLbMethod string

// List of LbServerGroupLbMethod
const (
	LBSERVERGROUPLBMETHOD_ROUND_ROBIN               LbServerGroupLbMethod = "ROUND_ROBIN"
	LBSERVERGROUPLBMETHOD_LEAST_CONNECTION          LbServerGroupLbMethod = "LEAST_CONNECTION"
	LBSERVERGROUPLBMETHOD_IP_HASH                   LbServerGroupLbMethod = "IP_HASH"
	LBSERVERGROUPLBMETHOD_WEIGHTED_ROUND_ROBIN      LbServerGroupLbMethod = "WEIGHTED_ROUND_ROBIN"
	LBSERVERGROUPLBMETHOD_WEIGHTED_LEAST_CONNECTION LbServerGroupLbMethod = "WEIGHTED_LEAST_CONNECTION"
)

// All allowed values of LbServerGroupLbMethod enum
var AllowedLbServerGroupLbMethodEnumValues = []LbServerGroupLbMethod{
	"ROUND_ROBIN",
	"LEAST_CONNECTION",
	"IP_HASH",
	"WEIGHTED_ROUND_ROBIN",
	"WEIGHTED_LEAST_CONNECTION",
}

func (v *LbServerGroupLbMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LbServerGroupLbMethod(value)
	for _, existing := range AllowedLbServerGroupLbMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LbServerGroupLbMethod", value)
}

// NewLbServerGroupLbMethodFromValue returns a pointer to a valid LbServerGroupLbMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLbServerGroupLbMethodFromValue(v string) (*LbServerGroupLbMethod, error) {
	ev := LbServerGroupLbMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LbServerGroupLbMethod: valid values are %v", v, AllowedLbServerGroupLbMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LbServerGroupLbMethod) IsValid() bool {
	for _, existing := range AllowedLbServerGroupLbMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LbServerGroupLbMethod value
func (v LbServerGroupLbMethod) Ptr() *LbServerGroupLbMethod {
	return &v
}

type NullableLbServerGroupLbMethod struct {
	value *LbServerGroupLbMethod
	isSet bool
}

func (v NullableLbServerGroupLbMethod) Get() *LbServerGroupLbMethod {
	return v.value
}

func (v *NullableLbServerGroupLbMethod) Set(val *LbServerGroupLbMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableLbServerGroupLbMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableLbServerGroupLbMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbServerGroupLbMethod(val *LbServerGroupLbMethod) *NullableLbServerGroupLbMethod {
	return &NullableLbServerGroupLbMethod{value: val, isSet: true}
}

func (v NullableLbServerGroupLbMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbServerGroupLbMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
