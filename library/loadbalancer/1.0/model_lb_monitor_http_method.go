/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LbMonitorHttpMethod the model 'LbMonitorHttpMethod'
type LbMonitorHttpMethod string

// List of LbMonitorHttpMethod
const (
	LBMONITORHTTPMETHOD_GET  LbMonitorHttpMethod = "GET"
	LBMONITORHTTPMETHOD_POST LbMonitorHttpMethod = "POST"
)

// All allowed values of LbMonitorHttpMethod enum
var AllowedLbMonitorHttpMethodEnumValues = []LbMonitorHttpMethod{
	"GET",
	"POST",
}

func (v *LbMonitorHttpMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LbMonitorHttpMethod(value)
	for _, existing := range AllowedLbMonitorHttpMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LbMonitorHttpMethod", value)
}

// NewLbMonitorHttpMethodFromValue returns a pointer to a valid LbMonitorHttpMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLbMonitorHttpMethodFromValue(v string) (*LbMonitorHttpMethod, error) {
	ev := LbMonitorHttpMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LbMonitorHttpMethod: valid values are %v", v, AllowedLbMonitorHttpMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LbMonitorHttpMethod) IsValid() bool {
	for _, existing := range AllowedLbMonitorHttpMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LbMonitorHttpMethod value
func (v LbMonitorHttpMethod) Ptr() *LbMonitorHttpMethod {
	return &v
}

type NullableLbMonitorHttpMethod struct {
	value *LbMonitorHttpMethod
	isSet bool
}

func (v NullableLbMonitorHttpMethod) Get() *LbMonitorHttpMethod {
	return v.value
}

func (v *NullableLbMonitorHttpMethod) Set(val *LbMonitorHttpMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableLbMonitorHttpMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableLbMonitorHttpMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbMonitorHttpMethod(val *LbMonitorHttpMethod) *NullableLbMonitorHttpMethod {
	return &NullableLbMonitorHttpMethod{value: val, isSet: true}
}

func (v NullableLbMonitorHttpMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbMonitorHttpMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
