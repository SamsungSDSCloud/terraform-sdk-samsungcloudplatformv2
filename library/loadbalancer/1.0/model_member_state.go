/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// MemberState the model 'MemberState'
type MemberState string

// List of MemberState
const (
	MEMBERSTATE_CREATING MemberState = "CREATING"
	MEMBERSTATE_ACTIVE   MemberState = "ACTIVE"
	MEMBERSTATE_DELETING MemberState = "DELETING"
	MEMBERSTATE_DELETED  MemberState = "DELETED"
	MEMBERSTATE_EDITING  MemberState = "EDITING"
	MEMBERSTATE_ERROR    MemberState = "ERROR"
)

// All allowed values of MemberState enum
var AllowedMemberStateEnumValues = []MemberState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"EDITING",
	"ERROR",
}

func (v *MemberState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberState(value)
	for _, existing := range AllowedMemberStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberState", value)
}

// NewMemberStateFromValue returns a pointer to a valid MemberState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberStateFromValue(v string) (*MemberState, error) {
	ev := MemberState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberState: valid values are %v", v, AllowedMemberStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberState) IsValid() bool {
	for _, existing := range AllowedMemberStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemberState value
func (v MemberState) Ptr() *MemberState {
	return &v
}

type NullableMemberState struct {
	value *MemberState
	isSet bool
}

func (v NullableMemberState) Get() *MemberState {
	return v.value
}

func (v *NullableMemberState) Set(val *MemberState) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberState) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberState(val *MemberState) *NullableMemberState {
	return &NullableMemberState{value: val, isSet: true}
}

func (v NullableMemberState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
