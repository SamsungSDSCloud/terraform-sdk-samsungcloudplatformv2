/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// Protocol LB Health Check Protocol
type Protocol struct {
	LbMonitorProtocol        *LbMonitorProtocol
	ArrayOfLbMonitorProtocol *[]LbMonitorProtocol
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Protocol) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into LbMonitorProtocol
	err = json.Unmarshal(data, &dst.LbMonitorProtocol)
	if err == nil {
		jsonLbMonitorProtocol, _ := json.Marshal(dst.LbMonitorProtocol)
		if string(jsonLbMonitorProtocol) == "{}" { // empty struct
			dst.LbMonitorProtocol = nil
		} else {
			return nil // data stored in dst.LbMonitorProtocol, return on the first match
		}
	} else {
		dst.LbMonitorProtocol = nil
	}

	// try to unmarshal JSON data into ArrayOfLbMonitorProtocol
	err = json.Unmarshal(data, &dst.ArrayOfLbMonitorProtocol)
	if err == nil {
		jsonArrayOfLbMonitorProtocol, _ := json.Marshal(dst.ArrayOfLbMonitorProtocol)
		if string(jsonArrayOfLbMonitorProtocol) == "{}" { // empty struct
			dst.ArrayOfLbMonitorProtocol = nil
		} else {
			return nil // data stored in dst.ArrayOfLbMonitorProtocol, return on the first match
		}
	} else {
		dst.ArrayOfLbMonitorProtocol = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Protocol)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Protocol) MarshalJSON() ([]byte, error) {
	if src.LbMonitorProtocol != nil {
		return json.Marshal(&src.LbMonitorProtocol)
	}

	if src.ArrayOfLbMonitorProtocol != nil {
		return json.Marshal(&src.ArrayOfLbMonitorProtocol)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableProtocol struct {
	value *Protocol
	isSet bool
}

func (v NullableProtocol) Get() *Protocol {
	return v.value
}

func (v *NullableProtocol) Set(val *Protocol) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocol(val *Protocol) *NullableProtocol {
	return &NullableProtocol{value: val, isSet: true}
}

func (v NullableProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
