/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LbMonitorProtocol the model 'LbMonitorProtocol'
type LbMonitorProtocol string

// List of LbMonitorProtocol
const (
	LBMONITORPROTOCOL_TCP  LbMonitorProtocol = "TCP"
	LBMONITORPROTOCOL_HTTP LbMonitorProtocol = "HTTP"
)

// All allowed values of LbMonitorProtocol enum
var AllowedLbMonitorProtocolEnumValues = []LbMonitorProtocol{
	"TCP",
	"HTTP",
}

func (v *LbMonitorProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LbMonitorProtocol(value)
	for _, existing := range AllowedLbMonitorProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LbMonitorProtocol", value)
}

// NewLbMonitorProtocolFromValue returns a pointer to a valid LbMonitorProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLbMonitorProtocolFromValue(v string) (*LbMonitorProtocol, error) {
	ev := LbMonitorProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LbMonitorProtocol: valid values are %v", v, AllowedLbMonitorProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LbMonitorProtocol) IsValid() bool {
	for _, existing := range AllowedLbMonitorProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LbMonitorProtocol value
func (v LbMonitorProtocol) Ptr() *LbMonitorProtocol {
	return &v
}

type NullableLbMonitorProtocol struct {
	value *LbMonitorProtocol
	isSet bool
}

func (v NullableLbMonitorProtocol) Get() *LbMonitorProtocol {
	return v.value
}

func (v *NullableLbMonitorProtocol) Set(val *LbMonitorProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableLbMonitorProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableLbMonitorProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbMonitorProtocol(val *LbMonitorProtocol) *NullableLbMonitorProtocol {
	return &NullableLbMonitorProtocol{value: val, isSet: true}
}

func (v NullableLbMonitorProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbMonitorProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
