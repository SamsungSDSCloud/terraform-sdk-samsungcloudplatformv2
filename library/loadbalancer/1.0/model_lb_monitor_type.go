/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LbMonitorType the model 'LbMonitorType'
type LbMonitorType string

// List of LbMonitorType
const (
	LBMONITORTYPE_DEFAULT LbMonitorType = "DEFAULT"
	LBMONITORTYPE_CUSTOM  LbMonitorType = "CUSTOM"
)

// All allowed values of LbMonitorType enum
var AllowedLbMonitorTypeEnumValues = []LbMonitorType{
	"DEFAULT",
	"CUSTOM",
}

func (v *LbMonitorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LbMonitorType(value)
	for _, existing := range AllowedLbMonitorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LbMonitorType", value)
}

// NewLbMonitorTypeFromValue returns a pointer to a valid LbMonitorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLbMonitorTypeFromValue(v string) (*LbMonitorType, error) {
	ev := LbMonitorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LbMonitorType: valid values are %v", v, AllowedLbMonitorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LbMonitorType) IsValid() bool {
	for _, existing := range AllowedLbMonitorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LbMonitorType value
func (v LbMonitorType) Ptr() *LbMonitorType {
	return &v
}

type NullableLbMonitorType struct {
	value *LbMonitorType
	isSet bool
}

func (v NullableLbMonitorType) Get() *LbMonitorType {
	return v.value
}

func (v *NullableLbMonitorType) Set(val *LbMonitorType) {
	v.value = val
	v.isSet = true
}

func (v NullableLbMonitorType) IsSet() bool {
	return v.isSet
}

func (v *NullableLbMonitorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLbMonitorType(val *LbMonitorType) *NullableLbMonitorType {
	return &NullableLbMonitorType{value: val, isSet: true}
}

func (v NullableLbMonitorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLbMonitorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
