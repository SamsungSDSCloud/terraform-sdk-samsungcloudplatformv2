/*
SCP LoadBalancer Service

SCP LoadBalancer Service

API version: 0.0.1.dev1712
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package loadbalancer

import (
	"encoding/json"
	"fmt"
)

// LoadBalancerState the model 'LoadBalancerState'
type LoadBalancerState string

// List of LoadBalancerState
const (
	LOADBALANCERSTATE_CREATING LoadBalancerState = "CREATING"
	LOADBALANCERSTATE_ACTIVE   LoadBalancerState = "ACTIVE"
	LOADBALANCERSTATE_DELETING LoadBalancerState = "DELETING"
	LOADBALANCERSTATE_DELETED  LoadBalancerState = "DELETED"
	LOADBALANCERSTATE_ERROR    LoadBalancerState = "ERROR"
)

// All allowed values of LoadBalancerState enum
var AllowedLoadBalancerStateEnumValues = []LoadBalancerState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *LoadBalancerState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoadBalancerState(value)
	for _, existing := range AllowedLoadBalancerStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoadBalancerState", value)
}

// NewLoadBalancerStateFromValue returns a pointer to a valid LoadBalancerState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoadBalancerStateFromValue(v string) (*LoadBalancerState, error) {
	ev := LoadBalancerState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoadBalancerState: valid values are %v", v, AllowedLoadBalancerStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoadBalancerState) IsValid() bool {
	for _, existing := range AllowedLoadBalancerStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoadBalancerState value
func (v LoadBalancerState) Ptr() *LoadBalancerState {
	return &v
}

type NullableLoadBalancerState struct {
	value *LoadBalancerState
	isSet bool
}

func (v NullableLoadBalancerState) Get() *LoadBalancerState {
	return v.value
}

func (v *NullableLoadBalancerState) Set(val *LoadBalancerState) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerState) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerState(val *LoadBalancerState) *NullableLoadBalancerState {
	return &NullableLoadBalancerState{value: val, isSet: true}
}

func (v NullableLoadBalancerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
