/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VpcPeeringAvailabilityDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcPeeringAvailabilityDetail{}

// VpcPeeringAvailabilityDetail struct for VpcPeeringAvailabilityDetail
type VpcPeeringAvailabilityDetail struct {
	// Approver VPC Account ID
	ApproverVpcAccountId string `json:"approver_vpc_account_id"`
	// Approver VPC ID
	ApproverVpcId string `json:"approver_vpc_id"`
	// VPC Peering Available
	Available bool `json:"available"`
	// VPC Peering Message
	Message string `json:"message"`
	// Requester VPC Account ID
	RequesterVpcAccountId string `json:"requester_vpc_account_id"`
	// Requester VPC ID
	RequesterVpcId string `json:"requester_vpc_id"`
}

type _VpcPeeringAvailabilityDetail VpcPeeringAvailabilityDetail

// NewVpcPeeringAvailabilityDetail instantiates a new VpcPeeringAvailabilityDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcPeeringAvailabilityDetail(approverVpcAccountId string, approverVpcId string, available bool, message string, requesterVpcAccountId string, requesterVpcId string) *VpcPeeringAvailabilityDetail {
	this := VpcPeeringAvailabilityDetail{}
	this.ApproverVpcAccountId = approverVpcAccountId
	this.ApproverVpcId = approverVpcId
	this.Available = available
	this.Message = message
	this.RequesterVpcAccountId = requesterVpcAccountId
	this.RequesterVpcId = requesterVpcId
	return &this
}

// NewVpcPeeringAvailabilityDetailWithDefaults instantiates a new VpcPeeringAvailabilityDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcPeeringAvailabilityDetailWithDefaults() *VpcPeeringAvailabilityDetail {
	this := VpcPeeringAvailabilityDetail{}
	return &this
}

// GetApproverVpcAccountId returns the ApproverVpcAccountId field value
func (o *VpcPeeringAvailabilityDetail) GetApproverVpcAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApproverVpcAccountId
}

// GetApproverVpcAccountIdOk returns a tuple with the ApproverVpcAccountId field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityDetail) GetApproverVpcAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApproverVpcAccountId, true
}

// SetApproverVpcAccountId sets field value
func (o *VpcPeeringAvailabilityDetail) SetApproverVpcAccountId(v string) {
	o.ApproverVpcAccountId = v
}

// GetApproverVpcId returns the ApproverVpcId field value
func (o *VpcPeeringAvailabilityDetail) GetApproverVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApproverVpcId
}

// GetApproverVpcIdOk returns a tuple with the ApproverVpcId field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityDetail) GetApproverVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApproverVpcId, true
}

// SetApproverVpcId sets field value
func (o *VpcPeeringAvailabilityDetail) SetApproverVpcId(v string) {
	o.ApproverVpcId = v
}

// GetAvailable returns the Available field value
func (o *VpcPeeringAvailabilityDetail) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityDetail) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *VpcPeeringAvailabilityDetail) SetAvailable(v bool) {
	o.Available = v
}

// GetMessage returns the Message field value
func (o *VpcPeeringAvailabilityDetail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityDetail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *VpcPeeringAvailabilityDetail) SetMessage(v string) {
	o.Message = v
}

// GetRequesterVpcAccountId returns the RequesterVpcAccountId field value
func (o *VpcPeeringAvailabilityDetail) GetRequesterVpcAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequesterVpcAccountId
}

// GetRequesterVpcAccountIdOk returns a tuple with the RequesterVpcAccountId field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityDetail) GetRequesterVpcAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequesterVpcAccountId, true
}

// SetRequesterVpcAccountId sets field value
func (o *VpcPeeringAvailabilityDetail) SetRequesterVpcAccountId(v string) {
	o.RequesterVpcAccountId = v
}

// GetRequesterVpcId returns the RequesterVpcId field value
func (o *VpcPeeringAvailabilityDetail) GetRequesterVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequesterVpcId
}

// GetRequesterVpcIdOk returns a tuple with the RequesterVpcId field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityDetail) GetRequesterVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequesterVpcId, true
}

// SetRequesterVpcId sets field value
func (o *VpcPeeringAvailabilityDetail) SetRequesterVpcId(v string) {
	o.RequesterVpcId = v
}

func (o VpcPeeringAvailabilityDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcPeeringAvailabilityDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["approver_vpc_account_id"] = o.ApproverVpcAccountId
	toSerialize["approver_vpc_id"] = o.ApproverVpcId
	toSerialize["available"] = o.Available
	toSerialize["message"] = o.Message
	toSerialize["requester_vpc_account_id"] = o.RequesterVpcAccountId
	toSerialize["requester_vpc_id"] = o.RequesterVpcId
	return toSerialize, nil
}

func (o *VpcPeeringAvailabilityDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"approver_vpc_account_id",
		"approver_vpc_id",
		"available",
		"message",
		"requester_vpc_account_id",
		"requester_vpc_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcPeeringAvailabilityDetail := _VpcPeeringAvailabilityDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpcPeeringAvailabilityDetail)

	if err != nil {
		return err
	}

	*o = VpcPeeringAvailabilityDetail(varVpcPeeringAvailabilityDetail)

	return err
}

type NullableVpcPeeringAvailabilityDetail struct {
	value *VpcPeeringAvailabilityDetail
	isSet bool
}

func (v NullableVpcPeeringAvailabilityDetail) Get() *VpcPeeringAvailabilityDetail {
	return v.value
}

func (v *NullableVpcPeeringAvailabilityDetail) Set(val *VpcPeeringAvailabilityDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeeringAvailabilityDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeeringAvailabilityDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeeringAvailabilityDetail(val *VpcPeeringAvailabilityDetail) *NullableVpcPeeringAvailabilityDetail {
	return &NullableVpcPeeringAvailabilityDetail{value: val, isSet: true}
}

func (v NullableVpcPeeringAvailabilityDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeeringAvailabilityDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
