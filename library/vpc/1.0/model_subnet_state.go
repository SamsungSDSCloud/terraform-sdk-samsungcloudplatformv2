/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// SubnetState the model 'SubnetState'
type SubnetState string

// List of SubnetState
const (
	SUBNETSTATE_CREATING SubnetState = "CREATING"
	SUBNETSTATE_ACTIVE   SubnetState = "ACTIVE"
	SUBNETSTATE_DELETING SubnetState = "DELETING"
	SUBNETSTATE_DELETED  SubnetState = "DELETED"
	SUBNETSTATE_ERROR    SubnetState = "ERROR"
)

// All allowed values of SubnetState enum
var AllowedSubnetStateEnumValues = []SubnetState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *SubnetState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubnetState(value)
	for _, existing := range AllowedSubnetStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubnetState", value)
}

// NewSubnetStateFromValue returns a pointer to a valid SubnetState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubnetStateFromValue(v string) (*SubnetState, error) {
	ev := SubnetState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubnetState: valid values are %v", v, AllowedSubnetStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubnetState) IsValid() bool {
	for _, existing := range AllowedSubnetStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubnetState value
func (v SubnetState) Ptr() *SubnetState {
	return &v
}

type NullableSubnetState struct {
	value *SubnetState
	isSet bool
}

func (v NullableSubnetState) Get() *SubnetState {
	return v.value
}

func (v *NullableSubnetState) Set(val *SubnetState) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetState) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetState(val *SubnetState) *NullableSubnetState {
	return &NullableSubnetState{value: val, isSet: true}
}

func (v NullableSubnetState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
