/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrivateNatCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNatCreateRequest{}

// PrivateNatCreateRequest struct for PrivateNatCreateRequest
type PrivateNatCreateRequest struct {
	// Private NAT IP range
	Cidr string `json:"cidr"`
	// Description
	Description *string `json:"description,omitempty"`
	// Direct Connect ID
	DirectConnectId string `json:"direct_connect_id"`
	// Private NAT Name
	Name string `json:"name"`
	// Tag List
	Tags []Tag `json:"tags,omitempty"`
}

type _PrivateNatCreateRequest PrivateNatCreateRequest

// NewPrivateNatCreateRequest instantiates a new PrivateNatCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNatCreateRequest(cidr string, directConnectId string, name string) *PrivateNatCreateRequest {
	this := PrivateNatCreateRequest{}
	this.Cidr = cidr
	var description string = ""
	this.Description = &description
	this.DirectConnectId = directConnectId
	this.Name = name
	return &this
}

// NewPrivateNatCreateRequestWithDefaults instantiates a new PrivateNatCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNatCreateRequestWithDefaults() *PrivateNatCreateRequest {
	this := PrivateNatCreateRequest{}
	var description string = ""
	this.Description = &description
	return &this
}

// GetCidr returns the Cidr field value
func (o *PrivateNatCreateRequest) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCreateRequest) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *PrivateNatCreateRequest) SetCidr(v string) {
	o.Cidr = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PrivateNatCreateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateNatCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PrivateNatCreateRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PrivateNatCreateRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDirectConnectId returns the DirectConnectId field value
func (o *PrivateNatCreateRequest) GetDirectConnectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DirectConnectId
}

// GetDirectConnectIdOk returns a tuple with the DirectConnectId field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCreateRequest) GetDirectConnectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirectConnectId, true
}

// SetDirectConnectId sets field value
func (o *PrivateNatCreateRequest) SetDirectConnectId(v string) {
	o.DirectConnectId = v
}

// GetName returns the Name field value
func (o *PrivateNatCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PrivateNatCreateRequest) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PrivateNatCreateRequest) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateNatCreateRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PrivateNatCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *PrivateNatCreateRequest) SetTags(v []Tag) {
	o.Tags = v
}

func (o PrivateNatCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNatCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cidr"] = o.Cidr
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["direct_connect_id"] = o.DirectConnectId
	toSerialize["name"] = o.Name
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *PrivateNatCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidr",
		"direct_connect_id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateNatCreateRequest := _PrivateNatCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrivateNatCreateRequest)

	if err != nil {
		return err
	}

	*o = PrivateNatCreateRequest(varPrivateNatCreateRequest)

	return err
}

type NullablePrivateNatCreateRequest struct {
	value *PrivateNatCreateRequest
	isSet bool
}

func (v NullablePrivateNatCreateRequest) Get() *PrivateNatCreateRequest {
	return v.value
}

func (v *NullablePrivateNatCreateRequest) Set(val *PrivateNatCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNatCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNatCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNatCreateRequest(val *PrivateNatCreateRequest) *NullablePrivateNatCreateRequest {
	return &NullablePrivateNatCreateRequest{value: val, isSet: true}
}

func (v NullablePrivateNatCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNatCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
