/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// Type Subnet Type
type Type struct {
	SubnetType        *SubnetType
	ArrayOfSubnetType *[]SubnetType
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Type) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SubnetType
	err = json.Unmarshal(data, &dst.SubnetType)
	if err == nil {
		jsonSubnetType, _ := json.Marshal(dst.SubnetType)
		if string(jsonSubnetType) == "{}" { // empty struct
			dst.SubnetType = nil
		} else {
			return nil // data stored in dst.SubnetType, return on the first match
		}
	} else {
		dst.SubnetType = nil
	}

	// try to unmarshal JSON data into ArrayOfSubnetType
	err = json.Unmarshal(data, &dst.ArrayOfSubnetType)
	if err == nil {
		jsonArrayOfSubnetType, _ := json.Marshal(dst.ArrayOfSubnetType)
		if string(jsonArrayOfSubnetType) == "{}" { // empty struct
			dst.ArrayOfSubnetType = nil
		} else {
			return nil // data stored in dst.ArrayOfSubnetType, return on the first match
		}
	} else {
		dst.ArrayOfSubnetType = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Type)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Type) MarshalJSON() ([]byte, error) {
	if src.SubnetType != nil {
		return json.Marshal(&src.SubnetType)
	}

	if src.ArrayOfSubnetType != nil {
		return json.Marshal(&src.ArrayOfSubnetType)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableType struct {
	value *Type
	isSet bool
}

func (v NullableType) Get() *Type {
	return v.value
}

func (v *NullableType) Set(val *Type) {
	v.value = val
	v.isSet = true
}

func (v NullableType) IsSet() bool {
	return v.isSet
}

func (v *NullableType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableType(val *Type) *NullableType {
	return &NullableType{value: val, isSet: true}
}

func (v NullableType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
