/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1TransitGatewayVpcConnectionApiAPIService VpcV1TransitGatewayVpcConnectionApiAPI service
type VpcV1TransitGatewayVpcConnectionApiAPIService service

type VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest struct {
	ctx                                      context.Context
	ApiService                               *VpcV1TransitGatewayVpcConnectionApiAPIService
	transitGatewayId                         string
	transitGatewayVpcConnectionCreateRequest *TransitGatewayVpcConnectionCreateRequest
}

func (r VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest) TransitGatewayVpcConnectionCreateRequest(transitGatewayVpcConnectionCreateRequest TransitGatewayVpcConnectionCreateRequest) VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest {
	r.transitGatewayVpcConnectionCreateRequest = &transitGatewayVpcConnectionCreateRequest
	return r
}

func (r VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest) Execute() (*TransitGatewayVpcConnectionShowResponse, *http.Response, error) {
	return r.ApiService.CreateTransitGatewayVpcConnectionExecute(r)
}

/*
CreateTransitGatewayVpcConnection Create Transit Gateway VPC Connection

Create Transit Gateway VPC Connection.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest
*/
func (a *VpcV1TransitGatewayVpcConnectionApiAPIService) CreateTransitGatewayVpcConnection(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest {
	return VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
//
//	@return TransitGatewayVpcConnectionShowResponse
func (a *VpcV1TransitGatewayVpcConnectionApiAPIService) CreateTransitGatewayVpcConnectionExecute(r VpcV1TransitGatewayVpcConnectionApiAPICreateTransitGatewayVpcConnectionRequest) (*TransitGatewayVpcConnectionShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayVpcConnectionShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}/vpc-connections"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transitGatewayVpcConnectionCreateRequest == nil {
		return localVarReturnValue, nil, reportError("transitGatewayVpcConnectionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transitGatewayVpcConnectionCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1TransitGatewayVpcConnectionApiAPIDeleteTransitGatewayVpcConnectionRequest struct {
	ctx              context.Context
	ApiService       *VpcV1TransitGatewayVpcConnectionApiAPIService
	transitGatewayId string
	vpcConnectionId  string
}

func (r VpcV1TransitGatewayVpcConnectionApiAPIDeleteTransitGatewayVpcConnectionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTransitGatewayVpcConnectionExecute(r)
}

/*
DeleteTransitGatewayVpcConnection Delete Transit Gateway VPC Connection

Delete Transit Gateway VPC Connection.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@param vpcConnectionId Transit Gateway VPC Connection ID
	@return VpcV1TransitGatewayVpcConnectionApiAPIDeleteTransitGatewayVpcConnectionRequest
*/
func (a *VpcV1TransitGatewayVpcConnectionApiAPIService) DeleteTransitGatewayVpcConnection(ctx context.Context, transitGatewayId string, vpcConnectionId string) VpcV1TransitGatewayVpcConnectionApiAPIDeleteTransitGatewayVpcConnectionRequest {
	return VpcV1TransitGatewayVpcConnectionApiAPIDeleteTransitGatewayVpcConnectionRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
		vpcConnectionId:  vpcConnectionId,
	}
}

// Execute executes the request
func (a *VpcV1TransitGatewayVpcConnectionApiAPIService) DeleteTransitGatewayVpcConnectionExecute(r VpcV1TransitGatewayVpcConnectionApiAPIDeleteTransitGatewayVpcConnectionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}/vpc-connections/{vpc_connection_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_connection_id"+"}", url.PathEscape(parameterValueToString(r.vpcConnectionId, "vpcConnectionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest struct {
	ctx              context.Context
	ApiService       *VpcV1TransitGatewayVpcConnectionApiAPIService
	transitGatewayId string
	size             *int32
	page             *int32
	sort             *string
	id               *string
	vpcId            *string
	vpcName          *string
	state            *TransitGatewayVpcConnectionState
}

// size
func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) Size(size int32) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	r.size = &size
	return r
}

// page
func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) Page(page int32) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	r.page = &page
	return r
}

// sort
func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) Sort(sort string) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	r.sort = &sort
	return r
}

// Transit Gateway VPC Connection ID
func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) Id(id string) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	r.id = &id
	return r
}

// VPC Id
func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) VpcId(vpcId string) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Name
func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) VpcName(vpcName string) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	r.vpcName = &vpcName
	return r
}

// State
func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) State(state TransitGatewayVpcConnectionState) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	r.state = &state
	return r
}

func (r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) Execute() (*TransitGatewayVpcConnectionListResponse, *http.Response, error) {
	return r.ApiService.ListTransitGatewayVpcConnectionsExecute(r)
}

/*
ListTransitGatewayVpcConnections List Transit Gateway VPC Connections

Get Transit Gateway VPC Connection list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest
*/
func (a *VpcV1TransitGatewayVpcConnectionApiAPIService) ListTransitGatewayVpcConnections(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest {
	return VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
//
//	@return TransitGatewayVpcConnectionListResponse
func (a *VpcV1TransitGatewayVpcConnectionApiAPIService) ListTransitGatewayVpcConnectionsExecute(r VpcV1TransitGatewayVpcConnectionApiAPIListTransitGatewayVpcConnectionsRequest) (*TransitGatewayVpcConnectionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayVpcConnectionListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}/vpc-connections"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
