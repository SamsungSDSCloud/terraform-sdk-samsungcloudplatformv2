/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1PrivateNatApiAPIService VpcV1PrivateNatApiAPI service
type VpcV1PrivateNatApiAPIService service

type VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest struct {
	ctx             context.Context
	ApiService      *VpcV1PrivateNatApiAPIService
	directConnectId *string
	cidr            *string
}

// Direct Connect ID
func (r VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest) DirectConnectId(directConnectId string) VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest {
	r.directConnectId = &directConnectId
	return r
}

// Private NAT IP range
func (r VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest) Cidr(cidr string) VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest {
	r.cidr = &cidr
	return r
}

func (r VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest) Execute() (*PrivateNatCidrAvailabilityShowResponse, *http.Response, error) {
	return r.ApiService.CheckPrivateNatCidrAvailabilitiesExecute(r)
}

/*
CheckPrivateNatCidrAvailabilities Check Private NAT CIDR availabilities

check Private NAT CIDR availabilities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest
*/
func (a *VpcV1PrivateNatApiAPIService) CheckPrivateNatCidrAvailabilities(ctx context.Context) VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest {
	return VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrivateNatCidrAvailabilityShowResponse
func (a *VpcV1PrivateNatApiAPIService) CheckPrivateNatCidrAvailabilitiesExecute(r VpcV1PrivateNatApiAPICheckPrivateNatCidrAvailabilitiesRequest) (*PrivateNatCidrAvailabilityShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivateNatCidrAvailabilityShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats/private-nat-cidr-availabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.directConnectId == nil {
		return localVarReturnValue, nil, reportError("directConnectId is required and must be specified")
	}
	if r.cidr == nil {
		return localVarReturnValue, nil, reportError("cidr is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "direct_connect_id", r.directConnectId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "cidr", r.cidr, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PrivateNatApiAPICreatePrivateNatRequest struct {
	ctx                     context.Context
	ApiService              *VpcV1PrivateNatApiAPIService
	privateNatCreateRequest *PrivateNatCreateRequest
}

func (r VpcV1PrivateNatApiAPICreatePrivateNatRequest) PrivateNatCreateRequest(privateNatCreateRequest PrivateNatCreateRequest) VpcV1PrivateNatApiAPICreatePrivateNatRequest {
	r.privateNatCreateRequest = &privateNatCreateRequest
	return r
}

func (r VpcV1PrivateNatApiAPICreatePrivateNatRequest) Execute() (*PrivateNatShowResponse, *http.Response, error) {
	return r.ApiService.CreatePrivateNatExecute(r)
}

/*
CreatePrivateNat Create Private NAT

Create Private NAT.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1PrivateNatApiAPICreatePrivateNatRequest
*/
func (a *VpcV1PrivateNatApiAPIService) CreatePrivateNat(ctx context.Context) VpcV1PrivateNatApiAPICreatePrivateNatRequest {
	return VpcV1PrivateNatApiAPICreatePrivateNatRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrivateNatShowResponse
func (a *VpcV1PrivateNatApiAPIService) CreatePrivateNatExecute(r VpcV1PrivateNatApiAPICreatePrivateNatRequest) (*PrivateNatShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivateNatShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.privateNatCreateRequest == nil {
		return localVarReturnValue, nil, reportError("privateNatCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.privateNatCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PrivateNatApiAPIDeletePrivateNatRequest struct {
	ctx          context.Context
	ApiService   *VpcV1PrivateNatApiAPIService
	privateNatId string
}

func (r VpcV1PrivateNatApiAPIDeletePrivateNatRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePrivateNatExecute(r)
}

/*
DeletePrivateNat Delete Private NAT

Delete Private NAT.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param privateNatId Private NAT ID
	@return VpcV1PrivateNatApiAPIDeletePrivateNatRequest
*/
func (a *VpcV1PrivateNatApiAPIService) DeletePrivateNat(ctx context.Context, privateNatId string) VpcV1PrivateNatApiAPIDeletePrivateNatRequest {
	return VpcV1PrivateNatApiAPIDeletePrivateNatRequest{
		ApiService:   a,
		ctx:          ctx,
		privateNatId: privateNatId,
	}
}

// Execute executes the request
func (a *VpcV1PrivateNatApiAPIService) DeletePrivateNatExecute(r VpcV1PrivateNatApiAPIDeletePrivateNatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats/{private_nat_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"private_nat_id"+"}", url.PathEscape(parameterValueToString(r.privateNatId, "privateNatId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1PrivateNatApiAPIListPrivateNatsRequest struct {
	ctx               context.Context
	ApiService        *VpcV1PrivateNatApiAPIService
	size              *int32
	page              *int32
	sort              *string
	name              *string
	cidr              *string
	vpcId             *string
	vpcName           *string
	directConnectId   *string
	directConnectName *string
	state             *PrivateNatState
}

// size
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) Size(size int32) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.size = &size
	return r
}

// page
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) Page(page int32) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.page = &page
	return r
}

// sort
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) Sort(sort string) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.sort = &sort
	return r
}

// Private NAT Name
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) Name(name string) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.name = &name
	return r
}

// Private NAT IP range
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) Cidr(cidr string) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.cidr = &cidr
	return r
}

// VPC Id
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) VpcId(vpcId string) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Name
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) VpcName(vpcName string) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.vpcName = &vpcName
	return r
}

// Direct Connect ID
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) DirectConnectId(directConnectId string) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.directConnectId = &directConnectId
	return r
}

// Direct Connect Name
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) DirectConnectName(directConnectName string) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.directConnectName = &directConnectName
	return r
}

// Private NAT State
func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) State(state PrivateNatState) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	r.state = &state
	return r
}

func (r VpcV1PrivateNatApiAPIListPrivateNatsRequest) Execute() (*PrivateNatListResponse, *http.Response, error) {
	return r.ApiService.ListPrivateNatsExecute(r)
}

/*
ListPrivateNats List Private NAT

Get Private NAT list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1PrivateNatApiAPIListPrivateNatsRequest
*/
func (a *VpcV1PrivateNatApiAPIService) ListPrivateNats(ctx context.Context) VpcV1PrivateNatApiAPIListPrivateNatsRequest {
	return VpcV1PrivateNatApiAPIListPrivateNatsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PrivateNatListResponse
func (a *VpcV1PrivateNatApiAPIService) ListPrivateNatsExecute(r VpcV1PrivateNatApiAPIListPrivateNatsRequest) (*PrivateNatListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivateNatListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.cidr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cidr", r.cidr, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	if r.directConnectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direct_connect_id", r.directConnectId, "form", "")
	}
	if r.directConnectName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direct_connect_name", r.directConnectName, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PrivateNatApiAPISetPrivateNatRequest struct {
	ctx                  context.Context
	ApiService           *VpcV1PrivateNatApiAPIService
	privateNatId         string
	privateNatSetRequest *PrivateNatSetRequest
}

func (r VpcV1PrivateNatApiAPISetPrivateNatRequest) PrivateNatSetRequest(privateNatSetRequest PrivateNatSetRequest) VpcV1PrivateNatApiAPISetPrivateNatRequest {
	r.privateNatSetRequest = &privateNatSetRequest
	return r
}

func (r VpcV1PrivateNatApiAPISetPrivateNatRequest) Execute() (*PrivateNatShowResponse, *http.Response, error) {
	return r.ApiService.SetPrivateNatExecute(r)
}

/*
SetPrivateNat Set Private NAT

Set Private NAT.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param privateNatId Private NAT ID
	@return VpcV1PrivateNatApiAPISetPrivateNatRequest
*/
func (a *VpcV1PrivateNatApiAPIService) SetPrivateNat(ctx context.Context, privateNatId string) VpcV1PrivateNatApiAPISetPrivateNatRequest {
	return VpcV1PrivateNatApiAPISetPrivateNatRequest{
		ApiService:   a,
		ctx:          ctx,
		privateNatId: privateNatId,
	}
}

// Execute executes the request
//
//	@return PrivateNatShowResponse
func (a *VpcV1PrivateNatApiAPIService) SetPrivateNatExecute(r VpcV1PrivateNatApiAPISetPrivateNatRequest) (*PrivateNatShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivateNatShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats/{private_nat_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"private_nat_id"+"}", url.PathEscape(parameterValueToString(r.privateNatId, "privateNatId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.privateNatSetRequest == nil {
		return localVarReturnValue, nil, reportError("privateNatSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.privateNatSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PrivateNatApiAPIShowPrivateNatRequest struct {
	ctx          context.Context
	ApiService   *VpcV1PrivateNatApiAPIService
	privateNatId string
}

func (r VpcV1PrivateNatApiAPIShowPrivateNatRequest) Execute() (*PrivateNatShowResponse, *http.Response, error) {
	return r.ApiService.ShowPrivateNatExecute(r)
}

/*
ShowPrivateNat Show Private NAT

Show Private NAT.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param privateNatId Private NAT ID
	@return VpcV1PrivateNatApiAPIShowPrivateNatRequest
*/
func (a *VpcV1PrivateNatApiAPIService) ShowPrivateNat(ctx context.Context, privateNatId string) VpcV1PrivateNatApiAPIShowPrivateNatRequest {
	return VpcV1PrivateNatApiAPIShowPrivateNatRequest{
		ApiService:   a,
		ctx:          ctx,
		privateNatId: privateNatId,
	}
}

// Execute executes the request
//
//	@return PrivateNatShowResponse
func (a *VpcV1PrivateNatApiAPIService) ShowPrivateNatExecute(r VpcV1PrivateNatApiAPIShowPrivateNatRequest) (*PrivateNatShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivateNatShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats/{private_nat_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"private_nat_id"+"}", url.PathEscape(parameterValueToString(r.privateNatId, "privateNatId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
