/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// VpcEndpointState the model 'VpcEndpointState'
type VpcEndpointState string

// List of VpcEndpointState
const (
	VPCENDPOINTSTATE_CREATING VpcEndpointState = "CREATING"
	VPCENDPOINTSTATE_ACTIVE   VpcEndpointState = "ACTIVE"
	VPCENDPOINTSTATE_DELETING VpcEndpointState = "DELETING"
	VPCENDPOINTSTATE_DELETED  VpcEndpointState = "DELETED"
	VPCENDPOINTSTATE_ERROR    VpcEndpointState = "ERROR"
)

// All allowed values of VpcEndpointState enum
var AllowedVpcEndpointStateEnumValues = []VpcEndpointState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *VpcEndpointState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpcEndpointState(value)
	for _, existing := range AllowedVpcEndpointStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpcEndpointState", value)
}

// NewVpcEndpointStateFromValue returns a pointer to a valid VpcEndpointState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpcEndpointStateFromValue(v string) (*VpcEndpointState, error) {
	ev := VpcEndpointState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpcEndpointState: valid values are %v", v, AllowedVpcEndpointStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpcEndpointState) IsValid() bool {
	for _, existing := range AllowedVpcEndpointStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpcEndpointState value
func (v VpcEndpointState) Ptr() *VpcEndpointState {
	return &v
}

type NullableVpcEndpointState struct {
	value *VpcEndpointState
	isSet bool
}

func (v NullableVpcEndpointState) Get() *VpcEndpointState {
	return v.value
}

func (v *NullableVpcEndpointState) Set(val *VpcEndpointState) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcEndpointState) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcEndpointState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcEndpointState(val *VpcEndpointState) *NullableVpcEndpointState {
	return &NullableVpcEndpointState{value: val, isSet: true}
}

func (v NullableVpcEndpointState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcEndpointState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
