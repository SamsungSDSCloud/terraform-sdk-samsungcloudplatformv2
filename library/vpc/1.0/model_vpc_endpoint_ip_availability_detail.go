/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VpcEndpointIpAvailabilityDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcEndpointIpAvailabilityDetail{}

// VpcEndpointIpAvailabilityDetail struct for VpcEndpointIpAvailabilityDetail
type VpcEndpointIpAvailabilityDetail struct {
	// Availability of Endpoint IP Address
	Available bool `json:"available"`
	// VPC Endpoint IP Address
	EndpointIpAddress string `json:"endpoint_ip_address"`
	// Vpc Endpoint Message
	Message string `json:"message"`
	// Subnet Id
	SubnetId string `json:"subnet_id"`
}

type _VpcEndpointIpAvailabilityDetail VpcEndpointIpAvailabilityDetail

// NewVpcEndpointIpAvailabilityDetail instantiates a new VpcEndpointIpAvailabilityDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcEndpointIpAvailabilityDetail(available bool, endpointIpAddress string, message string, subnetId string) *VpcEndpointIpAvailabilityDetail {
	this := VpcEndpointIpAvailabilityDetail{}
	this.Available = available
	this.EndpointIpAddress = endpointIpAddress
	this.Message = message
	this.SubnetId = subnetId
	return &this
}

// NewVpcEndpointIpAvailabilityDetailWithDefaults instantiates a new VpcEndpointIpAvailabilityDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcEndpointIpAvailabilityDetailWithDefaults() *VpcEndpointIpAvailabilityDetail {
	this := VpcEndpointIpAvailabilityDetail{}
	return &this
}

// GetAvailable returns the Available field value
func (o *VpcEndpointIpAvailabilityDetail) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointIpAvailabilityDetail) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *VpcEndpointIpAvailabilityDetail) SetAvailable(v bool) {
	o.Available = v
}

// GetEndpointIpAddress returns the EndpointIpAddress field value
func (o *VpcEndpointIpAvailabilityDetail) GetEndpointIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndpointIpAddress
}

// GetEndpointIpAddressOk returns a tuple with the EndpointIpAddress field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointIpAvailabilityDetail) GetEndpointIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndpointIpAddress, true
}

// SetEndpointIpAddress sets field value
func (o *VpcEndpointIpAvailabilityDetail) SetEndpointIpAddress(v string) {
	o.EndpointIpAddress = v
}

// GetMessage returns the Message field value
func (o *VpcEndpointIpAvailabilityDetail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointIpAvailabilityDetail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *VpcEndpointIpAvailabilityDetail) SetMessage(v string) {
	o.Message = v
}

// GetSubnetId returns the SubnetId field value
func (o *VpcEndpointIpAvailabilityDetail) GetSubnetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointIpAvailabilityDetail) GetSubnetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetId, true
}

// SetSubnetId sets field value
func (o *VpcEndpointIpAvailabilityDetail) SetSubnetId(v string) {
	o.SubnetId = v
}

func (o VpcEndpointIpAvailabilityDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcEndpointIpAvailabilityDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available"] = o.Available
	toSerialize["endpoint_ip_address"] = o.EndpointIpAddress
	toSerialize["message"] = o.Message
	toSerialize["subnet_id"] = o.SubnetId
	return toSerialize, nil
}

func (o *VpcEndpointIpAvailabilityDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available",
		"endpoint_ip_address",
		"message",
		"subnet_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcEndpointIpAvailabilityDetail := _VpcEndpointIpAvailabilityDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpcEndpointIpAvailabilityDetail)

	if err != nil {
		return err
	}

	*o = VpcEndpointIpAvailabilityDetail(varVpcEndpointIpAvailabilityDetail)

	return err
}

type NullableVpcEndpointIpAvailabilityDetail struct {
	value *VpcEndpointIpAvailabilityDetail
	isSet bool
}

func (v NullableVpcEndpointIpAvailabilityDetail) Get() *VpcEndpointIpAvailabilityDetail {
	return v.value
}

func (v *NullableVpcEndpointIpAvailabilityDetail) Set(val *VpcEndpointIpAvailabilityDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcEndpointIpAvailabilityDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcEndpointIpAvailabilityDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcEndpointIpAvailabilityDetail(val *VpcEndpointIpAvailabilityDetail) *NullableVpcEndpointIpAvailabilityDetail {
	return &NullableVpcEndpointIpAvailabilityDetail{value: val, isSet: true}
}

func (v NullableVpcEndpointIpAvailabilityDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcEndpointIpAvailabilityDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
