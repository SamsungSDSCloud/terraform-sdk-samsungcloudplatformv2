/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// PrivateNatState the model 'PrivateNatState'
type PrivateNatState string

// List of PrivateNatState
const (
	PRIVATENATSTATE_CREATING PrivateNatState = "CREATING"
	PRIVATENATSTATE_ACTIVE   PrivateNatState = "ACTIVE"
	PRIVATENATSTATE_DELETING PrivateNatState = "DELETING"
	PRIVATENATSTATE_DELETED  PrivateNatState = "DELETED"
	PRIVATENATSTATE_ERROR    PrivateNatState = "ERROR"
)

// All allowed values of PrivateNatState enum
var AllowedPrivateNatStateEnumValues = []PrivateNatState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *PrivateNatState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivateNatState(value)
	for _, existing := range AllowedPrivateNatStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivateNatState", value)
}

// NewPrivateNatStateFromValue returns a pointer to a valid PrivateNatState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivateNatStateFromValue(v string) (*PrivateNatState, error) {
	ev := PrivateNatState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivateNatState: valid values are %v", v, AllowedPrivateNatStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivateNatState) IsValid() bool {
	for _, existing := range AllowedPrivateNatStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrivateNatState value
func (v PrivateNatState) Ptr() *PrivateNatState {
	return &v
}

type NullablePrivateNatState struct {
	value *PrivateNatState
	isSet bool
}

func (v NullablePrivateNatState) Get() *PrivateNatState {
	return v.value
}

func (v *NullablePrivateNatState) Set(val *PrivateNatState) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNatState) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNatState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNatState(val *PrivateNatState) *NullablePrivateNatState {
	return &NullablePrivateNatState{value: val, isSet: true}
}

func (v NullablePrivateNatState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNatState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
