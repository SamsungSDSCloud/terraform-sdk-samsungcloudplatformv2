/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1PublicIpApiAPIService VpcV1PublicIpApiAPI service
type VpcV1PublicIpApiAPIService service

type VpcV1PublicIpApiAPICreatePublicipRequest struct {
	ctx                   context.Context
	ApiService            *VpcV1PublicIpApiAPIService
	publicipCreateRequest *PublicipCreateRequest
}

func (r VpcV1PublicIpApiAPICreatePublicipRequest) PublicipCreateRequest(publicipCreateRequest PublicipCreateRequest) VpcV1PublicIpApiAPICreatePublicipRequest {
	r.publicipCreateRequest = &publicipCreateRequest
	return r
}

func (r VpcV1PublicIpApiAPICreatePublicipRequest) Execute() (*PublicipShowResponse, *http.Response, error) {
	return r.ApiService.CreatePublicipExecute(r)
}

/*
CreatePublicip Create PublicIP

Create PublicIP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1PublicIpApiAPICreatePublicipRequest
*/
func (a *VpcV1PublicIpApiAPIService) CreatePublicip(ctx context.Context) VpcV1PublicIpApiAPICreatePublicipRequest {
	return VpcV1PublicIpApiAPICreatePublicipRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PublicipShowResponse
func (a *VpcV1PublicIpApiAPIService) CreatePublicipExecute(r VpcV1PublicIpApiAPICreatePublicipRequest) (*PublicipShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicipShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/publicips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicipCreateRequest == nil {
		return localVarReturnValue, nil, reportError("publicipCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicipCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PublicIpApiAPIDeletePublicipRequest struct {
	ctx        context.Context
	ApiService *VpcV1PublicIpApiAPIService
	publicipId string
}

func (r VpcV1PublicIpApiAPIDeletePublicipRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePublicipExecute(r)
}

/*
DeletePublicip Delete PublicIP

Delete PublicIP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param publicipId PublicIP ID
	@return VpcV1PublicIpApiAPIDeletePublicipRequest
*/
func (a *VpcV1PublicIpApiAPIService) DeletePublicip(ctx context.Context, publicipId string) VpcV1PublicIpApiAPIDeletePublicipRequest {
	return VpcV1PublicIpApiAPIDeletePublicipRequest{
		ApiService: a,
		ctx:        ctx,
		publicipId: publicipId,
	}
}

// Execute executes the request
func (a *VpcV1PublicIpApiAPIService) DeletePublicipExecute(r VpcV1PublicIpApiAPIDeletePublicipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/publicips/{publicip_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"publicip_id"+"}", url.PathEscape(parameterValueToString(r.publicipId, "publicipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1PublicIpApiAPIListPublicipRequest struct {
	ctx                  context.Context
	ApiService           *VpcV1PublicIpApiAPIService
	withCount            *string
	limit                *int32
	marker               *string
	sort                 *string
	ipAddress            *string
	state                *string
	attachedResourceType *string
	attachedResourceId   *string
	attachedResourceName *string
	vpcId                *string
	type_                *PublicipType
}

// with count
func (r VpcV1PublicIpApiAPIListPublicipRequest) WithCount(withCount string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r VpcV1PublicIpApiAPIListPublicipRequest) Limit(limit int32) VpcV1PublicIpApiAPIListPublicipRequest {
	r.limit = &limit
	return r
}

// marker
func (r VpcV1PublicIpApiAPIListPublicipRequest) Marker(marker string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.marker = &marker
	return r
}

// sort
func (r VpcV1PublicIpApiAPIListPublicipRequest) Sort(sort string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.sort = &sort
	return r
}

// IP Address
func (r VpcV1PublicIpApiAPIListPublicipRequest) IpAddress(ipAddress string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.ipAddress = &ipAddress
	return r
}

// PublicIP State
func (r VpcV1PublicIpApiAPIListPublicipRequest) State(state string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.state = &state
	return r
}

// PublicIP Attached Resource Type
func (r VpcV1PublicIpApiAPIListPublicipRequest) AttachedResourceType(attachedResourceType string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.attachedResourceType = &attachedResourceType
	return r
}

// PublicIP Attached Resource ID
func (r VpcV1PublicIpApiAPIListPublicipRequest) AttachedResourceId(attachedResourceId string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.attachedResourceId = &attachedResourceId
	return r
}

// PublicIP Attached Resource Name
func (r VpcV1PublicIpApiAPIListPublicipRequest) AttachedResourceName(attachedResourceName string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.attachedResourceName = &attachedResourceName
	return r
}

// VPC Id
func (r VpcV1PublicIpApiAPIListPublicipRequest) VpcId(vpcId string) VpcV1PublicIpApiAPIListPublicipRequest {
	r.vpcId = &vpcId
	return r
}

// PublicIP Type
func (r VpcV1PublicIpApiAPIListPublicipRequest) Type_(type_ PublicipType) VpcV1PublicIpApiAPIListPublicipRequest {
	r.type_ = &type_
	return r
}

func (r VpcV1PublicIpApiAPIListPublicipRequest) Execute() (*PublicipListResponse, *http.Response, error) {
	return r.ApiService.ListPublicipExecute(r)
}

/*
ListPublicip List PublicIPs

Get PublicIP list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1PublicIpApiAPIListPublicipRequest
*/
func (a *VpcV1PublicIpApiAPIService) ListPublicip(ctx context.Context) VpcV1PublicIpApiAPIListPublicipRequest {
	return VpcV1PublicIpApiAPIListPublicipRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PublicipListResponse
func (a *VpcV1PublicIpApiAPIService) ListPublicipExecute(r VpcV1PublicIpApiAPIListPublicipRequest) (*PublicipListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicipListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/publicips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_address", r.ipAddress, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.attachedResourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attached_resource_type", r.attachedResourceType, "form", "")
	}
	if r.attachedResourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attached_resource_id", r.attachedResourceId, "form", "")
	}
	if r.attachedResourceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attached_resource_name", r.attachedResourceName, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PublicIpApiAPISetPublicipRequest struct {
	ctx                context.Context
	ApiService         *VpcV1PublicIpApiAPIService
	publicipId         string
	publicipSetRequest *PublicipSetRequest
}

func (r VpcV1PublicIpApiAPISetPublicipRequest) PublicipSetRequest(publicipSetRequest PublicipSetRequest) VpcV1PublicIpApiAPISetPublicipRequest {
	r.publicipSetRequest = &publicipSetRequest
	return r
}

func (r VpcV1PublicIpApiAPISetPublicipRequest) Execute() (*PublicipShowResponse, *http.Response, error) {
	return r.ApiService.SetPublicipExecute(r)
}

/*
SetPublicip Set PublicIP

Set PublicIP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param publicipId PublicIP ID
	@return VpcV1PublicIpApiAPISetPublicipRequest
*/
func (a *VpcV1PublicIpApiAPIService) SetPublicip(ctx context.Context, publicipId string) VpcV1PublicIpApiAPISetPublicipRequest {
	return VpcV1PublicIpApiAPISetPublicipRequest{
		ApiService: a,
		ctx:        ctx,
		publicipId: publicipId,
	}
}

// Execute executes the request
//
//	@return PublicipShowResponse
func (a *VpcV1PublicIpApiAPIService) SetPublicipExecute(r VpcV1PublicIpApiAPISetPublicipRequest) (*PublicipShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicipShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/publicips/{publicip_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"publicip_id"+"}", url.PathEscape(parameterValueToString(r.publicipId, "publicipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.publicipSetRequest == nil {
		return localVarReturnValue, nil, reportError("publicipSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.publicipSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PublicIpApiAPIShowPublicipRequest struct {
	ctx        context.Context
	ApiService *VpcV1PublicIpApiAPIService
	publicipId string
}

func (r VpcV1PublicIpApiAPIShowPublicipRequest) Execute() (*PublicipShowResponse, *http.Response, error) {
	return r.ApiService.ShowPublicipExecute(r)
}

/*
ShowPublicip Show PublicIP

Show PublicIP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param publicipId PublicIP ID
	@return VpcV1PublicIpApiAPIShowPublicipRequest
*/
func (a *VpcV1PublicIpApiAPIService) ShowPublicip(ctx context.Context, publicipId string) VpcV1PublicIpApiAPIShowPublicipRequest {
	return VpcV1PublicIpApiAPIShowPublicipRequest{
		ApiService: a,
		ctx:        ctx,
		publicipId: publicipId,
	}
}

// Execute executes the request
//
//	@return PublicipShowResponse
func (a *VpcV1PublicIpApiAPIService) ShowPublicipExecute(r VpcV1PublicIpApiAPIShowPublicipRequest) (*PublicipShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PublicipShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/publicips/{publicip_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"publicip_id"+"}", url.PathEscape(parameterValueToString(r.publicipId, "publicipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
