/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// VpcEndpointResourceType the model 'VpcEndpointResourceType'
type VpcEndpointResourceType string

// List of VpcEndpointResourceType
const (
	VPCENDPOINTRESOURCETYPE_FS  VpcEndpointResourceType = "FS"
	VPCENDPOINTRESOURCETYPE_OBS VpcEndpointResourceType = "OBS"
	VPCENDPOINTRESOURCETYPE_SCR VpcEndpointResourceType = "SCR"
)

// All allowed values of VpcEndpointResourceType enum
var AllowedVpcEndpointResourceTypeEnumValues = []VpcEndpointResourceType{
	"FS",
	"OBS",
	"SCR",
}

func (v *VpcEndpointResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpcEndpointResourceType(value)
	for _, existing := range AllowedVpcEndpointResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpcEndpointResourceType", value)
}

// NewVpcEndpointResourceTypeFromValue returns a pointer to a valid VpcEndpointResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpcEndpointResourceTypeFromValue(v string) (*VpcEndpointResourceType, error) {
	ev := VpcEndpointResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpcEndpointResourceType: valid values are %v", v, AllowedVpcEndpointResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpcEndpointResourceType) IsValid() bool {
	for _, existing := range AllowedVpcEndpointResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpcEndpointResourceType value
func (v VpcEndpointResourceType) Ptr() *VpcEndpointResourceType {
	return &v
}

type NullableVpcEndpointResourceType struct {
	value *VpcEndpointResourceType
	isSet bool
}

func (v NullableVpcEndpointResourceType) Get() *VpcEndpointResourceType {
	return v.value
}

func (v *NullableVpcEndpointResourceType) Set(val *VpcEndpointResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcEndpointResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcEndpointResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcEndpointResourceType(val *VpcEndpointResourceType) *NullableVpcEndpointResourceType {
	return &NullableVpcEndpointResourceType{value: val, isSet: true}
}

func (v NullableVpcEndpointResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcEndpointResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
