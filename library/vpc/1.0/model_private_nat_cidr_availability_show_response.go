/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrivateNatCidrAvailabilityShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNatCidrAvailabilityShowResponse{}

// PrivateNatCidrAvailabilityShowResponse struct for PrivateNatCidrAvailabilityShowResponse
type PrivateNatCidrAvailabilityShowResponse struct {
	PrivateNatCidrAvailability PrivateNatCidrAvailabilityDetail `json:"private_nat_cidr_availability"`
}

type _PrivateNatCidrAvailabilityShowResponse PrivateNatCidrAvailabilityShowResponse

// NewPrivateNatCidrAvailabilityShowResponse instantiates a new PrivateNatCidrAvailabilityShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNatCidrAvailabilityShowResponse(privateNatCidrAvailability PrivateNatCidrAvailabilityDetail) *PrivateNatCidrAvailabilityShowResponse {
	this := PrivateNatCidrAvailabilityShowResponse{}
	this.PrivateNatCidrAvailability = privateNatCidrAvailability
	return &this
}

// NewPrivateNatCidrAvailabilityShowResponseWithDefaults instantiates a new PrivateNatCidrAvailabilityShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNatCidrAvailabilityShowResponseWithDefaults() *PrivateNatCidrAvailabilityShowResponse {
	this := PrivateNatCidrAvailabilityShowResponse{}
	return &this
}

// GetPrivateNatCidrAvailability returns the PrivateNatCidrAvailability field value
func (o *PrivateNatCidrAvailabilityShowResponse) GetPrivateNatCidrAvailability() PrivateNatCidrAvailabilityDetail {
	if o == nil {
		var ret PrivateNatCidrAvailabilityDetail
		return ret
	}

	return o.PrivateNatCidrAvailability
}

// GetPrivateNatCidrAvailabilityOk returns a tuple with the PrivateNatCidrAvailability field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCidrAvailabilityShowResponse) GetPrivateNatCidrAvailabilityOk() (*PrivateNatCidrAvailabilityDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateNatCidrAvailability, true
}

// SetPrivateNatCidrAvailability sets field value
func (o *PrivateNatCidrAvailabilityShowResponse) SetPrivateNatCidrAvailability(v PrivateNatCidrAvailabilityDetail) {
	o.PrivateNatCidrAvailability = v
}

func (o PrivateNatCidrAvailabilityShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNatCidrAvailabilityShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["private_nat_cidr_availability"] = o.PrivateNatCidrAvailability
	return toSerialize, nil
}

func (o *PrivateNatCidrAvailabilityShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"private_nat_cidr_availability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateNatCidrAvailabilityShowResponse := _PrivateNatCidrAvailabilityShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrivateNatCidrAvailabilityShowResponse)

	if err != nil {
		return err
	}

	*o = PrivateNatCidrAvailabilityShowResponse(varPrivateNatCidrAvailabilityShowResponse)

	return err
}

type NullablePrivateNatCidrAvailabilityShowResponse struct {
	value *PrivateNatCidrAvailabilityShowResponse
	isSet bool
}

func (v NullablePrivateNatCidrAvailabilityShowResponse) Get() *PrivateNatCidrAvailabilityShowResponse {
	return v.value
}

func (v *NullablePrivateNatCidrAvailabilityShowResponse) Set(val *PrivateNatCidrAvailabilityShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNatCidrAvailabilityShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNatCidrAvailabilityShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNatCidrAvailabilityShowResponse(val *PrivateNatCidrAvailabilityShowResponse) *NullablePrivateNatCidrAvailabilityShowResponse {
	return &NullablePrivateNatCidrAvailabilityShowResponse{value: val, isSet: true}
}

func (v NullablePrivateNatCidrAvailabilityShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNatCidrAvailabilityShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
