/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// InternetGatewayState the model 'InternetGatewayState'
type InternetGatewayState string

// List of InternetGatewayState
const (
	INTERNETGATEWAYSTATE_CREATING InternetGatewayState = "CREATING"
	INTERNETGATEWAYSTATE_ACTIVE   InternetGatewayState = "ACTIVE"
	INTERNETGATEWAYSTATE_DELETING InternetGatewayState = "DELETING"
	INTERNETGATEWAYSTATE_DELETED  InternetGatewayState = "DELETED"
	INTERNETGATEWAYSTATE_ERROR    InternetGatewayState = "ERROR"
)

// All allowed values of InternetGatewayState enum
var AllowedInternetGatewayStateEnumValues = []InternetGatewayState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
}

func (v *InternetGatewayState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InternetGatewayState(value)
	for _, existing := range AllowedInternetGatewayStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InternetGatewayState", value)
}

// NewInternetGatewayStateFromValue returns a pointer to a valid InternetGatewayState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInternetGatewayStateFromValue(v string) (*InternetGatewayState, error) {
	ev := InternetGatewayState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InternetGatewayState: valid values are %v", v, AllowedInternetGatewayStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InternetGatewayState) IsValid() bool {
	for _, existing := range AllowedInternetGatewayStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InternetGatewayState value
func (v InternetGatewayState) Ptr() *InternetGatewayState {
	return &v
}

type NullableInternetGatewayState struct {
	value *InternetGatewayState
	isSet bool
}

func (v NullableInternetGatewayState) Get() *InternetGatewayState {
	return v.value
}

func (v *NullableInternetGatewayState) Set(val *InternetGatewayState) {
	v.value = val
	v.isSet = true
}

func (v NullableInternetGatewayState) IsSet() bool {
	return v.isSet
}

func (v *NullableInternetGatewayState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternetGatewayState(val *InternetGatewayState) *NullableInternetGatewayState {
	return &NullableInternetGatewayState{value: val, isSet: true}
}

func (v NullableInternetGatewayState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternetGatewayState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
