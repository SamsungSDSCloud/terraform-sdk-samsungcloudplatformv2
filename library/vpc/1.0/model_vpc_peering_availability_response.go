/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VpcPeeringAvailabilityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcPeeringAvailabilityResponse{}

// VpcPeeringAvailabilityResponse struct for VpcPeeringAvailabilityResponse
type VpcPeeringAvailabilityResponse struct {
	// count
	Count                  int32                          `json:"count"`
	VpcPeeringAvailability []VpcPeeringAvailabilityDetail `json:"vpc_peering_availability"`
}

type _VpcPeeringAvailabilityResponse VpcPeeringAvailabilityResponse

// NewVpcPeeringAvailabilityResponse instantiates a new VpcPeeringAvailabilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcPeeringAvailabilityResponse(count int32, vpcPeeringAvailability []VpcPeeringAvailabilityDetail) *VpcPeeringAvailabilityResponse {
	this := VpcPeeringAvailabilityResponse{}
	this.Count = count
	this.VpcPeeringAvailability = vpcPeeringAvailability
	return &this
}

// NewVpcPeeringAvailabilityResponseWithDefaults instantiates a new VpcPeeringAvailabilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcPeeringAvailabilityResponseWithDefaults() *VpcPeeringAvailabilityResponse {
	this := VpcPeeringAvailabilityResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *VpcPeeringAvailabilityResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *VpcPeeringAvailabilityResponse) SetCount(v int32) {
	o.Count = v
}

// GetVpcPeeringAvailability returns the VpcPeeringAvailability field value
func (o *VpcPeeringAvailabilityResponse) GetVpcPeeringAvailability() []VpcPeeringAvailabilityDetail {
	if o == nil {
		var ret []VpcPeeringAvailabilityDetail
		return ret
	}

	return o.VpcPeeringAvailability
}

// GetVpcPeeringAvailabilityOk returns a tuple with the VpcPeeringAvailability field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringAvailabilityResponse) GetVpcPeeringAvailabilityOk() ([]VpcPeeringAvailabilityDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.VpcPeeringAvailability, true
}

// SetVpcPeeringAvailability sets field value
func (o *VpcPeeringAvailabilityResponse) SetVpcPeeringAvailability(v []VpcPeeringAvailabilityDetail) {
	o.VpcPeeringAvailability = v
}

func (o VpcPeeringAvailabilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcPeeringAvailabilityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["vpc_peering_availability"] = o.VpcPeeringAvailability
	return toSerialize, nil
}

func (o *VpcPeeringAvailabilityResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"vpc_peering_availability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcPeeringAvailabilityResponse := _VpcPeeringAvailabilityResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpcPeeringAvailabilityResponse)

	if err != nil {
		return err
	}

	*o = VpcPeeringAvailabilityResponse(varVpcPeeringAvailabilityResponse)

	return err
}

type NullableVpcPeeringAvailabilityResponse struct {
	value *VpcPeeringAvailabilityResponse
	isSet bool
}

func (v NullableVpcPeeringAvailabilityResponse) Get() *VpcPeeringAvailabilityResponse {
	return v.value
}

func (v *NullableVpcPeeringAvailabilityResponse) Set(val *VpcPeeringAvailabilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeeringAvailabilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeeringAvailabilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeeringAvailabilityResponse(val *VpcPeeringAvailabilityResponse) *NullableVpcPeeringAvailabilityResponse {
	return &NullableVpcPeeringAvailabilityResponse{value: val, isSet: true}
}

func (v NullableVpcPeeringAvailabilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeeringAvailabilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
