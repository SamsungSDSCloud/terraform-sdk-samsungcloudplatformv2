/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubnetShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubnetShowResponse{}

// SubnetShowResponse struct for SubnetShowResponse
type SubnetShowResponse struct {
	Subnet SubnetDetail `json:"subnet"`
}

type _SubnetShowResponse SubnetShowResponse

// NewSubnetShowResponse instantiates a new SubnetShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetShowResponse(subnet SubnetDetail) *SubnetShowResponse {
	this := SubnetShowResponse{}
	this.Subnet = subnet
	return &this
}

// NewSubnetShowResponseWithDefaults instantiates a new SubnetShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetShowResponseWithDefaults() *SubnetShowResponse {
	this := SubnetShowResponse{}
	return &this
}

// GetSubnet returns the Subnet field value
func (o *SubnetShowResponse) GetSubnet() SubnetDetail {
	if o == nil {
		var ret SubnetDetail
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *SubnetShowResponse) GetSubnetOk() (*SubnetDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *SubnetShowResponse) SetSubnet(v SubnetDetail) {
	o.Subnet = v
}

func (o SubnetShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubnetShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnet"] = o.Subnet
	return toSerialize, nil
}

func (o *SubnetShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnetShowResponse := _SubnetShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubnetShowResponse)

	if err != nil {
		return err
	}

	*o = SubnetShowResponse(varSubnetShowResponse)

	return err
}

type NullableSubnetShowResponse struct {
	value *SubnetShowResponse
	isSet bool
}

func (v NullableSubnetShowResponse) Get() *SubnetShowResponse {
	return v.value
}

func (v *NullableSubnetShowResponse) Set(val *SubnetShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetShowResponse(val *SubnetShowResponse) *NullableSubnetShowResponse {
	return &NullableSubnetShowResponse{value: val, isSet: true}
}

func (v NullableSubnetShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
