/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// VpcPeeringAccountType the model 'VpcPeeringAccountType'
type VpcPeeringAccountType string

// List of VpcPeeringAccountType
const (
	VPCPEERINGACCOUNTTYPE_SAME      VpcPeeringAccountType = "SAME"
	VPCPEERINGACCOUNTTYPE_DIFFERENT VpcPeeringAccountType = "DIFFERENT"
)

// All allowed values of VpcPeeringAccountType enum
var AllowedVpcPeeringAccountTypeEnumValues = []VpcPeeringAccountType{
	"SAME",
	"DIFFERENT",
}

func (v *VpcPeeringAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpcPeeringAccountType(value)
	for _, existing := range AllowedVpcPeeringAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpcPeeringAccountType", value)
}

// NewVpcPeeringAccountTypeFromValue returns a pointer to a valid VpcPeeringAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpcPeeringAccountTypeFromValue(v string) (*VpcPeeringAccountType, error) {
	ev := VpcPeeringAccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpcPeeringAccountType: valid values are %v", v, AllowedVpcPeeringAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpcPeeringAccountType) IsValid() bool {
	for _, existing := range AllowedVpcPeeringAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpcPeeringAccountType value
func (v VpcPeeringAccountType) Ptr() *VpcPeeringAccountType {
	return &v
}

type NullableVpcPeeringAccountType struct {
	value *VpcPeeringAccountType
	isSet bool
}

func (v NullableVpcPeeringAccountType) Get() *VpcPeeringAccountType {
	return v.value
}

func (v *NullableVpcPeeringAccountType) Set(val *VpcPeeringAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeeringAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeeringAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeeringAccountType(val *VpcPeeringAccountType) *NullableVpcPeeringAccountType {
	return &NullableVpcPeeringAccountType{value: val, isSet: true}
}

func (v NullableVpcPeeringAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeeringAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
