/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VpcPeeringShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcPeeringShowResponse{}

// VpcPeeringShowResponse struct for VpcPeeringShowResponse
type VpcPeeringShowResponse struct {
	VpcPeering VpcPeering `json:"vpc_peering"`
}

type _VpcPeeringShowResponse VpcPeeringShowResponse

// NewVpcPeeringShowResponse instantiates a new VpcPeeringShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcPeeringShowResponse(vpcPeering VpcPeering) *VpcPeeringShowResponse {
	this := VpcPeeringShowResponse{}
	this.VpcPeering = vpcPeering
	return &this
}

// NewVpcPeeringShowResponseWithDefaults instantiates a new VpcPeeringShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcPeeringShowResponseWithDefaults() *VpcPeeringShowResponse {
	this := VpcPeeringShowResponse{}
	return &this
}

// GetVpcPeering returns the VpcPeering field value
func (o *VpcPeeringShowResponse) GetVpcPeering() VpcPeering {
	if o == nil {
		var ret VpcPeering
		return ret
	}

	return o.VpcPeering
}

// GetVpcPeeringOk returns a tuple with the VpcPeering field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringShowResponse) GetVpcPeeringOk() (*VpcPeering, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcPeering, true
}

// SetVpcPeering sets field value
func (o *VpcPeeringShowResponse) SetVpcPeering(v VpcPeering) {
	o.VpcPeering = v
}

func (o VpcPeeringShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcPeeringShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpc_peering"] = o.VpcPeering
	return toSerialize, nil
}

func (o *VpcPeeringShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpc_peering",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcPeeringShowResponse := _VpcPeeringShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpcPeeringShowResponse)

	if err != nil {
		return err
	}

	*o = VpcPeeringShowResponse(varVpcPeeringShowResponse)

	return err
}

type NullableVpcPeeringShowResponse struct {
	value *VpcPeeringShowResponse
	isSet bool
}

func (v NullableVpcPeeringShowResponse) Get() *VpcPeeringShowResponse {
	return v.value
}

func (v *NullableVpcPeeringShowResponse) Set(val *VpcPeeringShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeeringShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeeringShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeeringShowResponse(val *VpcPeeringShowResponse) *NullableVpcPeeringShowResponse {
	return &NullableVpcPeeringShowResponse{value: val, isSet: true}
}

func (v NullableVpcPeeringShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeeringShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
