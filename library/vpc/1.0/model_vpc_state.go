/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// VpcState the model 'VpcState'
type VpcState string

// List of VpcState
const (
	VPCSTATE_CREATING VpcState = "CREATING"
	VPCSTATE_ACTIVE   VpcState = "ACTIVE"
	VPCSTATE_DELETED  VpcState = "DELETED"
	VPCSTATE_ERROR    VpcState = "ERROR"
)

// All allowed values of VpcState enum
var AllowedVpcStateEnumValues = []VpcState{
	"CREATING",
	"ACTIVE",
	"DELETED",
	"ERROR",
}

func (v *VpcState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpcState(value)
	for _, existing := range AllowedVpcStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpcState", value)
}

// NewVpcStateFromValue returns a pointer to a valid VpcState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpcStateFromValue(v string) (*VpcState, error) {
	ev := VpcState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpcState: valid values are %v", v, AllowedVpcStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpcState) IsValid() bool {
	for _, existing := range AllowedVpcStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpcState value
func (v VpcState) Ptr() *VpcState {
	return &v
}

type NullableVpcState struct {
	value *VpcState
	isSet bool
}

func (v NullableVpcState) Get() *VpcState {
	return v.value
}

func (v *NullableVpcState) Set(val *VpcState) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcState) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcState(val *VpcState) *NullableVpcState {
	return &NullableVpcState{value: val, isSet: true}
}

func (v NullableVpcState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
