/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PublicipShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicipShowResponse{}

// PublicipShowResponse struct for PublicipShowResponse
type PublicipShowResponse struct {
	Publicip Publicip `json:"publicip"`
}

type _PublicipShowResponse PublicipShowResponse

// NewPublicipShowResponse instantiates a new PublicipShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicipShowResponse(publicip Publicip) *PublicipShowResponse {
	this := PublicipShowResponse{}
	this.Publicip = publicip
	return &this
}

// NewPublicipShowResponseWithDefaults instantiates a new PublicipShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicipShowResponseWithDefaults() *PublicipShowResponse {
	this := PublicipShowResponse{}
	return &this
}

// GetPublicip returns the Publicip field value
func (o *PublicipShowResponse) GetPublicip() Publicip {
	if o == nil {
		var ret Publicip
		return ret
	}

	return o.Publicip
}

// GetPublicipOk returns a tuple with the Publicip field value
// and a boolean to check if the value has been set.
func (o *PublicipShowResponse) GetPublicipOk() (*Publicip, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Publicip, true
}

// SetPublicip sets field value
func (o *PublicipShowResponse) SetPublicip(v Publicip) {
	o.Publicip = v
}

func (o PublicipShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicipShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["publicip"] = o.Publicip
	return toSerialize, nil
}

func (o *PublicipShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"publicip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicipShowResponse := _PublicipShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicipShowResponse)

	if err != nil {
		return err
	}

	*o = PublicipShowResponse(varPublicipShowResponse)

	return err
}

type NullablePublicipShowResponse struct {
	value *PublicipShowResponse
	isSet bool
}

func (v NullablePublicipShowResponse) Get() *PublicipShowResponse {
	return v.value
}

func (v *NullablePublicipShowResponse) Set(val *PublicipShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicipShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicipShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicipShowResponse(val *PublicipShowResponse) *NullablePublicipShowResponse {
	return &NullablePublicipShowResponse{value: val, isSet: true}
}

func (v NullablePublicipShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicipShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
