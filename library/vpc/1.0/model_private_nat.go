/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PrivateNat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNat{}

// PrivateNat struct for PrivateNat
type PrivateNat struct {
	// Account ID
	AccountId string `json:"account_id"`
	// Private NAT IP range
	Cidr string `json:"cidr"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Created By
	CreatedBy   string         `json:"created_by"`
	Description NullableString `json:"description,omitempty"`
	// Direct Connect ID
	DirectConnectId   string         `json:"direct_connect_id"`
	DirectConnectName NullableString `json:"direct_connect_name,omitempty"`
	// Private NAT ID
	Id string `json:"id"`
	// Modified At
	ModifiedAt time.Time `json:"modified_at"`
	// Modified By
	ModifiedBy string `json:"modified_by"`
	// Private NAT Name
	Name string `json:"name"`
	// Private NAT State
	State PrivateNatState `json:"state"`
	// VPC Id
	VpcId   string         `json:"vpc_id"`
	VpcName NullableString `json:"vpc_name,omitempty"`
}

type _PrivateNat PrivateNat

// NewPrivateNat instantiates a new PrivateNat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNat(accountId string, cidr string, createdAt time.Time, createdBy string, directConnectId string, id string, modifiedAt time.Time, modifiedBy string, name string, state PrivateNatState, vpcId string) *PrivateNat {
	this := PrivateNat{}
	this.AccountId = accountId
	this.Cidr = cidr
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.DirectConnectId = directConnectId
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.Name = name
	this.State = state
	this.VpcId = vpcId
	return &this
}

// NewPrivateNatWithDefaults instantiates a new PrivateNat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNatWithDefaults() *PrivateNat {
	this := PrivateNat{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *PrivateNat) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *PrivateNat) SetAccountId(v string) {
	o.AccountId = v
}

// GetCidr returns the Cidr field value
func (o *PrivateNat) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *PrivateNat) SetCidr(v string) {
	o.Cidr = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PrivateNat) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PrivateNat) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *PrivateNat) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *PrivateNat) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateNat) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateNat) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PrivateNat) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PrivateNat) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PrivateNat) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PrivateNat) UnsetDescription() {
	o.Description.Unset()
}

// GetDirectConnectId returns the DirectConnectId field value
func (o *PrivateNat) GetDirectConnectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DirectConnectId
}

// GetDirectConnectIdOk returns a tuple with the DirectConnectId field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetDirectConnectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirectConnectId, true
}

// SetDirectConnectId sets field value
func (o *PrivateNat) SetDirectConnectId(v string) {
	o.DirectConnectId = v
}

// GetDirectConnectName returns the DirectConnectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateNat) GetDirectConnectName() string {
	if o == nil || IsNil(o.DirectConnectName.Get()) {
		var ret string
		return ret
	}
	return *o.DirectConnectName.Get()
}

// GetDirectConnectNameOk returns a tuple with the DirectConnectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateNat) GetDirectConnectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectConnectName.Get(), o.DirectConnectName.IsSet()
}

// HasDirectConnectName returns a boolean if a field has been set.
func (o *PrivateNat) HasDirectConnectName() bool {
	if o != nil && o.DirectConnectName.IsSet() {
		return true
	}

	return false
}

// SetDirectConnectName gets a reference to the given NullableString and assigns it to the DirectConnectName field.
func (o *PrivateNat) SetDirectConnectName(v string) {
	o.DirectConnectName.Set(&v)
}

// SetDirectConnectNameNil sets the value for DirectConnectName to be an explicit nil
func (o *PrivateNat) SetDirectConnectNameNil() {
	o.DirectConnectName.Set(nil)
}

// UnsetDirectConnectName ensures that no value is present for DirectConnectName, not even an explicit nil
func (o *PrivateNat) UnsetDirectConnectName() {
	o.DirectConnectName.Unset()
}

// GetId returns the Id field value
func (o *PrivateNat) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PrivateNat) SetId(v string) {
	o.Id = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *PrivateNat) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *PrivateNat) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *PrivateNat) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *PrivateNat) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetName returns the Name field value
func (o *PrivateNat) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PrivateNat) SetName(v string) {
	o.Name = v
}

// GetState returns the State field value
func (o *PrivateNat) GetState() PrivateNatState {
	if o == nil {
		var ret PrivateNatState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetStateOk() (*PrivateNatState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *PrivateNat) SetState(v PrivateNatState) {
	o.State = v
}

// GetVpcId returns the VpcId field value
func (o *PrivateNat) GetVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value
// and a boolean to check if the value has been set.
func (o *PrivateNat) GetVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcId, true
}

// SetVpcId sets field value
func (o *PrivateNat) SetVpcId(v string) {
	o.VpcId = v
}

// GetVpcName returns the VpcName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateNat) GetVpcName() string {
	if o == nil || IsNil(o.VpcName.Get()) {
		var ret string
		return ret
	}
	return *o.VpcName.Get()
}

// GetVpcNameOk returns a tuple with the VpcName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateNat) GetVpcNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VpcName.Get(), o.VpcName.IsSet()
}

// HasVpcName returns a boolean if a field has been set.
func (o *PrivateNat) HasVpcName() bool {
	if o != nil && o.VpcName.IsSet() {
		return true
	}

	return false
}

// SetVpcName gets a reference to the given NullableString and assigns it to the VpcName field.
func (o *PrivateNat) SetVpcName(v string) {
	o.VpcName.Set(&v)
}

// SetVpcNameNil sets the value for VpcName to be an explicit nil
func (o *PrivateNat) SetVpcNameNil() {
	o.VpcName.Set(nil)
}

// UnsetVpcName ensures that no value is present for VpcName, not even an explicit nil
func (o *PrivateNat) UnsetVpcName() {
	o.VpcName.Unset()
}

func (o PrivateNat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["cidr"] = o.Cidr
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["direct_connect_id"] = o.DirectConnectId
	if o.DirectConnectName.IsSet() {
		toSerialize["direct_connect_name"] = o.DirectConnectName.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["name"] = o.Name
	toSerialize["state"] = o.State
	toSerialize["vpc_id"] = o.VpcId
	if o.VpcName.IsSet() {
		toSerialize["vpc_name"] = o.VpcName.Get()
	}
	return toSerialize, nil
}

func (o *PrivateNat) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"cidr",
		"created_at",
		"created_by",
		"direct_connect_id",
		"id",
		"modified_at",
		"modified_by",
		"name",
		"state",
		"vpc_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateNat := _PrivateNat{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrivateNat)

	if err != nil {
		return err
	}

	*o = PrivateNat(varPrivateNat)

	return err
}

type NullablePrivateNat struct {
	value *PrivateNat
	isSet bool
}

func (v NullablePrivateNat) Get() *PrivateNat {
	return v.value
}

func (v *NullablePrivateNat) Set(val *PrivateNat) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNat) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNat(val *PrivateNat) *NullablePrivateNat {
	return &NullablePrivateNat{value: val, isSet: true}
}

func (v NullablePrivateNat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
