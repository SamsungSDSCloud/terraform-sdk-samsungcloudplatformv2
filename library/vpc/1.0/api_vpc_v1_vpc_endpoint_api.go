/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1VpcEndpointApiAPIService VpcV1VpcEndpointApiAPI service
type VpcV1VpcEndpointApiAPIService service

type VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest struct {
	ctx               context.Context
	ApiService        *VpcV1VpcEndpointApiAPIService
	subnetId          *string
	endpointIpAddress *string
}

// Subnet Id
func (r VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest) SubnetId(subnetId string) VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest {
	r.subnetId = &subnetId
	return r
}

// VPC Endpoint IP Address
func (r VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest) EndpointIpAddress(endpointIpAddress string) VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest {
	r.endpointIpAddress = &endpointIpAddress
	return r
}

func (r VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest) Execute() (*VpcEndpointShowIpAvailabilityResponse, *http.Response, error) {
	return r.ApiService.CheckVpcEndpointIpAddressAvailabilitiesExecute(r)
}

/*
CheckVpcEndpointIpAddressAvailabilities Check VPC Endpoint IP Address Availabilities

check VpcEndpoint ip address availabilities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) CheckVpcEndpointIpAddressAvailabilities(ctx context.Context) VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest {
	return VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcEndpointShowIpAvailabilityResponse
func (a *VpcV1VpcEndpointApiAPIService) CheckVpcEndpointIpAddressAvailabilitiesExecute(r VpcV1VpcEndpointApiAPICheckVpcEndpointIpAddressAvailabilitiesRequest) (*VpcEndpointShowIpAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcEndpointShowIpAvailabilityResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints/vpc-endpoint-ip-availabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subnetId == nil {
		return localVarReturnValue, nil, reportError("subnetId is required and must be specified")
	}
	if r.endpointIpAddress == nil {
		return localVarReturnValue, nil, reportError("endpointIpAddress is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_id", r.subnetId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint_ip_address", r.endpointIpAddress, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest struct {
	ctx          context.Context
	ApiService   *VpcV1VpcEndpointApiAPIService
	vpcId        *string
	resourceType *VpcEndpointResourceType
	resourceKey  *string
}

// VPC Id
func (r VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest) VpcId(vpcId string) VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Endpoint Resource Type
func (r VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest) ResourceType(resourceType VpcEndpointResourceType) VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest {
	r.resourceType = &resourceType
	return r
}

// VPC Endpoint Resource Key
func (r VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest) ResourceKey(resourceKey string) VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest {
	r.resourceKey = &resourceKey
	return r
}

func (r VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest) Execute() (*VpcEndpointResourceAvailabilityShowResponse, *http.Response, error) {
	return r.ApiService.CheckVpcEndpointResourceAvailabilitiesExecute(r)
}

/*
CheckVpcEndpointResourceAvailabilities Check VPC Endpoint resource availabilities

check VpcEndpoint resource availabilities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) CheckVpcEndpointResourceAvailabilities(ctx context.Context) VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest {
	return VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcEndpointResourceAvailabilityShowResponse
func (a *VpcV1VpcEndpointApiAPIService) CheckVpcEndpointResourceAvailabilitiesExecute(r VpcV1VpcEndpointApiAPICheckVpcEndpointResourceAvailabilitiesRequest) (*VpcEndpointResourceAvailabilityShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcEndpointResourceAvailabilityShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints/vpc-endpoint-resource-availabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpcId == nil {
		return localVarReturnValue, nil, reportError("vpcId is required and must be specified")
	}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}
	if r.resourceKey == nil {
		return localVarReturnValue, nil, reportError("resourceKey is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_key", r.resourceKey, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcEndpointApiAPICreateVpcEndpointRequest struct {
	ctx                      context.Context
	ApiService               *VpcV1VpcEndpointApiAPIService
	vpcEndpointCreateRequest *VpcEndpointCreateRequest
}

func (r VpcV1VpcEndpointApiAPICreateVpcEndpointRequest) VpcEndpointCreateRequest(vpcEndpointCreateRequest VpcEndpointCreateRequest) VpcV1VpcEndpointApiAPICreateVpcEndpointRequest {
	r.vpcEndpointCreateRequest = &vpcEndpointCreateRequest
	return r
}

func (r VpcV1VpcEndpointApiAPICreateVpcEndpointRequest) Execute() (*VpcEndpointShowResponse, *http.Response, error) {
	return r.ApiService.CreateVpcEndpointExecute(r)
}

/*
CreateVpcEndpoint Create VPC Endpoint

Create VPC Endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcEndpointApiAPICreateVpcEndpointRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) CreateVpcEndpoint(ctx context.Context) VpcV1VpcEndpointApiAPICreateVpcEndpointRequest {
	return VpcV1VpcEndpointApiAPICreateVpcEndpointRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcEndpointShowResponse
func (a *VpcV1VpcEndpointApiAPIService) CreateVpcEndpointExecute(r VpcV1VpcEndpointApiAPICreateVpcEndpointRequest) (*VpcEndpointShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcEndpointShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpcEndpointCreateRequest == nil {
		return localVarReturnValue, nil, reportError("vpcEndpointCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpcEndpointCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcEndpointApiAPIDeleteVpcEndpointRequest struct {
	ctx           context.Context
	ApiService    *VpcV1VpcEndpointApiAPIService
	vpcEndpointId string
}

func (r VpcV1VpcEndpointApiAPIDeleteVpcEndpointRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVpcEndpointExecute(r)
}

/*
DeleteVpcEndpoint Delete VPC Endpoint

Delete VPC Endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcEndpointId VPC Endpoint ID
	@return VpcV1VpcEndpointApiAPIDeleteVpcEndpointRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) DeleteVpcEndpoint(ctx context.Context, vpcEndpointId string) VpcV1VpcEndpointApiAPIDeleteVpcEndpointRequest {
	return VpcV1VpcEndpointApiAPIDeleteVpcEndpointRequest{
		ApiService:    a,
		ctx:           ctx,
		vpcEndpointId: vpcEndpointId,
	}
}

// Execute executes the request
func (a *VpcV1VpcEndpointApiAPIService) DeleteVpcEndpointExecute(r VpcV1VpcEndpointApiAPIDeleteVpcEndpointRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints/{vpc_endpoint_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_endpoint_id"+"}", url.PathEscape(parameterValueToString(r.vpcEndpointId, "vpcEndpointId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest struct {
	ctx          context.Context
	ApiService   *VpcV1VpcEndpointApiAPIService
	resourceType *VpcEndpointResourceType
}

// VPC Endpoint Resource Type
func (r VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest) ResourceType(resourceType VpcEndpointResourceType) VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest {
	r.resourceType = &resourceType
	return r
}

func (r VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest) Execute() (*VpcEndpointConnectableResourceListResponse, *http.Response, error) {
	return r.ApiService.ListVpcEndpointConnectableResourcesExecute(r)
}

/*
ListVpcEndpointConnectableResources List VPC Endpoint Connectable Resources

List VpcEndpoint connectable resources

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) ListVpcEndpointConnectableResources(ctx context.Context) VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest {
	return VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcEndpointConnectableResourceListResponse
func (a *VpcV1VpcEndpointApiAPIService) ListVpcEndpointConnectableResourcesExecute(r VpcV1VpcEndpointApiAPIListVpcEndpointConnectableResourcesRequest) (*VpcEndpointConnectableResourceListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcEndpointConnectableResourceListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints/connectable-resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.resourceType == nil {
		return localVarReturnValue, nil, reportError("resourceType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcEndpointApiAPIListVpcEndpointsRequest struct {
	ctx               context.Context
	ApiService        *VpcV1VpcEndpointApiAPIService
	withCount         *string
	limit             *int32
	marker            *string
	sort              *string
	id                *string
	name              *string
	vpcId             *string
	vpcName           *string
	subnetId          *string
	resourceKey       *string
	resourceType      *VpcEndpointResourceType
	endpointIpAddress *string
	state             *VpcEndpointState
}

// with count
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) WithCount(withCount string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) Limit(limit int32) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.limit = &limit
	return r
}

// marker
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) Marker(marker string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.marker = &marker
	return r
}

// sort
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) Sort(sort string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.sort = &sort
	return r
}

// VPC Endpoint ID
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) Id(id string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.id = &id
	return r
}

// VPC Endpoint Name
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) Name(name string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.name = &name
	return r
}

// VPC Id
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) VpcId(vpcId string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Name
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) VpcName(vpcName string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.vpcName = &vpcName
	return r
}

// Subnet Id
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) SubnetId(subnetId string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.subnetId = &subnetId
	return r
}

// VPC Endpoint Resource Key
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) ResourceKey(resourceKey string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.resourceKey = &resourceKey
	return r
}

// VPC Endpoint Resource Type
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) ResourceType(resourceType VpcEndpointResourceType) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.resourceType = &resourceType
	return r
}

// VPC Endpoint IP Address
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) EndpointIpAddress(endpointIpAddress string) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.endpointIpAddress = &endpointIpAddress
	return r
}

// VPC Endpoint State
func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) State(state VpcEndpointState) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	r.state = &state
	return r
}

func (r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) Execute() (*VpcEndpointListResponse, *http.Response, error) {
	return r.ApiService.ListVpcEndpointsExecute(r)
}

/*
ListVpcEndpoints List VPC Endpoint

Get VPC Endpoint list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcEndpointApiAPIListVpcEndpointsRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) ListVpcEndpoints(ctx context.Context) VpcV1VpcEndpointApiAPIListVpcEndpointsRequest {
	return VpcV1VpcEndpointApiAPIListVpcEndpointsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcEndpointListResponse
func (a *VpcV1VpcEndpointApiAPIService) ListVpcEndpointsExecute(r VpcV1VpcEndpointApiAPIListVpcEndpointsRequest) (*VpcEndpointListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcEndpointListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	if r.subnetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_id", r.subnetId, "form", "")
	}
	if r.resourceKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_key", r.resourceKey, "form", "")
	}
	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "form", "")
	}
	if r.endpointIpAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint_ip_address", r.endpointIpAddress, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcEndpointApiAPISetVpcEndpointRequest struct {
	ctx                   context.Context
	ApiService            *VpcV1VpcEndpointApiAPIService
	vpcEndpointId         string
	vpcEndpointSetRequest *VpcEndpointSetRequest
}

func (r VpcV1VpcEndpointApiAPISetVpcEndpointRequest) VpcEndpointSetRequest(vpcEndpointSetRequest VpcEndpointSetRequest) VpcV1VpcEndpointApiAPISetVpcEndpointRequest {
	r.vpcEndpointSetRequest = &vpcEndpointSetRequest
	return r
}

func (r VpcV1VpcEndpointApiAPISetVpcEndpointRequest) Execute() (*VpcEndpointShowResponse, *http.Response, error) {
	return r.ApiService.SetVpcEndpointExecute(r)
}

/*
SetVpcEndpoint Set VPC Endpoint

Set VPC Endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcEndpointId VPC Endpoint ID
	@return VpcV1VpcEndpointApiAPISetVpcEndpointRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) SetVpcEndpoint(ctx context.Context, vpcEndpointId string) VpcV1VpcEndpointApiAPISetVpcEndpointRequest {
	return VpcV1VpcEndpointApiAPISetVpcEndpointRequest{
		ApiService:    a,
		ctx:           ctx,
		vpcEndpointId: vpcEndpointId,
	}
}

// Execute executes the request
//
//	@return VpcEndpointShowResponse
func (a *VpcV1VpcEndpointApiAPIService) SetVpcEndpointExecute(r VpcV1VpcEndpointApiAPISetVpcEndpointRequest) (*VpcEndpointShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcEndpointShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints/{vpc_endpoint_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_endpoint_id"+"}", url.PathEscape(parameterValueToString(r.vpcEndpointId, "vpcEndpointId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpcEndpointSetRequest == nil {
		return localVarReturnValue, nil, reportError("vpcEndpointSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpcEndpointSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcEndpointApiAPIShowVpcEndpointRequest struct {
	ctx           context.Context
	ApiService    *VpcV1VpcEndpointApiAPIService
	vpcEndpointId string
}

func (r VpcV1VpcEndpointApiAPIShowVpcEndpointRequest) Execute() (*VpcEndpointShowResponse, *http.Response, error) {
	return r.ApiService.ShowVpcEndpointExecute(r)
}

/*
ShowVpcEndpoint Show VPC Endpoint

Show VPC Endpoint.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcEndpointId VPC Endpoint ID
	@return VpcV1VpcEndpointApiAPIShowVpcEndpointRequest
*/
func (a *VpcV1VpcEndpointApiAPIService) ShowVpcEndpoint(ctx context.Context, vpcEndpointId string) VpcV1VpcEndpointApiAPIShowVpcEndpointRequest {
	return VpcV1VpcEndpointApiAPIShowVpcEndpointRequest{
		ApiService:    a,
		ctx:           ctx,
		vpcEndpointId: vpcEndpointId,
	}
}

// Execute executes the request
//
//	@return VpcEndpointShowResponse
func (a *VpcV1VpcEndpointApiAPIService) ShowVpcEndpointExecute(r VpcV1VpcEndpointApiAPIShowVpcEndpointRequest) (*VpcEndpointShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcEndpointShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-endpoints/{vpc_endpoint_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_endpoint_id"+"}", url.PathEscape(parameterValueToString(r.vpcEndpointId, "vpcEndpointId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
