/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// InternetGatewayType the model 'InternetGatewayType'
type InternetGatewayType string

// List of InternetGatewayType
const (
	INTERNETGATEWAYTYPE_IGW  InternetGatewayType = "IGW"
	INTERNETGATEWAYTYPE_GGW  InternetGatewayType = "GGW"
	INTERNETGATEWAYTYPE_SIGW InternetGatewayType = "SIGW"
)

// All allowed values of InternetGatewayType enum
var AllowedInternetGatewayTypeEnumValues = []InternetGatewayType{
	"IGW",
	"GGW",
	"SIGW",
}

func (v *InternetGatewayType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InternetGatewayType(value)
	for _, existing := range AllowedInternetGatewayTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InternetGatewayType", value)
}

// NewInternetGatewayTypeFromValue returns a pointer to a valid InternetGatewayType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInternetGatewayTypeFromValue(v string) (*InternetGatewayType, error) {
	ev := InternetGatewayType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InternetGatewayType: valid values are %v", v, AllowedInternetGatewayTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InternetGatewayType) IsValid() bool {
	for _, existing := range AllowedInternetGatewayTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InternetGatewayType value
func (v InternetGatewayType) Ptr() *InternetGatewayType {
	return &v
}

type NullableInternetGatewayType struct {
	value *InternetGatewayType
	isSet bool
}

func (v NullableInternetGatewayType) Get() *InternetGatewayType {
	return v.value
}

func (v *NullableInternetGatewayType) Set(val *InternetGatewayType) {
	v.value = val
	v.isSet = true
}

func (v NullableInternetGatewayType) IsSet() bool {
	return v.isSet
}

func (v *NullableInternetGatewayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternetGatewayType(val *InternetGatewayType) *NullableInternetGatewayType {
	return &NullableInternetGatewayType{value: val, isSet: true}
}

func (v NullableInternetGatewayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternetGatewayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
