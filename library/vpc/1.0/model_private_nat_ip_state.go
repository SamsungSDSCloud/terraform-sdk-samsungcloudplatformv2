/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// PrivateNatIpState the model 'PrivateNatIpState'
type PrivateNatIpState string

// List of PrivateNatIpState
const (
	PRIVATENATIPSTATE_RESERVED PrivateNatIpState = "RESERVED"
	PRIVATENATIPSTATE_ATTACHED PrivateNatIpState = "ATTACHED"
	PRIVATENATIPSTATE_DELETED  PrivateNatIpState = "DELETED"
)

// All allowed values of PrivateNatIpState enum
var AllowedPrivateNatIpStateEnumValues = []PrivateNatIpState{
	"RESERVED",
	"ATTACHED",
	"DELETED",
}

func (v *PrivateNatIpState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivateNatIpState(value)
	for _, existing := range AllowedPrivateNatIpStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivateNatIpState", value)
}

// NewPrivateNatIpStateFromValue returns a pointer to a valid PrivateNatIpState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivateNatIpStateFromValue(v string) (*PrivateNatIpState, error) {
	ev := PrivateNatIpState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivateNatIpState: valid values are %v", v, AllowedPrivateNatIpStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivateNatIpState) IsValid() bool {
	for _, existing := range AllowedPrivateNatIpStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrivateNatIpState value
func (v PrivateNatIpState) Ptr() *PrivateNatIpState {
	return &v
}

type NullablePrivateNatIpState struct {
	value *PrivateNatIpState
	isSet bool
}

func (v NullablePrivateNatIpState) Get() *PrivateNatIpState {
	return v.value
}

func (v *NullablePrivateNatIpState) Set(val *PrivateNatIpState) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNatIpState) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNatIpState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNatIpState(val *PrivateNatIpState) *NullablePrivateNatIpState {
	return &NullablePrivateNatIpState{value: val, isSet: true}
}

func (v NullablePrivateNatIpState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNatIpState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
