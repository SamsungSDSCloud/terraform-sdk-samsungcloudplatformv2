/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// PublicipAttachedResourceType the model 'PublicipAttachedResourceType'
type PublicipAttachedResourceType string

// List of PublicipAttachedResourceType
const (
	PUBLICIPATTACHEDRESOURCETYPE_VM       PublicipAttachedResourceType = "VM"
	PUBLICIPATTACHEDRESOURCETYPE_ALB      PublicipAttachedResourceType = "ALB"
	PUBLICIPATTACHEDRESOURCETYPE_LB       PublicipAttachedResourceType = "LB"
	PUBLICIPATTACHEDRESOURCETYPE_BM       PublicipAttachedResourceType = "BM"
	PUBLICIPATTACHEDRESOURCETYPE_DB       PublicipAttachedResourceType = "DB"
	PUBLICIPATTACHEDRESOURCETYPE_NAT_GW   PublicipAttachedResourceType = "NAT_GW"
	PUBLICIPATTACHEDRESOURCETYPE_GPU_NODE PublicipAttachedResourceType = "GPU_NODE"
	PUBLICIPATTACHEDRESOURCETYPE_VPN      PublicipAttachedResourceType = "VPN"
)

// All allowed values of PublicipAttachedResourceType enum
var AllowedPublicipAttachedResourceTypeEnumValues = []PublicipAttachedResourceType{
	"VM",
	"ALB",
	"LB",
	"BM",
	"DB",
	"NAT_GW",
	"GPU_NODE",
	"VPN",
}

func (v *PublicipAttachedResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PublicipAttachedResourceType(value)
	for _, existing := range AllowedPublicipAttachedResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PublicipAttachedResourceType", value)
}

// NewPublicipAttachedResourceTypeFromValue returns a pointer to a valid PublicipAttachedResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPublicipAttachedResourceTypeFromValue(v string) (*PublicipAttachedResourceType, error) {
	ev := PublicipAttachedResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PublicipAttachedResourceType: valid values are %v", v, AllowedPublicipAttachedResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PublicipAttachedResourceType) IsValid() bool {
	for _, existing := range AllowedPublicipAttachedResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PublicipAttachedResourceType value
func (v PublicipAttachedResourceType) Ptr() *PublicipAttachedResourceType {
	return &v
}

type NullablePublicipAttachedResourceType struct {
	value *PublicipAttachedResourceType
	isSet bool
}

func (v NullablePublicipAttachedResourceType) Get() *PublicipAttachedResourceType {
	return v.value
}

func (v *NullablePublicipAttachedResourceType) Set(val *PublicipAttachedResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicipAttachedResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicipAttachedResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicipAttachedResourceType(val *PublicipAttachedResourceType) *NullablePublicipAttachedResourceType {
	return &NullablePublicipAttachedResourceType{value: val, isSet: true}
}

func (v NullablePublicipAttachedResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicipAttachedResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
