/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrivateNatShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNatShowResponse{}

// PrivateNatShowResponse struct for PrivateNatShowResponse
type PrivateNatShowResponse struct {
	PrivateNat PrivateNat `json:"private_nat"`
}

type _PrivateNatShowResponse PrivateNatShowResponse

// NewPrivateNatShowResponse instantiates a new PrivateNatShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNatShowResponse(privateNat PrivateNat) *PrivateNatShowResponse {
	this := PrivateNatShowResponse{}
	this.PrivateNat = privateNat
	return &this
}

// NewPrivateNatShowResponseWithDefaults instantiates a new PrivateNatShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNatShowResponseWithDefaults() *PrivateNatShowResponse {
	this := PrivateNatShowResponse{}
	return &this
}

// GetPrivateNat returns the PrivateNat field value
func (o *PrivateNatShowResponse) GetPrivateNat() PrivateNat {
	if o == nil {
		var ret PrivateNat
		return ret
	}

	return o.PrivateNat
}

// GetPrivateNatOk returns a tuple with the PrivateNat field value
// and a boolean to check if the value has been set.
func (o *PrivateNatShowResponse) GetPrivateNatOk() (*PrivateNat, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateNat, true
}

// SetPrivateNat sets field value
func (o *PrivateNatShowResponse) SetPrivateNat(v PrivateNat) {
	o.PrivateNat = v
}

func (o PrivateNatShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNatShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["private_nat"] = o.PrivateNat
	return toSerialize, nil
}

func (o *PrivateNatShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"private_nat",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateNatShowResponse := _PrivateNatShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrivateNatShowResponse)

	if err != nil {
		return err
	}

	*o = PrivateNatShowResponse(varPrivateNatShowResponse)

	return err
}

type NullablePrivateNatShowResponse struct {
	value *PrivateNatShowResponse
	isSet bool
}

func (v NullablePrivateNatShowResponse) Get() *PrivateNatShowResponse {
	return v.value
}

func (v *NullablePrivateNatShowResponse) Set(val *PrivateNatShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNatShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNatShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNatShowResponse(val *PrivateNatShowResponse) *NullablePrivateNatShowResponse {
	return &NullablePrivateNatShowResponse{value: val, isSet: true}
}

func (v NullablePrivateNatShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNatShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
