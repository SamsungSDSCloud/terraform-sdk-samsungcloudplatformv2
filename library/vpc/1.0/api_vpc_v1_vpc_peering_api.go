/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1VpcPeeringApiAPIService VpcV1VpcPeeringApiAPI service
type VpcV1VpcPeeringApiAPIService service

type VpcV1VpcPeeringApiAPICreateVpcPeeringRequest struct {
	ctx                     context.Context
	ApiService              *VpcV1VpcPeeringApiAPIService
	vpcPeeringCreateRequest *VpcPeeringCreateRequest
}

func (r VpcV1VpcPeeringApiAPICreateVpcPeeringRequest) VpcPeeringCreateRequest(vpcPeeringCreateRequest VpcPeeringCreateRequest) VpcV1VpcPeeringApiAPICreateVpcPeeringRequest {
	r.vpcPeeringCreateRequest = &vpcPeeringCreateRequest
	return r
}

func (r VpcV1VpcPeeringApiAPICreateVpcPeeringRequest) Execute() (*VpcPeeringShowResponse, *http.Response, error) {
	return r.ApiService.CreateVpcPeeringExecute(r)
}

/*
CreateVpcPeering Create VPC Peering

Create VPC Peering.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcPeeringApiAPICreateVpcPeeringRequest
*/
func (a *VpcV1VpcPeeringApiAPIService) CreateVpcPeering(ctx context.Context) VpcV1VpcPeeringApiAPICreateVpcPeeringRequest {
	return VpcV1VpcPeeringApiAPICreateVpcPeeringRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcPeeringShowResponse
func (a *VpcV1VpcPeeringApiAPIService) CreateVpcPeeringExecute(r VpcV1VpcPeeringApiAPICreateVpcPeeringRequest) (*VpcPeeringShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpcPeeringCreateRequest == nil {
		return localVarReturnValue, nil, reportError("vpcPeeringCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpcPeeringCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcPeeringApiAPIDeleteVpcPeeringRequest struct {
	ctx          context.Context
	ApiService   *VpcV1VpcPeeringApiAPIService
	vpcPeeringId string
}

func (r VpcV1VpcPeeringApiAPIDeleteVpcPeeringRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVpcPeeringExecute(r)
}

/*
DeleteVpcPeering Delete VPC Peering

Delete VPC Peering.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcPeeringId VPC Peering ID
	@return VpcV1VpcPeeringApiAPIDeleteVpcPeeringRequest
*/
func (a *VpcV1VpcPeeringApiAPIService) DeleteVpcPeering(ctx context.Context, vpcPeeringId string) VpcV1VpcPeeringApiAPIDeleteVpcPeeringRequest {
	return VpcV1VpcPeeringApiAPIDeleteVpcPeeringRequest{
		ApiService:   a,
		ctx:          ctx,
		vpcPeeringId: vpcPeeringId,
	}
}

// Execute executes the request
func (a *VpcV1VpcPeeringApiAPIService) DeleteVpcPeeringExecute(r VpcV1VpcPeeringApiAPIDeleteVpcPeeringRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/{vpc_peering_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_peering_id"+"}", url.PathEscape(parameterValueToString(r.vpcPeeringId, "vpcPeeringId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest struct {
	ctx                  context.Context
	ApiService           *VpcV1VpcPeeringApiAPIService
	requesterVpcId       *string
	approverVpcId        *string
	approverVpcAccountId *string
}

// Requester VPC ID
func (r VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest) RequesterVpcId(requesterVpcId string) VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest {
	r.requesterVpcId = &requesterVpcId
	return r
}

// Approver VPC ID
func (r VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest) ApproverVpcId(approverVpcId string) VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest {
	r.approverVpcId = &approverVpcId
	return r
}

// Approver VPC Account ID
func (r VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest) ApproverVpcAccountId(approverVpcAccountId string) VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest {
	r.approverVpcAccountId = &approverVpcAccountId
	return r
}

func (r VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest) Execute() (*VpcPeeringAvailabilityResponse, *http.Response, error) {
	return r.ApiService.ListVpcPeeringAvailabilitiesExecute(r)
}

/*
ListVpcPeeringAvailabilities List VPC Peering Availabilities

Get VPC Peering availabilities list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest
*/
func (a *VpcV1VpcPeeringApiAPIService) ListVpcPeeringAvailabilities(ctx context.Context) VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest {
	return VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcPeeringAvailabilityResponse
func (a *VpcV1VpcPeeringApiAPIService) ListVpcPeeringAvailabilitiesExecute(r VpcV1VpcPeeringApiAPIListVpcPeeringAvailabilitiesRequest) (*VpcPeeringAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringAvailabilityResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/peering-availabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requesterVpcId == nil {
		return localVarReturnValue, nil, reportError("requesterVpcId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requester_vpc_id", r.requesterVpcId, "form", "")
	if r.approverVpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approver_vpc_id", r.approverVpcId, "form", "")
	}
	if r.approverVpcAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approver_vpc_account_id", r.approverVpcAccountId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcPeeringApiAPIListVpcPeeringsRequest struct {
	ctx              context.Context
	ApiService       *VpcV1VpcPeeringApiAPIService
	size             *int32
	page             *int32
	sort             *string
	id               *string
	name             *string
	requesterVpcId   *string
	requesterVpcName *string
	approverVpcId    *string
	approverVpcName  *string
	accountType      *VpcPeeringAccountType
	state            *VpcPeeringState
}

// size
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) Size(size int32) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.size = &size
	return r
}

// page
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) Page(page int32) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.page = &page
	return r
}

// sort
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) Sort(sort string) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.sort = &sort
	return r
}

// VPC Peering ID
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) Id(id string) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.id = &id
	return r
}

// VPC Peering Name
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) Name(name string) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.name = &name
	return r
}

// Requester VPC ID
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) RequesterVpcId(requesterVpcId string) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.requesterVpcId = &requesterVpcId
	return r
}

// Requester VPC Name
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) RequesterVpcName(requesterVpcName string) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.requesterVpcName = &requesterVpcName
	return r
}

// Approver VPC ID
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) ApproverVpcId(approverVpcId string) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.approverVpcId = &approverVpcId
	return r
}

// Approver VPC Name
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) ApproverVpcName(approverVpcName string) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.approverVpcName = &approverVpcName
	return r
}

// Account Type
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) AccountType(accountType VpcPeeringAccountType) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.accountType = &accountType
	return r
}

// State
func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) State(state VpcPeeringState) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	r.state = &state
	return r
}

func (r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) Execute() (*VpcPeeringListResponse, *http.Response, error) {
	return r.ApiService.ListVpcPeeringsExecute(r)
}

/*
ListVpcPeerings List VPC Peering

Get VPC Peering list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1VpcPeeringApiAPIListVpcPeeringsRequest
*/
func (a *VpcV1VpcPeeringApiAPIService) ListVpcPeerings(ctx context.Context) VpcV1VpcPeeringApiAPIListVpcPeeringsRequest {
	return VpcV1VpcPeeringApiAPIListVpcPeeringsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VpcPeeringListResponse
func (a *VpcV1VpcPeeringApiAPIService) ListVpcPeeringsExecute(r VpcV1VpcPeeringApiAPIListVpcPeeringsRequest) (*VpcPeeringListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.requesterVpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester_vpc_id", r.requesterVpcId, "form", "")
	}
	if r.requesterVpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester_vpc_name", r.requesterVpcName, "form", "")
	}
	if r.approverVpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approver_vpc_id", r.approverVpcId, "form", "")
	}
	if r.approverVpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "approver_vpc_name", r.approverVpcName, "form", "")
	}
	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_type", r.accountType, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcPeeringApiAPISetVpcPeeringRequest struct {
	ctx                  context.Context
	ApiService           *VpcV1VpcPeeringApiAPIService
	vpcPeeringId         string
	vpcPeeringSetRequest *VpcPeeringSetRequest
}

func (r VpcV1VpcPeeringApiAPISetVpcPeeringRequest) VpcPeeringSetRequest(vpcPeeringSetRequest VpcPeeringSetRequest) VpcV1VpcPeeringApiAPISetVpcPeeringRequest {
	r.vpcPeeringSetRequest = &vpcPeeringSetRequest
	return r
}

func (r VpcV1VpcPeeringApiAPISetVpcPeeringRequest) Execute() (*VpcPeeringShowResponse, *http.Response, error) {
	return r.ApiService.SetVpcPeeringExecute(r)
}

/*
SetVpcPeering Set VPC Peering

Set VPC Peering.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcPeeringId VPC Peering ID
	@return VpcV1VpcPeeringApiAPISetVpcPeeringRequest
*/
func (a *VpcV1VpcPeeringApiAPIService) SetVpcPeering(ctx context.Context, vpcPeeringId string) VpcV1VpcPeeringApiAPISetVpcPeeringRequest {
	return VpcV1VpcPeeringApiAPISetVpcPeeringRequest{
		ApiService:   a,
		ctx:          ctx,
		vpcPeeringId: vpcPeeringId,
	}
}

// Execute executes the request
//
//	@return VpcPeeringShowResponse
func (a *VpcV1VpcPeeringApiAPIService) SetVpcPeeringExecute(r VpcV1VpcPeeringApiAPISetVpcPeeringRequest) (*VpcPeeringShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/{vpc_peering_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_peering_id"+"}", url.PathEscape(parameterValueToString(r.vpcPeeringId, "vpcPeeringId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpcPeeringSetRequest == nil {
		return localVarReturnValue, nil, reportError("vpcPeeringSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpcPeeringSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcPeeringApiAPIShowVpcPeeringRequest struct {
	ctx          context.Context
	ApiService   *VpcV1VpcPeeringApiAPIService
	vpcPeeringId string
}

func (r VpcV1VpcPeeringApiAPIShowVpcPeeringRequest) Execute() (*VpcPeeringShowResponse, *http.Response, error) {
	return r.ApiService.ShowVpcPeeringExecute(r)
}

/*
ShowVpcPeering Show VPC Peering

Show VPC Peering.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcPeeringId VPC Peering ID
	@return VpcV1VpcPeeringApiAPIShowVpcPeeringRequest
*/
func (a *VpcV1VpcPeeringApiAPIService) ShowVpcPeering(ctx context.Context, vpcPeeringId string) VpcV1VpcPeeringApiAPIShowVpcPeeringRequest {
	return VpcV1VpcPeeringApiAPIShowVpcPeeringRequest{
		ApiService:   a,
		ctx:          ctx,
		vpcPeeringId: vpcPeeringId,
	}
}

// Execute executes the request
//
//	@return VpcPeeringShowResponse
func (a *VpcV1VpcPeeringApiAPIService) ShowVpcPeeringExecute(r VpcV1VpcPeeringApiAPIShowVpcPeeringRequest) (*VpcPeeringShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/{vpc_peering_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_peering_id"+"}", url.PathEscape(parameterValueToString(r.vpcPeeringId, "vpcPeeringId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
