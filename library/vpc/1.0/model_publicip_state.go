/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// PublicipState the model 'PublicipState'
type PublicipState string

// List of PublicipState
const (
	PUBLICIPSTATE_RESERVED PublicipState = "RESERVED"
	PUBLICIPSTATE_ATTACHED PublicipState = "ATTACHED"
	PUBLICIPSTATE_DELETED  PublicipState = "DELETED"
)

// All allowed values of PublicipState enum
var AllowedPublicipStateEnumValues = []PublicipState{
	"RESERVED",
	"ATTACHED",
	"DELETED",
}

func (v *PublicipState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PublicipState(value)
	for _, existing := range AllowedPublicipStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PublicipState", value)
}

// NewPublicipStateFromValue returns a pointer to a valid PublicipState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPublicipStateFromValue(v string) (*PublicipState, error) {
	ev := PublicipState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PublicipState: valid values are %v", v, AllowedPublicipStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PublicipState) IsValid() bool {
	for _, existing := range AllowedPublicipStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PublicipState value
func (v PublicipState) Ptr() *PublicipState {
	return &v
}

type NullablePublicipState struct {
	value *PublicipState
	isSet bool
}

func (v NullablePublicipState) Get() *PublicipState {
	return v.value
}

func (v *NullablePublicipState) Set(val *PublicipState) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicipState) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicipState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicipState(val *PublicipState) *NullablePublicipState {
	return &NullablePublicipState{value: val, isSet: true}
}

func (v NullablePublicipState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicipState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
