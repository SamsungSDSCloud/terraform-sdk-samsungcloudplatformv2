/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1VpcPeeringRuleApiAPIService VpcV1VpcPeeringRuleApiAPI service
type VpcV1VpcPeeringRuleApiAPIService service

type VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest struct {
	ctx                         context.Context
	ApiService                  *VpcV1VpcPeeringRuleApiAPIService
	vpcPeeringId                string
	vpcPeeringRuleCreateRequest *VpcPeeringRuleCreateRequest
}

func (r VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest) VpcPeeringRuleCreateRequest(vpcPeeringRuleCreateRequest VpcPeeringRuleCreateRequest) VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest {
	r.vpcPeeringRuleCreateRequest = &vpcPeeringRuleCreateRequest
	return r
}

func (r VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest) Execute() (*VpcPeeringRuleShowResponse, *http.Response, error) {
	return r.ApiService.CreateVpcPeeringRuleExecute(r)
}

/*
CreateVpcPeeringRule Create Vpc Peering Rule

Create a VPC Peering Rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcPeeringId VPC Peering ID
	@return VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest
*/
func (a *VpcV1VpcPeeringRuleApiAPIService) CreateVpcPeeringRule(ctx context.Context, vpcPeeringId string) VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest {
	return VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest{
		ApiService:   a,
		ctx:          ctx,
		vpcPeeringId: vpcPeeringId,
	}
}

// Execute executes the request
//
//	@return VpcPeeringRuleShowResponse
func (a *VpcV1VpcPeeringRuleApiAPIService) CreateVpcPeeringRuleExecute(r VpcV1VpcPeeringRuleApiAPICreateVpcPeeringRuleRequest) (*VpcPeeringRuleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringRuleShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/{vpc_peering_id}/routing-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_peering_id"+"}", url.PathEscape(parameterValueToString(r.vpcPeeringId, "vpcPeeringId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpcPeeringRuleCreateRequest == nil {
		return localVarReturnValue, nil, reportError("vpcPeeringRuleCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vpcPeeringRuleCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcPeeringRuleApiAPIDeleteVpcPeeringRuleRequest struct {
	ctx           context.Context
	ApiService    *VpcV1VpcPeeringRuleApiAPIService
	vpcPeeringId  string
	routingRuleId string
}

func (r VpcV1VpcPeeringRuleApiAPIDeleteVpcPeeringRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVpcPeeringRuleExecute(r)
}

/*
DeleteVpcPeeringRule Delete VPC Peering Rule

Delete a VPC Peering Rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcPeeringId VPC Peering ID
	@param routingRuleId Routing Rule ID
	@return VpcV1VpcPeeringRuleApiAPIDeleteVpcPeeringRuleRequest
*/
func (a *VpcV1VpcPeeringRuleApiAPIService) DeleteVpcPeeringRule(ctx context.Context, vpcPeeringId string, routingRuleId string) VpcV1VpcPeeringRuleApiAPIDeleteVpcPeeringRuleRequest {
	return VpcV1VpcPeeringRuleApiAPIDeleteVpcPeeringRuleRequest{
		ApiService:    a,
		ctx:           ctx,
		vpcPeeringId:  vpcPeeringId,
		routingRuleId: routingRuleId,
	}
}

// Execute executes the request
func (a *VpcV1VpcPeeringRuleApiAPIService) DeleteVpcPeeringRuleExecute(r VpcV1VpcPeeringRuleApiAPIDeleteVpcPeeringRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/{vpc_peering_id}/routing-rules/{routing_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_peering_id"+"}", url.PathEscape(parameterValueToString(r.vpcPeeringId, "vpcPeeringId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routing_rule_id"+"}", url.PathEscape(parameterValueToString(r.routingRuleId, "routingRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest struct {
	ctx                context.Context
	ApiService         *VpcV1VpcPeeringRuleApiAPIService
	vpcPeeringId       string
	destinationVpcType *VpcPeeringRuleDestinationVpcType
	destinationCidr    *string
}

// Destination VPC Type
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest) DestinationVpcType(destinationVpcType VpcPeeringRuleDestinationVpcType) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest {
	r.destinationVpcType = &destinationVpcType
	return r
}

// Destination CIDR
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest) DestinationCidr(destinationCidr string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest {
	r.destinationCidr = &destinationCidr
	return r
}

func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest) Execute() (*VpcPeeringRuleAvailabilityResponse, *http.Response, error) {
	return r.ApiService.ListVpcPeeringRoutingRuleAvailabilitiesExecute(r)
}

/*
ListVpcPeeringRoutingRuleAvailabilities List VPC Peering Routing Rule Availabilities

Get VPC Peering Rule availabilities list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcPeeringId VPC Peering ID
	@return VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest
*/
func (a *VpcV1VpcPeeringRuleApiAPIService) ListVpcPeeringRoutingRuleAvailabilities(ctx context.Context, vpcPeeringId string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest {
	return VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest{
		ApiService:   a,
		ctx:          ctx,
		vpcPeeringId: vpcPeeringId,
	}
}

// Execute executes the request
//
//	@return VpcPeeringRuleAvailabilityResponse
func (a *VpcV1VpcPeeringRuleApiAPIService) ListVpcPeeringRoutingRuleAvailabilitiesExecute(r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRoutingRuleAvailabilitiesRequest) (*VpcPeeringRuleAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringRuleAvailabilityResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/{vpc_peering_id}/routing-rules/destination-cidr-availabilities"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_peering_id"+"}", url.PathEscape(parameterValueToString(r.vpcPeeringId, "vpcPeeringId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.destinationVpcType == nil {
		return localVarReturnValue, nil, reportError("destinationVpcType is required and must be specified")
	}
	if r.destinationCidr == nil {
		return localVarReturnValue, nil, reportError("destinationCidr is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "destination_vpc_type", r.destinationVpcType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "destination_cidr", r.destinationCidr, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest struct {
	ctx                context.Context
	ApiService         *VpcV1VpcPeeringRuleApiAPIService
	vpcPeeringId       string
	size               *int32
	page               *int32
	sort               *string
	id                 *string
	name               *string
	sourceVpcId        *string
	sourceVpcType      *VpcPeeringRuleDestinationVpcType
	destinationVpcId   *string
	destinationVpcType *VpcPeeringRuleDestinationVpcType
	destinationCidr    *string
	state              *VpcPeeringState
}

// size
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) Size(size int32) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.size = &size
	return r
}

// page
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) Page(page int32) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.page = &page
	return r
}

// sort
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) Sort(sort string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.sort = &sort
	return r
}

// VPC Peering Rule ID
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) Id(id string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.id = &id
	return r
}

// VPC Peering Name
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) Name(name string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.name = &name
	return r
}

// Source VPC ID
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) SourceVpcId(sourceVpcId string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.sourceVpcId = &sourceVpcId
	return r
}

// Source VPC Type
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) SourceVpcType(sourceVpcType VpcPeeringRuleDestinationVpcType) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.sourceVpcType = &sourceVpcType
	return r
}

// Destination VPC ID
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) DestinationVpcId(destinationVpcId string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.destinationVpcId = &destinationVpcId
	return r
}

// Destination VPC Type
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) DestinationVpcType(destinationVpcType VpcPeeringRuleDestinationVpcType) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.destinationVpcType = &destinationVpcType
	return r
}

// Destination CIDR
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) DestinationCidr(destinationCidr string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.destinationCidr = &destinationCidr
	return r
}

// State
func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) State(state VpcPeeringState) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	r.state = &state
	return r
}

func (r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) Execute() (*VpcPeeringRuleListResponse, *http.Response, error) {
	return r.ApiService.ListVpcPeeringRulesExecute(r)
}

/*
ListVpcPeeringRules List VPC Peering Rules

Get VPC Peering Rule list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param vpcPeeringId VPC Peering ID
	@return VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest
*/
func (a *VpcV1VpcPeeringRuleApiAPIService) ListVpcPeeringRules(ctx context.Context, vpcPeeringId string) VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest {
	return VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest{
		ApiService:   a,
		ctx:          ctx,
		vpcPeeringId: vpcPeeringId,
	}
}

// Execute executes the request
//
//	@return VpcPeeringRuleListResponse
func (a *VpcV1VpcPeeringRuleApiAPIService) ListVpcPeeringRulesExecute(r VpcV1VpcPeeringRuleApiAPIListVpcPeeringRulesRequest) (*VpcPeeringRuleListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VpcPeeringRuleListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/vpc-peerings/{vpc_peering_id}/routing-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"vpc_peering_id"+"}", url.PathEscape(parameterValueToString(r.vpcPeeringId, "vpcPeeringId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.sourceVpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_vpc_id", r.sourceVpcId, "form", "")
	}
	if r.sourceVpcType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_vpc_type", r.sourceVpcType, "form", "")
	}
	if r.destinationVpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_vpc_id", r.destinationVpcId, "form", "")
	}
	if r.destinationVpcType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_vpc_type", r.destinationVpcType, "form", "")
	}
	if r.destinationCidr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_cidr", r.destinationCidr, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
