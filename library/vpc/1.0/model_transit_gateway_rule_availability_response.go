/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TransitGatewayRuleAvailabilityResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransitGatewayRuleAvailabilityResponse{}

// TransitGatewayRuleAvailabilityResponse struct for TransitGatewayRuleAvailabilityResponse
type TransitGatewayRuleAvailabilityResponse struct {
	// count
	Count                         int32                                  `json:"count"`
	DestinationCidrAvailabilities []TransitGatewayRuleAvailabilityDetail `json:"destination_cidr_availabilities"`
}

type _TransitGatewayRuleAvailabilityResponse TransitGatewayRuleAvailabilityResponse

// NewTransitGatewayRuleAvailabilityResponse instantiates a new TransitGatewayRuleAvailabilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransitGatewayRuleAvailabilityResponse(count int32, destinationCidrAvailabilities []TransitGatewayRuleAvailabilityDetail) *TransitGatewayRuleAvailabilityResponse {
	this := TransitGatewayRuleAvailabilityResponse{}
	this.Count = count
	this.DestinationCidrAvailabilities = destinationCidrAvailabilities
	return &this
}

// NewTransitGatewayRuleAvailabilityResponseWithDefaults instantiates a new TransitGatewayRuleAvailabilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransitGatewayRuleAvailabilityResponseWithDefaults() *TransitGatewayRuleAvailabilityResponse {
	this := TransitGatewayRuleAvailabilityResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *TransitGatewayRuleAvailabilityResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *TransitGatewayRuleAvailabilityResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *TransitGatewayRuleAvailabilityResponse) SetCount(v int32) {
	o.Count = v
}

// GetDestinationCidrAvailabilities returns the DestinationCidrAvailabilities field value
func (o *TransitGatewayRuleAvailabilityResponse) GetDestinationCidrAvailabilities() []TransitGatewayRuleAvailabilityDetail {
	if o == nil {
		var ret []TransitGatewayRuleAvailabilityDetail
		return ret
	}

	return o.DestinationCidrAvailabilities
}

// GetDestinationCidrAvailabilitiesOk returns a tuple with the DestinationCidrAvailabilities field value
// and a boolean to check if the value has been set.
func (o *TransitGatewayRuleAvailabilityResponse) GetDestinationCidrAvailabilitiesOk() ([]TransitGatewayRuleAvailabilityDetail, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationCidrAvailabilities, true
}

// SetDestinationCidrAvailabilities sets field value
func (o *TransitGatewayRuleAvailabilityResponse) SetDestinationCidrAvailabilities(v []TransitGatewayRuleAvailabilityDetail) {
	o.DestinationCidrAvailabilities = v
}

func (o TransitGatewayRuleAvailabilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransitGatewayRuleAvailabilityResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["destination_cidr_availabilities"] = o.DestinationCidrAvailabilities
	return toSerialize, nil
}

func (o *TransitGatewayRuleAvailabilityResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"destination_cidr_availabilities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransitGatewayRuleAvailabilityResponse := _TransitGatewayRuleAvailabilityResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransitGatewayRuleAvailabilityResponse)

	if err != nil {
		return err
	}

	*o = TransitGatewayRuleAvailabilityResponse(varTransitGatewayRuleAvailabilityResponse)

	return err
}

type NullableTransitGatewayRuleAvailabilityResponse struct {
	value *TransitGatewayRuleAvailabilityResponse
	isSet bool
}

func (v NullableTransitGatewayRuleAvailabilityResponse) Get() *TransitGatewayRuleAvailabilityResponse {
	return v.value
}

func (v *NullableTransitGatewayRuleAvailabilityResponse) Set(val *TransitGatewayRuleAvailabilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransitGatewayRuleAvailabilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransitGatewayRuleAvailabilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransitGatewayRuleAvailabilityResponse(val *TransitGatewayRuleAvailabilityResponse) *NullableTransitGatewayRuleAvailabilityResponse {
	return &NullableTransitGatewayRuleAvailabilityResponse{value: val, isSet: true}
}

func (v NullableTransitGatewayRuleAvailabilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransitGatewayRuleAvailabilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
