/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AvailableVpcCidrResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableVpcCidrResponse{}

// AvailableVpcCidrResponse struct for AvailableVpcCidrResponse
type AvailableVpcCidrResponse struct {
	VpcCidrAvailability AvailableVpcCidrDetail `json:"vpc_cidr_availability"`
}

type _AvailableVpcCidrResponse AvailableVpcCidrResponse

// NewAvailableVpcCidrResponse instantiates a new AvailableVpcCidrResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableVpcCidrResponse(vpcCidrAvailability AvailableVpcCidrDetail) *AvailableVpcCidrResponse {
	this := AvailableVpcCidrResponse{}
	this.VpcCidrAvailability = vpcCidrAvailability
	return &this
}

// NewAvailableVpcCidrResponseWithDefaults instantiates a new AvailableVpcCidrResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableVpcCidrResponseWithDefaults() *AvailableVpcCidrResponse {
	this := AvailableVpcCidrResponse{}
	return &this
}

// GetVpcCidrAvailability returns the VpcCidrAvailability field value
func (o *AvailableVpcCidrResponse) GetVpcCidrAvailability() AvailableVpcCidrDetail {
	if o == nil {
		var ret AvailableVpcCidrDetail
		return ret
	}

	return o.VpcCidrAvailability
}

// GetVpcCidrAvailabilityOk returns a tuple with the VpcCidrAvailability field value
// and a boolean to check if the value has been set.
func (o *AvailableVpcCidrResponse) GetVpcCidrAvailabilityOk() (*AvailableVpcCidrDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcCidrAvailability, true
}

// SetVpcCidrAvailability sets field value
func (o *AvailableVpcCidrResponse) SetVpcCidrAvailability(v AvailableVpcCidrDetail) {
	o.VpcCidrAvailability = v
}

func (o AvailableVpcCidrResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableVpcCidrResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpc_cidr_availability"] = o.VpcCidrAvailability
	return toSerialize, nil
}

func (o *AvailableVpcCidrResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpc_cidr_availability",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailableVpcCidrResponse := _AvailableVpcCidrResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvailableVpcCidrResponse)

	if err != nil {
		return err
	}

	*o = AvailableVpcCidrResponse(varAvailableVpcCidrResponse)

	return err
}

type NullableAvailableVpcCidrResponse struct {
	value *AvailableVpcCidrResponse
	isSet bool
}

func (v NullableAvailableVpcCidrResponse) Get() *AvailableVpcCidrResponse {
	return v.value
}

func (v *NullableAvailableVpcCidrResponse) Set(val *AvailableVpcCidrResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableVpcCidrResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableVpcCidrResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableVpcCidrResponse(val *AvailableVpcCidrResponse) *NullableAvailableVpcCidrResponse {
	return &NullableAvailableVpcCidrResponse{value: val, isSet: true}
}

func (v NullableAvailableVpcCidrResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableVpcCidrResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
