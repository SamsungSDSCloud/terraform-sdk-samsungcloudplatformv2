/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubnetCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubnetCreateRequest{}

// SubnetCreateRequest struct for SubnetCreateRequest
type SubnetCreateRequest struct {
	// Allocation Pools
	AllocationPools []interface{} `json:"allocation_pools,omitempty"`
	// Subnet Cidr
	Cidr        string         `json:"cidr"`
	Description NullableString `json:"description,omitempty"`
	// DNS Name Servers
	DnsNameservers []string `json:"dns_nameservers,omitempty"`
	// Host Routes
	HostRoutes []interface{} `json:"host_routes,omitempty"`
	// Subnet Name
	Name string `json:"name" validate:"regexp=^[a-zA-Z0-9]*$"`
	// Tag List
	Tags []Tag `json:"tags,omitempty"`
	// Subnet Type
	Type SubnetType `json:"type"`
	// VPC Id
	VpcId string `json:"vpc_id"`
}

type _SubnetCreateRequest SubnetCreateRequest

// NewSubnetCreateRequest instantiates a new SubnetCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetCreateRequest(cidr string, name string, type_ SubnetType, vpcId string) *SubnetCreateRequest {
	this := SubnetCreateRequest{}
	this.Cidr = cidr
	this.Name = name
	this.Type = type_
	this.VpcId = vpcId
	return &this
}

// NewSubnetCreateRequestWithDefaults instantiates a new SubnetCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetCreateRequestWithDefaults() *SubnetCreateRequest {
	this := SubnetCreateRequest{}
	return &this
}

// GetAllocationPools returns the AllocationPools field value if set, zero value otherwise.
func (o *SubnetCreateRequest) GetAllocationPools() []interface{} {
	if o == nil || IsNil(o.AllocationPools) {
		var ret []interface{}
		return ret
	}
	return o.AllocationPools
}

// GetAllocationPoolsOk returns a tuple with the AllocationPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetAllocationPoolsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.AllocationPools) {
		return nil, false
	}
	return o.AllocationPools, true
}

// HasAllocationPools returns a boolean if a field has been set.
func (o *SubnetCreateRequest) HasAllocationPools() bool {
	if o != nil && !IsNil(o.AllocationPools) {
		return true
	}

	return false
}

// SetAllocationPools gets a reference to the given []interface{} and assigns it to the AllocationPools field.
func (o *SubnetCreateRequest) SetAllocationPools(v []interface{}) {
	o.AllocationPools = v
}

// GetCidr returns the Cidr field value
func (o *SubnetCreateRequest) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *SubnetCreateRequest) SetCidr(v string) {
	o.Cidr = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubnetCreateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubnetCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *SubnetCreateRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *SubnetCreateRequest) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *SubnetCreateRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *SubnetCreateRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetDnsNameservers returns the DnsNameservers field value if set, zero value otherwise.
func (o *SubnetCreateRequest) GetDnsNameservers() []string {
	if o == nil || IsNil(o.DnsNameservers) {
		var ret []string
		return ret
	}
	return o.DnsNameservers
}

// GetDnsNameserversOk returns a tuple with the DnsNameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetDnsNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsNameservers) {
		return nil, false
	}
	return o.DnsNameservers, true
}

// HasDnsNameservers returns a boolean if a field has been set.
func (o *SubnetCreateRequest) HasDnsNameservers() bool {
	if o != nil && !IsNil(o.DnsNameservers) {
		return true
	}

	return false
}

// SetDnsNameservers gets a reference to the given []string and assigns it to the DnsNameservers field.
func (o *SubnetCreateRequest) SetDnsNameservers(v []string) {
	o.DnsNameservers = v
}

// GetHostRoutes returns the HostRoutes field value if set, zero value otherwise.
func (o *SubnetCreateRequest) GetHostRoutes() []interface{} {
	if o == nil || IsNil(o.HostRoutes) {
		var ret []interface{}
		return ret
	}
	return o.HostRoutes
}

// GetHostRoutesOk returns a tuple with the HostRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetHostRoutesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.HostRoutes) {
		return nil, false
	}
	return o.HostRoutes, true
}

// HasHostRoutes returns a boolean if a field has been set.
func (o *SubnetCreateRequest) HasHostRoutes() bool {
	if o != nil && !IsNil(o.HostRoutes) {
		return true
	}

	return false
}

// SetHostRoutes gets a reference to the given []interface{} and assigns it to the HostRoutes field.
func (o *SubnetCreateRequest) SetHostRoutes(v []interface{}) {
	o.HostRoutes = v
}

// GetName returns the Name field value
func (o *SubnetCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubnetCreateRequest) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *SubnetCreateRequest) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *SubnetCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *SubnetCreateRequest) SetTags(v []Tag) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *SubnetCreateRequest) GetType() SubnetType {
	if o == nil {
		var ret SubnetType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetTypeOk() (*SubnetType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SubnetCreateRequest) SetType(v SubnetType) {
	o.Type = v
}

// GetVpcId returns the VpcId field value
func (o *SubnetCreateRequest) GetVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value
// and a boolean to check if the value has been set.
func (o *SubnetCreateRequest) GetVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcId, true
}

// SetVpcId sets field value
func (o *SubnetCreateRequest) SetVpcId(v string) {
	o.VpcId = v
}

func (o SubnetCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubnetCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllocationPools) {
		toSerialize["allocation_pools"] = o.AllocationPools
	}
	toSerialize["cidr"] = o.Cidr
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.DnsNameservers) {
		toSerialize["dns_nameservers"] = o.DnsNameservers
	}
	if !IsNil(o.HostRoutes) {
		toSerialize["host_routes"] = o.HostRoutes
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	toSerialize["vpc_id"] = o.VpcId
	return toSerialize, nil
}

func (o *SubnetCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cidr",
		"name",
		"type",
		"vpc_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnetCreateRequest := _SubnetCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubnetCreateRequest)

	if err != nil {
		return err
	}

	*o = SubnetCreateRequest(varSubnetCreateRequest)

	return err
}

type NullableSubnetCreateRequest struct {
	value *SubnetCreateRequest
	isSet bool
}

func (v NullableSubnetCreateRequest) Get() *SubnetCreateRequest {
	return v.value
}

func (v *NullableSubnetCreateRequest) Set(val *SubnetCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetCreateRequest(val *SubnetCreateRequest) *NullableSubnetCreateRequest {
	return &NullableSubnetCreateRequest{value: val, isSet: true}
}

func (v NullableSubnetCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
