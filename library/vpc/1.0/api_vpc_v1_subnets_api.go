/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// VpcV1SubnetsApiAPIService VpcV1SubnetsApiAPI service
type VpcV1SubnetsApiAPIService service

type VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest struct {
	ctx        context.Context
	ApiService *VpcV1SubnetsApiAPIService
	vpcId      *string
	cidr       *string
}

// VPC Id
func (r VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest) VpcId(vpcId string) VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest {
	r.vpcId = &vpcId
	return r
}

// Subnet Cidr
func (r VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest) Cidr(cidr string) VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest {
	r.cidr = &cidr
	return r
}

func (r VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest) Execute() (*AvailableSubnetCidrResponse, *http.Response, error) {
	return r.ApiService.CheckSubnetCidrAvailabilitiesExecute(r)
}

/*
CheckSubnetCidrAvailabilities CheckSubnetCidrAvailabilities

check subnet cidr availabilities

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest
*/
func (a *VpcV1SubnetsApiAPIService) CheckSubnetCidrAvailabilities(ctx context.Context) VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest {
	return VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AvailableSubnetCidrResponse
func (a *VpcV1SubnetsApiAPIService) CheckSubnetCidrAvailabilitiesExecute(r VpcV1SubnetsApiAPICheckSubnetCidrAvailabilitiesRequest) (*AvailableSubnetCidrResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AvailableSubnetCidrResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/subnets/subnet-cidr-availabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vpcId == nil {
		return localVarReturnValue, nil, reportError("vpcId is required and must be specified")
	}
	if r.cidr == nil {
		return localVarReturnValue, nil, reportError("cidr is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "cidr", r.cidr, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1SubnetsApiAPICreateSubnetRequest struct {
	ctx                 context.Context
	ApiService          *VpcV1SubnetsApiAPIService
	subnetCreateRequest *SubnetCreateRequest
}

func (r VpcV1SubnetsApiAPICreateSubnetRequest) SubnetCreateRequest(subnetCreateRequest SubnetCreateRequest) VpcV1SubnetsApiAPICreateSubnetRequest {
	r.subnetCreateRequest = &subnetCreateRequest
	return r
}

func (r VpcV1SubnetsApiAPICreateSubnetRequest) Execute() (*SubnetShowResponse, *http.Response, error) {
	return r.ApiService.CreateSubnetExecute(r)
}

/*
CreateSubnet Create Subnet

Create subnet.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1SubnetsApiAPICreateSubnetRequest
*/
func (a *VpcV1SubnetsApiAPIService) CreateSubnet(ctx context.Context) VpcV1SubnetsApiAPICreateSubnetRequest {
	return VpcV1SubnetsApiAPICreateSubnetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubnetShowResponse
func (a *VpcV1SubnetsApiAPIService) CreateSubnetExecute(r VpcV1SubnetsApiAPICreateSubnetRequest) (*SubnetShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubnetShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/subnets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subnetCreateRequest == nil {
		return localVarReturnValue, nil, reportError("subnetCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subnetCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1SubnetsApiAPIDeleteSubnetRequest struct {
	ctx        context.Context
	ApiService *VpcV1SubnetsApiAPIService
	subnetId   string
}

func (r VpcV1SubnetsApiAPIDeleteSubnetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSubnetExecute(r)
}

/*
DeleteSubnet Delete Subnet

Delete subnet.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param subnetId Subnet Id
	@return VpcV1SubnetsApiAPIDeleteSubnetRequest
*/
func (a *VpcV1SubnetsApiAPIService) DeleteSubnet(ctx context.Context, subnetId string) VpcV1SubnetsApiAPIDeleteSubnetRequest {
	return VpcV1SubnetsApiAPIDeleteSubnetRequest{
		ApiService: a,
		ctx:        ctx,
		subnetId:   subnetId,
	}
}

// Execute executes the request
func (a *VpcV1SubnetsApiAPIService) DeleteSubnetExecute(r VpcV1SubnetsApiAPIDeleteSubnetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/subnets/{subnet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subnet_id"+"}", url.PathEscape(parameterValueToString(r.subnetId, "subnetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1SubnetsApiAPIListSubnetsRequest struct {
	ctx        context.Context
	ApiService *VpcV1SubnetsApiAPIService
	withCount  *string
	limit      *int32
	marker     *string
	sort       *string
	id         *string
	name       *string
	type_      *Type
	state      *SubnetState
	vpcId      *string
	vpcName    *string
}

// with count
func (r VpcV1SubnetsApiAPIListSubnetsRequest) WithCount(withCount string) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r VpcV1SubnetsApiAPIListSubnetsRequest) Limit(limit int32) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.limit = &limit
	return r
}

// marker
func (r VpcV1SubnetsApiAPIListSubnetsRequest) Marker(marker string) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.marker = &marker
	return r
}

// sort
func (r VpcV1SubnetsApiAPIListSubnetsRequest) Sort(sort string) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.sort = &sort
	return r
}

// Subnet Id
func (r VpcV1SubnetsApiAPIListSubnetsRequest) Id(id string) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.id = &id
	return r
}

// Subnet Name
func (r VpcV1SubnetsApiAPIListSubnetsRequest) Name(name string) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.name = &name
	return r
}

// Subnet Type
func (r VpcV1SubnetsApiAPIListSubnetsRequest) Type_(type_ Type) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.type_ = &type_
	return r
}

// State
func (r VpcV1SubnetsApiAPIListSubnetsRequest) State(state SubnetState) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.state = &state
	return r
}

// VPC Id
func (r VpcV1SubnetsApiAPIListSubnetsRequest) VpcId(vpcId string) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Name
func (r VpcV1SubnetsApiAPIListSubnetsRequest) VpcName(vpcName string) VpcV1SubnetsApiAPIListSubnetsRequest {
	r.vpcName = &vpcName
	return r
}

func (r VpcV1SubnetsApiAPIListSubnetsRequest) Execute() (*SubnetListResponse, *http.Response, error) {
	return r.ApiService.ListSubnetsExecute(r)
}

/*
ListSubnets List Subnets

Get subnet list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1SubnetsApiAPIListSubnetsRequest
*/
func (a *VpcV1SubnetsApiAPIService) ListSubnets(ctx context.Context) VpcV1SubnetsApiAPIListSubnetsRequest {
	return VpcV1SubnetsApiAPIListSubnetsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubnetListResponse
func (a *VpcV1SubnetsApiAPIService) ListSubnetsExecute(r VpcV1SubnetsApiAPIListSubnetsRequest) (*SubnetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubnetListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/subnets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.type_ != nil {
		data := r.type_
		data_val := *data
		val := reflect.ValueOf(data_val)
		for i := 0; i < val.NumField(); i++ {
			field := val.Field(i)
			if field.IsValid() && !field.IsZero() {
				parameterAddToHeaderOrQuery(localVarQueryParams, "type", field.Interface(), "form", "")
			}
		}
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1SubnetsApiAPISetSubnetRequest struct {
	ctx              context.Context
	ApiService       *VpcV1SubnetsApiAPIService
	subnetId         string
	subnetSetRequest *SubnetSetRequest
}

func (r VpcV1SubnetsApiAPISetSubnetRequest) SubnetSetRequest(subnetSetRequest SubnetSetRequest) VpcV1SubnetsApiAPISetSubnetRequest {
	r.subnetSetRequest = &subnetSetRequest
	return r
}

func (r VpcV1SubnetsApiAPISetSubnetRequest) Execute() (*SubnetShowResponse, *http.Response, error) {
	return r.ApiService.SetSubnetExecute(r)
}

/*
SetSubnet Set Subnet

Set subnet.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param subnetId Subnet Id
	@return VpcV1SubnetsApiAPISetSubnetRequest
*/
func (a *VpcV1SubnetsApiAPIService) SetSubnet(ctx context.Context, subnetId string) VpcV1SubnetsApiAPISetSubnetRequest {
	return VpcV1SubnetsApiAPISetSubnetRequest{
		ApiService: a,
		ctx:        ctx,
		subnetId:   subnetId,
	}
}

// Execute executes the request
//
//	@return SubnetShowResponse
func (a *VpcV1SubnetsApiAPIService) SetSubnetExecute(r VpcV1SubnetsApiAPISetSubnetRequest) (*SubnetShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubnetShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/subnets/{subnet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subnet_id"+"}", url.PathEscape(parameterValueToString(r.subnetId, "subnetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subnetSetRequest == nil {
		return localVarReturnValue, nil, reportError("subnetSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subnetSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1SubnetsApiAPIShowSubnetRequest struct {
	ctx        context.Context
	ApiService *VpcV1SubnetsApiAPIService
	subnetId   string
}

func (r VpcV1SubnetsApiAPIShowSubnetRequest) Execute() (*SubnetShowResponse, *http.Response, error) {
	return r.ApiService.ShowSubnetExecute(r)
}

/*
ShowSubnet Show Subnet

Show subnet.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param subnetId Subnet Id
	@return VpcV1SubnetsApiAPIShowSubnetRequest
*/
func (a *VpcV1SubnetsApiAPIService) ShowSubnet(ctx context.Context, subnetId string) VpcV1SubnetsApiAPIShowSubnetRequest {
	return VpcV1SubnetsApiAPIShowSubnetRequest{
		ApiService: a,
		ctx:        ctx,
		subnetId:   subnetId,
	}
}

// Execute executes the request
//
//	@return SubnetShowResponse
func (a *VpcV1SubnetsApiAPIService) ShowSubnetExecute(r VpcV1SubnetsApiAPIShowSubnetRequest) (*SubnetShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubnetShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/subnets/{subnet_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"subnet_id"+"}", url.PathEscape(parameterValueToString(r.subnetId, "subnetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
