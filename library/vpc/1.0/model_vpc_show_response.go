/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VpcShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcShowResponse{}

// VpcShowResponse struct for VpcShowResponse
type VpcShowResponse struct {
	Vpc Vpc `json:"vpc"`
}

type _VpcShowResponse VpcShowResponse

// NewVpcShowResponse instantiates a new VpcShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcShowResponse(vpc Vpc) *VpcShowResponse {
	this := VpcShowResponse{}
	this.Vpc = vpc
	return &this
}

// NewVpcShowResponseWithDefaults instantiates a new VpcShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcShowResponseWithDefaults() *VpcShowResponse {
	this := VpcShowResponse{}
	return &this
}

// GetVpc returns the Vpc field value
func (o *VpcShowResponse) GetVpc() Vpc {
	if o == nil {
		var ret Vpc
		return ret
	}

	return o.Vpc
}

// GetVpcOk returns a tuple with the Vpc field value
// and a boolean to check if the value has been set.
func (o *VpcShowResponse) GetVpcOk() (*Vpc, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vpc, true
}

// SetVpc sets field value
func (o *VpcShowResponse) SetVpc(v Vpc) {
	o.Vpc = v
}

func (o VpcShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vpc"] = o.Vpc
	return toSerialize, nil
}

func (o *VpcShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vpc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcShowResponse := _VpcShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpcShowResponse)

	if err != nil {
		return err
	}

	*o = VpcShowResponse(varVpcShowResponse)

	return err
}

type NullableVpcShowResponse struct {
	value *VpcShowResponse
	isSet bool
}

func (v NullableVpcShowResponse) Get() *VpcShowResponse {
	return v.value
}

func (v *NullableVpcShowResponse) Set(val *VpcShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcShowResponse(val *VpcShowResponse) *NullableVpcShowResponse {
	return &NullableVpcShowResponse{value: val, isSet: true}
}

func (v NullableVpcShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
