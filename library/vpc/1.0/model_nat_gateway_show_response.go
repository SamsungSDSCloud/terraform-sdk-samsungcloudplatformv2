/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NatGatewayShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatGatewayShowResponse{}

// NatGatewayShowResponse struct for NatGatewayShowResponse
type NatGatewayShowResponse struct {
	NatGateway NatGateway `json:"nat_gateway"`
}

type _NatGatewayShowResponse NatGatewayShowResponse

// NewNatGatewayShowResponse instantiates a new NatGatewayShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatGatewayShowResponse(natGateway NatGateway) *NatGatewayShowResponse {
	this := NatGatewayShowResponse{}
	this.NatGateway = natGateway
	return &this
}

// NewNatGatewayShowResponseWithDefaults instantiates a new NatGatewayShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatGatewayShowResponseWithDefaults() *NatGatewayShowResponse {
	this := NatGatewayShowResponse{}
	return &this
}

// GetNatGateway returns the NatGateway field value
func (o *NatGatewayShowResponse) GetNatGateway() NatGateway {
	if o == nil {
		var ret NatGateway
		return ret
	}

	return o.NatGateway
}

// GetNatGatewayOk returns a tuple with the NatGateway field value
// and a boolean to check if the value has been set.
func (o *NatGatewayShowResponse) GetNatGatewayOk() (*NatGateway, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NatGateway, true
}

// SetNatGateway sets field value
func (o *NatGatewayShowResponse) SetNatGateway(v NatGateway) {
	o.NatGateway = v
}

func (o NatGatewayShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatGatewayShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nat_gateway"] = o.NatGateway
	return toSerialize, nil
}

func (o *NatGatewayShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nat_gateway",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNatGatewayShowResponse := _NatGatewayShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNatGatewayShowResponse)

	if err != nil {
		return err
	}

	*o = NatGatewayShowResponse(varNatGatewayShowResponse)

	return err
}

type NullableNatGatewayShowResponse struct {
	value *NatGatewayShowResponse
	isSet bool
}

func (v NullableNatGatewayShowResponse) Get() *NatGatewayShowResponse {
	return v.value
}

func (v *NullableNatGatewayShowResponse) Set(val *NatGatewayShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNatGatewayShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNatGatewayShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatGatewayShowResponse(val *NatGatewayShowResponse) *NullableNatGatewayShowResponse {
	return &NullableNatGatewayShowResponse{value: val, isSet: true}
}

func (v NullableNatGatewayShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatGatewayShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
