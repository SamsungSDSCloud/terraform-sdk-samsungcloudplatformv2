/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// PrivateNatIpAttachedResourceType the model 'PrivateNatIpAttachedResourceType'
type PrivateNatIpAttachedResourceType string

// List of PrivateNatIpAttachedResourceType
const (
	PRIVATENATIPATTACHEDRESOURCETYPE_VM PrivateNatIpAttachedResourceType = "VM"
	PRIVATENATIPATTACHEDRESOURCETYPE_BM PrivateNatIpAttachedResourceType = "BM"
)

// All allowed values of PrivateNatIpAttachedResourceType enum
var AllowedPrivateNatIpAttachedResourceTypeEnumValues = []PrivateNatIpAttachedResourceType{
	"VM",
	"BM",
}

func (v *PrivateNatIpAttachedResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivateNatIpAttachedResourceType(value)
	for _, existing := range AllowedPrivateNatIpAttachedResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrivateNatIpAttachedResourceType", value)
}

// NewPrivateNatIpAttachedResourceTypeFromValue returns a pointer to a valid PrivateNatIpAttachedResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrivateNatIpAttachedResourceTypeFromValue(v string) (*PrivateNatIpAttachedResourceType, error) {
	ev := PrivateNatIpAttachedResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrivateNatIpAttachedResourceType: valid values are %v", v, AllowedPrivateNatIpAttachedResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivateNatIpAttachedResourceType) IsValid() bool {
	for _, existing := range AllowedPrivateNatIpAttachedResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrivateNatIpAttachedResourceType value
func (v PrivateNatIpAttachedResourceType) Ptr() *PrivateNatIpAttachedResourceType {
	return &v
}

type NullablePrivateNatIpAttachedResourceType struct {
	value *PrivateNatIpAttachedResourceType
	isSet bool
}

func (v NullablePrivateNatIpAttachedResourceType) Get() *PrivateNatIpAttachedResourceType {
	return v.value
}

func (v *NullablePrivateNatIpAttachedResourceType) Set(val *PrivateNatIpAttachedResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNatIpAttachedResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNatIpAttachedResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNatIpAttachedResourceType(val *PrivateNatIpAttachedResourceType) *NullablePrivateNatIpAttachedResourceType {
	return &NullablePrivateNatIpAttachedResourceType{value: val, isSet: true}
}

func (v NullablePrivateNatIpAttachedResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNatIpAttachedResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
