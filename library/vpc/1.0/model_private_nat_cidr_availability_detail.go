/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PrivateNatCidrAvailabilityDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNatCidrAvailabilityDetail{}

// PrivateNatCidrAvailabilityDetail struct for PrivateNatCidrAvailabilityDetail
type PrivateNatCidrAvailabilityDetail struct {
	// Availability of Private NAT IP range
	Available bool `json:"available"`
	// Private NAT IP range
	Cidr string `json:"cidr"`
	// Direct Connect ID
	DirectConnectId string `json:"direct_connect_id"`
	// Message on the Availability of Private NAT IP Address Range
	Message string `json:"message"`
}

type _PrivateNatCidrAvailabilityDetail PrivateNatCidrAvailabilityDetail

// NewPrivateNatCidrAvailabilityDetail instantiates a new PrivateNatCidrAvailabilityDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNatCidrAvailabilityDetail(available bool, cidr string, directConnectId string, message string) *PrivateNatCidrAvailabilityDetail {
	this := PrivateNatCidrAvailabilityDetail{}
	this.Available = available
	this.Cidr = cidr
	this.DirectConnectId = directConnectId
	this.Message = message
	return &this
}

// NewPrivateNatCidrAvailabilityDetailWithDefaults instantiates a new PrivateNatCidrAvailabilityDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNatCidrAvailabilityDetailWithDefaults() *PrivateNatCidrAvailabilityDetail {
	this := PrivateNatCidrAvailabilityDetail{}
	return &this
}

// GetAvailable returns the Available field value
func (o *PrivateNatCidrAvailabilityDetail) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCidrAvailabilityDetail) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *PrivateNatCidrAvailabilityDetail) SetAvailable(v bool) {
	o.Available = v
}

// GetCidr returns the Cidr field value
func (o *PrivateNatCidrAvailabilityDetail) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCidrAvailabilityDetail) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *PrivateNatCidrAvailabilityDetail) SetCidr(v string) {
	o.Cidr = v
}

// GetDirectConnectId returns the DirectConnectId field value
func (o *PrivateNatCidrAvailabilityDetail) GetDirectConnectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DirectConnectId
}

// GetDirectConnectIdOk returns a tuple with the DirectConnectId field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCidrAvailabilityDetail) GetDirectConnectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DirectConnectId, true
}

// SetDirectConnectId sets field value
func (o *PrivateNatCidrAvailabilityDetail) SetDirectConnectId(v string) {
	o.DirectConnectId = v
}

// GetMessage returns the Message field value
func (o *PrivateNatCidrAvailabilityDetail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *PrivateNatCidrAvailabilityDetail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *PrivateNatCidrAvailabilityDetail) SetMessage(v string) {
	o.Message = v
}

func (o PrivateNatCidrAvailabilityDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNatCidrAvailabilityDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available"] = o.Available
	toSerialize["cidr"] = o.Cidr
	toSerialize["direct_connect_id"] = o.DirectConnectId
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *PrivateNatCidrAvailabilityDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available",
		"cidr",
		"direct_connect_id",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateNatCidrAvailabilityDetail := _PrivateNatCidrAvailabilityDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrivateNatCidrAvailabilityDetail)

	if err != nil {
		return err
	}

	*o = PrivateNatCidrAvailabilityDetail(varPrivateNatCidrAvailabilityDetail)

	return err
}

type NullablePrivateNatCidrAvailabilityDetail struct {
	value *PrivateNatCidrAvailabilityDetail
	isSet bool
}

func (v NullablePrivateNatCidrAvailabilityDetail) Get() *PrivateNatCidrAvailabilityDetail {
	return v.value
}

func (v *NullablePrivateNatCidrAvailabilityDetail) Set(val *PrivateNatCidrAvailabilityDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNatCidrAvailabilityDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNatCidrAvailabilityDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNatCidrAvailabilityDetail(val *PrivateNatCidrAvailabilityDetail) *NullablePrivateNatCidrAvailabilityDetail {
	return &NullablePrivateNatCidrAvailabilityDetail{value: val, isSet: true}
}

func (v NullablePrivateNatCidrAvailabilityDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNatCidrAvailabilityDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
