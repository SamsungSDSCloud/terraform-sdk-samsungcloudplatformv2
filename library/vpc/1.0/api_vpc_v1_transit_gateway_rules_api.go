/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1TransitGatewayRulesApiAPIService VpcV1TransitGatewayRulesApiAPI service
type VpcV1TransitGatewayRulesApiAPIService service

type VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest struct {
	ctx                             context.Context
	ApiService                      *VpcV1TransitGatewayRulesApiAPIService
	transitGatewayId                string
	transitGatewayRuleCreateRequest *TransitGatewayRuleCreateRequest
}

func (r VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest) TransitGatewayRuleCreateRequest(transitGatewayRuleCreateRequest TransitGatewayRuleCreateRequest) VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest {
	r.transitGatewayRuleCreateRequest = &transitGatewayRuleCreateRequest
	return r
}

func (r VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest) Execute() (*TransitGatewayRuleShowResponse, *http.Response, error) {
	return r.ApiService.CreateTransitGatewayRuleExecute(r)
}

/*
CreateTransitGatewayRule Create Transit Gateway Rule

Create Transit Gateway Rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest
*/
func (a *VpcV1TransitGatewayRulesApiAPIService) CreateTransitGatewayRule(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest {
	return VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
//
//	@return TransitGatewayRuleShowResponse
func (a *VpcV1TransitGatewayRulesApiAPIService) CreateTransitGatewayRuleExecute(r VpcV1TransitGatewayRulesApiAPICreateTransitGatewayRuleRequest) (*TransitGatewayRuleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayRuleShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}/routing-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transitGatewayRuleCreateRequest == nil {
		return localVarReturnValue, nil, reportError("transitGatewayRuleCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transitGatewayRuleCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1TransitGatewayRulesApiAPIDeleteTransitGatewayRuleRequest struct {
	ctx              context.Context
	ApiService       *VpcV1TransitGatewayRulesApiAPIService
	transitGatewayId string
	routingRuleId    string
}

func (r VpcV1TransitGatewayRulesApiAPIDeleteTransitGatewayRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTransitGatewayRuleExecute(r)
}

/*
DeleteTransitGatewayRule Delete Transit Gateway Rule

Delete Transit Gateway Rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@param routingRuleId Routing Rule ID
	@return VpcV1TransitGatewayRulesApiAPIDeleteTransitGatewayRuleRequest
*/
func (a *VpcV1TransitGatewayRulesApiAPIService) DeleteTransitGatewayRule(ctx context.Context, transitGatewayId string, routingRuleId string) VpcV1TransitGatewayRulesApiAPIDeleteTransitGatewayRuleRequest {
	return VpcV1TransitGatewayRulesApiAPIDeleteTransitGatewayRuleRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
		routingRuleId:    routingRuleId,
	}
}

// Execute executes the request
func (a *VpcV1TransitGatewayRulesApiAPIService) DeleteTransitGatewayRuleExecute(r VpcV1TransitGatewayRulesApiAPIDeleteTransitGatewayRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}/routing-rules/{routing_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"routing_rule_id"+"}", url.PathEscape(parameterValueToString(r.routingRuleId, "routingRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest struct {
	ctx              context.Context
	ApiService       *VpcV1TransitGatewayRulesApiAPIService
	transitGatewayId string
	connectedVpcId   *string
	destinationType  *TransitGatewayRuleDestinationType
	destinationCidr  *string
}

// VPC ID Connected to Transit Gateway.
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest) ConnectedVpcId(connectedVpcId string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest {
	r.connectedVpcId = &connectedVpcId
	return r
}

// Destination Type
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest) DestinationType(destinationType TransitGatewayRuleDestinationType) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest {
	r.destinationType = &destinationType
	return r
}

// Destination CIDR
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest) DestinationCidr(destinationCidr string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest {
	r.destinationCidr = &destinationCidr
	return r
}

func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest) Execute() (*TransitGatewayRuleAvailabilityResponse, *http.Response, error) {
	return r.ApiService.ListTransitGatewayRoutingRuleAvailabilitiesExecute(r)
}

/*
ListTransitGatewayRoutingRuleAvailabilities List Transit Gateway Routing Rule Availabilities

Get Transit Gateway routing rule availabilities list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest
*/
func (a *VpcV1TransitGatewayRulesApiAPIService) ListTransitGatewayRoutingRuleAvailabilities(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest {
	return VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
//
//	@return TransitGatewayRuleAvailabilityResponse
func (a *VpcV1TransitGatewayRulesApiAPIService) ListTransitGatewayRoutingRuleAvailabilitiesExecute(r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRoutingRuleAvailabilitiesRequest) (*TransitGatewayRuleAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayRuleAvailabilityResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}/routing-rules/destination-cidr-availabilities"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectedVpcId == nil {
		return localVarReturnValue, nil, reportError("connectedVpcId is required and must be specified")
	}
	if r.destinationType == nil {
		return localVarReturnValue, nil, reportError("destinationType is required and must be specified")
	}
	if r.destinationCidr == nil {
		return localVarReturnValue, nil, reportError("destinationCidr is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "connected_vpc_id", r.connectedVpcId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", r.destinationType, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "destination_cidr", r.destinationCidr, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest struct {
	ctx                  context.Context
	ApiService           *VpcV1TransitGatewayRulesApiAPIService
	transitGatewayId     string
	size                 *int32
	page                 *int32
	sort                 *string
	id                   *string
	tgwConnectionVpcId   *string
	tgwConnectionVpcName *string
	sourceType           *TransitGatewayRuleDestinationType
	destinationType      *TransitGatewayRuleDestinationType
	destinationCidr      *string
	state                *RoutingRuleState
}

// size
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) Size(size int32) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.size = &size
	return r
}

// page
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) Page(page int32) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.page = &page
	return r
}

// sort
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) Sort(sort string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.sort = &sort
	return r
}

// Routing Rule ID
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) Id(id string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.id = &id
	return r
}

// VPC ID Connected to Transit Gateway.
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) TgwConnectionVpcId(tgwConnectionVpcId string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.tgwConnectionVpcId = &tgwConnectionVpcId
	return r
}

// VPC Name Connected to Transit Gateway.
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) TgwConnectionVpcName(tgwConnectionVpcName string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.tgwConnectionVpcName = &tgwConnectionVpcName
	return r
}

// Source Type
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) SourceType(sourceType TransitGatewayRuleDestinationType) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.sourceType = &sourceType
	return r
}

// Destination Type
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) DestinationType(destinationType TransitGatewayRuleDestinationType) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.destinationType = &destinationType
	return r
}

// Destination CIDR
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) DestinationCidr(destinationCidr string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.destinationCidr = &destinationCidr
	return r
}

// State
func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) State(state RoutingRuleState) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	r.state = &state
	return r
}

func (r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) Execute() (*TransitGatewayRuleListResponse, *http.Response, error) {
	return r.ApiService.ListTransitGatewayRulesExecute(r)
}

/*
ListTransitGatewayRules List Transit Gateway Rules

Get Transit Gateway Rule list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest
*/
func (a *VpcV1TransitGatewayRulesApiAPIService) ListTransitGatewayRules(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest {
	return VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
//
//	@return TransitGatewayRuleListResponse
func (a *VpcV1TransitGatewayRulesApiAPIService) ListTransitGatewayRulesExecute(r VpcV1TransitGatewayRulesApiAPIListTransitGatewayRulesRequest) (*TransitGatewayRuleListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayRuleListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}/routing-rules"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.tgwConnectionVpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tgw_connection_vpc_id", r.tgwConnectionVpcId, "form", "")
	}
	if r.tgwConnectionVpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tgw_connection_vpc_name", r.tgwConnectionVpcName, "form", "")
	}
	if r.sourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_type", r.sourceType, "form", "")
	}
	if r.destinationType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_type", r.destinationType, "form", "")
	}
	if r.destinationCidr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination_cidr", r.destinationCidr, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
