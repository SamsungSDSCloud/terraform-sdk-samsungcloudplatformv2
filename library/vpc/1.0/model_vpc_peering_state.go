/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// VpcPeeringState the model 'VpcPeeringState'
type VpcPeeringState string

// List of VpcPeeringState
const (
	VPCPEERINGSTATE_CREATING VpcPeeringState = "CREATING"
	VPCPEERINGSTATE_ACTIVE   VpcPeeringState = "ACTIVE"
	VPCPEERINGSTATE_DELETING VpcPeeringState = "DELETING"
	VPCPEERINGSTATE_DELETED  VpcPeeringState = "DELETED"
	VPCPEERINGSTATE_ERROR    VpcPeeringState = "ERROR"
	VPCPEERINGSTATE_EDITING  VpcPeeringState = "EDITING"
)

// All allowed values of VpcPeeringState enum
var AllowedVpcPeeringStateEnumValues = []VpcPeeringState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"ERROR",
	"EDITING",
}

func (v *VpcPeeringState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpcPeeringState(value)
	for _, existing := range AllowedVpcPeeringStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpcPeeringState", value)
}

// NewVpcPeeringStateFromValue returns a pointer to a valid VpcPeeringState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpcPeeringStateFromValue(v string) (*VpcPeeringState, error) {
	ev := VpcPeeringState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpcPeeringState: valid values are %v", v, AllowedVpcPeeringStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpcPeeringState) IsValid() bool {
	for _, existing := range AllowedVpcPeeringStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpcPeeringState value
func (v VpcPeeringState) Ptr() *VpcPeeringState {
	return &v
}

type NullableVpcPeeringState struct {
	value *VpcPeeringState
	isSet bool
}

func (v NullableVpcPeeringState) Get() *VpcPeeringState {
	return v.value
}

func (v *NullableVpcPeeringState) Set(val *VpcPeeringState) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeeringState) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeeringState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeeringState(val *VpcPeeringState) *NullableVpcPeeringState {
	return &NullableVpcPeeringState{value: val, isSet: true}
}

func (v NullableVpcPeeringState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeeringState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
