/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// VpcPeeringRuleDestinationVpcType the model 'VpcPeeringRuleDestinationVpcType'
type VpcPeeringRuleDestinationVpcType string

// List of VpcPeeringRuleDestinationVpcType
const (
	VPCPEERINGRULEDESTINATIONVPCTYPE_REQUESTER_VPC VpcPeeringRuleDestinationVpcType = "REQUESTER_VPC"
	VPCPEERINGRULEDESTINATIONVPCTYPE_APPROVER_VPC  VpcPeeringRuleDestinationVpcType = "APPROVER_VPC"
)

// All allowed values of VpcPeeringRuleDestinationVpcType enum
var AllowedVpcPeeringRuleDestinationVpcTypeEnumValues = []VpcPeeringRuleDestinationVpcType{
	"REQUESTER_VPC",
	"APPROVER_VPC",
}

func (v *VpcPeeringRuleDestinationVpcType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VpcPeeringRuleDestinationVpcType(value)
	for _, existing := range AllowedVpcPeeringRuleDestinationVpcTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VpcPeeringRuleDestinationVpcType", value)
}

// NewVpcPeeringRuleDestinationVpcTypeFromValue returns a pointer to a valid VpcPeeringRuleDestinationVpcType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVpcPeeringRuleDestinationVpcTypeFromValue(v string) (*VpcPeeringRuleDestinationVpcType, error) {
	ev := VpcPeeringRuleDestinationVpcType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VpcPeeringRuleDestinationVpcType: valid values are %v", v, AllowedVpcPeeringRuleDestinationVpcTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VpcPeeringRuleDestinationVpcType) IsValid() bool {
	for _, existing := range AllowedVpcPeeringRuleDestinationVpcTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VpcPeeringRuleDestinationVpcType value
func (v VpcPeeringRuleDestinationVpcType) Ptr() *VpcPeeringRuleDestinationVpcType {
	return &v
}

type NullableVpcPeeringRuleDestinationVpcType struct {
	value *VpcPeeringRuleDestinationVpcType
	isSet bool
}

func (v NullableVpcPeeringRuleDestinationVpcType) Get() *VpcPeeringRuleDestinationVpcType {
	return v.value
}

func (v *NullableVpcPeeringRuleDestinationVpcType) Set(val *VpcPeeringRuleDestinationVpcType) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeeringRuleDestinationVpcType) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeeringRuleDestinationVpcType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeeringRuleDestinationVpcType(val *VpcPeeringRuleDestinationVpcType) *NullableVpcPeeringRuleDestinationVpcType {
	return &NullableVpcPeeringRuleDestinationVpcType{value: val, isSet: true}
}

func (v NullableVpcPeeringRuleDestinationVpcType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeeringRuleDestinationVpcType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
