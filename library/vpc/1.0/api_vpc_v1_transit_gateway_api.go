/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1TransitGatewayApiAPIService VpcV1TransitGatewayApiAPI service
type VpcV1TransitGatewayApiAPIService service

type VpcV1TransitGatewayApiAPICreateTransitGatewayRequest struct {
	ctx                         context.Context
	ApiService                  *VpcV1TransitGatewayApiAPIService
	transitGatewayCreateRequest *TransitGatewayCreateRequest
}

func (r VpcV1TransitGatewayApiAPICreateTransitGatewayRequest) TransitGatewayCreateRequest(transitGatewayCreateRequest TransitGatewayCreateRequest) VpcV1TransitGatewayApiAPICreateTransitGatewayRequest {
	r.transitGatewayCreateRequest = &transitGatewayCreateRequest
	return r
}

func (r VpcV1TransitGatewayApiAPICreateTransitGatewayRequest) Execute() (*TransitGatewayShowResponse, *http.Response, error) {
	return r.ApiService.CreateTransitGatewayExecute(r)
}

/*
CreateTransitGateway Create Transit Gateway

Create Transit Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1TransitGatewayApiAPICreateTransitGatewayRequest
*/
func (a *VpcV1TransitGatewayApiAPIService) CreateTransitGateway(ctx context.Context) VpcV1TransitGatewayApiAPICreateTransitGatewayRequest {
	return VpcV1TransitGatewayApiAPICreateTransitGatewayRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TransitGatewayShowResponse
func (a *VpcV1TransitGatewayApiAPIService) CreateTransitGatewayExecute(r VpcV1TransitGatewayApiAPICreateTransitGatewayRequest) (*TransitGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transitGatewayCreateRequest == nil {
		return localVarReturnValue, nil, reportError("transitGatewayCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transitGatewayCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1TransitGatewayApiAPIDeleteTransitGatewayRequest struct {
	ctx              context.Context
	ApiService       *VpcV1TransitGatewayApiAPIService
	transitGatewayId string
}

func (r VpcV1TransitGatewayApiAPIDeleteTransitGatewayRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTransitGatewayExecute(r)
}

/*
DeleteTransitGateway Delete Transit Gateway

Delete Transit Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayApiAPIDeleteTransitGatewayRequest
*/
func (a *VpcV1TransitGatewayApiAPIService) DeleteTransitGateway(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayApiAPIDeleteTransitGatewayRequest {
	return VpcV1TransitGatewayApiAPIDeleteTransitGatewayRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
func (a *VpcV1TransitGatewayApiAPIService) DeleteTransitGatewayExecute(r VpcV1TransitGatewayApiAPIDeleteTransitGatewayRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1TransitGatewayApiAPIListTransitGatewaysRequest struct {
	ctx        context.Context
	ApiService *VpcV1TransitGatewayApiAPIService
	size       *int32
	page       *int32
	sort       *string
	id         *string
	name       *string
	state      *TransitGatewayState
}

// size
func (r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) Size(size int32) VpcV1TransitGatewayApiAPIListTransitGatewaysRequest {
	r.size = &size
	return r
}

// page
func (r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) Page(page int32) VpcV1TransitGatewayApiAPIListTransitGatewaysRequest {
	r.page = &page
	return r
}

// sort
func (r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) Sort(sort string) VpcV1TransitGatewayApiAPIListTransitGatewaysRequest {
	r.sort = &sort
	return r
}

// Transit Gateway ID
func (r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) Id(id string) VpcV1TransitGatewayApiAPIListTransitGatewaysRequest {
	r.id = &id
	return r
}

// Transit Gateway Name
func (r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) Name(name string) VpcV1TransitGatewayApiAPIListTransitGatewaysRequest {
	r.name = &name
	return r
}

// State
func (r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) State(state TransitGatewayState) VpcV1TransitGatewayApiAPIListTransitGatewaysRequest {
	r.state = &state
	return r
}

func (r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) Execute() (*TransitGatewayListResponse, *http.Response, error) {
	return r.ApiService.ListTransitGatewaysExecute(r)
}

/*
ListTransitGateways List Transit Gateways

Get Transit Gateway list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1TransitGatewayApiAPIListTransitGatewaysRequest
*/
func (a *VpcV1TransitGatewayApiAPIService) ListTransitGateways(ctx context.Context) VpcV1TransitGatewayApiAPIListTransitGatewaysRequest {
	return VpcV1TransitGatewayApiAPIListTransitGatewaysRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TransitGatewayListResponse
func (a *VpcV1TransitGatewayApiAPIService) ListTransitGatewaysExecute(r VpcV1TransitGatewayApiAPIListTransitGatewaysRequest) (*TransitGatewayListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1TransitGatewayApiAPISetTransitGatewayRequest struct {
	ctx                      context.Context
	ApiService               *VpcV1TransitGatewayApiAPIService
	transitGatewayId         string
	transitGatewaySetRequest *TransitGatewaySetRequest
}

func (r VpcV1TransitGatewayApiAPISetTransitGatewayRequest) TransitGatewaySetRequest(transitGatewaySetRequest TransitGatewaySetRequest) VpcV1TransitGatewayApiAPISetTransitGatewayRequest {
	r.transitGatewaySetRequest = &transitGatewaySetRequest
	return r
}

func (r VpcV1TransitGatewayApiAPISetTransitGatewayRequest) Execute() (*TransitGatewayShowResponse, *http.Response, error) {
	return r.ApiService.SetTransitGatewayExecute(r)
}

/*
SetTransitGateway Set Transit Gateway

Set Transit Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayApiAPISetTransitGatewayRequest
*/
func (a *VpcV1TransitGatewayApiAPIService) SetTransitGateway(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayApiAPISetTransitGatewayRequest {
	return VpcV1TransitGatewayApiAPISetTransitGatewayRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
//
//	@return TransitGatewayShowResponse
func (a *VpcV1TransitGatewayApiAPIService) SetTransitGatewayExecute(r VpcV1TransitGatewayApiAPISetTransitGatewayRequest) (*TransitGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transitGatewaySetRequest == nil {
		return localVarReturnValue, nil, reportError("transitGatewaySetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transitGatewaySetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1TransitGatewayApiAPIShowTransitGatewayRequest struct {
	ctx              context.Context
	ApiService       *VpcV1TransitGatewayApiAPIService
	transitGatewayId string
}

func (r VpcV1TransitGatewayApiAPIShowTransitGatewayRequest) Execute() (*TransitGatewayShowResponse, *http.Response, error) {
	return r.ApiService.ShowTransitGatewayExecute(r)
}

/*
ShowTransitGateway Show Transit Gateway

Show Transit Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param transitGatewayId Transit Gateway ID
	@return VpcV1TransitGatewayApiAPIShowTransitGatewayRequest
*/
func (a *VpcV1TransitGatewayApiAPIService) ShowTransitGateway(ctx context.Context, transitGatewayId string) VpcV1TransitGatewayApiAPIShowTransitGatewayRequest {
	return VpcV1TransitGatewayApiAPIShowTransitGatewayRequest{
		ApiService:       a,
		ctx:              ctx,
		transitGatewayId: transitGatewayId,
	}
}

// Execute executes the request
//
//	@return TransitGatewayShowResponse
func (a *VpcV1TransitGatewayApiAPIService) ShowTransitGatewayExecute(r VpcV1TransitGatewayApiAPIShowTransitGatewayRequest) (*TransitGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TransitGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/transit-gateways/{transit_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"transit_gateway_id"+"}", url.PathEscape(parameterValueToString(r.transitGatewayId, "transitGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
