/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PortShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortShowResponse{}

// PortShowResponse struct for PortShowResponse
type PortShowResponse struct {
	Port NullablePort `json:"port"`
}

type _PortShowResponse PortShowResponse

// NewPortShowResponse instantiates a new PortShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortShowResponse(port NullablePort) *PortShowResponse {
	this := PortShowResponse{}
	this.Port = port
	return &this
}

// NewPortShowResponseWithDefaults instantiates a new PortShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortShowResponseWithDefaults() *PortShowResponse {
	this := PortShowResponse{}
	return &this
}

// GetPort returns the Port field value
// If the value is explicit nil, the zero value for Port will be returned
func (o *PortShowResponse) GetPort() Port {
	if o == nil || o.Port.Get() == nil {
		var ret Port
		return ret
	}

	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PortShowResponse) GetPortOk() (*Port, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// SetPort sets field value
func (o *PortShowResponse) SetPort(v Port) {
	o.Port.Set(&v)
}

func (o PortShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["port"] = o.Port.Get()
	return toSerialize, nil
}

func (o *PortShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPortShowResponse := _PortShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPortShowResponse)

	if err != nil {
		return err
	}

	*o = PortShowResponse(varPortShowResponse)

	return err
}

type NullablePortShowResponse struct {
	value *PortShowResponse
	isSet bool
}

func (v NullablePortShowResponse) Get() *PortShowResponse {
	return v.value
}

func (v *NullablePortShowResponse) Set(val *PortShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePortShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePortShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortShowResponse(val *PortShowResponse) *NullablePortShowResponse {
	return &NullablePortShowResponse{value: val, isSet: true}
}

func (v NullablePortShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
