/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1PrivateNatIpApiAPIService VpcV1PrivateNatIpApiAPI service
type VpcV1PrivateNatIpApiAPIService service

type VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest struct {
	ctx                       context.Context
	ApiService                *VpcV1PrivateNatIpApiAPIService
	privateNatId              string
	privateNatIpCreateRequest *PrivateNatIpCreateRequest
}

func (r VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest) PrivateNatIpCreateRequest(privateNatIpCreateRequest PrivateNatIpCreateRequest) VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest {
	r.privateNatIpCreateRequest = &privateNatIpCreateRequest
	return r
}

func (r VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest) Execute() (*PrivateNatIpShowResponse, *http.Response, error) {
	return r.ApiService.CreatePrivateNatIpExecute(r)
}

/*
CreatePrivateNatIp Create Private NAT IP

Create Private NAT IP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param privateNatId Private NAT ID
	@return VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest
*/
func (a *VpcV1PrivateNatIpApiAPIService) CreatePrivateNatIp(ctx context.Context, privateNatId string) VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest {
	return VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest{
		ApiService:   a,
		ctx:          ctx,
		privateNatId: privateNatId,
	}
}

// Execute executes the request
//
//	@return PrivateNatIpShowResponse
func (a *VpcV1PrivateNatIpApiAPIService) CreatePrivateNatIpExecute(r VpcV1PrivateNatIpApiAPICreatePrivateNatIpRequest) (*PrivateNatIpShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivateNatIpShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats/{private_nat_id}/private-nat-ips"
	localVarPath = strings.Replace(localVarPath, "{"+"private_nat_id"+"}", url.PathEscape(parameterValueToString(r.privateNatId, "privateNatId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.privateNatIpCreateRequest == nil {
		return localVarReturnValue, nil, reportError("privateNatIpCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.privateNatIpCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1PrivateNatIpApiAPIDeletePrivateNatIpRequest struct {
	ctx            context.Context
	ApiService     *VpcV1PrivateNatIpApiAPIService
	privateNatId   string
	privateNatIpId string
}

func (r VpcV1PrivateNatIpApiAPIDeletePrivateNatIpRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePrivateNatIpExecute(r)
}

/*
DeletePrivateNatIp Delete Private NAT IP

Delete Private NAT IP.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param privateNatId Private NAT ID
	@param privateNatIpId Private NAT IP ID
	@return VpcV1PrivateNatIpApiAPIDeletePrivateNatIpRequest
*/
func (a *VpcV1PrivateNatIpApiAPIService) DeletePrivateNatIp(ctx context.Context, privateNatId string, privateNatIpId string) VpcV1PrivateNatIpApiAPIDeletePrivateNatIpRequest {
	return VpcV1PrivateNatIpApiAPIDeletePrivateNatIpRequest{
		ApiService:     a,
		ctx:            ctx,
		privateNatId:   privateNatId,
		privateNatIpId: privateNatIpId,
	}
}

// Execute executes the request
func (a *VpcV1PrivateNatIpApiAPIService) DeletePrivateNatIpExecute(r VpcV1PrivateNatIpApiAPIDeletePrivateNatIpRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats/{private_nat_id}/private-nat-ips/{private_nat_ip_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"private_nat_id"+"}", url.PathEscape(parameterValueToString(r.privateNatId, "privateNatId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"private_nat_ip_id"+"}", url.PathEscape(parameterValueToString(r.privateNatIpId, "privateNatIpId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest struct {
	ctx                  context.Context
	ApiService           *VpcV1PrivateNatIpApiAPIService
	privateNatId         string
	size                 *int32
	page                 *int32
	sort                 *string
	ipAddress            *string
	state                *PrivateNatIpState
	attachedResourceType *PrivateNatIpAttachedResourceType
	attachedResourceId   *string
	attachedResourceName *string
}

// size
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) Size(size int32) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.size = &size
	return r
}

// page
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) Page(page int32) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.page = &page
	return r
}

// sort
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) Sort(sort string) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.sort = &sort
	return r
}

// Private NAT IP Address
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) IpAddress(ipAddress string) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.ipAddress = &ipAddress
	return r
}

// Private NAT IP State
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) State(state PrivateNatIpState) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.state = &state
	return r
}

// Private NAT IP Attached Resource Type
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) AttachedResourceType(attachedResourceType PrivateNatIpAttachedResourceType) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.attachedResourceType = &attachedResourceType
	return r
}

// Private NAT IP Attached Resource ID
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) AttachedResourceId(attachedResourceId string) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.attachedResourceId = &attachedResourceId
	return r
}

// Private NAT IP Attached Resource Name
func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) AttachedResourceName(attachedResourceName string) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	r.attachedResourceName = &attachedResourceName
	return r
}

func (r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) Execute() (*PrivateNatIpListResponse, *http.Response, error) {
	return r.ApiService.ListPrivateNatIpsExecute(r)
}

/*
ListPrivateNatIps List Private NAT IP

Get Private NAT IP list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param privateNatId Private NAT ID
	@return VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest
*/
func (a *VpcV1PrivateNatIpApiAPIService) ListPrivateNatIps(ctx context.Context, privateNatId string) VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest {
	return VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest{
		ApiService:   a,
		ctx:          ctx,
		privateNatId: privateNatId,
	}
}

// Execute executes the request
//
//	@return PrivateNatIpListResponse
func (a *VpcV1PrivateNatIpApiAPIService) ListPrivateNatIpsExecute(r VpcV1PrivateNatIpApiAPIListPrivateNatIpsRequest) (*PrivateNatIpListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrivateNatIpListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/private-nats/{private_nat_id}/private-nat-ips"
	localVarPath = strings.Replace(localVarPath, "{"+"private_nat_id"+"}", url.PathEscape(parameterValueToString(r.privateNatId, "privateNatId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.ipAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip_address", r.ipAddress, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.attachedResourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attached_resource_type", r.attachedResourceType, "form", "")
	}
	if r.attachedResourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attached_resource_id", r.attachedResourceId, "form", "")
	}
	if r.attachedResourceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "attached_resource_name", r.attachedResourceName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
