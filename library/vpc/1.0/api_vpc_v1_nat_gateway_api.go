/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// VpcV1NatGatewayApiAPIService VpcV1NatGatewayApiAPI service
type VpcV1NatGatewayApiAPIService service

type VpcV1NatGatewayApiAPICreateNatGatewayRequest struct {
	ctx                     context.Context
	ApiService              *VpcV1NatGatewayApiAPIService
	natGatewayCreateRequest *NatGatewayCreateRequest
}

func (r VpcV1NatGatewayApiAPICreateNatGatewayRequest) NatGatewayCreateRequest(natGatewayCreateRequest NatGatewayCreateRequest) VpcV1NatGatewayApiAPICreateNatGatewayRequest {
	r.natGatewayCreateRequest = &natGatewayCreateRequest
	return r
}

func (r VpcV1NatGatewayApiAPICreateNatGatewayRequest) Execute() (*NatGatewayShowResponse, *http.Response, error) {
	return r.ApiService.CreateNatGatewayExecute(r)
}

/*
CreateNatGateway Create NAT Gateway

Create NAT Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1NatGatewayApiAPICreateNatGatewayRequest
*/
func (a *VpcV1NatGatewayApiAPIService) CreateNatGateway(ctx context.Context) VpcV1NatGatewayApiAPICreateNatGatewayRequest {
	return VpcV1NatGatewayApiAPICreateNatGatewayRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return NatGatewayShowResponse
func (a *VpcV1NatGatewayApiAPIService) CreateNatGatewayExecute(r VpcV1NatGatewayApiAPICreateNatGatewayRequest) (*NatGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NatGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/nat-gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.natGatewayCreateRequest == nil {
		return localVarReturnValue, nil, reportError("natGatewayCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.natGatewayCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1NatGatewayApiAPIDeleteNatGatewayRequest struct {
	ctx          context.Context
	ApiService   *VpcV1NatGatewayApiAPIService
	natGatewayId string
}

func (r VpcV1NatGatewayApiAPIDeleteNatGatewayRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNatGatewayExecute(r)
}

/*
DeleteNatGateway Delete NAT Gateway

Delete NAT Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param natGatewayId NAT Gateway ID
	@return VpcV1NatGatewayApiAPIDeleteNatGatewayRequest
*/
func (a *VpcV1NatGatewayApiAPIService) DeleteNatGateway(ctx context.Context, natGatewayId string) VpcV1NatGatewayApiAPIDeleteNatGatewayRequest {
	return VpcV1NatGatewayApiAPIDeleteNatGatewayRequest{
		ApiService:   a,
		ctx:          ctx,
		natGatewayId: natGatewayId,
	}
}

// Execute executes the request
func (a *VpcV1NatGatewayApiAPIService) DeleteNatGatewayExecute(r VpcV1NatGatewayApiAPIDeleteNatGatewayRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/nat-gateways/{nat_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"nat_gateway_id"+"}", url.PathEscape(parameterValueToString(r.natGatewayId, "natGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VpcV1NatGatewayApiAPIListNatGatewaysRequest struct {
	ctx                 context.Context
	ApiService          *VpcV1NatGatewayApiAPIService
	withCount           *string
	limit               *int32
	marker              *string
	sort                *string
	name                *string
	vpcId               *string
	vpcName             *string
	subnetId            *string
	subnetName          *string
	natGatewayIpAddress *string
	state               *NatGatewayState
}

// with count
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) WithCount(withCount string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) Limit(limit int32) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.limit = &limit
	return r
}

// marker
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) Marker(marker string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.marker = &marker
	return r
}

// sort
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) Sort(sort string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.sort = &sort
	return r
}

// NAT Gateway Name
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) Name(name string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.name = &name
	return r
}

// VPC Id
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) VpcId(vpcId string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.vpcId = &vpcId
	return r
}

// VPC Name
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) VpcName(vpcName string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.vpcName = &vpcName
	return r
}

// Subnet Id
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) SubnetId(subnetId string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.subnetId = &subnetId
	return r
}

// Subnet Name
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) SubnetName(subnetName string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.subnetName = &subnetName
	return r
}

// NAT Gateway IP Address
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) NatGatewayIpAddress(natGatewayIpAddress string) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.natGatewayIpAddress = &natGatewayIpAddress
	return r
}

// NAT Gateway State
func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) State(state NatGatewayState) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	r.state = &state
	return r
}

func (r VpcV1NatGatewayApiAPIListNatGatewaysRequest) Execute() (*NatGatewayListResponse, *http.Response, error) {
	return r.ApiService.ListNatGatewaysExecute(r)
}

/*
ListNatGateways List NAT Gateways

Get NAT Gateway list.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return VpcV1NatGatewayApiAPIListNatGatewaysRequest
*/
func (a *VpcV1NatGatewayApiAPIService) ListNatGateways(ctx context.Context) VpcV1NatGatewayApiAPIListNatGatewaysRequest {
	return VpcV1NatGatewayApiAPIListNatGatewaysRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return NatGatewayListResponse
func (a *VpcV1NatGatewayApiAPIService) ListNatGatewaysExecute(r VpcV1NatGatewayApiAPIListNatGatewaysRequest) (*NatGatewayListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NatGatewayListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/nat-gateways"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.vpcName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_name", r.vpcName, "form", "")
	}
	if r.subnetId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_id", r.subnetId, "form", "")
	}
	if r.subnetName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "subnet_name", r.subnetName, "form", "")
	}
	if r.natGatewayIpAddress != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nat_gateway_ip_address", r.natGatewayIpAddress, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1NatGatewayApiAPISetNatGatewayRequest struct {
	ctx                  context.Context
	ApiService           *VpcV1NatGatewayApiAPIService
	natGatewayId         string
	natGatewaySetRequest *NatGatewaySetRequest
}

func (r VpcV1NatGatewayApiAPISetNatGatewayRequest) NatGatewaySetRequest(natGatewaySetRequest NatGatewaySetRequest) VpcV1NatGatewayApiAPISetNatGatewayRequest {
	r.natGatewaySetRequest = &natGatewaySetRequest
	return r
}

func (r VpcV1NatGatewayApiAPISetNatGatewayRequest) Execute() (*NatGatewayShowResponse, *http.Response, error) {
	return r.ApiService.SetNatGatewayExecute(r)
}

/*
SetNatGateway Set NAT Gateway

Set NAT Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param natGatewayId NAT Gateway ID
	@return VpcV1NatGatewayApiAPISetNatGatewayRequest
*/
func (a *VpcV1NatGatewayApiAPIService) SetNatGateway(ctx context.Context, natGatewayId string) VpcV1NatGatewayApiAPISetNatGatewayRequest {
	return VpcV1NatGatewayApiAPISetNatGatewayRequest{
		ApiService:   a,
		ctx:          ctx,
		natGatewayId: natGatewayId,
	}
}

// Execute executes the request
//
//	@return NatGatewayShowResponse
func (a *VpcV1NatGatewayApiAPIService) SetNatGatewayExecute(r VpcV1NatGatewayApiAPISetNatGatewayRequest) (*NatGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NatGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/nat-gateways/{nat_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"nat_gateway_id"+"}", url.PathEscape(parameterValueToString(r.natGatewayId, "natGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.natGatewaySetRequest == nil {
		return localVarReturnValue, nil, reportError("natGatewaySetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.natGatewaySetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type VpcV1NatGatewayApiAPIShowNatGatewayRequest struct {
	ctx          context.Context
	ApiService   *VpcV1NatGatewayApiAPIService
	natGatewayId string
}

func (r VpcV1NatGatewayApiAPIShowNatGatewayRequest) Execute() (*NatGatewayShowResponse, *http.Response, error) {
	return r.ApiService.ShowNatGatewayExecute(r)
}

/*
ShowNatGateway Show NAT Gateway

Show NAT Gateway.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param natGatewayId NAT Gateway ID
	@return VpcV1NatGatewayApiAPIShowNatGatewayRequest
*/
func (a *VpcV1NatGatewayApiAPIService) ShowNatGateway(ctx context.Context, natGatewayId string) VpcV1NatGatewayApiAPIShowNatGatewayRequest {
	return VpcV1NatGatewayApiAPIShowNatGatewayRequest{
		ApiService:   a,
		ctx:          ctx,
		natGatewayId: natGatewayId,
	}
}

// Execute executes the request
//
//	@return NatGatewayShowResponse
func (a *VpcV1NatGatewayApiAPIService) ShowNatGatewayExecute(r VpcV1NatGatewayApiAPIShowNatGatewayRequest) (*NatGatewayShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NatGatewayShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/nat-gateways/{nat_gateway_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"nat_gateway_id"+"}", url.PathEscape(parameterValueToString(r.natGatewayId, "natGatewayId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "vpc 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
