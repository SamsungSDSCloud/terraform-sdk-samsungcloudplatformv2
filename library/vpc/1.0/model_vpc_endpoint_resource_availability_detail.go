/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VpcEndpointResourceAvailabilityDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcEndpointResourceAvailabilityDetail{}

// VpcEndpointResourceAvailabilityDetail struct for VpcEndpointResourceAvailabilityDetail
type VpcEndpointResourceAvailabilityDetail struct {
	// Availability of Endpoint Resource
	Available bool `json:"available"`
	// Vpc Endpoint Message
	Message string `json:"message"`
	// VPC Endpoint Resource Key
	ResourceKey string `json:"resource_key"`
	// VPC Endpoint Resource Type
	ResourceType VpcEndpointResourceType `json:"resource_type"`
	// VPC Id
	VpcId string `json:"vpc_id"`
}

type _VpcEndpointResourceAvailabilityDetail VpcEndpointResourceAvailabilityDetail

// NewVpcEndpointResourceAvailabilityDetail instantiates a new VpcEndpointResourceAvailabilityDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcEndpointResourceAvailabilityDetail(available bool, message string, resourceKey string, resourceType VpcEndpointResourceType, vpcId string) *VpcEndpointResourceAvailabilityDetail {
	this := VpcEndpointResourceAvailabilityDetail{}
	this.Available = available
	this.Message = message
	this.ResourceKey = resourceKey
	this.ResourceType = resourceType
	this.VpcId = vpcId
	return &this
}

// NewVpcEndpointResourceAvailabilityDetailWithDefaults instantiates a new VpcEndpointResourceAvailabilityDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcEndpointResourceAvailabilityDetailWithDefaults() *VpcEndpointResourceAvailabilityDetail {
	this := VpcEndpointResourceAvailabilityDetail{}
	return &this
}

// GetAvailable returns the Available field value
func (o *VpcEndpointResourceAvailabilityDetail) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointResourceAvailabilityDetail) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *VpcEndpointResourceAvailabilityDetail) SetAvailable(v bool) {
	o.Available = v
}

// GetMessage returns the Message field value
func (o *VpcEndpointResourceAvailabilityDetail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointResourceAvailabilityDetail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *VpcEndpointResourceAvailabilityDetail) SetMessage(v string) {
	o.Message = v
}

// GetResourceKey returns the ResourceKey field value
func (o *VpcEndpointResourceAvailabilityDetail) GetResourceKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceKey
}

// GetResourceKeyOk returns a tuple with the ResourceKey field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointResourceAvailabilityDetail) GetResourceKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceKey, true
}

// SetResourceKey sets field value
func (o *VpcEndpointResourceAvailabilityDetail) SetResourceKey(v string) {
	o.ResourceKey = v
}

// GetResourceType returns the ResourceType field value
func (o *VpcEndpointResourceAvailabilityDetail) GetResourceType() VpcEndpointResourceType {
	if o == nil {
		var ret VpcEndpointResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointResourceAvailabilityDetail) GetResourceTypeOk() (*VpcEndpointResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *VpcEndpointResourceAvailabilityDetail) SetResourceType(v VpcEndpointResourceType) {
	o.ResourceType = v
}

// GetVpcId returns the VpcId field value
func (o *VpcEndpointResourceAvailabilityDetail) GetVpcId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value
// and a boolean to check if the value has been set.
func (o *VpcEndpointResourceAvailabilityDetail) GetVpcIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VpcId, true
}

// SetVpcId sets field value
func (o *VpcEndpointResourceAvailabilityDetail) SetVpcId(v string) {
	o.VpcId = v
}

func (o VpcEndpointResourceAvailabilityDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcEndpointResourceAvailabilityDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available"] = o.Available
	toSerialize["message"] = o.Message
	toSerialize["resource_key"] = o.ResourceKey
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["vpc_id"] = o.VpcId
	return toSerialize, nil
}

func (o *VpcEndpointResourceAvailabilityDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available",
		"message",
		"resource_key",
		"resource_type",
		"vpc_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcEndpointResourceAvailabilityDetail := _VpcEndpointResourceAvailabilityDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpcEndpointResourceAvailabilityDetail)

	if err != nil {
		return err
	}

	*o = VpcEndpointResourceAvailabilityDetail(varVpcEndpointResourceAvailabilityDetail)

	return err
}

type NullableVpcEndpointResourceAvailabilityDetail struct {
	value *VpcEndpointResourceAvailabilityDetail
	isSet bool
}

func (v NullableVpcEndpointResourceAvailabilityDetail) Get() *VpcEndpointResourceAvailabilityDetail {
	return v.value
}

func (v *NullableVpcEndpointResourceAvailabilityDetail) Set(val *VpcEndpointResourceAvailabilityDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcEndpointResourceAvailabilityDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcEndpointResourceAvailabilityDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcEndpointResourceAvailabilityDetail(val *VpcEndpointResourceAvailabilityDetail) *NullableVpcEndpointResourceAvailabilityDetail {
	return &NullableVpcEndpointResourceAvailabilityDetail{value: val, isSet: true}
}

func (v NullableVpcEndpointResourceAvailabilityDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcEndpointResourceAvailabilityDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
