/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VpcPeeringRuleCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VpcPeeringRuleCreateRequest{}

// VpcPeeringRuleCreateRequest struct for VpcPeeringRuleCreateRequest
type VpcPeeringRuleCreateRequest struct {
	// Destination CIDR
	DestinationCidr string `json:"destination_cidr"`
	// Destination VPC Type
	DestinationVpcType VpcPeeringRuleDestinationVpcType `json:"destination_vpc_type"`
	// Tag List
	Tags []Tag `json:"tags,omitempty"`
}

type _VpcPeeringRuleCreateRequest VpcPeeringRuleCreateRequest

// NewVpcPeeringRuleCreateRequest instantiates a new VpcPeeringRuleCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVpcPeeringRuleCreateRequest(destinationCidr string, destinationVpcType VpcPeeringRuleDestinationVpcType) *VpcPeeringRuleCreateRequest {
	this := VpcPeeringRuleCreateRequest{}
	this.DestinationCidr = destinationCidr
	this.DestinationVpcType = destinationVpcType
	return &this
}

// NewVpcPeeringRuleCreateRequestWithDefaults instantiates a new VpcPeeringRuleCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVpcPeeringRuleCreateRequestWithDefaults() *VpcPeeringRuleCreateRequest {
	this := VpcPeeringRuleCreateRequest{}
	return &this
}

// GetDestinationCidr returns the DestinationCidr field value
func (o *VpcPeeringRuleCreateRequest) GetDestinationCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationCidr
}

// GetDestinationCidrOk returns a tuple with the DestinationCidr field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringRuleCreateRequest) GetDestinationCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationCidr, true
}

// SetDestinationCidr sets field value
func (o *VpcPeeringRuleCreateRequest) SetDestinationCidr(v string) {
	o.DestinationCidr = v
}

// GetDestinationVpcType returns the DestinationVpcType field value
func (o *VpcPeeringRuleCreateRequest) GetDestinationVpcType() VpcPeeringRuleDestinationVpcType {
	if o == nil {
		var ret VpcPeeringRuleDestinationVpcType
		return ret
	}

	return o.DestinationVpcType
}

// GetDestinationVpcTypeOk returns a tuple with the DestinationVpcType field value
// and a boolean to check if the value has been set.
func (o *VpcPeeringRuleCreateRequest) GetDestinationVpcTypeOk() (*VpcPeeringRuleDestinationVpcType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationVpcType, true
}

// SetDestinationVpcType sets field value
func (o *VpcPeeringRuleCreateRequest) SetDestinationVpcType(v VpcPeeringRuleDestinationVpcType) {
	o.DestinationVpcType = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VpcPeeringRuleCreateRequest) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VpcPeeringRuleCreateRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VpcPeeringRuleCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *VpcPeeringRuleCreateRequest) SetTags(v []Tag) {
	o.Tags = v
}

func (o VpcPeeringRuleCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VpcPeeringRuleCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination_cidr"] = o.DestinationCidr
	toSerialize["destination_vpc_type"] = o.DestinationVpcType
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *VpcPeeringRuleCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination_cidr",
		"destination_vpc_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVpcPeeringRuleCreateRequest := _VpcPeeringRuleCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVpcPeeringRuleCreateRequest)

	if err != nil {
		return err
	}

	*o = VpcPeeringRuleCreateRequest(varVpcPeeringRuleCreateRequest)

	return err
}

type NullableVpcPeeringRuleCreateRequest struct {
	value *VpcPeeringRuleCreateRequest
	isSet bool
}

func (v NullableVpcPeeringRuleCreateRequest) Get() *VpcPeeringRuleCreateRequest {
	return v.value
}

func (v *NullableVpcPeeringRuleCreateRequest) Set(val *VpcPeeringRuleCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVpcPeeringRuleCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVpcPeeringRuleCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVpcPeeringRuleCreateRequest(val *VpcPeeringRuleCreateRequest) *NullableVpcPeeringRuleCreateRequest {
	return &NullableVpcPeeringRuleCreateRequest{value: val, isSet: true}
}

func (v NullableVpcPeeringRuleCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVpcPeeringRuleCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
