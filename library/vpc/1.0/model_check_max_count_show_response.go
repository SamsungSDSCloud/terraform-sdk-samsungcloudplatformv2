/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CheckMaxCountShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckMaxCountShowResponse{}

// CheckMaxCountShowResponse struct for CheckMaxCountShowResponse
type CheckMaxCountShowResponse struct {
	// Max Count
	MaxCount int32 `json:"max_count"`
}

type _CheckMaxCountShowResponse CheckMaxCountShowResponse

// NewCheckMaxCountShowResponse instantiates a new CheckMaxCountShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckMaxCountShowResponse(maxCount int32) *CheckMaxCountShowResponse {
	this := CheckMaxCountShowResponse{}
	this.MaxCount = maxCount
	return &this
}

// NewCheckMaxCountShowResponseWithDefaults instantiates a new CheckMaxCountShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckMaxCountShowResponseWithDefaults() *CheckMaxCountShowResponse {
	this := CheckMaxCountShowResponse{}
	return &this
}

// GetMaxCount returns the MaxCount field value
func (o *CheckMaxCountShowResponse) GetMaxCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxCount
}

// GetMaxCountOk returns a tuple with the MaxCount field value
// and a boolean to check if the value has been set.
func (o *CheckMaxCountShowResponse) GetMaxCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxCount, true
}

// SetMaxCount sets field value
func (o *CheckMaxCountShowResponse) SetMaxCount(v int32) {
	o.MaxCount = v
}

func (o CheckMaxCountShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckMaxCountShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["max_count"] = o.MaxCount
	return toSerialize, nil
}

func (o *CheckMaxCountShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckMaxCountShowResponse := _CheckMaxCountShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckMaxCountShowResponse)

	if err != nil {
		return err
	}

	*o = CheckMaxCountShowResponse(varCheckMaxCountShowResponse)

	return err
}

type NullableCheckMaxCountShowResponse struct {
	value *CheckMaxCountShowResponse
	isSet bool
}

func (v NullableCheckMaxCountShowResponse) Get() *CheckMaxCountShowResponse {
	return v.value
}

func (v *NullableCheckMaxCountShowResponse) Set(val *CheckMaxCountShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckMaxCountShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckMaxCountShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckMaxCountShowResponse(val *CheckMaxCountShowResponse) *NullableCheckMaxCountShowResponse {
	return &NullableCheckMaxCountShowResponse{value: val, isSet: true}
}

func (v NullableCheckMaxCountShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckMaxCountShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
