/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"encoding/json"
	"fmt"
)

// NetworkConfigMaxValue the model 'NetworkConfigMaxValue'
type NetworkConfigMaxValue string

// List of NetworkConfigMaxValue
const (
	NETWORKCONFIGMAXVALUE_VPC_PROJECT_MAX                         NetworkConfigMaxValue = "VPC.PROJECT.MAX"
	NETWORKCONFIGMAXVALUE_SUBNET_VPC_MAX                          NetworkConfigMaxValue = "SUBNET.VPC.MAX"
	NETWORKCONFIGMAXVALUE_IP_ALLOCATION_POOLS_SUBNET_MAX          NetworkConfigMaxValue = "IP.ALLOCATION.POOLS.SUBNET.MAX"
	NETWORKCONFIGMAXVALUE_DNS_NAMESERVER_SUBNET_MAX               NetworkConfigMaxValue = "DNS.NAMESERVER.SUBNET.MAX"
	NETWORKCONFIGMAXVALUE_HOST_ROUTES_SUBNET_MAX                  NetworkConfigMaxValue = "HOST.ROUTES.SUBNET.MAX"
	NETWORKCONFIGMAXVALUE_PORT_SECURITY_GROUP_MAX                 NetworkConfigMaxValue = "PORT.SECURITY_GROUP.MAX"
	NETWORKCONFIGMAXVALUE_DCON_UP_ROUTING_RULE_MAX                NetworkConfigMaxValue = "DCON.UP.ROUTING.RULE.MAX"
	NETWORKCONFIGMAXVALUE_DCON_DOWN_ROUTING_RULE_MAX              NetworkConfigMaxValue = "DCON.DOWN.ROUTING.RULE.MAX"
	NETWORKCONFIGMAXVALUE_TRANSIT_GATEWAY_MAX_COUNT               NetworkConfigMaxValue = "TRANSIT_GATEWAY.MAX.COUNT"
	NETWORKCONFIGMAXVALUE_VPC_PEERING_MAX_COUNT                   NetworkConfigMaxValue = "VPC_PEERING.MAX.COUNT"
	NETWORKCONFIGMAXVALUE_VPC_PEERING_DIFFERENT_ACCOUNT_MAX_COUNT NetworkConfigMaxValue = "VPC_PEERING.DIFFERENT.ACCOUNT.MAX.COUNT"
	NETWORKCONFIGMAXVALUE_VPC_VPC_PEERING_MAX_COUNT               NetworkConfigMaxValue = "VPC.VPC_PEERING.MAX.COUNT"
	NETWORKCONFIGMAXVALUE_VPC_PEERING_ROUTING_RULE_MAX_COUNT      NetworkConfigMaxValue = "VPC_PEERING.ROUTING.RULE.MAX.COUNT"
	NETWORKCONFIGMAXVALUE_TRANSIT_GATEWAY_VPC_MAX_COUNT           NetworkConfigMaxValue = "TRANSIT_GATEWAY.VPC.MAX.COUNT"
	NETWORKCONFIGMAXVALUE_VPC_TRANSIT_GATEWAY_MAX_COUNT           NetworkConfigMaxValue = "VPC.TRANSIT_GATEWAY.MAX.COUNT"
	NETWORKCONFIGMAXVALUE_PRIVATE_NAT_DIRECT_CONNECT_MAX          NetworkConfigMaxValue = "PRIVATE_NAT.DIRECT_CONNECT.MAX"
	NETWORKCONFIGMAXVALUE_DNS_PRIVATE_DNS_MAX_COUNT               NetworkConfigMaxValue = "DNS.PRIVATE_DNS.MAX.COUNT"
)

// All allowed values of NetworkConfigMaxValue enum
var AllowedNetworkConfigMaxValueEnumValues = []NetworkConfigMaxValue{
	"VPC.PROJECT.MAX",
	"SUBNET.VPC.MAX",
	"IP.ALLOCATION.POOLS.SUBNET.MAX",
	"DNS.NAMESERVER.SUBNET.MAX",
	"HOST.ROUTES.SUBNET.MAX",
	"PORT.SECURITY_GROUP.MAX",
	"DCON.UP.ROUTING.RULE.MAX",
	"DCON.DOWN.ROUTING.RULE.MAX",
	"TRANSIT_GATEWAY.MAX.COUNT",
	"VPC_PEERING.MAX.COUNT",
	"VPC_PEERING.DIFFERENT.ACCOUNT.MAX.COUNT",
	"VPC.VPC_PEERING.MAX.COUNT",
	"VPC_PEERING.ROUTING.RULE.MAX.COUNT",
	"TRANSIT_GATEWAY.VPC.MAX.COUNT",
	"VPC.TRANSIT_GATEWAY.MAX.COUNT",
	"PRIVATE_NAT.DIRECT_CONNECT.MAX",
	"DNS.PRIVATE_DNS.MAX.COUNT",
}

func (v *NetworkConfigMaxValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NetworkConfigMaxValue(value)
	for _, existing := range AllowedNetworkConfigMaxValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NetworkConfigMaxValue", value)
}

// NewNetworkConfigMaxValueFromValue returns a pointer to a valid NetworkConfigMaxValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNetworkConfigMaxValueFromValue(v string) (*NetworkConfigMaxValue, error) {
	ev := NetworkConfigMaxValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NetworkConfigMaxValue: valid values are %v", v, AllowedNetworkConfigMaxValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NetworkConfigMaxValue) IsValid() bool {
	for _, existing := range AllowedNetworkConfigMaxValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NetworkConfigMaxValue value
func (v NetworkConfigMaxValue) Ptr() *NetworkConfigMaxValue {
	return &v
}

type NullableNetworkConfigMaxValue struct {
	value *NetworkConfigMaxValue
	isSet bool
}

func (v NullableNetworkConfigMaxValue) Get() *NetworkConfigMaxValue {
	return v.value
}

func (v *NullableNetworkConfigMaxValue) Set(val *NetworkConfigMaxValue) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkConfigMaxValue) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkConfigMaxValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkConfigMaxValue(val *NetworkConfigMaxValue) *NullableNetworkConfigMaxValue {
	return &NullableNetworkConfigMaxValue{value: val, isSet: true}
}

func (v NullableNetworkConfigMaxValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkConfigMaxValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
