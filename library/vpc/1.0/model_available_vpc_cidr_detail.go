/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6894
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package vpc

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AvailableVpcCidrDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailableVpcCidrDetail{}

// AvailableVpcCidrDetail struct for AvailableVpcCidrDetail
type AvailableVpcCidrDetail struct {
	// VPC Cidr Available
	Available bool `json:"available"`
	// VPC Cidr
	Cidr string `json:"cidr"`
	// VPC Message
	Message string `json:"message"`
}

type _AvailableVpcCidrDetail AvailableVpcCidrDetail

// NewAvailableVpcCidrDetail instantiates a new AvailableVpcCidrDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableVpcCidrDetail(available bool, cidr string, message string) *AvailableVpcCidrDetail {
	this := AvailableVpcCidrDetail{}
	this.Available = available
	this.Cidr = cidr
	this.Message = message
	return &this
}

// NewAvailableVpcCidrDetailWithDefaults instantiates a new AvailableVpcCidrDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableVpcCidrDetailWithDefaults() *AvailableVpcCidrDetail {
	this := AvailableVpcCidrDetail{}
	return &this
}

// GetAvailable returns the Available field value
func (o *AvailableVpcCidrDetail) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *AvailableVpcCidrDetail) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *AvailableVpcCidrDetail) SetAvailable(v bool) {
	o.Available = v
}

// GetCidr returns the Cidr field value
func (o *AvailableVpcCidrDetail) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *AvailableVpcCidrDetail) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *AvailableVpcCidrDetail) SetCidr(v string) {
	o.Cidr = v
}

// GetMessage returns the Message field value
func (o *AvailableVpcCidrDetail) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *AvailableVpcCidrDetail) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *AvailableVpcCidrDetail) SetMessage(v string) {
	o.Message = v
}

func (o AvailableVpcCidrDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailableVpcCidrDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["available"] = o.Available
	toSerialize["cidr"] = o.Cidr
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *AvailableVpcCidrDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"available",
		"cidr",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailableVpcCidrDetail := _AvailableVpcCidrDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvailableVpcCidrDetail)

	if err != nil {
		return err
	}

	*o = AvailableVpcCidrDetail(varAvailableVpcCidrDetail)

	return err
}

type NullableAvailableVpcCidrDetail struct {
	value *AvailableVpcCidrDetail
	isSet bool
}

func (v NullableAvailableVpcCidrDetail) Get() *AvailableVpcCidrDetail {
	return v.value
}

func (v *NullableAvailableVpcCidrDetail) Set(val *AvailableVpcCidrDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableVpcCidrDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableVpcCidrDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableVpcCidrDetail(val *AvailableVpcCidrDetail) *NullableAvailableVpcCidrDetail {
	return &NullableAvailableVpcCidrDetail{value: val, isSet: true}
}

func (v NullableAvailableVpcCidrDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableVpcCidrDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
