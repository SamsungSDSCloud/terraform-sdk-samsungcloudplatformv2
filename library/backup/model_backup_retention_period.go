/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev530
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupRetentionPeriod the model 'BackupRetentionPeriod'
type BackupRetentionPeriod string

// List of BackupRetentionPeriod
const (
	BACKUPRETENTIONPERIOD_WEEK_2 BackupRetentionPeriod = "WEEK_2"
	BACKUPRETENTIONPERIOD_MONTH_1 BackupRetentionPeriod = "MONTH_1"
	BACKUPRETENTIONPERIOD_MONTH_3 BackupRetentionPeriod = "MONTH_3"
	BACKUPRETENTIONPERIOD_MONTH_6 BackupRetentionPeriod = "MONTH_6"
	BACKUPRETENTIONPERIOD_YEAR_1 BackupRetentionPeriod = "YEAR_1"
)

// All allowed values of BackupRetentionPeriod enum
var AllowedBackupRetentionPeriodEnumValues = []BackupRetentionPeriod{
	"WEEK_2",
	"MONTH_1",
	"MONTH_3",
	"MONTH_6",
	"YEAR_1",
}

func (v *BackupRetentionPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupRetentionPeriod(value)
	for _, existing := range AllowedBackupRetentionPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupRetentionPeriod", value)
}

// NewBackupRetentionPeriodFromValue returns a pointer to a valid BackupRetentionPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupRetentionPeriodFromValue(v string) (*BackupRetentionPeriod, error) {
	ev := BackupRetentionPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupRetentionPeriod: valid values are %v", v, AllowedBackupRetentionPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupRetentionPeriod) IsValid() bool {
	for _, existing := range AllowedBackupRetentionPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupRetentionPeriod value
func (v BackupRetentionPeriod) Ptr() *BackupRetentionPeriod {
	return &v
}

type NullableBackupRetentionPeriod struct {
	value *BackupRetentionPeriod
	isSet bool
}

func (v NullableBackupRetentionPeriod) Get() *BackupRetentionPeriod {
	return v.value
}

func (v *NullableBackupRetentionPeriod) Set(val *BackupRetentionPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRetentionPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRetentionPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRetentionPeriod(val *BackupRetentionPeriod) *NullableBackupRetentionPeriod {
	return &NullableBackupRetentionPeriod{value: val, isSet: true}
}

func (v NullableBackupRetentionPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRetentionPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

