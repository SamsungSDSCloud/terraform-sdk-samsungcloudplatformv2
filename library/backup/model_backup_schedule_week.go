/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev530
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupScheduleWeek the model 'BackupScheduleWeek'
type BackupScheduleWeek string

// List of BackupScheduleWeek
const (
	BACKUPSCHEDULEWEEK__1 BackupScheduleWeek = "WEEK_1"
	BACKUPSCHEDULEWEEK__2 BackupScheduleWeek = "WEEK_2"
	BACKUPSCHEDULEWEEK__3 BackupScheduleWeek = "WEEK_3"
	BACKUPSCHEDULEWEEK__4 BackupScheduleWeek = "WEEK_4"
	BACKUPSCHEDULEWEEK_LAST BackupScheduleWeek = "WEEK_LAST"
)

// All allowed values of BackupScheduleWeek enum
var AllowedBackupScheduleWeekEnumValues = []BackupScheduleWeek{
	"WEEK_1",
	"WEEK_2",
	"WEEK_3",
	"WEEK_4",
	"WEEK_LAST",
}

func (v *BackupScheduleWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupScheduleWeek(value)
	for _, existing := range AllowedBackupScheduleWeekEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupScheduleWeek", value)
}

// NewBackupScheduleWeekFromValue returns a pointer to a valid BackupScheduleWeek
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupScheduleWeekFromValue(v string) (*BackupScheduleWeek, error) {
	ev := BackupScheduleWeek(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupScheduleWeek: valid values are %v", v, AllowedBackupScheduleWeekEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupScheduleWeek) IsValid() bool {
	for _, existing := range AllowedBackupScheduleWeekEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupScheduleWeek value
func (v BackupScheduleWeek) Ptr() *BackupScheduleWeek {
	return &v
}

type NullableBackupScheduleWeek struct {
	value *BackupScheduleWeek
	isSet bool
}

func (v NullableBackupScheduleWeek) Get() *BackupScheduleWeek {
	return v.value
}

func (v *NullableBackupScheduleWeek) Set(val *BackupScheduleWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupScheduleWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupScheduleWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupScheduleWeek(val *BackupScheduleWeek) *NullableBackupScheduleWeek {
	return &NullableBackupScheduleWeek{value: val, isSet: true}
}

func (v NullableBackupScheduleWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupScheduleWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

