/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupAgentListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupAgentListResponse{}

// BackupAgentListResponse struct for BackupAgentListResponse
type BackupAgentListResponse struct {
	Contents []BackupAgentResponse `json:"contents"`
	Count NullableInt32 `json:"count,omitempty"`
}

type _BackupAgentListResponse BackupAgentListResponse

// NewBackupAgentListResponse instantiates a new BackupAgentListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupAgentListResponse(contents []BackupAgentResponse) *BackupAgentListResponse {
	this := BackupAgentListResponse{}
	this.Contents = contents
	return &this
}

// NewBackupAgentListResponseWithDefaults instantiates a new BackupAgentListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupAgentListResponseWithDefaults() *BackupAgentListResponse {
	this := BackupAgentListResponse{}
	return &this
}

// GetContents returns the Contents field value
// If the value is explicit nil, the zero value for []BackupAgentResponse will be returned
func (o *BackupAgentListResponse) GetContents() []BackupAgentResponse {
	if o == nil {
		var ret []BackupAgentResponse
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAgentListResponse) GetContentsOk() ([]BackupAgentResponse, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *BackupAgentListResponse) SetContents(v []BackupAgentResponse) {
	o.Contents = v
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAgentListResponse) GetCount() int32 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int32
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAgentListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *BackupAgentListResponse) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt32 and assigns it to the Count field.
func (o *BackupAgentListResponse) SetCount(v int32) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *BackupAgentListResponse) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *BackupAgentListResponse) UnsetCount() {
	o.Count.Unset()
}

func (o BackupAgentListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupAgentListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	return toSerialize, nil
}

func (o *BackupAgentListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupAgentListResponse := _BackupAgentListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupAgentListResponse)

	if err != nil {
		return err
	}

	*o = BackupAgentListResponse(varBackupAgentListResponse)

	return err
}

type NullableBackupAgentListResponse struct {
	value *BackupAgentListResponse
	isSet bool
}

func (v NullableBackupAgentListResponse) Get() *BackupAgentListResponse {
	return v.value
}

func (v *NullableBackupAgentListResponse) Set(val *BackupAgentListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupAgentListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupAgentListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupAgentListResponse(val *BackupAgentListResponse) *NullableBackupAgentListResponse {
	return &NullableBackupAgentListResponse{value: val, isSet: true}
}

func (v NullableBackupAgentListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupAgentListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


