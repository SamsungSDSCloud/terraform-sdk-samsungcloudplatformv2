/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
)

// checks if the BackupRegionRelationshipResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupRegionRelationshipResponse{}

// BackupRegionRelationshipResponse struct for BackupRegionRelationshipResponse
type BackupRegionRelationshipResponse struct {
	FromAvailabilityZone NullableString `json:"from_availability_zone,omitempty"`
	FromRegion NullableString `json:"from_region,omitempty"`
	ToAvailabilityZone NullableString `json:"to_availability_zone,omitempty"`
	ToRegion NullableString `json:"to_region,omitempty"`
}

// NewBackupRegionRelationshipResponse instantiates a new BackupRegionRelationshipResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRegionRelationshipResponse() *BackupRegionRelationshipResponse {
	this := BackupRegionRelationshipResponse{}
	return &this
}

// NewBackupRegionRelationshipResponseWithDefaults instantiates a new BackupRegionRelationshipResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRegionRelationshipResponseWithDefaults() *BackupRegionRelationshipResponse {
	this := BackupRegionRelationshipResponse{}
	return &this
}

// GetFromAvailabilityZone returns the FromAvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRegionRelationshipResponse) GetFromAvailabilityZone() string {
	if o == nil || IsNil(o.FromAvailabilityZone.Get()) {
		var ret string
		return ret
	}
	return *o.FromAvailabilityZone.Get()
}

// GetFromAvailabilityZoneOk returns a tuple with the FromAvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRegionRelationshipResponse) GetFromAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromAvailabilityZone.Get(), o.FromAvailabilityZone.IsSet()
}

// HasFromAvailabilityZone returns a boolean if a field has been set.
func (o *BackupRegionRelationshipResponse) HasFromAvailabilityZone() bool {
	if o != nil && o.FromAvailabilityZone.IsSet() {
		return true
	}

	return false
}

// SetFromAvailabilityZone gets a reference to the given NullableString and assigns it to the FromAvailabilityZone field.
func (o *BackupRegionRelationshipResponse) SetFromAvailabilityZone(v string) {
	o.FromAvailabilityZone.Set(&v)
}
// SetFromAvailabilityZoneNil sets the value for FromAvailabilityZone to be an explicit nil
func (o *BackupRegionRelationshipResponse) SetFromAvailabilityZoneNil() {
	o.FromAvailabilityZone.Set(nil)
}

// UnsetFromAvailabilityZone ensures that no value is present for FromAvailabilityZone, not even an explicit nil
func (o *BackupRegionRelationshipResponse) UnsetFromAvailabilityZone() {
	o.FromAvailabilityZone.Unset()
}

// GetFromRegion returns the FromRegion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRegionRelationshipResponse) GetFromRegion() string {
	if o == nil || IsNil(o.FromRegion.Get()) {
		var ret string
		return ret
	}
	return *o.FromRegion.Get()
}

// GetFromRegionOk returns a tuple with the FromRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRegionRelationshipResponse) GetFromRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromRegion.Get(), o.FromRegion.IsSet()
}

// HasFromRegion returns a boolean if a field has been set.
func (o *BackupRegionRelationshipResponse) HasFromRegion() bool {
	if o != nil && o.FromRegion.IsSet() {
		return true
	}

	return false
}

// SetFromRegion gets a reference to the given NullableString and assigns it to the FromRegion field.
func (o *BackupRegionRelationshipResponse) SetFromRegion(v string) {
	o.FromRegion.Set(&v)
}
// SetFromRegionNil sets the value for FromRegion to be an explicit nil
func (o *BackupRegionRelationshipResponse) SetFromRegionNil() {
	o.FromRegion.Set(nil)
}

// UnsetFromRegion ensures that no value is present for FromRegion, not even an explicit nil
func (o *BackupRegionRelationshipResponse) UnsetFromRegion() {
	o.FromRegion.Unset()
}

// GetToAvailabilityZone returns the ToAvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRegionRelationshipResponse) GetToAvailabilityZone() string {
	if o == nil || IsNil(o.ToAvailabilityZone.Get()) {
		var ret string
		return ret
	}
	return *o.ToAvailabilityZone.Get()
}

// GetToAvailabilityZoneOk returns a tuple with the ToAvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRegionRelationshipResponse) GetToAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToAvailabilityZone.Get(), o.ToAvailabilityZone.IsSet()
}

// HasToAvailabilityZone returns a boolean if a field has been set.
func (o *BackupRegionRelationshipResponse) HasToAvailabilityZone() bool {
	if o != nil && o.ToAvailabilityZone.IsSet() {
		return true
	}

	return false
}

// SetToAvailabilityZone gets a reference to the given NullableString and assigns it to the ToAvailabilityZone field.
func (o *BackupRegionRelationshipResponse) SetToAvailabilityZone(v string) {
	o.ToAvailabilityZone.Set(&v)
}
// SetToAvailabilityZoneNil sets the value for ToAvailabilityZone to be an explicit nil
func (o *BackupRegionRelationshipResponse) SetToAvailabilityZoneNil() {
	o.ToAvailabilityZone.Set(nil)
}

// UnsetToAvailabilityZone ensures that no value is present for ToAvailabilityZone, not even an explicit nil
func (o *BackupRegionRelationshipResponse) UnsetToAvailabilityZone() {
	o.ToAvailabilityZone.Unset()
}

// GetToRegion returns the ToRegion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRegionRelationshipResponse) GetToRegion() string {
	if o == nil || IsNil(o.ToRegion.Get()) {
		var ret string
		return ret
	}
	return *o.ToRegion.Get()
}

// GetToRegionOk returns a tuple with the ToRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRegionRelationshipResponse) GetToRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToRegion.Get(), o.ToRegion.IsSet()
}

// HasToRegion returns a boolean if a field has been set.
func (o *BackupRegionRelationshipResponse) HasToRegion() bool {
	if o != nil && o.ToRegion.IsSet() {
		return true
	}

	return false
}

// SetToRegion gets a reference to the given NullableString and assigns it to the ToRegion field.
func (o *BackupRegionRelationshipResponse) SetToRegion(v string) {
	o.ToRegion.Set(&v)
}
// SetToRegionNil sets the value for ToRegion to be an explicit nil
func (o *BackupRegionRelationshipResponse) SetToRegionNil() {
	o.ToRegion.Set(nil)
}

// UnsetToRegion ensures that no value is present for ToRegion, not even an explicit nil
func (o *BackupRegionRelationshipResponse) UnsetToRegion() {
	o.ToRegion.Unset()
}

func (o BackupRegionRelationshipResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupRegionRelationshipResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FromAvailabilityZone.IsSet() {
		toSerialize["from_availability_zone"] = o.FromAvailabilityZone.Get()
	}
	if o.FromRegion.IsSet() {
		toSerialize["from_region"] = o.FromRegion.Get()
	}
	if o.ToAvailabilityZone.IsSet() {
		toSerialize["to_availability_zone"] = o.ToAvailabilityZone.Get()
	}
	if o.ToRegion.IsSet() {
		toSerialize["to_region"] = o.ToRegion.Get()
	}
	return toSerialize, nil
}

type NullableBackupRegionRelationshipResponse struct {
	value *BackupRegionRelationshipResponse
	isSet bool
}

func (v NullableBackupRegionRelationshipResponse) Get() *BackupRegionRelationshipResponse {
	return v.value
}

func (v *NullableBackupRegionRelationshipResponse) Set(val *BackupRegionRelationshipResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRegionRelationshipResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRegionRelationshipResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRegionRelationshipResponse(val *BackupRegionRelationshipResponse) *NullableBackupRegionRelationshipResponse {
	return &NullableBackupRegionRelationshipResponse{value: val, isSet: true}
}

func (v NullableBackupRegionRelationshipResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRegionRelationshipResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


