/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupTargetListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupTargetListResponse{}

// BackupTargetListResponse struct for BackupTargetListResponse
type BackupTargetListResponse struct {
	Contents []BackupTargetResponse `json:"contents,omitempty"`
	// Count
	Count int32 `json:"count"`
}

type _BackupTargetListResponse BackupTargetListResponse

// NewBackupTargetListResponse instantiates a new BackupTargetListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupTargetListResponse(count int32) *BackupTargetListResponse {
	this := BackupTargetListResponse{}
	this.Count = count
	return &this
}

// NewBackupTargetListResponseWithDefaults instantiates a new BackupTargetListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupTargetListResponseWithDefaults() *BackupTargetListResponse {
	this := BackupTargetListResponse{}
	return &this
}

// GetContents returns the Contents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupTargetListResponse) GetContents() []BackupTargetResponse {
	if o == nil {
		var ret []BackupTargetResponse
		return ret
	}
	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupTargetListResponse) GetContentsOk() ([]BackupTargetResponse, bool) {
	if o == nil || IsNil(o.Contents) {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *BackupTargetListResponse) HasContents() bool {
	if o != nil && !IsNil(o.Contents) {
		return true
	}

	return false
}

// SetContents gets a reference to the given []BackupTargetResponse and assigns it to the Contents field.
func (o *BackupTargetListResponse) SetContents(v []BackupTargetResponse) {
	o.Contents = v
}

// GetCount returns the Count field value
func (o *BackupTargetListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *BackupTargetListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *BackupTargetListResponse) SetCount(v int32) {
	o.Count = v
}

func (o BackupTargetListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupTargetListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *BackupTargetListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupTargetListResponse := _BackupTargetListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupTargetListResponse)

	if err != nil {
		return err
	}

	*o = BackupTargetListResponse(varBackupTargetListResponse)

	return err
}

type NullableBackupTargetListResponse struct {
	value *BackupTargetListResponse
	isSet bool
}

func (v NullableBackupTargetListResponse) Get() *BackupTargetListResponse {
	return v.value
}

func (v *NullableBackupTargetListResponse) Set(val *BackupTargetListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupTargetListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupTargetListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupTargetListResponse(val *BackupTargetListResponse) *NullableBackupTargetListResponse {
	return &NullableBackupTargetListResponse{value: val, isSet: true}
}

func (v NullableBackupTargetListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupTargetListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


