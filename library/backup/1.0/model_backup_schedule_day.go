/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupScheduleDay the model 'BackupScheduleDay'
type BackupScheduleDay string

// List of BackupScheduleDay
const (
	BACKUPSCHEDULEDAY_MON BackupScheduleDay = "MON"
	BACKUPSCHEDULEDAY_TUE BackupScheduleDay = "TUE"
	BACKUPSCHEDULEDAY_WED BackupScheduleDay = "WED"
	BACKUPSCHEDULEDAY_THU BackupScheduleDay = "THU"
	BACKUPSCHEDULEDAY_FRI BackupScheduleDay = "FRI"
	BACKUPSCHEDULEDAY_SAT BackupScheduleDay = "SAT"
	BACKUPSCHEDULEDAY_SUN BackupScheduleDay = "SUN"
)

// All allowed values of BackupScheduleDay enum
var AllowedBackupScheduleDayEnumValues = []BackupScheduleDay{
	"MON",
	"TUE",
	"WED",
	"THU",
	"FRI",
	"SAT",
	"SUN",
}

func (v *BackupScheduleDay) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupScheduleDay(value)
	for _, existing := range AllowedBackupScheduleDayEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupScheduleDay", value)
}

// NewBackupScheduleDayFromValue returns a pointer to a valid BackupScheduleDay
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupScheduleDayFromValue(v string) (*BackupScheduleDay, error) {
	ev := BackupScheduleDay(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupScheduleDay: valid values are %v", v, AllowedBackupScheduleDayEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupScheduleDay) IsValid() bool {
	for _, existing := range AllowedBackupScheduleDayEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupScheduleDay value
func (v BackupScheduleDay) Ptr() *BackupScheduleDay {
	return &v
}

type NullableBackupScheduleDay struct {
	value *BackupScheduleDay
	isSet bool
}

func (v NullableBackupScheduleDay) Get() *BackupScheduleDay {
	return v.value
}

func (v *NullableBackupScheduleDay) Set(val *BackupScheduleDay) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupScheduleDay) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupScheduleDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupScheduleDay(val *BackupScheduleDay) *NullableBackupScheduleDay {
	return &NullableBackupScheduleDay{value: val, isSet: true}
}

func (v NullableBackupScheduleDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupScheduleDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

