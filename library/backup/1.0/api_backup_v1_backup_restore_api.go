/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// BackupV1BackupRestoreApiAPIService BackupV1BackupRestoreApiAPI service
type BackupV1BackupRestoreApiAPIService service

type BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest struct {
	ctx               context.Context
	ApiService        *BackupV1BackupRestoreApiAPIService
	restoreServerName *string
}

// Restore server name
func (r BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest) RestoreServerName(restoreServerName string) BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest {
	r.restoreServerName = &restoreServerName
	return r
}

func (r BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest) Execute() (*BackupRestoreServerNameDuplicateResponse, *http.Response, error) {
	return r.ApiService.CheckBackupRestoreServerNameDuplicateExecute(r)
}

/*
CheckBackupRestoreServerNameDuplicate Check Backup Restore Server Name Duplicate

Check for duplicate restore server name.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest
*/
func (a *BackupV1BackupRestoreApiAPIService) CheckBackupRestoreServerNameDuplicate(ctx context.Context) BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest {
	return BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BackupRestoreServerNameDuplicateResponse
func (a *BackupV1BackupRestoreApiAPIService) CheckBackupRestoreServerNameDuplicateExecute(r BackupV1BackupRestoreApiAPICheckBackupRestoreServerNameDuplicateRequest) (*BackupRestoreServerNameDuplicateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BackupRestoreServerNameDuplicateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/restore/check-name-duplication"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.restoreServerName == nil {
		return localVarReturnValue, nil, reportError("restoreServerName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "restore_server_name", r.restoreServerName, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest struct {
	ctx                              context.Context
	ApiService                       *BackupV1BackupRestoreApiAPIService
	backupId                         string
	backupRestoreTargetDeleteRequest *BackupRestoreTargetDeleteRequest
}

func (r BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest) BackupRestoreTargetDeleteRequest(backupRestoreTargetDeleteRequest BackupRestoreTargetDeleteRequest) BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest {
	r.backupRestoreTargetDeleteRequest = &backupRestoreTargetDeleteRequest
	return r
}

func (r BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest) Execute() (*SyncResponse, *http.Response, error) {
	return r.ApiService.DeleteBackupRestoreTargetExecute(r)
}

/*
DeleteBackupRestoreTarget Delete Backup Restore Target

Delete Backup restore target.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backupId Backup ID
	@return BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest
*/
func (a *BackupV1BackupRestoreApiAPIService) DeleteBackupRestoreTarget(ctx context.Context, backupId string) BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest {
	return BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest{
		ApiService: a,
		ctx:        ctx,
		backupId:   backupId,
	}
}

// Execute executes the request
//
//	@return SyncResponse
func (a *BackupV1BackupRestoreApiAPIService) DeleteBackupRestoreTargetExecute(r BackupV1BackupRestoreApiAPIDeleteBackupRestoreTargetRequest) (*SyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/{backup_id}/restore-targets"
	localVarPath = strings.Replace(localVarPath, "{"+"backup_id"+"}", url.PathEscape(parameterValueToString(r.backupId, "backupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.backupRestoreTargetDeleteRequest == nil {
		return localVarReturnValue, nil, reportError("backupRestoreTargetDeleteRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.backupRestoreTargetDeleteRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest struct {
	ctx          context.Context
	ApiService   *BackupV1BackupRestoreApiAPIService
	backupId     string
	page         *int32
	size         *int32
	sort         *string
	restoreState *BackupRestoreState
	startTime    *time.Time
	endTime      *time.Time
}

// Page
func (r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) Page(page int32) BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest {
	r.page = &page
	return r
}

// Size
func (r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) Size(size int32) BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest {
	r.size = &size
	return r
}

// Sort
func (r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) Sort(sort string) BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest {
	r.sort = &sort
	return r
}

// Restore state
func (r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) RestoreState(restoreState BackupRestoreState) BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest {
	r.restoreState = &restoreState
	return r
}

// Start time
func (r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) StartTime(startTime time.Time) BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest {
	r.startTime = &startTime
	return r
}

// End time
func (r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) EndTime(endTime time.Time) BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest {
	r.endTime = &endTime
	return r
}

func (r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) Execute() (*BackupRestoreHistoryListResponse, *http.Response, error) {
	return r.ApiService.ListBackupRestoreHistoriesExecute(r)
}

/*
ListBackupRestoreHistories List Backup Restore Histories

List Backup restore histories.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backupId Backup ID
	@return BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest
*/
func (a *BackupV1BackupRestoreApiAPIService) ListBackupRestoreHistories(ctx context.Context, backupId string) BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest {
	return BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest{
		ApiService: a,
		ctx:        ctx,
		backupId:   backupId,
	}
}

// Execute executes the request
//
//	@return BackupRestoreHistoryListResponse
func (a *BackupV1BackupRestoreApiAPIService) ListBackupRestoreHistoriesExecute(r BackupV1BackupRestoreApiAPIListBackupRestoreHistoriesRequest) (*BackupRestoreHistoryListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BackupRestoreHistoryListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/{backup_id}/restore-histories"
	localVarPath = strings.Replace(localVarPath, "{"+"backup_id"+"}", url.PathEscape(parameterValueToString(r.backupId, "backupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.restoreState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "restore_state", r.restoreState, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest struct {
	ctx        context.Context
	ApiService *BackupV1BackupRestoreApiAPIService
	backupId   string
	vpcId      *string
	state      *string
	region     *string
}

// VPC ID
func (r BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest) VpcId(vpcId string) BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest {
	r.vpcId = &vpcId
	return r
}

// Subnet state
func (r BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest) State(state string) BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest {
	r.state = &state
	return r
}

// Region to restore server
func (r BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest) Region(region string) BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest {
	r.region = &region
	return r
}

func (r BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest) Execute() (*BackupRestoreSubnetListResponse, *http.Response, error) {
	return r.ApiService.ListBackupRestoreSubnetsExecute(r)
}

/*
ListBackupRestoreSubnets List Backup Restore Subnets

List of subnets to select when restoring to a different location from the original server.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backupId Backup ID
	@return BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest
*/
func (a *BackupV1BackupRestoreApiAPIService) ListBackupRestoreSubnets(ctx context.Context, backupId string) BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest {
	return BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest{
		ApiService: a,
		ctx:        ctx,
		backupId:   backupId,
	}
}

// Execute executes the request
//
//	@return BackupRestoreSubnetListResponse
func (a *BackupV1BackupRestoreApiAPIService) ListBackupRestoreSubnetsExecute(r BackupV1BackupRestoreApiAPIListBackupRestoreSubnetsRequest) (*BackupRestoreSubnetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BackupRestoreSubnetListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/{backup_id}/restore/restorable-subnets"
	localVarPath = strings.Replace(localVarPath, "{"+"backup_id"+"}", url.PathEscape(parameterValueToString(r.backupId, "backupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.vpcId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vpc_id", r.vpcId, "form", "")
	}
	if r.state != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "state", r.state, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest struct {
	ctx             context.Context
	ApiService      *BackupV1BackupRestoreApiAPIService
	backupId        string
	backupStartTime *time.Time
	backupEndTime   *time.Time
	page            *int32
	size            *int32
	sort            *string
}

// Start time
func (r BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest) BackupStartTime(backupStartTime time.Time) BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest {
	r.backupStartTime = &backupStartTime
	return r
}

// End time
func (r BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest) BackupEndTime(backupEndTime time.Time) BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest {
	r.backupEndTime = &backupEndTime
	return r
}

// Page
func (r BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest) Page(page int32) BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest {
	r.page = &page
	return r
}

// Size
func (r BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest) Size(size int32) BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest {
	r.size = &size
	return r
}

// Sort
func (r BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest) Sort(sort string) BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest {
	r.sort = &sort
	return r
}

func (r BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest) Execute() (*BackupRestoreTargetListResponse, *http.Response, error) {
	return r.ApiService.ListBackupRestoreTargetExecute(r)
}

/*
ListBackupRestoreTarget List Backup Restore Targets

List Backup restore targets.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backupId Backup ID
	@return BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest
*/
func (a *BackupV1BackupRestoreApiAPIService) ListBackupRestoreTarget(ctx context.Context, backupId string) BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest {
	return BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest{
		ApiService: a,
		ctx:        ctx,
		backupId:   backupId,
	}
}

// Execute executes the request
//
//	@return BackupRestoreTargetListResponse
func (a *BackupV1BackupRestoreApiAPIService) ListBackupRestoreTargetExecute(r BackupV1BackupRestoreApiAPIListBackupRestoreTargetRequest) (*BackupRestoreTargetListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BackupRestoreTargetListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/{backup_id}/restore-targets"
	localVarPath = strings.Replace(localVarPath, "{"+"backup_id"+"}", url.PathEscape(parameterValueToString(r.backupId, "backupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.backupStartTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "backup_start_time", r.backupStartTime, "form", "")
	}
	if r.backupEndTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "backup_end_time", r.backupEndTime, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackupV1BackupRestoreApiAPIRestoreBackupRequest struct {
	ctx                  context.Context
	ApiService           *BackupV1BackupRestoreApiAPIService
	backupId             string
	backupRestoreRequest *BackupRestoreRequest
}

func (r BackupV1BackupRestoreApiAPIRestoreBackupRequest) BackupRestoreRequest(backupRestoreRequest BackupRestoreRequest) BackupV1BackupRestoreApiAPIRestoreBackupRequest {
	r.backupRestoreRequest = &backupRestoreRequest
	return r
}

func (r BackupV1BackupRestoreApiAPIRestoreBackupRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.RestoreBackupExecute(r)
}

/*
RestoreBackup Restore Backup

Restore the Backup.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backupId Backup ID
	@return BackupV1BackupRestoreApiAPIRestoreBackupRequest
*/
func (a *BackupV1BackupRestoreApiAPIService) RestoreBackup(ctx context.Context, backupId string) BackupV1BackupRestoreApiAPIRestoreBackupRequest {
	return BackupV1BackupRestoreApiAPIRestoreBackupRequest{
		ApiService: a,
		ctx:        ctx,
		backupId:   backupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *BackupV1BackupRestoreApiAPIService) RestoreBackupExecute(r BackupV1BackupRestoreApiAPIRestoreBackupRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/{backup_id}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"backup_id"+"}", url.PathEscape(parameterValueToString(r.backupId, "backupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.backupRestoreRequest == nil {
		return localVarReturnValue, nil, reportError("backupRestoreRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.backupRestoreRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
