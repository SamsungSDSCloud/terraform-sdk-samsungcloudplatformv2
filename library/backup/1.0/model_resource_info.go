/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceInfo{}

// ResourceInfo struct for ResourceInfo
type ResourceInfo struct {
	// ID
	Id string `json:"id"`
	Links []map[string]interface{} `json:"links,omitempty"`
}

type _ResourceInfo ResourceInfo

// NewResourceInfo instantiates a new ResourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInfo(id string) *ResourceInfo {
	this := ResourceInfo{}
	this.Id = id
	return &this
}

// NewResourceInfoWithDefaults instantiates a new ResourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInfoWithDefaults() *ResourceInfo {
	this := ResourceInfo{}
	return &this
}

// GetId returns the Id field value
func (o *ResourceInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceInfo) SetId(v string) {
	o.Id = v
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceInfo) GetLinks() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceInfo) GetLinksOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ResourceInfo) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []map[string]interface{} and assigns it to the Links field.
func (o *ResourceInfo) SetLinks(v []map[string]interface{}) {
	o.Links = v
}

func (o ResourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

func (o *ResourceInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceInfo := _ResourceInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceInfo)

	if err != nil {
		return err
	}

	*o = ResourceInfo(varResourceInfo)

	return err
}

type NullableResourceInfo struct {
	value *ResourceInfo
	isSet bool
}

func (v NullableResourceInfo) Get() *ResourceInfo {
	return v.value
}

func (v *NullableResourceInfo) Set(val *ResourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInfo(val *ResourceInfo) *NullableResourceInfo {
	return &NullableResourceInfo{value: val, isSet: true}
}

func (v NullableResourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


