/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupScheduleType the model 'BackupScheduleType'
type BackupScheduleType string

// List of BackupScheduleType
const (
	BACKUPSCHEDULETYPE_FULL BackupScheduleType = "FULL"
	BACKUPSCHEDULETYPE_INCREMENTAL BackupScheduleType = "INCREMENTAL"
)

// All allowed values of BackupScheduleType enum
var AllowedBackupScheduleTypeEnumValues = []BackupScheduleType{
	"FULL",
	"INCREMENTAL",
}

func (v *BackupScheduleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupScheduleType(value)
	for _, existing := range AllowedBackupScheduleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupScheduleType", value)
}

// NewBackupScheduleTypeFromValue returns a pointer to a valid BackupScheduleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupScheduleTypeFromValue(v string) (*BackupScheduleType, error) {
	ev := BackupScheduleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupScheduleType: valid values are %v", v, AllowedBackupScheduleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupScheduleType) IsValid() bool {
	for _, existing := range AllowedBackupScheduleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupScheduleType value
func (v BackupScheduleType) Ptr() *BackupScheduleType {
	return &v
}

type NullableBackupScheduleType struct {
	value *BackupScheduleType
	isSet bool
}

func (v NullableBackupScheduleType) Get() *BackupScheduleType {
	return v.value
}

func (v *NullableBackupScheduleType) Set(val *BackupScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupScheduleType(val *BackupScheduleType) *NullableBackupScheduleType {
	return &NullableBackupScheduleType{value: val, isSet: true}
}

func (v NullableBackupScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

