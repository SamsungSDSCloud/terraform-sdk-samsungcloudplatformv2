/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupNameDuplicateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupNameDuplicateResponse{}

// BackupNameDuplicateResponse struct for BackupNameDuplicateResponse
type BackupNameDuplicateResponse struct {
	// Result
	Result bool `json:"result"`
}

type _BackupNameDuplicateResponse BackupNameDuplicateResponse

// NewBackupNameDuplicateResponse instantiates a new BackupNameDuplicateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupNameDuplicateResponse(result bool) *BackupNameDuplicateResponse {
	this := BackupNameDuplicateResponse{}
	this.Result = result
	return &this
}

// NewBackupNameDuplicateResponseWithDefaults instantiates a new BackupNameDuplicateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupNameDuplicateResponseWithDefaults() *BackupNameDuplicateResponse {
	this := BackupNameDuplicateResponse{}
	return &this
}

// GetResult returns the Result field value
func (o *BackupNameDuplicateResponse) GetResult() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *BackupNameDuplicateResponse) GetResultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *BackupNameDuplicateResponse) SetResult(v bool) {
	o.Result = v
}

func (o BackupNameDuplicateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupNameDuplicateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

func (o *BackupNameDuplicateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupNameDuplicateResponse := _BackupNameDuplicateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupNameDuplicateResponse)

	if err != nil {
		return err
	}

	*o = BackupNameDuplicateResponse(varBackupNameDuplicateResponse)

	return err
}

type NullableBackupNameDuplicateResponse struct {
	value *BackupNameDuplicateResponse
	isSet bool
}

func (v NullableBackupNameDuplicateResponse) Get() *BackupNameDuplicateResponse {
	return v.value
}

func (v *NullableBackupNameDuplicateResponse) Set(val *BackupNameDuplicateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupNameDuplicateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupNameDuplicateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupNameDuplicateResponse(val *BackupNameDuplicateResponse) *NullableBackupNameDuplicateResponse {
	return &NullableBackupNameDuplicateResponse{value: val, isSet: true}
}

func (v NullableBackupNameDuplicateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupNameDuplicateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


