/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupRestoreSubnetListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupRestoreSubnetListResponse{}

// BackupRestoreSubnetListResponse struct for BackupRestoreSubnetListResponse
type BackupRestoreSubnetListResponse struct {
	// Count
	Count int32 `json:"count"`
	Subnets []BackupRestoreSubnetResponse `json:"subnets,omitempty"`
}

type _BackupRestoreSubnetListResponse BackupRestoreSubnetListResponse

// NewBackupRestoreSubnetListResponse instantiates a new BackupRestoreSubnetListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRestoreSubnetListResponse(count int32) *BackupRestoreSubnetListResponse {
	this := BackupRestoreSubnetListResponse{}
	this.Count = count
	return &this
}

// NewBackupRestoreSubnetListResponseWithDefaults instantiates a new BackupRestoreSubnetListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRestoreSubnetListResponseWithDefaults() *BackupRestoreSubnetListResponse {
	this := BackupRestoreSubnetListResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *BackupRestoreSubnetListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *BackupRestoreSubnetListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *BackupRestoreSubnetListResponse) SetCount(v int32) {
	o.Count = v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRestoreSubnetListResponse) GetSubnets() []BackupRestoreSubnetResponse {
	if o == nil {
		var ret []BackupRestoreSubnetResponse
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRestoreSubnetListResponse) GetSubnetsOk() ([]BackupRestoreSubnetResponse, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *BackupRestoreSubnetListResponse) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []BackupRestoreSubnetResponse and assigns it to the Subnets field.
func (o *BackupRestoreSubnetListResponse) SetSubnets(v []BackupRestoreSubnetResponse) {
	o.Subnets = v
}

func (o BackupRestoreSubnetListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupRestoreSubnetListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if o.Subnets != nil {
		toSerialize["subnets"] = o.Subnets
	}
	return toSerialize, nil
}

func (o *BackupRestoreSubnetListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupRestoreSubnetListResponse := _BackupRestoreSubnetListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupRestoreSubnetListResponse)

	if err != nil {
		return err
	}

	*o = BackupRestoreSubnetListResponse(varBackupRestoreSubnetListResponse)

	return err
}

type NullableBackupRestoreSubnetListResponse struct {
	value *BackupRestoreSubnetListResponse
	isSet bool
}

func (v NullableBackupRestoreSubnetListResponse) Get() *BackupRestoreSubnetListResponse {
	return v.value
}

func (v *NullableBackupRestoreSubnetListResponse) Set(val *BackupRestoreSubnetListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRestoreSubnetListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRestoreSubnetListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRestoreSubnetListResponse(val *BackupRestoreSubnetListResponse) *NullableBackupRestoreSubnetListResponse {
	return &NullableBackupRestoreSubnetListResponse{value: val, isSet: true}
}

func (v NullableBackupRestoreSubnetListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRestoreSubnetListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


