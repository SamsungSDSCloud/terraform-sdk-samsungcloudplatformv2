/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BackupV1BackupsFilesystemApiAPIService BackupV1BackupsFilesystemApiAPI service
type BackupV1BackupsFilesystemApiAPIService service

type BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest struct {
	ctx            context.Context
	ApiService     *BackupV1BackupsFilesystemApiAPIService
	filesystemPath *string
	serverUuid     *string
}

// Filesystem backup path
func (r BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest) FilesystemPath(filesystemPath string) BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest {
	r.filesystemPath = &filesystemPath
	return r
}

// Backup server UUID
func (r BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest) ServerUuid(serverUuid string) BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest {
	r.serverUuid = &serverUuid
	return r
}

func (r BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest) Execute() (*CheckFileSystemDuplicationResponse, *http.Response, error) {
	return r.ApiService.CheckFilesystemDuplicationExecute(r)
}

/*
CheckFilesystemDuplication Check Filesystem Path Duplication

Check filesystem path duplication.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest
*/
func (a *BackupV1BackupsFilesystemApiAPIService) CheckFilesystemDuplication(ctx context.Context) BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest {
	return BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CheckFileSystemDuplicationResponse
func (a *BackupV1BackupsFilesystemApiAPIService) CheckFilesystemDuplicationExecute(r BackupV1BackupsFilesystemApiAPICheckFilesystemDuplicationRequest) (*CheckFileSystemDuplicationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CheckFileSystemDuplicationResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/check-filesystem-duplication"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filesystemPath == nil {
		return localVarReturnValue, nil, reportError("filesystemPath is required and must be specified")
	}
	if r.serverUuid == nil {
		return localVarReturnValue, nil, reportError("serverUuid is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "filesystem_path", r.filesystemPath, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "server_uuid", r.serverUuid, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest struct {
	ctx                         context.Context
	ApiService                  *BackupV1BackupsFilesystemApiAPIService
	backupId                    string
	fileSystemPathUpdateRequest *FileSystemPathUpdateRequest
}

func (r BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest) FileSystemPathUpdateRequest(fileSystemPathUpdateRequest FileSystemPathUpdateRequest) BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest {
	r.fileSystemPathUpdateRequest = &fileSystemPathUpdateRequest
	return r
}

func (r BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest) Execute() (*SyncResponse, *http.Response, error) {
	return r.ApiService.SetFilesystemPathExecute(r)
}

/*
SetFilesystemPath Set Filesystem Path

Set Filesystem path.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param backupId Backup ID
	@return BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest
*/
func (a *BackupV1BackupsFilesystemApiAPIService) SetFilesystemPath(ctx context.Context, backupId string) BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest {
	return BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest{
		ApiService: a,
		ctx:        ctx,
		backupId:   backupId,
	}
}

// Execute executes the request
//
//	@return SyncResponse
func (a *BackupV1BackupsFilesystemApiAPIService) SetFilesystemPathExecute(r BackupV1BackupsFilesystemApiAPISetFilesystemPathRequest) (*SyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/backups/{backup_id}/filesystem-path"
	localVarPath = strings.Replace(localVarPath, "{"+"backup_id"+"}", url.PathEscape(parameterValueToString(r.backupId, "backupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.fileSystemPathUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("fileSystemPathUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "backup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.fileSystemPathUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
