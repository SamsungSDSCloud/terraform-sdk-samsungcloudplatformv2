/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev566
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupJobState the model 'BackupJobState'
type BackupJobState string

// List of BackupJobState
const (
	BACKUPJOBSTATE_SUCCESS BackupJobState = "SUCCESS"
	BACKUPJOBSTATE_PARTIAL_SUCCESS BackupJobState = "PARTIAL_SUCCESS"
	BACKUPJOBSTATE_FAILED BackupJobState = "FAILED"
	BACKUPJOBSTATE_INPROGRESS BackupJobState = "INPROGRESS"
	BACKUPJOBSTATE_ALL BackupJobState = "ALL"
)

// All allowed values of BackupJobState enum
var AllowedBackupJobStateEnumValues = []BackupJobState{
	"SUCCESS",
	"PARTIAL_SUCCESS",
	"FAILED",
	"INPROGRESS",
	"ALL",
}

func (v *BackupJobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupJobState(value)
	for _, existing := range AllowedBackupJobStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupJobState", value)
}

// NewBackupJobStateFromValue returns a pointer to a valid BackupJobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupJobStateFromValue(v string) (*BackupJobState, error) {
	ev := BackupJobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupJobState: valid values are %v", v, AllowedBackupJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupJobState) IsValid() bool {
	for _, existing := range AllowedBackupJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupJobState value
func (v BackupJobState) Ptr() *BackupJobState {
	return &v
}

type NullableBackupJobState struct {
	value *BackupJobState
	isSet bool
}

func (v NullableBackupJobState) Get() *BackupJobState {
	return v.value
}

func (v *NullableBackupJobState) Set(val *BackupJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupJobState(val *BackupJobState) *NullableBackupJobState {
	return &NullableBackupJobState{value: val, isSet: true}
}

func (v NullableBackupJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

