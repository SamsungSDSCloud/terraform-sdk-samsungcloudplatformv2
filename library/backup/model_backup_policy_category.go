/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev530
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupPolicyCategory the model 'BackupPolicyCategory'
type BackupPolicyCategory string

// List of BackupPolicyCategory
const (
	BACKUPPOLICYCATEGORY_AGENTLESS BackupPolicyCategory = "AGENTLESS"
	BACKUPPOLICYCATEGORY_AGENT BackupPolicyCategory = "AGENT"
)

// All allowed values of BackupPolicyCategory enum
var AllowedBackupPolicyCategoryEnumValues = []BackupPolicyCategory{
	"AGENTLESS",
	"AGENT",
}

func (v *BackupPolicyCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupPolicyCategory(value)
	for _, existing := range AllowedBackupPolicyCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupPolicyCategory", value)
}

// NewBackupPolicyCategoryFromValue returns a pointer to a valid BackupPolicyCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupPolicyCategoryFromValue(v string) (*BackupPolicyCategory, error) {
	ev := BackupPolicyCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupPolicyCategory: valid values are %v", v, AllowedBackupPolicyCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupPolicyCategory) IsValid() bool {
	for _, existing := range AllowedBackupPolicyCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupPolicyCategory value
func (v BackupPolicyCategory) Ptr() *BackupPolicyCategory {
	return &v
}

type NullableBackupPolicyCategory struct {
	value *BackupPolicyCategory
	isSet bool
}

func (v NullableBackupPolicyCategory) Get() *BackupPolicyCategory {
	return v.value
}

func (v *NullableBackupPolicyCategory) Set(val *BackupPolicyCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyCategory(val *BackupPolicyCategory) *NullableBackupPolicyCategory {
	return &NullableBackupPolicyCategory{value: val, isSet: true}
}

func (v NullableBackupPolicyCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

