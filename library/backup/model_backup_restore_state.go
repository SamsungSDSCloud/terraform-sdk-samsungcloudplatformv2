/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev530
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupRestoreState the model 'BackupRestoreState'
type BackupRestoreState string

// List of BackupRestoreState
const (
	BACKUPRESTORESTATE_COMPLETED BackupRestoreState = "COMPLETED"
	BACKUPRESTORESTATE_FAILED BackupRestoreState = "FAILED"
	BACKUPRESTORESTATE_INPROGRESS BackupRestoreState = "INPROGRESS"
)

// All allowed values of BackupRestoreState enum
var AllowedBackupRestoreStateEnumValues = []BackupRestoreState{
	"COMPLETED",
	"FAILED",
	"INPROGRESS",
}

func (v *BackupRestoreState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupRestoreState(value)
	for _, existing := range AllowedBackupRestoreStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupRestoreState", value)
}

// NewBackupRestoreStateFromValue returns a pointer to a valid BackupRestoreState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupRestoreStateFromValue(v string) (*BackupRestoreState, error) {
	ev := BackupRestoreState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupRestoreState: valid values are %v", v, AllowedBackupRestoreStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupRestoreState) IsValid() bool {
	for _, existing := range AllowedBackupRestoreStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupRestoreState value
func (v BackupRestoreState) Ptr() *BackupRestoreState {
	return &v
}

type NullableBackupRestoreState struct {
	value *BackupRestoreState
	isSet bool
}

func (v NullableBackupRestoreState) Get() *BackupRestoreState {
	return v.value
}

func (v *NullableBackupRestoreState) Set(val *BackupRestoreState) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRestoreState) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRestoreState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRestoreState(val *BackupRestoreState) *NullableBackupRestoreState {
	return &NullableBackupRestoreState{value: val, isSet: true}
}

func (v NullableBackupRestoreState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRestoreState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

