/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev530
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// BackupScheduleFrequency the model 'BackupScheduleFrequency'
type BackupScheduleFrequency string

// List of BackupScheduleFrequency
const (
	BACKUPSCHEDULEFREQUENCY_MONTHLY BackupScheduleFrequency = "MONTHLY"
	BACKUPSCHEDULEFREQUENCY_WEEKLY BackupScheduleFrequency = "WEEKLY"
	BACKUPSCHEDULEFREQUENCY_DAILY BackupScheduleFrequency = "DAILY"
)

// All allowed values of BackupScheduleFrequency enum
var AllowedBackupScheduleFrequencyEnumValues = []BackupScheduleFrequency{
	"MONTHLY",
	"WEEKLY",
	"DAILY",
}

func (v *BackupScheduleFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupScheduleFrequency(value)
	for _, existing := range AllowedBackupScheduleFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupScheduleFrequency", value)
}

// NewBackupScheduleFrequencyFromValue returns a pointer to a valid BackupScheduleFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupScheduleFrequencyFromValue(v string) (*BackupScheduleFrequency, error) {
	ev := BackupScheduleFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupScheduleFrequency: valid values are %v", v, AllowedBackupScheduleFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupScheduleFrequency) IsValid() bool {
	for _, existing := range AllowedBackupScheduleFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupScheduleFrequency value
func (v BackupScheduleFrequency) Ptr() *BackupScheduleFrequency {
	return &v
}

type NullableBackupScheduleFrequency struct {
	value *BackupScheduleFrequency
	isSet bool
}

func (v NullableBackupScheduleFrequency) Get() *BackupScheduleFrequency {
	return v.value
}

func (v *NullableBackupScheduleFrequency) Set(val *BackupScheduleFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupScheduleFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupScheduleFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupScheduleFrequency(val *BackupScheduleFrequency) *NullableBackupScheduleFrequency {
	return &NullableBackupScheduleFrequency{value: val, isSet: true}
}

func (v NullableBackupScheduleFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupScheduleFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

