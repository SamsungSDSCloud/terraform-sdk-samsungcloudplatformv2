/*
OSSCP backup Project

OSSCP backup Project

API version: 0.0.1.dev530
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backup

import (
	"encoding/json"
	"fmt"
)

// ServerCategory the model 'ServerCategory'
type ServerCategory string

// List of ServerCategory
const (
	SERVERCATEGORY_VIRTUAL_SERVER ServerCategory = "VIRTUAL_SERVER"
	SERVERCATEGORY_GPU_SERVER ServerCategory = "GPU_SERVER"
	SERVERCATEGORY_BAREMETAL_SERVER ServerCategory = "BAREMETAL_SERVER"
)

// All allowed values of ServerCategory enum
var AllowedServerCategoryEnumValues = []ServerCategory{
	"VIRTUAL_SERVER",
	"GPU_SERVER",
	"BAREMETAL_SERVER",
}

func (v *ServerCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServerCategory(value)
	for _, existing := range AllowedServerCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServerCategory", value)
}

// NewServerCategoryFromValue returns a pointer to a valid ServerCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServerCategoryFromValue(v string) (*ServerCategory, error) {
	ev := ServerCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServerCategory: valid values are %v", v, AllowedServerCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServerCategory) IsValid() bool {
	for _, existing := range AllowedServerCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServerCategory value
func (v ServerCategory) Ptr() *ServerCategory {
	return &v
}

type NullableServerCategory struct {
	value *ServerCategory
	isSet bool
}

func (v NullableServerCategory) Get() *ServerCategory {
	return v.value
}

func (v *NullableServerCategory) Set(val *ServerCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableServerCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableServerCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerCategory(val *ServerCategory) *NullableServerCategory {
	return &NullableServerCategory{value: val, isSet: true}
}

func (v NullableServerCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

