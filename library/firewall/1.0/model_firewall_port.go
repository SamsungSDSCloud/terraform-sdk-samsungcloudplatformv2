/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FirewallPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallPort{}

// FirewallPort struct for FirewallPort
type FirewallPort struct {
	// Service Protocol Type
	ServiceType FirewallServiceType `json:"service_type"`
	// Service Port Value
	ServiceValue *string `json:"service_value,omitempty"`
}

type _FirewallPort FirewallPort

// NewFirewallPort instantiates a new FirewallPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallPort(serviceType FirewallServiceType) *FirewallPort {
	this := FirewallPort{}
	this.ServiceType = serviceType
	return &this
}

// NewFirewallPortWithDefaults instantiates a new FirewallPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallPortWithDefaults() *FirewallPort {
	this := FirewallPort{}
	return &this
}

// GetServiceType returns the ServiceType field value
func (o *FirewallPort) GetServiceType() FirewallServiceType {
	if o == nil {
		var ret FirewallServiceType
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *FirewallPort) GetServiceTypeOk() (*FirewallServiceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *FirewallPort) SetServiceType(v FirewallServiceType) {
	o.ServiceType = v
}

// GetServiceValue returns the ServiceValue field value if set, zero value otherwise.
func (o *FirewallPort) GetServiceValue() string {
	if o == nil || IsNil(o.ServiceValue) {
		var ret string
		return ret
	}
	return *o.ServiceValue
}

// GetServiceValueOk returns a tuple with the ServiceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallPort) GetServiceValueOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceValue) {
		return nil, false
	}
	return o.ServiceValue, true
}

// HasServiceValue returns a boolean if a field has been set.
func (o *FirewallPort) HasServiceValue() bool {
	if o != nil && !IsNil(o.ServiceValue) {
		return true
	}

	return false
}

// SetServiceValue gets a reference to the given string and assigns it to the ServiceValue field.
func (o *FirewallPort) SetServiceValue(v string) {
	o.ServiceValue = &v
}

func (o FirewallPort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service_type"] = o.ServiceType
	if !IsNil(o.ServiceValue) {
		toSerialize["service_value"] = o.ServiceValue
	}
	return toSerialize, nil
}

func (o *FirewallPort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirewallPort := _FirewallPort{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFirewallPort)

	if err != nil {
		return err
	}

	*o = FirewallPort(varFirewallPort)

	return err
}

type NullableFirewallPort struct {
	value *FirewallPort
	isSet bool
}

func (v NullableFirewallPort) Get() *FirewallPort {
	return v.value
}

func (v *NullableFirewallPort) Set(val *FirewallPort) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallPort) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallPort(val *FirewallPort) *NullableFirewallPort {
	return &NullableFirewallPort{value: val, isSet: true}
}

func (v NullableFirewallPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


