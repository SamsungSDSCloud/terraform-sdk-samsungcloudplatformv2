/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallRuleAction the model 'FirewallRuleAction'
type FirewallRuleAction string

// List of FirewallRuleAction
const (
	FIREWALLRULEACTION_ALLOW FirewallRuleAction = "ALLOW"
	FIREWALLRULEACTION_DENY FirewallRuleAction = "DENY"
)

// All allowed values of FirewallRuleAction enum
var AllowedFirewallRuleActionEnumValues = []FirewallRuleAction{
	"ALLOW",
	"DENY",
}

func (v *FirewallRuleAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallRuleAction(value)
	for _, existing := range AllowedFirewallRuleActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallRuleAction", value)
}

// NewFirewallRuleActionFromValue returns a pointer to a valid FirewallRuleAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallRuleActionFromValue(v string) (*FirewallRuleAction, error) {
	ev := FirewallRuleAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallRuleAction: valid values are %v", v, AllowedFirewallRuleActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallRuleAction) IsValid() bool {
	for _, existing := range AllowedFirewallRuleActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallRuleAction value
func (v FirewallRuleAction) Ptr() *FirewallRuleAction {
	return &v
}

type NullableFirewallRuleAction struct {
	value *FirewallRuleAction
	isSet bool
}

func (v NullableFirewallRuleAction) Get() *FirewallRuleAction {
	return v.value
}

func (v *NullableFirewallRuleAction) Set(val *FirewallRuleAction) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRuleAction) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRuleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRuleAction(val *FirewallRuleAction) *NullableFirewallRuleAction {
	return &NullableFirewallRuleAction{value: val, isSet: true}
}

func (v NullableFirewallRuleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRuleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

