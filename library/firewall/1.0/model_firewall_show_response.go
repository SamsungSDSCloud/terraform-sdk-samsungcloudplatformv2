/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FirewallShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallShowResponse{}

// FirewallShowResponse struct for FirewallShowResponse
type FirewallShowResponse struct {
	Firewall Firewall `json:"firewall"`
}

type _FirewallShowResponse FirewallShowResponse

// NewFirewallShowResponse instantiates a new FirewallShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallShowResponse(firewall Firewall) *FirewallShowResponse {
	this := FirewallShowResponse{}
	this.Firewall = firewall
	return &this
}

// NewFirewallShowResponseWithDefaults instantiates a new FirewallShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallShowResponseWithDefaults() *FirewallShowResponse {
	this := FirewallShowResponse{}
	return &this
}

// GetFirewall returns the Firewall field value
func (o *FirewallShowResponse) GetFirewall() Firewall {
	if o == nil {
		var ret Firewall
		return ret
	}

	return o.Firewall
}

// GetFirewallOk returns a tuple with the Firewall field value
// and a boolean to check if the value has been set.
func (o *FirewallShowResponse) GetFirewallOk() (*Firewall, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Firewall, true
}

// SetFirewall sets field value
func (o *FirewallShowResponse) SetFirewall(v Firewall) {
	o.Firewall = v
}

func (o FirewallShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firewall"] = o.Firewall
	return toSerialize, nil
}

func (o *FirewallShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firewall",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirewallShowResponse := _FirewallShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFirewallShowResponse)

	if err != nil {
		return err
	}

	*o = FirewallShowResponse(varFirewallShowResponse)

	return err
}

type NullableFirewallShowResponse struct {
	value *FirewallShowResponse
	isSet bool
}

func (v NullableFirewallShowResponse) Get() *FirewallShowResponse {
	return v.value
}

func (v *NullableFirewallShowResponse) Set(val *FirewallShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallShowResponse(val *FirewallShowResponse) *NullableFirewallShowResponse {
	return &NullableFirewallShowResponse{value: val, isSet: true}
}

func (v NullableFirewallShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


