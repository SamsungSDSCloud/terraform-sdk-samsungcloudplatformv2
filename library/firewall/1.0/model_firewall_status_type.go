/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallStatusType the model 'FirewallStatusType'
type FirewallStatusType string

// List of FirewallStatusType
const (
	FIREWALLSTATUSTYPE_ENABLE FirewallStatusType = "ENABLE"
	FIREWALLSTATUSTYPE_DISABLE FirewallStatusType = "DISABLE"
)

// All allowed values of FirewallStatusType enum
var AllowedFirewallStatusTypeEnumValues = []FirewallStatusType{
	"ENABLE",
	"DISABLE",
}

func (v *FirewallStatusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallStatusType(value)
	for _, existing := range AllowedFirewallStatusTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallStatusType", value)
}

// NewFirewallStatusTypeFromValue returns a pointer to a valid FirewallStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallStatusTypeFromValue(v string) (*FirewallStatusType, error) {
	ev := FirewallStatusType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallStatusType: valid values are %v", v, AllowedFirewallStatusTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallStatusType) IsValid() bool {
	for _, existing := range AllowedFirewallStatusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallStatusType value
func (v FirewallStatusType) Ptr() *FirewallStatusType {
	return &v
}

type NullableFirewallStatusType struct {
	value *FirewallStatusType
	isSet bool
}

func (v NullableFirewallStatusType) Get() *FirewallStatusType {
	return v.value
}

func (v *NullableFirewallStatusType) Set(val *FirewallStatusType) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallStatusType) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallStatusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallStatusType(val *FirewallStatusType) *NullableFirewallStatusType {
	return &NullableFirewallStatusType{value: val, isSet: true}
}

func (v NullableFirewallStatusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallStatusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

