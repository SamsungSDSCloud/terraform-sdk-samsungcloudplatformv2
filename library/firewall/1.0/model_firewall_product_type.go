/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallProductType the model 'FirewallProductType'
type FirewallProductType string

// List of FirewallProductType
const (
	FIREWALLPRODUCTTYPE_IGW FirewallProductType = "IGW"
	FIREWALLPRODUCTTYPE_GGW FirewallProductType = "GGW"
	FIREWALLPRODUCTTYPE_DGW FirewallProductType = "DGW"
	FIREWALLPRODUCTTYPE_LB FirewallProductType = "LB"
	FIREWALLPRODUCTTYPE_SIGW FirewallProductType = "SIGW"
	FIREWALLPRODUCTTYPE_TGW_IGW FirewallProductType = "TGW_IGW"
	FIREWALLPRODUCTTYPE_TGW_GGW FirewallProductType = "TGW_GGW"
	FIREWALLPRODUCTTYPE_TGW_DGW FirewallProductType = "TGW_DGW"
	FIREWALLPRODUCTTYPE_TGW_SIGW FirewallProductType = "TGW_SIGW"
	FIREWALLPRODUCTTYPE_TGW_BM FirewallProductType = "TGW_BM"
)

// All allowed values of FirewallProductType enum
var AllowedFirewallProductTypeEnumValues = []FirewallProductType{
	"IGW",
	"GGW",
	"DGW",
	"LB",
	"SIGW",
	"TGW_IGW",
	"TGW_GGW",
	"TGW_DGW",
	"TGW_SIGW",
	"TGW_BM",
}

func (v *FirewallProductType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallProductType(value)
	for _, existing := range AllowedFirewallProductTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallProductType", value)
}

// NewFirewallProductTypeFromValue returns a pointer to a valid FirewallProductType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallProductTypeFromValue(v string) (*FirewallProductType, error) {
	ev := FirewallProductType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallProductType: valid values are %v", v, AllowedFirewallProductTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallProductType) IsValid() bool {
	for _, existing := range AllowedFirewallProductTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallProductType value
func (v FirewallProductType) Ptr() *FirewallProductType {
	return &v
}

type NullableFirewallProductType struct {
	value *FirewallProductType
	isSet bool
}

func (v NullableFirewallProductType) Get() *FirewallProductType {
	return v.value
}

func (v *NullableFirewallProductType) Set(val *FirewallProductType) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallProductType) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallProductType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallProductType(val *FirewallProductType) *NullableFirewallProductType {
	return &NullableFirewallProductType{value: val, isSet: true}
}

func (v NullableFirewallProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallProductType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

