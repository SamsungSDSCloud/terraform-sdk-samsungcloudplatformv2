/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallState the model 'FirewallState'
type FirewallState string

// List of FirewallState
const (
	FIREWALLSTATE_CREATING FirewallState = "CREATING"
	FIREWALLSTATE_ACTIVE FirewallState = "ACTIVE"
	FIREWALLSTATE_DELETING FirewallState = "DELETING"
	FIREWALLSTATE_DELETED FirewallState = "DELETED"
	FIREWALLSTATE_EDITING FirewallState = "EDITING"
	FIREWALLSTATE_ERROR FirewallState = "ERROR"
	FIREWALLSTATE_DEPLOYING FirewallState = "DEPLOYING"
)

// All allowed values of FirewallState enum
var AllowedFirewallStateEnumValues = []FirewallState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"EDITING",
	"ERROR",
	"DEPLOYING",
}

func (v *FirewallState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallState(value)
	for _, existing := range AllowedFirewallStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallState", value)
}

// NewFirewallStateFromValue returns a pointer to a valid FirewallState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallStateFromValue(v string) (*FirewallState, error) {
	ev := FirewallState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallState: valid values are %v", v, AllowedFirewallStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallState) IsValid() bool {
	for _, existing := range AllowedFirewallStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallState value
func (v FirewallState) Ptr() *FirewallState {
	return &v
}

type NullableFirewallState struct {
	value *FirewallState
	isSet bool
}

func (v NullableFirewallState) Get() *FirewallState {
	return v.value
}

func (v *NullableFirewallState) Set(val *FirewallState) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallState) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallState(val *FirewallState) *NullableFirewallState {
	return &NullableFirewallState{value: val, isSet: true}
}

func (v NullableFirewallState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

