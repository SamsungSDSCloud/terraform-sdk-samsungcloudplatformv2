/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallRuleOrderDirection the model 'FirewallRuleOrderDirection'
type FirewallRuleOrderDirection string

// List of FirewallRuleOrderDirection
const (
	FIREWALLRULEORDERDIRECTION_BEFORE FirewallRuleOrderDirection = "BEFORE"
	FIREWALLRULEORDERDIRECTION_AFTER FirewallRuleOrderDirection = "AFTER"
	FIREWALLRULEORDERDIRECTION_BOTTOM FirewallRuleOrderDirection = "BOTTOM"
)

// All allowed values of FirewallRuleOrderDirection enum
var AllowedFirewallRuleOrderDirectionEnumValues = []FirewallRuleOrderDirection{
	"BEFORE",
	"AFTER",
	"BOTTOM",
}

func (v *FirewallRuleOrderDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallRuleOrderDirection(value)
	for _, existing := range AllowedFirewallRuleOrderDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallRuleOrderDirection", value)
}

// NewFirewallRuleOrderDirectionFromValue returns a pointer to a valid FirewallRuleOrderDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallRuleOrderDirectionFromValue(v string) (*FirewallRuleOrderDirection, error) {
	ev := FirewallRuleOrderDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallRuleOrderDirection: valid values are %v", v, AllowedFirewallRuleOrderDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallRuleOrderDirection) IsValid() bool {
	for _, existing := range AllowedFirewallRuleOrderDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallRuleOrderDirection value
func (v FirewallRuleOrderDirection) Ptr() *FirewallRuleOrderDirection {
	return &v
}

type NullableFirewallRuleOrderDirection struct {
	value *FirewallRuleOrderDirection
	isSet bool
}

func (v NullableFirewallRuleOrderDirection) Get() *FirewallRuleOrderDirection {
	return v.value
}

func (v *NullableFirewallRuleOrderDirection) Set(val *FirewallRuleOrderDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRuleOrderDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRuleOrderDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRuleOrderDirection(val *FirewallRuleOrderDirection) *NullableFirewallRuleOrderDirection {
	return &NullableFirewallRuleOrderDirection{value: val, isSet: true}
}

func (v NullableFirewallRuleOrderDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRuleOrderDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

