/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FirewallListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallListResponse{}

// FirewallListResponse struct for FirewallListResponse
type FirewallListResponse struct {
	// count
	Count int32 `json:"count"`
	Firewalls []Firewall `json:"firewalls"`
	// page
	Page int32 `json:"page"`
	// size
	Size int32 `json:"size"`
	Sort []string `json:"sort,omitempty"`
}

type _FirewallListResponse FirewallListResponse

// NewFirewallListResponse instantiates a new FirewallListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallListResponse(count int32, firewalls []Firewall, page int32, size int32) *FirewallListResponse {
	this := FirewallListResponse{}
	this.Count = count
	this.Firewalls = firewalls
	this.Page = page
	this.Size = size
	return &this
}

// NewFirewallListResponseWithDefaults instantiates a new FirewallListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallListResponseWithDefaults() *FirewallListResponse {
	this := FirewallListResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *FirewallListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *FirewallListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *FirewallListResponse) SetCount(v int32) {
	o.Count = v
}

// GetFirewalls returns the Firewalls field value
func (o *FirewallListResponse) GetFirewalls() []Firewall {
	if o == nil {
		var ret []Firewall
		return ret
	}

	return o.Firewalls
}

// GetFirewallsOk returns a tuple with the Firewalls field value
// and a boolean to check if the value has been set.
func (o *FirewallListResponse) GetFirewallsOk() ([]Firewall, bool) {
	if o == nil {
		return nil, false
	}
	return o.Firewalls, true
}

// SetFirewalls sets field value
func (o *FirewallListResponse) SetFirewalls(v []Firewall) {
	o.Firewalls = v
}

// GetPage returns the Page field value
func (o *FirewallListResponse) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *FirewallListResponse) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *FirewallListResponse) SetPage(v int32) {
	o.Page = v
}

// GetSize returns the Size field value
func (o *FirewallListResponse) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *FirewallListResponse) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *FirewallListResponse) SetSize(v int32) {
	o.Size = v
}

// GetSort returns the Sort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FirewallListResponse) GetSort() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FirewallListResponse) GetSortOk() ([]string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *FirewallListResponse) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []string and assigns it to the Sort field.
func (o *FirewallListResponse) SetSort(v []string) {
	o.Sort = v
}

func (o FirewallListResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["firewalls"] = o.Firewalls
	toSerialize["page"] = o.Page
	toSerialize["size"] = o.Size
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

func (o *FirewallListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"firewalls",
		"page",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirewallListResponse := _FirewallListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFirewallListResponse)

	if err != nil {
		return err
	}

	*o = FirewallListResponse(varFirewallListResponse)

	return err
}

type NullableFirewallListResponse struct {
	value *FirewallListResponse
	isSet bool
}

func (v NullableFirewallListResponse) Get() *FirewallListResponse {
	return v.value
}

func (v *NullableFirewallListResponse) Set(val *FirewallListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallListResponse(val *FirewallListResponse) *NullableFirewallListResponse {
	return &NullableFirewallListResponse{value: val, isSet: true}
}

func (v NullableFirewallListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


