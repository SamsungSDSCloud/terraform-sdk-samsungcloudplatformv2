/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
)

// checks if the FirewallSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallSetRequest{}

// FirewallSetRequest struct for FirewallSetRequest
type FirewallSetRequest struct {
	// Firewall Size Name
	FlavorName *FirewallFlavorType `json:"flavor_name,omitempty"`
	// Logging Use
	Loggable *bool `json:"loggable,omitempty"`
}

// NewFirewallSetRequest instantiates a new FirewallSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallSetRequest() *FirewallSetRequest {
	this := FirewallSetRequest{}
	return &this
}

// NewFirewallSetRequestWithDefaults instantiates a new FirewallSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallSetRequestWithDefaults() *FirewallSetRequest {
	this := FirewallSetRequest{}
	return &this
}

// GetFlavorName returns the FlavorName field value if set, zero value otherwise.
func (o *FirewallSetRequest) GetFlavorName() FirewallFlavorType {
	if o == nil || IsNil(o.FlavorName) {
		var ret FirewallFlavorType
		return ret
	}
	return *o.FlavorName
}

// GetFlavorNameOk returns a tuple with the FlavorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallSetRequest) GetFlavorNameOk() (*FirewallFlavorType, bool) {
	if o == nil || IsNil(o.FlavorName) {
		return nil, false
	}
	return o.FlavorName, true
}

// HasFlavorName returns a boolean if a field has been set.
func (o *FirewallSetRequest) HasFlavorName() bool {
	if o != nil && !IsNil(o.FlavorName) {
		return true
	}

	return false
}

// SetFlavorName gets a reference to the given FirewallFlavorType and assigns it to the FlavorName field.
func (o *FirewallSetRequest) SetFlavorName(v FirewallFlavorType) {
	o.FlavorName = &v
}

// GetLoggable returns the Loggable field value if set, zero value otherwise.
func (o *FirewallSetRequest) GetLoggable() bool {
	if o == nil || IsNil(o.Loggable) {
		var ret bool
		return ret
	}
	return *o.Loggable
}

// GetLoggableOk returns a tuple with the Loggable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallSetRequest) GetLoggableOk() (*bool, bool) {
	if o == nil || IsNil(o.Loggable) {
		return nil, false
	}
	return o.Loggable, true
}

// HasLoggable returns a boolean if a field has been set.
func (o *FirewallSetRequest) HasLoggable() bool {
	if o != nil && !IsNil(o.Loggable) {
		return true
	}

	return false
}

// SetLoggable gets a reference to the given bool and assigns it to the Loggable field.
func (o *FirewallSetRequest) SetLoggable(v bool) {
	o.Loggable = &v
}

func (o FirewallSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlavorName) {
		toSerialize["flavor_name"] = o.FlavorName
	}
	if !IsNil(o.Loggable) {
		toSerialize["loggable"] = o.Loggable
	}
	return toSerialize, nil
}

type NullableFirewallSetRequest struct {
	value *FirewallSetRequest
	isSet bool
}

func (v NullableFirewallSetRequest) Get() *FirewallSetRequest {
	return v.value
}

func (v *NullableFirewallSetRequest) Set(val *FirewallSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallSetRequest(val *FirewallSetRequest) *NullableFirewallSetRequest {
	return &NullableFirewallSetRequest{value: val, isSet: true}
}

func (v NullableFirewallSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


