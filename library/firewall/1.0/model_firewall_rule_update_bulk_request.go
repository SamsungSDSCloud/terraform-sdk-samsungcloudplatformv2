/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FirewallRuleUpdateBulkRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallRuleUpdateBulkRequest{}

// FirewallRuleUpdateBulkRequest struct for FirewallRuleUpdateBulkRequest
type FirewallRuleUpdateBulkRequest struct {
	// Firewall Rule ID
	FirewallRuleId []string `json:"firewall_rule_id"`
	// Firewall Rule Status
	Status FirewallStatusType `json:"status"`
}

type _FirewallRuleUpdateBulkRequest FirewallRuleUpdateBulkRequest

// NewFirewallRuleUpdateBulkRequest instantiates a new FirewallRuleUpdateBulkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallRuleUpdateBulkRequest(firewallRuleId []string, status FirewallStatusType) *FirewallRuleUpdateBulkRequest {
	this := FirewallRuleUpdateBulkRequest{}
	this.FirewallRuleId = firewallRuleId
	this.Status = status
	return &this
}

// NewFirewallRuleUpdateBulkRequestWithDefaults instantiates a new FirewallRuleUpdateBulkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallRuleUpdateBulkRequestWithDefaults() *FirewallRuleUpdateBulkRequest {
	this := FirewallRuleUpdateBulkRequest{}
	return &this
}

// GetFirewallRuleId returns the FirewallRuleId field value
func (o *FirewallRuleUpdateBulkRequest) GetFirewallRuleId() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FirewallRuleId
}

// GetFirewallRuleIdOk returns a tuple with the FirewallRuleId field value
// and a boolean to check if the value has been set.
func (o *FirewallRuleUpdateBulkRequest) GetFirewallRuleIdOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirewallRuleId, true
}

// SetFirewallRuleId sets field value
func (o *FirewallRuleUpdateBulkRequest) SetFirewallRuleId(v []string) {
	o.FirewallRuleId = v
}

// GetStatus returns the Status field value
func (o *FirewallRuleUpdateBulkRequest) GetStatus() FirewallStatusType {
	if o == nil {
		var ret FirewallStatusType
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *FirewallRuleUpdateBulkRequest) GetStatusOk() (*FirewallStatusType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *FirewallRuleUpdateBulkRequest) SetStatus(v FirewallStatusType) {
	o.Status = v
}

func (o FirewallRuleUpdateBulkRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallRuleUpdateBulkRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["firewall_rule_id"] = o.FirewallRuleId
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *FirewallRuleUpdateBulkRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"firewall_rule_id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirewallRuleUpdateBulkRequest := _FirewallRuleUpdateBulkRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFirewallRuleUpdateBulkRequest)

	if err != nil {
		return err
	}

	*o = FirewallRuleUpdateBulkRequest(varFirewallRuleUpdateBulkRequest)

	return err
}

type NullableFirewallRuleUpdateBulkRequest struct {
	value *FirewallRuleUpdateBulkRequest
	isSet bool
}

func (v NullableFirewallRuleUpdateBulkRequest) Get() *FirewallRuleUpdateBulkRequest {
	return v.value
}

func (v *NullableFirewallRuleUpdateBulkRequest) Set(val *FirewallRuleUpdateBulkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRuleUpdateBulkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRuleUpdateBulkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRuleUpdateBulkRequest(val *FirewallRuleUpdateBulkRequest) *NullableFirewallRuleUpdateBulkRequest {
	return &NullableFirewallRuleUpdateBulkRequest{value: val, isSet: true}
}

func (v NullableFirewallRuleUpdateBulkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRuleUpdateBulkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


