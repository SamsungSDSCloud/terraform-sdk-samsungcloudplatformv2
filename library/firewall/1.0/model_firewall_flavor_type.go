/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallFlavorType the model 'FirewallFlavorType'
type FirewallFlavorType string

// List of FirewallFlavorType
const (
	FIREWALLFLAVORTYPE_EXSMALL FirewallFlavorType = "EXSMALL"
	FIREWALLFLAVORTYPE_SMALL FirewallFlavorType = "SMALL"
	FIREWALLFLAVORTYPE_MEDIUM FirewallFlavorType = "MEDIUM"
	FIREWALLFLAVORTYPE_LARGE FirewallFlavorType = "LARGE"
	FIREWALLFLAVORTYPE_EXLARGE FirewallFlavorType = "EXLARGE"
)

// All allowed values of FirewallFlavorType enum
var AllowedFirewallFlavorTypeEnumValues = []FirewallFlavorType{
	"EXSMALL",
	"SMALL",
	"MEDIUM",
	"LARGE",
	"EXLARGE",
}

func (v *FirewallFlavorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallFlavorType(value)
	for _, existing := range AllowedFirewallFlavorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallFlavorType", value)
}

// NewFirewallFlavorTypeFromValue returns a pointer to a valid FirewallFlavorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallFlavorTypeFromValue(v string) (*FirewallFlavorType, error) {
	ev := FirewallFlavorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallFlavorType: valid values are %v", v, AllowedFirewallFlavorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallFlavorType) IsValid() bool {
	for _, existing := range AllowedFirewallFlavorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallFlavorType value
func (v FirewallFlavorType) Ptr() *FirewallFlavorType {
	return &v
}

type NullableFirewallFlavorType struct {
	value *FirewallFlavorType
	isSet bool
}

func (v NullableFirewallFlavorType) Get() *FirewallFlavorType {
	return v.value
}

func (v *NullableFirewallFlavorType) Set(val *FirewallFlavorType) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallFlavorType) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallFlavorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallFlavorType(val *FirewallFlavorType) *NullableFirewallFlavorType {
	return &NullableFirewallFlavorType{value: val, isSet: true}
}

func (v NullableFirewallFlavorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallFlavorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

