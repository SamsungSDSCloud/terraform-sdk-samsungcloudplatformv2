/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallRuleState the model 'FirewallRuleState'
type FirewallRuleState string

// List of FirewallRuleState
const (
	FIREWALLRULESTATE_CREATING FirewallRuleState = "CREATING"
	FIREWALLRULESTATE_ACTIVE FirewallRuleState = "ACTIVE"
	FIREWALLRULESTATE_DELETING FirewallRuleState = "DELETING"
	FIREWALLRULESTATE_DELETED FirewallRuleState = "DELETED"
	FIREWALLRULESTATE_EDITING FirewallRuleState = "EDITING"
	FIREWALLRULESTATE_ERROR FirewallRuleState = "ERROR"
)

// All allowed values of FirewallRuleState enum
var AllowedFirewallRuleStateEnumValues = []FirewallRuleState{
	"CREATING",
	"ACTIVE",
	"DELETING",
	"DELETED",
	"EDITING",
	"ERROR",
}

func (v *FirewallRuleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallRuleState(value)
	for _, existing := range AllowedFirewallRuleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallRuleState", value)
}

// NewFirewallRuleStateFromValue returns a pointer to a valid FirewallRuleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallRuleStateFromValue(v string) (*FirewallRuleState, error) {
	ev := FirewallRuleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallRuleState: valid values are %v", v, AllowedFirewallRuleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallRuleState) IsValid() bool {
	for _, existing := range AllowedFirewallRuleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallRuleState value
func (v FirewallRuleState) Ptr() *FirewallRuleState {
	return &v
}

type NullableFirewallRuleState struct {
	value *FirewallRuleState
	isSet bool
}

func (v NullableFirewallRuleState) Get() *FirewallRuleState {
	return v.value
}

func (v *NullableFirewallRuleState) Set(val *FirewallRuleState) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRuleState) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRuleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRuleState(val *FirewallRuleState) *NullableFirewallRuleState {
	return &NullableFirewallRuleState{value: val, isSet: true}
}

func (v NullableFirewallRuleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRuleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

