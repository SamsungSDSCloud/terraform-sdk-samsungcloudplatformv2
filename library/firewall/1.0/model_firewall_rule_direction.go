/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallRuleDirection the model 'FirewallRuleDirection'
type FirewallRuleDirection string

// List of FirewallRuleDirection
const (
	FIREWALLRULEDIRECTION_INBOUND FirewallRuleDirection = "INBOUND"
	FIREWALLRULEDIRECTION_OUTBOUND FirewallRuleDirection = "OUTBOUND"
)

// All allowed values of FirewallRuleDirection enum
var AllowedFirewallRuleDirectionEnumValues = []FirewallRuleDirection{
	"INBOUND",
	"OUTBOUND",
}

func (v *FirewallRuleDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallRuleDirection(value)
	for _, existing := range AllowedFirewallRuleDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallRuleDirection", value)
}

// NewFirewallRuleDirectionFromValue returns a pointer to a valid FirewallRuleDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallRuleDirectionFromValue(v string) (*FirewallRuleDirection, error) {
	ev := FirewallRuleDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallRuleDirection: valid values are %v", v, AllowedFirewallRuleDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallRuleDirection) IsValid() bool {
	for _, existing := range AllowedFirewallRuleDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallRuleDirection value
func (v FirewallRuleDirection) Ptr() *FirewallRuleDirection {
	return &v
}

type NullableFirewallRuleDirection struct {
	value *FirewallRuleDirection
	isSet bool
}

func (v NullableFirewallRuleDirection) Get() *FirewallRuleDirection {
	return v.value
}

func (v *NullableFirewallRuleDirection) Set(val *FirewallRuleDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRuleDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRuleDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRuleDirection(val *FirewallRuleDirection) *NullableFirewallRuleDirection {
	return &NullableFirewallRuleDirection{value: val, isSet: true}
}

func (v NullableFirewallRuleDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRuleDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

