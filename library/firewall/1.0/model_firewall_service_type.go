/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev6882
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firewall

import (
	"encoding/json"
	"fmt"
)

// FirewallServiceType the model 'FirewallServiceType'
type FirewallServiceType string

// List of FirewallServiceType
const (
	FIREWALLSERVICETYPE_TCP FirewallServiceType = "TCP"
	FIREWALLSERVICETYPE_UDP FirewallServiceType = "UDP"
	FIREWALLSERVICETYPE_ICMP FirewallServiceType = "ICMP"
	FIREWALLSERVICETYPE_IP FirewallServiceType = "IP"
	FIREWALLSERVICETYPE_TCP_ALL FirewallServiceType = "TCP_ALL"
	FIREWALLSERVICETYPE_UDP_ALL FirewallServiceType = "UDP_ALL"
	FIREWALLSERVICETYPE_ICMP_ALL FirewallServiceType = "ICMP_ALL"
	FIREWALLSERVICETYPE_ALL FirewallServiceType = "ALL"
)

// All allowed values of FirewallServiceType enum
var AllowedFirewallServiceTypeEnumValues = []FirewallServiceType{
	"TCP",
	"UDP",
	"ICMP",
	"IP",
	"TCP_ALL",
	"UDP_ALL",
	"ICMP_ALL",
	"ALL",
}

func (v *FirewallServiceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FirewallServiceType(value)
	for _, existing := range AllowedFirewallServiceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FirewallServiceType", value)
}

// NewFirewallServiceTypeFromValue returns a pointer to a valid FirewallServiceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFirewallServiceTypeFromValue(v string) (*FirewallServiceType, error) {
	ev := FirewallServiceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FirewallServiceType: valid values are %v", v, AllowedFirewallServiceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FirewallServiceType) IsValid() bool {
	for _, existing := range AllowedFirewallServiceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FirewallServiceType value
func (v FirewallServiceType) Ptr() *FirewallServiceType {
	return &v
}

type NullableFirewallServiceType struct {
	value *FirewallServiceType
	isSet bool
}

func (v NullableFirewallServiceType) Get() *FirewallServiceType {
	return v.value
}

func (v *NullableFirewallServiceType) Set(val *FirewallServiceType) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallServiceType) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallServiceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallServiceType(val *FirewallServiceType) *NullableFirewallServiceType {
	return &NullableFirewallServiceType{value: val, isSet: true}
}

func (v NullableFirewallServiceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallServiceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

