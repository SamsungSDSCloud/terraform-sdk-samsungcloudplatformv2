/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ReplicationRegionListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationRegionListResponse{}

// ReplicationRegionListResponse struct for ReplicationRegionListResponse
type ReplicationRegionListResponse struct {
	// Replication Region List
	Regions []string `json:"regions"`
}

type _ReplicationRegionListResponse ReplicationRegionListResponse

// NewReplicationRegionListResponse instantiates a new ReplicationRegionListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationRegionListResponse(regions []string) *ReplicationRegionListResponse {
	this := ReplicationRegionListResponse{}
	this.Regions = regions
	return &this
}

// NewReplicationRegionListResponseWithDefaults instantiates a new ReplicationRegionListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationRegionListResponseWithDefaults() *ReplicationRegionListResponse {
	this := ReplicationRegionListResponse{}
	return &this
}

// GetRegions returns the Regions field value
func (o *ReplicationRegionListResponse) GetRegions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *ReplicationRegionListResponse) GetRegionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Regions, true
}

// SetRegions sets field value
func (o *ReplicationRegionListResponse) SetRegions(v []string) {
	o.Regions = v
}

func (o ReplicationRegionListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationRegionListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["regions"] = o.Regions
	return toSerialize, nil
}

func (o *ReplicationRegionListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"regions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplicationRegionListResponse := _ReplicationRegionListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplicationRegionListResponse)

	if err != nil {
		return err
	}

	*o = ReplicationRegionListResponse(varReplicationRegionListResponse)

	return err
}

type NullableReplicationRegionListResponse struct {
	value *ReplicationRegionListResponse
	isSet bool
}

func (v NullableReplicationRegionListResponse) Get() *ReplicationRegionListResponse {
	return v.value
}

func (v *NullableReplicationRegionListResponse) Set(val *ReplicationRegionListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationRegionListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationRegionListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationRegionListResponse(val *ReplicationRegionListResponse) *NullableReplicationRegionListResponse {
	return &NullableReplicationRegionListResponse{value: val, isSet: true}
}

func (v NullableReplicationRegionListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationRegionListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
