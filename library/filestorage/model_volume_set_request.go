/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSetRequest{}

// VolumeSetRequest struct for VolumeSetRequest
type VolumeSetRequest struct {
	// Volume File Unit Recovery Enabled
	FileUnitRecoveryEnabled bool `json:"file_unit_recovery_enabled"`
}

type _VolumeSetRequest VolumeSetRequest

// NewVolumeSetRequest instantiates a new VolumeSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSetRequest(fileUnitRecoveryEnabled bool) *VolumeSetRequest {
	this := VolumeSetRequest{}
	this.FileUnitRecoveryEnabled = fileUnitRecoveryEnabled
	return &this
}

// NewVolumeSetRequestWithDefaults instantiates a new VolumeSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSetRequestWithDefaults() *VolumeSetRequest {
	this := VolumeSetRequest{}
	return &this
}

// GetFileUnitRecoveryEnabled returns the FileUnitRecoveryEnabled field value
func (o *VolumeSetRequest) GetFileUnitRecoveryEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FileUnitRecoveryEnabled
}

// GetFileUnitRecoveryEnabledOk returns a tuple with the FileUnitRecoveryEnabled field value
// and a boolean to check if the value has been set.
func (o *VolumeSetRequest) GetFileUnitRecoveryEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileUnitRecoveryEnabled, true
}

// SetFileUnitRecoveryEnabled sets field value
func (o *VolumeSetRequest) SetFileUnitRecoveryEnabled(v bool) {
	o.FileUnitRecoveryEnabled = v
}

func (o VolumeSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_unit_recovery_enabled"] = o.FileUnitRecoveryEnabled
	return toSerialize, nil
}

func (o *VolumeSetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_unit_recovery_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeSetRequest := _VolumeSetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeSetRequest)

	if err != nil {
		return err
	}

	*o = VolumeSetRequest(varVolumeSetRequest)

	return err
}

type NullableVolumeSetRequest struct {
	value *VolumeSetRequest
	isSet bool
}

func (v NullableVolumeSetRequest) Get() *VolumeSetRequest {
	return v.value
}

func (v *NullableVolumeSetRequest) Set(val *VolumeSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSetRequest(val *VolumeSetRequest) *NullableVolumeSetRequest {
	return &NullableVolumeSetRequest{value: val, isSet: true}
}

func (v NullableVolumeSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
