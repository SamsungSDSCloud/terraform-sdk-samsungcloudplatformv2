/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"encoding/json"
	"fmt"
)

// ReplicationUpdatePolicyEnum the model 'ReplicationUpdatePolicyEnum'
type ReplicationUpdatePolicyEnum string

// List of ReplicationUpdatePolicyEnum
const (
	REPLICATIONUPDATEPOLICYENUM__5MIN   ReplicationUpdatePolicyEnum = "5min"
	REPLICATIONUPDATEPOLICYENUM_HOURLY  ReplicationUpdatePolicyEnum = "hourly"
	REPLICATIONUPDATEPOLICYENUM_DAILY   ReplicationUpdatePolicyEnum = "daily"
	REPLICATIONUPDATEPOLICYENUM_WEEKLY  ReplicationUpdatePolicyEnum = "weekly"
	REPLICATIONUPDATEPOLICYENUM_MONTHLY ReplicationUpdatePolicyEnum = "monthly"
)

// All allowed values of ReplicationUpdatePolicyEnum enum
var AllowedReplicationUpdatePolicyEnumEnumValues = []ReplicationUpdatePolicyEnum{
	"5min",
	"hourly",
	"daily",
	"weekly",
	"monthly",
}

func (v *ReplicationUpdatePolicyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationUpdatePolicyEnum(value)
	for _, existing := range AllowedReplicationUpdatePolicyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationUpdatePolicyEnum", value)
}

// NewReplicationUpdatePolicyEnumFromValue returns a pointer to a valid ReplicationUpdatePolicyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationUpdatePolicyEnumFromValue(v string) (*ReplicationUpdatePolicyEnum, error) {
	ev := ReplicationUpdatePolicyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationUpdatePolicyEnum: valid values are %v", v, AllowedReplicationUpdatePolicyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationUpdatePolicyEnum) IsValid() bool {
	for _, existing := range AllowedReplicationUpdatePolicyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationUpdatePolicyEnum value
func (v ReplicationUpdatePolicyEnum) Ptr() *ReplicationUpdatePolicyEnum {
	return &v
}

type NullableReplicationUpdatePolicyEnum struct {
	value *ReplicationUpdatePolicyEnum
	isSet bool
}

func (v NullableReplicationUpdatePolicyEnum) Get() *ReplicationUpdatePolicyEnum {
	return v.value
}

func (v *NullableReplicationUpdatePolicyEnum) Set(val *ReplicationUpdatePolicyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationUpdatePolicyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationUpdatePolicyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationUpdatePolicyEnum(val *ReplicationUpdatePolicyEnum) *NullableReplicationUpdatePolicyEnum {
	return &NullableReplicationUpdatePolicyEnum{value: val, isSet: true}
}

func (v NullableReplicationUpdatePolicyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationUpdatePolicyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
