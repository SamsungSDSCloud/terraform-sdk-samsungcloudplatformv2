/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SnapshotDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotDetail{}

// SnapshotDetail struct for SnapshotDetail
type SnapshotDetail struct {
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Snapshot ID
	Id string `json:"id"`
	// Snapshot Name
	Name string `json:"name"`
	// Snapshot Size
	Size int32 `json:"size"`
	// Snapshot State
	State string `json:"state"`
	// Volume ID
	VolumeId string `json:"volume_id"`
}

type _SnapshotDetail SnapshotDetail

// NewSnapshotDetail instantiates a new SnapshotDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotDetail(createdAt time.Time, id string, name string, size int32, state string, volumeId string) *SnapshotDetail {
	this := SnapshotDetail{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Name = name
	this.Size = size
	this.State = state
	this.VolumeId = volumeId
	return &this
}

// NewSnapshotDetailWithDefaults instantiates a new SnapshotDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotDetailWithDefaults() *SnapshotDetail {
	this := SnapshotDetail{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *SnapshotDetail) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SnapshotDetail) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SnapshotDetail) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *SnapshotDetail) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SnapshotDetail) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SnapshotDetail) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SnapshotDetail) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SnapshotDetail) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SnapshotDetail) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *SnapshotDetail) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *SnapshotDetail) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *SnapshotDetail) SetSize(v int32) {
	o.Size = v
}

// GetState returns the State field value
func (o *SnapshotDetail) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SnapshotDetail) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SnapshotDetail) SetState(v string) {
	o.State = v
}

// GetVolumeId returns the VolumeId field value
func (o *SnapshotDetail) GetVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value
// and a boolean to check if the value has been set.
func (o *SnapshotDetail) GetVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeId, true
}

// SetVolumeId sets field value
func (o *SnapshotDetail) SetVolumeId(v string) {
	o.VolumeId = v
}

func (o SnapshotDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	toSerialize["state"] = o.State
	toSerialize["volume_id"] = o.VolumeId
	return toSerialize, nil
}

func (o *SnapshotDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"id",
		"name",
		"size",
		"state",
		"volume_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotDetail := _SnapshotDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotDetail)

	if err != nil {
		return err
	}

	*o = SnapshotDetail(varSnapshotDetail)

	return err
}

type NullableSnapshotDetail struct {
	value *SnapshotDetail
	isSet bool
}

func (v NullableSnapshotDetail) Get() *SnapshotDetail {
	return v.value
}

func (v *NullableSnapshotDetail) Set(val *SnapshotDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotDetail(val *SnapshotDetail) *NullableSnapshotDetail {
	return &NullableSnapshotDetail{value: val, isSet: true}
}

func (v NullableSnapshotDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
