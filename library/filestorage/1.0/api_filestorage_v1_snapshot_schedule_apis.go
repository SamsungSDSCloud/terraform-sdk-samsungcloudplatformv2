/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// FilestorageV1SnapshotScheduleAPIsAPIService FilestorageV1SnapshotScheduleAPIsAPI service
type FilestorageV1SnapshotScheduleAPIsAPIService service

type FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest struct {
	ctx                           context.Context
	ApiService                    *FilestorageV1SnapshotScheduleAPIsAPIService
	snapshotScheduleCreateRequest *SnapshotScheduleCreateRequest
}

func (r FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest) SnapshotScheduleCreateRequest(snapshotScheduleCreateRequest SnapshotScheduleCreateRequest) FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest {
	r.snapshotScheduleCreateRequest = &snapshotScheduleCreateRequest
	return r
}

func (r FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest) Execute() (*SnapshotScheduleCreateResponse, *http.Response, error) {
	return r.ApiService.CreateSnapshotScheduleExecute(r)
}

/*
CreateSnapshotSchedule CreateSnapshotSchedule

Create snapshot schedule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest
*/
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) CreateSnapshotSchedule(ctx context.Context) FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest {
	return FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SnapshotScheduleCreateResponse
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) CreateSnapshotScheduleExecute(r FilestorageV1SnapshotScheduleAPIsAPICreateSnapshotScheduleRequest) (*SnapshotScheduleCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SnapshotScheduleCreateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/snapshot-schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.snapshotScheduleCreateRequest == nil {
		return localVarReturnValue, nil, reportError("snapshotScheduleCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "filestorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.snapshotScheduleCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest struct {
	ctx                context.Context
	ApiService         *FilestorageV1SnapshotScheduleAPIsAPIService
	snapshotScheduleId string
	volumeId           *string
}

// Volume ID
func (r FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest) VolumeId(volumeId string) FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest {
	r.volumeId = &volumeId
	return r
}

func (r FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSnapshotScheduleExecute(r)
}

/*
DeleteSnapshotSchedule DeleteSnapshotSchedule

Delete snapshot schedule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param snapshotScheduleId Snapshot Schedule ID
	@return FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest
*/
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) DeleteSnapshotSchedule(ctx context.Context, snapshotScheduleId string) FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest {
	return FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest{
		ApiService:         a,
		ctx:                ctx,
		snapshotScheduleId: snapshotScheduleId,
	}
}

// Execute executes the request
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) DeleteSnapshotScheduleExecute(r FilestorageV1SnapshotScheduleAPIsAPIDeleteSnapshotScheduleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/snapshot-schedules/{snapshot_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"snapshot_schedule_id"+"}", url.PathEscape(parameterValueToString(r.snapshotScheduleId, "snapshotScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeId == nil {
		return nil, reportError("volumeId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "volume_id", r.volumeId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "filestorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest struct {
	ctx        context.Context
	ApiService *FilestorageV1SnapshotScheduleAPIsAPIService
	volumeId   *string
}

// Volume ID
func (r FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest) VolumeId(volumeId string) FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest {
	r.volumeId = &volumeId
	return r
}

func (r FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest) Execute() (*SnapshotScheduleListResponse, *http.Response, error) {
	return r.ApiService.ListSnapshotScheduleExecute(r)
}

/*
ListSnapshotSchedule ListSnapshotSchedule

List snapshot schedule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest
*/
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) ListSnapshotSchedule(ctx context.Context) FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest {
	return FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SnapshotScheduleListResponse
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) ListSnapshotScheduleExecute(r FilestorageV1SnapshotScheduleAPIsAPIListSnapshotScheduleRequest) (*SnapshotScheduleListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SnapshotScheduleListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/snapshot-schedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeId == nil {
		return localVarReturnValue, nil, reportError("volumeId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "volume_id", r.volumeId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "filestorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest struct {
	ctx                        context.Context
	ApiService                 *FilestorageV1SnapshotScheduleAPIsAPIService
	snapshotScheduleId         string
	volumeId                   *string
	snapshotScheduleSetRequest *SnapshotScheduleSetRequest
}

// Volume ID
func (r FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest) VolumeId(volumeId string) FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest {
	r.volumeId = &volumeId
	return r
}

func (r FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest) SnapshotScheduleSetRequest(snapshotScheduleSetRequest SnapshotScheduleSetRequest) FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest {
	r.snapshotScheduleSetRequest = &snapshotScheduleSetRequest
	return r
}

func (r FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest) Execute() (*SnapshotScheduleSetResponse, *http.Response, error) {
	return r.ApiService.SetSnapshotScheduleExecute(r)
}

/*
SetSnapshotSchedule SetSnapshotSchedule

Set snapshot schedule

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param snapshotScheduleId Snapshot Schedule ID
	@return FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest
*/
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) SetSnapshotSchedule(ctx context.Context, snapshotScheduleId string) FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest {
	return FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest{
		ApiService:         a,
		ctx:                ctx,
		snapshotScheduleId: snapshotScheduleId,
	}
}

// Execute executes the request
//
//	@return SnapshotScheduleSetResponse
func (a *FilestorageV1SnapshotScheduleAPIsAPIService) SetSnapshotScheduleExecute(r FilestorageV1SnapshotScheduleAPIsAPISetSnapshotScheduleRequest) (*SnapshotScheduleSetResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SnapshotScheduleSetResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/snapshot-schedules/{snapshot_schedule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"snapshot_schedule_id"+"}", url.PathEscape(parameterValueToString(r.snapshotScheduleId, "snapshotScheduleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeId == nil {
		return localVarReturnValue, nil, reportError("volumeId is required and must be specified")
	}
	if r.snapshotScheduleSetRequest == nil {
		return localVarReturnValue, nil, reportError("snapshotScheduleSetRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "volume_id", r.volumeId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "filestorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.snapshotScheduleSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
