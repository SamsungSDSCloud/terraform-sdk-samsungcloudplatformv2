/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ReplicationCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationCreateRequest{}

// ReplicationCreateRequest struct for ReplicationCreateRequest
type ReplicationCreateRequest struct {
	BackupRetentionCount NullableInt32  `json:"backup_retention_count,omitempty"`
	CifsPassword         NullableString `json:"cifs_password,omitempty"`
	// Target Volume Name
	Name string `json:"name" validate:"regexp=^[a-z]([a-z0-9_]){2,20}$"`
	// Target Region
	Region string `json:"region"`
	// Frequency
	ReplicationFrequency string `json:"replication_frequency" validate:"regexp=^5min|hourly|daily|weekly|monthly"`
	// replication
	ReplicationType string `json:"replication_type" validate:"regexp=replication|backup"`
	// Source Volume ID
	VolumeId string `json:"volume_id"`
}

type _ReplicationCreateRequest ReplicationCreateRequest

// NewReplicationCreateRequest instantiates a new ReplicationCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationCreateRequest(name string, region string, replicationFrequency string, replicationType string, volumeId string) *ReplicationCreateRequest {
	this := ReplicationCreateRequest{}
	this.Name = name
	this.Region = region
	this.ReplicationFrequency = replicationFrequency
	this.ReplicationType = replicationType
	this.VolumeId = volumeId
	return &this
}

// NewReplicationCreateRequestWithDefaults instantiates a new ReplicationCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationCreateRequestWithDefaults() *ReplicationCreateRequest {
	this := ReplicationCreateRequest{}
	return &this
}

// GetBackupRetentionCount returns the BackupRetentionCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreateRequest) GetBackupRetentionCount() int32 {
	if o == nil || IsNil(o.BackupRetentionCount.Get()) {
		var ret int32
		return ret
	}
	return *o.BackupRetentionCount.Get()
}

// GetBackupRetentionCountOk returns a tuple with the BackupRetentionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreateRequest) GetBackupRetentionCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupRetentionCount.Get(), o.BackupRetentionCount.IsSet()
}

// HasBackupRetentionCount returns a boolean if a field has been set.
func (o *ReplicationCreateRequest) HasBackupRetentionCount() bool {
	if o != nil && o.BackupRetentionCount.IsSet() {
		return true
	}

	return false
}

// SetBackupRetentionCount gets a reference to the given NullableInt32 and assigns it to the BackupRetentionCount field.
func (o *ReplicationCreateRequest) SetBackupRetentionCount(v int32) {
	o.BackupRetentionCount.Set(&v)
}

// SetBackupRetentionCountNil sets the value for BackupRetentionCount to be an explicit nil
func (o *ReplicationCreateRequest) SetBackupRetentionCountNil() {
	o.BackupRetentionCount.Set(nil)
}

// UnsetBackupRetentionCount ensures that no value is present for BackupRetentionCount, not even an explicit nil
func (o *ReplicationCreateRequest) UnsetBackupRetentionCount() {
	o.BackupRetentionCount.Unset()
}

// GetCifsPassword returns the CifsPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationCreateRequest) GetCifsPassword() string {
	if o == nil || IsNil(o.CifsPassword.Get()) {
		var ret string
		return ret
	}
	return *o.CifsPassword.Get()
}

// GetCifsPasswordOk returns a tuple with the CifsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationCreateRequest) GetCifsPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CifsPassword.Get(), o.CifsPassword.IsSet()
}

// HasCifsPassword returns a boolean if a field has been set.
func (o *ReplicationCreateRequest) HasCifsPassword() bool {
	if o != nil && o.CifsPassword.IsSet() {
		return true
	}

	return false
}

// SetCifsPassword gets a reference to the given NullableString and assigns it to the CifsPassword field.
func (o *ReplicationCreateRequest) SetCifsPassword(v string) {
	o.CifsPassword.Set(&v)
}

// SetCifsPasswordNil sets the value for CifsPassword to be an explicit nil
func (o *ReplicationCreateRequest) SetCifsPasswordNil() {
	o.CifsPassword.Set(nil)
}

// UnsetCifsPassword ensures that no value is present for CifsPassword, not even an explicit nil
func (o *ReplicationCreateRequest) UnsetCifsPassword() {
	o.CifsPassword.Unset()
}

// GetName returns the Name field value
func (o *ReplicationCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ReplicationCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ReplicationCreateRequest) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *ReplicationCreateRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ReplicationCreateRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ReplicationCreateRequest) SetRegion(v string) {
	o.Region = v
}

// GetReplicationFrequency returns the ReplicationFrequency field value
func (o *ReplicationCreateRequest) GetReplicationFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReplicationFrequency
}

// GetReplicationFrequencyOk returns a tuple with the ReplicationFrequency field value
// and a boolean to check if the value has been set.
func (o *ReplicationCreateRequest) GetReplicationFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationFrequency, true
}

// SetReplicationFrequency sets field value
func (o *ReplicationCreateRequest) SetReplicationFrequency(v string) {
	o.ReplicationFrequency = v
}

// GetReplicationType returns the ReplicationType field value
func (o *ReplicationCreateRequest) GetReplicationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReplicationType
}

// GetReplicationTypeOk returns a tuple with the ReplicationType field value
// and a boolean to check if the value has been set.
func (o *ReplicationCreateRequest) GetReplicationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationType, true
}

// SetReplicationType sets field value
func (o *ReplicationCreateRequest) SetReplicationType(v string) {
	o.ReplicationType = v
}

// GetVolumeId returns the VolumeId field value
func (o *ReplicationCreateRequest) GetVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value
// and a boolean to check if the value has been set.
func (o *ReplicationCreateRequest) GetVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeId, true
}

// SetVolumeId sets field value
func (o *ReplicationCreateRequest) SetVolumeId(v string) {
	o.VolumeId = v
}

func (o ReplicationCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupRetentionCount.IsSet() {
		toSerialize["backup_retention_count"] = o.BackupRetentionCount.Get()
	}
	if o.CifsPassword.IsSet() {
		toSerialize["cifs_password"] = o.CifsPassword.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	toSerialize["replication_frequency"] = o.ReplicationFrequency
	toSerialize["replication_type"] = o.ReplicationType
	toSerialize["volume_id"] = o.VolumeId
	return toSerialize, nil
}

func (o *ReplicationCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"region",
		"replication_frequency",
		"replication_type",
		"volume_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplicationCreateRequest := _ReplicationCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplicationCreateRequest)

	if err != nil {
		return err
	}

	*o = ReplicationCreateRequest(varReplicationCreateRequest)

	return err
}

type NullableReplicationCreateRequest struct {
	value *ReplicationCreateRequest
	isSet bool
}

func (v NullableReplicationCreateRequest) Get() *ReplicationCreateRequest {
	return v.value
}

func (v *NullableReplicationCreateRequest) Set(val *ReplicationCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationCreateRequest(val *ReplicationCreateRequest) *NullableReplicationCreateRequest {
	return &NullableReplicationCreateRequest{value: val, isSet: true}
}

func (v NullableReplicationCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
