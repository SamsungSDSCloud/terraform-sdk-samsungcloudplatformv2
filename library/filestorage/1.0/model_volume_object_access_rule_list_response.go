/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeObjectAccessRuleListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeObjectAccessRuleListResponse{}

// VolumeObjectAccessRuleListResponse struct for VolumeObjectAccessRuleListResponse
type VolumeObjectAccessRuleListResponse struct {
	AccessRules []VolumeObjectAccessRuleListBase `json:"access_rules"`
	// count
	Count int32 `json:"count"`
	// Volume ID
	VolumeId string `json:"volume_id"`
}

type _VolumeObjectAccessRuleListResponse VolumeObjectAccessRuleListResponse

// NewVolumeObjectAccessRuleListResponse instantiates a new VolumeObjectAccessRuleListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeObjectAccessRuleListResponse(accessRules []VolumeObjectAccessRuleListBase, count int32, volumeId string) *VolumeObjectAccessRuleListResponse {
	this := VolumeObjectAccessRuleListResponse{}
	this.AccessRules = accessRules
	this.Count = count
	this.VolumeId = volumeId
	return &this
}

// NewVolumeObjectAccessRuleListResponseWithDefaults instantiates a new VolumeObjectAccessRuleListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeObjectAccessRuleListResponseWithDefaults() *VolumeObjectAccessRuleListResponse {
	this := VolumeObjectAccessRuleListResponse{}
	return &this
}

// GetAccessRules returns the AccessRules field value
func (o *VolumeObjectAccessRuleListResponse) GetAccessRules() []VolumeObjectAccessRuleListBase {
	if o == nil {
		var ret []VolumeObjectAccessRuleListBase
		return ret
	}

	return o.AccessRules
}

// GetAccessRulesOk returns a tuple with the AccessRules field value
// and a boolean to check if the value has been set.
func (o *VolumeObjectAccessRuleListResponse) GetAccessRulesOk() ([]VolumeObjectAccessRuleListBase, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessRules, true
}

// SetAccessRules sets field value
func (o *VolumeObjectAccessRuleListResponse) SetAccessRules(v []VolumeObjectAccessRuleListBase) {
	o.AccessRules = v
}

// GetCount returns the Count field value
func (o *VolumeObjectAccessRuleListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *VolumeObjectAccessRuleListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *VolumeObjectAccessRuleListResponse) SetCount(v int32) {
	o.Count = v
}

// GetVolumeId returns the VolumeId field value
func (o *VolumeObjectAccessRuleListResponse) GetVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value
// and a boolean to check if the value has been set.
func (o *VolumeObjectAccessRuleListResponse) GetVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeId, true
}

// SetVolumeId sets field value
func (o *VolumeObjectAccessRuleListResponse) SetVolumeId(v string) {
	o.VolumeId = v
}

func (o VolumeObjectAccessRuleListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeObjectAccessRuleListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_rules"] = o.AccessRules
	toSerialize["count"] = o.Count
	toSerialize["volume_id"] = o.VolumeId
	return toSerialize, nil
}

func (o *VolumeObjectAccessRuleListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_rules",
		"count",
		"volume_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeObjectAccessRuleListResponse := _VolumeObjectAccessRuleListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeObjectAccessRuleListResponse)

	if err != nil {
		return err
	}

	*o = VolumeObjectAccessRuleListResponse(varVolumeObjectAccessRuleListResponse)

	return err
}

type NullableVolumeObjectAccessRuleListResponse struct {
	value *VolumeObjectAccessRuleListResponse
	isSet bool
}

func (v NullableVolumeObjectAccessRuleListResponse) Get() *VolumeObjectAccessRuleListResponse {
	return v.value
}

func (v *NullableVolumeObjectAccessRuleListResponse) Set(val *VolumeObjectAccessRuleListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeObjectAccessRuleListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeObjectAccessRuleListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeObjectAccessRuleListResponse(val *VolumeObjectAccessRuleListResponse) *NullableVolumeObjectAccessRuleListResponse {
	return &NullableVolumeObjectAccessRuleListResponse{value: val, isSet: true}
}

func (v NullableVolumeObjectAccessRuleListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeObjectAccessRuleListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
