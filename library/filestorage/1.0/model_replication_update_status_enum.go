/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"encoding/json"
	"fmt"
)

// ReplicationUpdateStatusEnum the model 'ReplicationUpdateStatusEnum'
type ReplicationUpdateStatusEnum string

// List of ReplicationUpdateStatusEnum
const (
	REPLICATIONUPDATESTATUSENUM_USE    ReplicationUpdateStatusEnum = "use"
	REPLICATIONUPDATESTATUSENUM_PAUSED ReplicationUpdateStatusEnum = "paused"
)

// All allowed values of ReplicationUpdateStatusEnum enum
var AllowedReplicationUpdateStatusEnumEnumValues = []ReplicationUpdateStatusEnum{
	"use",
	"paused",
}

func (v *ReplicationUpdateStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationUpdateStatusEnum(value)
	for _, existing := range AllowedReplicationUpdateStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationUpdateStatusEnum", value)
}

// NewReplicationUpdateStatusEnumFromValue returns a pointer to a valid ReplicationUpdateStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationUpdateStatusEnumFromValue(v string) (*ReplicationUpdateStatusEnum, error) {
	ev := ReplicationUpdateStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationUpdateStatusEnum: valid values are %v", v, AllowedReplicationUpdateStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationUpdateStatusEnum) IsValid() bool {
	for _, existing := range AllowedReplicationUpdateStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationUpdateStatusEnum value
func (v ReplicationUpdateStatusEnum) Ptr() *ReplicationUpdateStatusEnum {
	return &v
}

type NullableReplicationUpdateStatusEnum struct {
	value *ReplicationUpdateStatusEnum
	isSet bool
}

func (v NullableReplicationUpdateStatusEnum) Get() *ReplicationUpdateStatusEnum {
	return v.value
}

func (v *NullableReplicationUpdateStatusEnum) Set(val *ReplicationUpdateStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationUpdateStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationUpdateStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationUpdateStatusEnum(val *ReplicationUpdateStatusEnum) *NullableReplicationUpdateStatusEnum {
	return &NullableReplicationUpdateStatusEnum{value: val, isSet: true}
}

func (v NullableReplicationUpdateStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationUpdateStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
