/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeListResponse{}

// VolumeListResponse struct for VolumeListResponse
type VolumeListResponse struct {
	// count
	Count        int32    `json:"count"`
	Filestorages []Volume `json:"filestorages"`
}

type _VolumeListResponse VolumeListResponse

// NewVolumeListResponse instantiates a new VolumeListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeListResponse(count int32, filestorages []Volume) *VolumeListResponse {
	this := VolumeListResponse{}
	this.Count = count
	this.Filestorages = filestorages
	return &this
}

// NewVolumeListResponseWithDefaults instantiates a new VolumeListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeListResponseWithDefaults() *VolumeListResponse {
	this := VolumeListResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *VolumeListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *VolumeListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *VolumeListResponse) SetCount(v int32) {
	o.Count = v
}

// GetFilestorages returns the Filestorages field value
func (o *VolumeListResponse) GetFilestorages() []Volume {
	if o == nil {
		var ret []Volume
		return ret
	}

	return o.Filestorages
}

// GetFilestoragesOk returns a tuple with the Filestorages field value
// and a boolean to check if the value has been set.
func (o *VolumeListResponse) GetFilestoragesOk() ([]Volume, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filestorages, true
}

// SetFilestorages sets field value
func (o *VolumeListResponse) SetFilestorages(v []Volume) {
	o.Filestorages = v
}

func (o VolumeListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["filestorages"] = o.Filestorages
	return toSerialize, nil
}

func (o *VolumeListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"filestorages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeListResponse := _VolumeListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeListResponse)

	if err != nil {
		return err
	}

	*o = VolumeListResponse(varVolumeListResponse)

	return err
}

type NullableVolumeListResponse struct {
	value *VolumeListResponse
	isSet bool
}

func (v NullableVolumeListResponse) Get() *VolumeListResponse {
	return v.value
}

func (v *NullableVolumeListResponse) Set(val *VolumeListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeListResponse(val *VolumeListResponse) *NullableVolumeListResponse {
	return &NullableVolumeListResponse{value: val, isSet: true}
}

func (v NullableVolumeListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
