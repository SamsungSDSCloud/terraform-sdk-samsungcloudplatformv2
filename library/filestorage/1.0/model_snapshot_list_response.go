/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SnapshotListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotListResponse{}

// SnapshotListResponse struct for SnapshotListResponse
type SnapshotListResponse struct {
	// count
	Count                 int32         `json:"count"`
	SnapshotSizeTotalByte NullableInt32 `json:"snapshot_size_total_byte,omitempty"`
	Snapshots             []Snapshot    `json:"snapshots"`
}

type _SnapshotListResponse SnapshotListResponse

// NewSnapshotListResponse instantiates a new SnapshotListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotListResponse(count int32, snapshots []Snapshot) *SnapshotListResponse {
	this := SnapshotListResponse{}
	this.Count = count
	this.Snapshots = snapshots
	return &this
}

// NewSnapshotListResponseWithDefaults instantiates a new SnapshotListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotListResponseWithDefaults() *SnapshotListResponse {
	this := SnapshotListResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *SnapshotListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *SnapshotListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *SnapshotListResponse) SetCount(v int32) {
	o.Count = v
}

// GetSnapshotSizeTotalByte returns the SnapshotSizeTotalByte field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotListResponse) GetSnapshotSizeTotalByte() int32 {
	if o == nil || IsNil(o.SnapshotSizeTotalByte.Get()) {
		var ret int32
		return ret
	}
	return *o.SnapshotSizeTotalByte.Get()
}

// GetSnapshotSizeTotalByteOk returns a tuple with the SnapshotSizeTotalByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotListResponse) GetSnapshotSizeTotalByteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapshotSizeTotalByte.Get(), o.SnapshotSizeTotalByte.IsSet()
}

// HasSnapshotSizeTotalByte returns a boolean if a field has been set.
func (o *SnapshotListResponse) HasSnapshotSizeTotalByte() bool {
	if o != nil && o.SnapshotSizeTotalByte.IsSet() {
		return true
	}

	return false
}

// SetSnapshotSizeTotalByte gets a reference to the given NullableInt32 and assigns it to the SnapshotSizeTotalByte field.
func (o *SnapshotListResponse) SetSnapshotSizeTotalByte(v int32) {
	o.SnapshotSizeTotalByte.Set(&v)
}

// SetSnapshotSizeTotalByteNil sets the value for SnapshotSizeTotalByte to be an explicit nil
func (o *SnapshotListResponse) SetSnapshotSizeTotalByteNil() {
	o.SnapshotSizeTotalByte.Set(nil)
}

// UnsetSnapshotSizeTotalByte ensures that no value is present for SnapshotSizeTotalByte, not even an explicit nil
func (o *SnapshotListResponse) UnsetSnapshotSizeTotalByte() {
	o.SnapshotSizeTotalByte.Unset()
}

// GetSnapshots returns the Snapshots field value
func (o *SnapshotListResponse) GetSnapshots() []Snapshot {
	if o == nil {
		var ret []Snapshot
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
func (o *SnapshotListResponse) GetSnapshotsOk() ([]Snapshot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Snapshots, true
}

// SetSnapshots sets field value
func (o *SnapshotListResponse) SetSnapshots(v []Snapshot) {
	o.Snapshots = v
}

func (o SnapshotListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if o.SnapshotSizeTotalByte.IsSet() {
		toSerialize["snapshot_size_total_byte"] = o.SnapshotSizeTotalByte.Get()
	}
	toSerialize["snapshots"] = o.Snapshots
	return toSerialize, nil
}

func (o *SnapshotListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotListResponse := _SnapshotListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotListResponse)

	if err != nil {
		return err
	}

	*o = SnapshotListResponse(varSnapshotListResponse)

	return err
}

type NullableSnapshotListResponse struct {
	value *SnapshotListResponse
	isSet bool
}

func (v NullableSnapshotListResponse) Get() *SnapshotListResponse {
	return v.value
}

func (v *NullableSnapshotListResponse) Set(val *SnapshotListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotListResponse(val *SnapshotListResponse) *NullableSnapshotListResponse {
	return &NullableSnapshotListResponse{value: val, isSet: true}
}

func (v NullableSnapshotListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
