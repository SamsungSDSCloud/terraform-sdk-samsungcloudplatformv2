/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1098
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ReplicationUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationUpdateRequest{}

// ReplicationUpdateRequest struct for ReplicationUpdateRequest
type ReplicationUpdateRequest struct {
	BackupRetentionCount NullableInt32                       `json:"backup_retention_count,omitempty"`
	ReplicationFrequency NullableReplicationUpdatePolicyEnum `json:"replication_frequency,omitempty"`
	ReplicationPolicy    NullableReplicationUpdateStatusEnum `json:"replication_policy,omitempty"`
	// Replication Update Type
	ReplicationUpdateType string `json:"replication_update_type" validate:"regexp=policy|modify_schedule"`
}

type _ReplicationUpdateRequest ReplicationUpdateRequest

// NewReplicationUpdateRequest instantiates a new ReplicationUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationUpdateRequest(replicationUpdateType string) *ReplicationUpdateRequest {
	this := ReplicationUpdateRequest{}
	this.ReplicationUpdateType = replicationUpdateType
	return &this
}

// NewReplicationUpdateRequestWithDefaults instantiates a new ReplicationUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationUpdateRequestWithDefaults() *ReplicationUpdateRequest {
	this := ReplicationUpdateRequest{}
	return &this
}

// GetBackupRetentionCount returns the BackupRetentionCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationUpdateRequest) GetBackupRetentionCount() int32 {
	if o == nil || IsNil(o.BackupRetentionCount.Get()) {
		var ret int32
		return ret
	}
	return *o.BackupRetentionCount.Get()
}

// GetBackupRetentionCountOk returns a tuple with the BackupRetentionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationUpdateRequest) GetBackupRetentionCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupRetentionCount.Get(), o.BackupRetentionCount.IsSet()
}

// HasBackupRetentionCount returns a boolean if a field has been set.
func (o *ReplicationUpdateRequest) HasBackupRetentionCount() bool {
	if o != nil && o.BackupRetentionCount.IsSet() {
		return true
	}

	return false
}

// SetBackupRetentionCount gets a reference to the given NullableInt32 and assigns it to the BackupRetentionCount field.
func (o *ReplicationUpdateRequest) SetBackupRetentionCount(v int32) {
	o.BackupRetentionCount.Set(&v)
}

// SetBackupRetentionCountNil sets the value for BackupRetentionCount to be an explicit nil
func (o *ReplicationUpdateRequest) SetBackupRetentionCountNil() {
	o.BackupRetentionCount.Set(nil)
}

// UnsetBackupRetentionCount ensures that no value is present for BackupRetentionCount, not even an explicit nil
func (o *ReplicationUpdateRequest) UnsetBackupRetentionCount() {
	o.BackupRetentionCount.Unset()
}

// GetReplicationFrequency returns the ReplicationFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationUpdateRequest) GetReplicationFrequency() ReplicationUpdatePolicyEnum {
	if o == nil || IsNil(o.ReplicationFrequency.Get()) {
		var ret ReplicationUpdatePolicyEnum
		return ret
	}
	return *o.ReplicationFrequency.Get()
}

// GetReplicationFrequencyOk returns a tuple with the ReplicationFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationUpdateRequest) GetReplicationFrequencyOk() (*ReplicationUpdatePolicyEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplicationFrequency.Get(), o.ReplicationFrequency.IsSet()
}

// HasReplicationFrequency returns a boolean if a field has been set.
func (o *ReplicationUpdateRequest) HasReplicationFrequency() bool {
	if o != nil && o.ReplicationFrequency.IsSet() {
		return true
	}

	return false
}

// SetReplicationFrequency gets a reference to the given NullableReplicationUpdatePolicyEnum and assigns it to the ReplicationFrequency field.
func (o *ReplicationUpdateRequest) SetReplicationFrequency(v ReplicationUpdatePolicyEnum) {
	o.ReplicationFrequency.Set(&v)
}

// SetReplicationFrequencyNil sets the value for ReplicationFrequency to be an explicit nil
func (o *ReplicationUpdateRequest) SetReplicationFrequencyNil() {
	o.ReplicationFrequency.Set(nil)
}

// UnsetReplicationFrequency ensures that no value is present for ReplicationFrequency, not even an explicit nil
func (o *ReplicationUpdateRequest) UnsetReplicationFrequency() {
	o.ReplicationFrequency.Unset()
}

// GetReplicationPolicy returns the ReplicationPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationUpdateRequest) GetReplicationPolicy() ReplicationUpdateStatusEnum {
	if o == nil || IsNil(o.ReplicationPolicy.Get()) {
		var ret ReplicationUpdateStatusEnum
		return ret
	}
	return *o.ReplicationPolicy.Get()
}

// GetReplicationPolicyOk returns a tuple with the ReplicationPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationUpdateRequest) GetReplicationPolicyOk() (*ReplicationUpdateStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplicationPolicy.Get(), o.ReplicationPolicy.IsSet()
}

// HasReplicationPolicy returns a boolean if a field has been set.
func (o *ReplicationUpdateRequest) HasReplicationPolicy() bool {
	if o != nil && o.ReplicationPolicy.IsSet() {
		return true
	}

	return false
}

// SetReplicationPolicy gets a reference to the given NullableReplicationUpdateStatusEnum and assigns it to the ReplicationPolicy field.
func (o *ReplicationUpdateRequest) SetReplicationPolicy(v ReplicationUpdateStatusEnum) {
	o.ReplicationPolicy.Set(&v)
}

// SetReplicationPolicyNil sets the value for ReplicationPolicy to be an explicit nil
func (o *ReplicationUpdateRequest) SetReplicationPolicyNil() {
	o.ReplicationPolicy.Set(nil)
}

// UnsetReplicationPolicy ensures that no value is present for ReplicationPolicy, not even an explicit nil
func (o *ReplicationUpdateRequest) UnsetReplicationPolicy() {
	o.ReplicationPolicy.Unset()
}

// GetReplicationUpdateType returns the ReplicationUpdateType field value
func (o *ReplicationUpdateRequest) GetReplicationUpdateType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReplicationUpdateType
}

// GetReplicationUpdateTypeOk returns a tuple with the ReplicationUpdateType field value
// and a boolean to check if the value has been set.
func (o *ReplicationUpdateRequest) GetReplicationUpdateTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplicationUpdateType, true
}

// SetReplicationUpdateType sets field value
func (o *ReplicationUpdateRequest) SetReplicationUpdateType(v string) {
	o.ReplicationUpdateType = v
}

func (o ReplicationUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupRetentionCount.IsSet() {
		toSerialize["backup_retention_count"] = o.BackupRetentionCount.Get()
	}
	if o.ReplicationFrequency.IsSet() {
		toSerialize["replication_frequency"] = o.ReplicationFrequency.Get()
	}
	if o.ReplicationPolicy.IsSet() {
		toSerialize["replication_policy"] = o.ReplicationPolicy.Get()
	}
	toSerialize["replication_update_type"] = o.ReplicationUpdateType
	return toSerialize, nil
}

func (o *ReplicationUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"replication_update_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReplicationUpdateRequest := _ReplicationUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReplicationUpdateRequest)

	if err != nil {
		return err
	}

	*o = ReplicationUpdateRequest(varReplicationUpdateRequest)

	return err
}

type NullableReplicationUpdateRequest struct {
	value *ReplicationUpdateRequest
	isSet bool
}

func (v NullableReplicationUpdateRequest) Get() *ReplicationUpdateRequest {
	return v.value
}

func (v *NullableReplicationUpdateRequest) Set(val *ReplicationUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationUpdateRequest(val *ReplicationUpdateRequest) *NullableReplicationUpdateRequest {
	return &NullableReplicationUpdateRequest{value: val, isSet: true}
}

func (v NullableReplicationUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
