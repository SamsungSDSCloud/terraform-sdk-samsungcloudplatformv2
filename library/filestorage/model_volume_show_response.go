/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the VolumeShowResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeShowResponse{}

// VolumeShowResponse struct for VolumeShowResponse
type VolumeShowResponse struct {
	// Account ID
	AccountId string         `json:"account_id"`
	CifsId    NullableString `json:"cifs_id,omitempty"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Volume Encryption Enabled
	EncryptionEnabled       bool         `json:"encryption_enabled"`
	FileUnitRecoveryEnabled NullableBool `json:"file_unit_recovery_enabled,omitempty"`
	// Volume ID
	Id string `json:"id"`
	// Volume Name
	Name string         `json:"name"`
	Path NullableString `json:"path,omitempty"`
	// Protocol
	Protocol string `json:"protocol"`
	// Purpose
	Purpose string `json:"purpose"`
	// Volume State
	State string `json:"state"`
	// Volume Type ID
	TypeId string `json:"type_id"`
	// Volume Type Name
	TypeName string        `json:"type_name"`
	Usage    NullableInt32 `json:"usage,omitempty"`
}

type _VolumeShowResponse VolumeShowResponse

// NewVolumeShowResponse instantiates a new VolumeShowResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeShowResponse(accountId string, createdAt time.Time, encryptionEnabled bool, id string, name string, protocol string, purpose string, state string, typeId string, typeName string) *VolumeShowResponse {
	this := VolumeShowResponse{}
	this.AccountId = accountId
	this.CreatedAt = createdAt
	this.EncryptionEnabled = encryptionEnabled
	this.Id = id
	this.Name = name
	this.Protocol = protocol
	this.Purpose = purpose
	this.State = state
	this.TypeId = typeId
	this.TypeName = typeName
	return &this
}

// NewVolumeShowResponseWithDefaults instantiates a new VolumeShowResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeShowResponseWithDefaults() *VolumeShowResponse {
	this := VolumeShowResponse{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *VolumeShowResponse) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *VolumeShowResponse) SetAccountId(v string) {
	o.AccountId = v
}

// GetCifsId returns the CifsId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeShowResponse) GetCifsId() string {
	if o == nil || IsNil(o.CifsId.Get()) {
		var ret string
		return ret
	}
	return *o.CifsId.Get()
}

// GetCifsIdOk returns a tuple with the CifsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetCifsIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CifsId.Get(), o.CifsId.IsSet()
}

// HasCifsId returns a boolean if a field has been set.
func (o *VolumeShowResponse) HasCifsId() bool {
	if o != nil && o.CifsId.IsSet() {
		return true
	}

	return false
}

// SetCifsId gets a reference to the given NullableString and assigns it to the CifsId field.
func (o *VolumeShowResponse) SetCifsId(v string) {
	o.CifsId.Set(&v)
}

// SetCifsIdNil sets the value for CifsId to be an explicit nil
func (o *VolumeShowResponse) SetCifsIdNil() {
	o.CifsId.Set(nil)
}

// UnsetCifsId ensures that no value is present for CifsId, not even an explicit nil
func (o *VolumeShowResponse) UnsetCifsId() {
	o.CifsId.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *VolumeShowResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VolumeShowResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEncryptionEnabled returns the EncryptionEnabled field value
func (o *VolumeShowResponse) GetEncryptionEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EncryptionEnabled
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionEnabled, true
}

// SetEncryptionEnabled sets field value
func (o *VolumeShowResponse) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled = v
}

// GetFileUnitRecoveryEnabled returns the FileUnitRecoveryEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeShowResponse) GetFileUnitRecoveryEnabled() bool {
	if o == nil || IsNil(o.FileUnitRecoveryEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.FileUnitRecoveryEnabled.Get()
}

// GetFileUnitRecoveryEnabledOk returns a tuple with the FileUnitRecoveryEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetFileUnitRecoveryEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileUnitRecoveryEnabled.Get(), o.FileUnitRecoveryEnabled.IsSet()
}

// HasFileUnitRecoveryEnabled returns a boolean if a field has been set.
func (o *VolumeShowResponse) HasFileUnitRecoveryEnabled() bool {
	if o != nil && o.FileUnitRecoveryEnabled.IsSet() {
		return true
	}

	return false
}

// SetFileUnitRecoveryEnabled gets a reference to the given NullableBool and assigns it to the FileUnitRecoveryEnabled field.
func (o *VolumeShowResponse) SetFileUnitRecoveryEnabled(v bool) {
	o.FileUnitRecoveryEnabled.Set(&v)
}

// SetFileUnitRecoveryEnabledNil sets the value for FileUnitRecoveryEnabled to be an explicit nil
func (o *VolumeShowResponse) SetFileUnitRecoveryEnabledNil() {
	o.FileUnitRecoveryEnabled.Set(nil)
}

// UnsetFileUnitRecoveryEnabled ensures that no value is present for FileUnitRecoveryEnabled, not even an explicit nil
func (o *VolumeShowResponse) UnsetFileUnitRecoveryEnabled() {
	o.FileUnitRecoveryEnabled.Unset()
}

// GetId returns the Id field value
func (o *VolumeShowResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumeShowResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VolumeShowResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VolumeShowResponse) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeShowResponse) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *VolumeShowResponse) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *VolumeShowResponse) SetPath(v string) {
	o.Path.Set(&v)
}

// SetPathNil sets the value for Path to be an explicit nil
func (o *VolumeShowResponse) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *VolumeShowResponse) UnsetPath() {
	o.Path.Unset()
}

// GetProtocol returns the Protocol field value
func (o *VolumeShowResponse) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *VolumeShowResponse) SetProtocol(v string) {
	o.Protocol = v
}

// GetPurpose returns the Purpose field value
func (o *VolumeShowResponse) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *VolumeShowResponse) SetPurpose(v string) {
	o.Purpose = v
}

// GetState returns the State field value
func (o *VolumeShowResponse) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VolumeShowResponse) SetState(v string) {
	o.State = v
}

// GetTypeId returns the TypeId field value
func (o *VolumeShowResponse) GetTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *VolumeShowResponse) SetTypeId(v string) {
	o.TypeId = v
}

// GetTypeName returns the TypeName field value
func (o *VolumeShowResponse) GetTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value
// and a boolean to check if the value has been set.
func (o *VolumeShowResponse) GetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeName, true
}

// SetTypeName sets field value
func (o *VolumeShowResponse) SetTypeName(v string) {
	o.TypeName = v
}

// GetUsage returns the Usage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeShowResponse) GetUsage() int32 {
	if o == nil || IsNil(o.Usage.Get()) {
		var ret int32
		return ret
	}
	return *o.Usage.Get()
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeShowResponse) GetUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage.Get(), o.Usage.IsSet()
}

// HasUsage returns a boolean if a field has been set.
func (o *VolumeShowResponse) HasUsage() bool {
	if o != nil && o.Usage.IsSet() {
		return true
	}

	return false
}

// SetUsage gets a reference to the given NullableInt32 and assigns it to the Usage field.
func (o *VolumeShowResponse) SetUsage(v int32) {
	o.Usage.Set(&v)
}

// SetUsageNil sets the value for Usage to be an explicit nil
func (o *VolumeShowResponse) SetUsageNil() {
	o.Usage.Set(nil)
}

// UnsetUsage ensures that no value is present for Usage, not even an explicit nil
func (o *VolumeShowResponse) UnsetUsage() {
	o.Usage.Unset()
}

func (o VolumeShowResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeShowResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	if o.CifsId.IsSet() {
		toSerialize["cifs_id"] = o.CifsId.Get()
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["encryption_enabled"] = o.EncryptionEnabled
	if o.FileUnitRecoveryEnabled.IsSet() {
		toSerialize["file_unit_recovery_enabled"] = o.FileUnitRecoveryEnabled.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	toSerialize["protocol"] = o.Protocol
	toSerialize["purpose"] = o.Purpose
	toSerialize["state"] = o.State
	toSerialize["type_id"] = o.TypeId
	toSerialize["type_name"] = o.TypeName
	if o.Usage.IsSet() {
		toSerialize["usage"] = o.Usage.Get()
	}
	return toSerialize, nil
}

func (o *VolumeShowResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"created_at",
		"encryption_enabled",
		"id",
		"name",
		"protocol",
		"purpose",
		"state",
		"type_id",
		"type_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeShowResponse := _VolumeShowResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeShowResponse)

	if err != nil {
		return err
	}

	*o = VolumeShowResponse(varVolumeShowResponse)

	return err
}

type NullableVolumeShowResponse struct {
	value *VolumeShowResponse
	isSet bool
}

func (v NullableVolumeShowResponse) Get() *VolumeShowResponse {
	return v.value
}

func (v *NullableVolumeShowResponse) Set(val *VolumeShowResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeShowResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeShowResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeShowResponse(val *VolumeShowResponse) *NullableVolumeShowResponse {
	return &NullableVolumeShowResponse{value: val, isSet: true}
}

func (v NullableVolumeShowResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeShowResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
