/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SnapshotRestoreResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotRestoreResponse{}

// SnapshotRestoreResponse struct for SnapshotRestoreResponse
type SnapshotRestoreResponse struct {
	Snapshot Snapshot `json:"snapshot"`
}

type _SnapshotRestoreResponse SnapshotRestoreResponse

// NewSnapshotRestoreResponse instantiates a new SnapshotRestoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotRestoreResponse(snapshot Snapshot) *SnapshotRestoreResponse {
	this := SnapshotRestoreResponse{}
	this.Snapshot = snapshot
	return &this
}

// NewSnapshotRestoreResponseWithDefaults instantiates a new SnapshotRestoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotRestoreResponseWithDefaults() *SnapshotRestoreResponse {
	this := SnapshotRestoreResponse{}
	return &this
}

// GetSnapshot returns the Snapshot field value
func (o *SnapshotRestoreResponse) GetSnapshot() Snapshot {
	if o == nil {
		var ret Snapshot
		return ret
	}

	return o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value
// and a boolean to check if the value has been set.
func (o *SnapshotRestoreResponse) GetSnapshotOk() (*Snapshot, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snapshot, true
}

// SetSnapshot sets field value
func (o *SnapshotRestoreResponse) SetSnapshot(v Snapshot) {
	o.Snapshot = v
}

func (o SnapshotRestoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotRestoreResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshot"] = o.Snapshot
	return toSerialize, nil
}

func (o *SnapshotRestoreResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotRestoreResponse := _SnapshotRestoreResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotRestoreResponse)

	if err != nil {
		return err
	}

	*o = SnapshotRestoreResponse(varSnapshotRestoreResponse)

	return err
}

type NullableSnapshotRestoreResponse struct {
	value *SnapshotRestoreResponse
	isSet bool
}

func (v NullableSnapshotRestoreResponse) Get() *SnapshotRestoreResponse {
	return v.value
}

func (v *NullableSnapshotRestoreResponse) Set(val *SnapshotRestoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotRestoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotRestoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotRestoreResponse(val *SnapshotRestoreResponse) *NullableSnapshotRestoreResponse {
	return &NullableSnapshotRestoreResponse{value: val, isSet: true}
}

func (v NullableSnapshotRestoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotRestoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
