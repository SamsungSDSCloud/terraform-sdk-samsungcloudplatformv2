/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// FilestorageV1VolumeReplicationAPIsAPIService FilestorageV1VolumeReplicationAPIsAPI service
type FilestorageV1VolumeReplicationAPIsAPIService service

type FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest struct {
	ctx                      context.Context
	ApiService               *FilestorageV1VolumeReplicationAPIsAPIService
	replicationCreateRequest *ReplicationCreateRequest
}

func (r FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest) ReplicationCreateRequest(replicationCreateRequest ReplicationCreateRequest) FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest {
	r.replicationCreateRequest = &replicationCreateRequest
	return r
}

func (r FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest) Execute() (*ReplicationCreateResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeReplicationExecute(r)
}

/*
CreateVolumeReplication CreateVolumeReplication

Create Volume Replication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest
*/
func (a *FilestorageV1VolumeReplicationAPIsAPIService) CreateVolumeReplication(ctx context.Context) FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest {
	return FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReplicationCreateResponse
func (a *FilestorageV1VolumeReplicationAPIsAPIService) CreateVolumeReplicationExecute(r FilestorageV1VolumeReplicationAPIsAPICreateVolumeReplicationRequest) (*ReplicationCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReplicationCreateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/replications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.replicationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("replicationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replicationCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest struct {
	ctx           context.Context
	ApiService    *FilestorageV1VolumeReplicationAPIsAPIService
	replicationId string
	volumeId      *string
}

// Volume ID
func (r FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest) VolumeId(volumeId string) FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest {
	r.volumeId = &volumeId
	return r
}

func (r FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVolumeReplicationExecute(r)
}

/*
DeleteVolumeReplication DeleteVolumeReplication

Delete Volume Replication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param replicationId Replication ID
	@return FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest
*/
func (a *FilestorageV1VolumeReplicationAPIsAPIService) DeleteVolumeReplication(ctx context.Context, replicationId string) FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest {
	return FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest{
		ApiService:    a,
		ctx:           ctx,
		replicationId: replicationId,
	}
}

// Execute executes the request
func (a *FilestorageV1VolumeReplicationAPIsAPIService) DeleteVolumeReplicationExecute(r FilestorageV1VolumeReplicationAPIsAPIDeleteVolumeReplicationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/replications/{replication_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"replication_id"+"}", url.PathEscape(parameterValueToString(r.replicationId, "replicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeId == nil {
		return nil, reportError("volumeId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "volume_id", r.volumeId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest struct {
	ctx              context.Context
	ApiService       *FilestorageV1VolumeReplicationAPIsAPIService
	typeName         *string
	sourceRegionName *string
	replicationType  *string
}

// Volume Type Name
func (r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest) TypeName(typeName string) FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest {
	r.typeName = &typeName
	return r
}

// Region
func (r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest) SourceRegionName(sourceRegionName string) FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest {
	r.sourceRegionName = &sourceRegionName
	return r
}

// Replication Type
func (r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest) ReplicationType(replicationType string) FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest {
	r.replicationType = &replicationType
	return r
}

func (r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest) Execute() (*ReplicationRegionListResponse, *http.Response, error) {
	return r.ApiService.ListVolumeReplicationRegionExecute(r)
}

/*
ListVolumeReplicationRegion ListVolumeReplicationRegion

List Volume Replication Region

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest
*/
func (a *FilestorageV1VolumeReplicationAPIsAPIService) ListVolumeReplicationRegion(ctx context.Context) FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest {
	return FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReplicationRegionListResponse
func (a *FilestorageV1VolumeReplicationAPIsAPIService) ListVolumeReplicationRegionExecute(r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationRegionRequest) (*ReplicationRegionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReplicationRegionListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/replications/regions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.typeName == nil {
		return localVarReturnValue, nil, reportError("typeName is required and must be specified")
	}
	if r.sourceRegionName == nil {
		return localVarReturnValue, nil, reportError("sourceRegionName is required and must be specified")
	}
	if r.replicationType == nil {
		return localVarReturnValue, nil, reportError("replicationType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "type_name", r.typeName, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "source_region_name", r.sourceRegionName, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "replication_type", r.replicationType, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest struct {
	ctx        context.Context
	ApiService *FilestorageV1VolumeReplicationAPIsAPIService
	volumeId   *string
}

// Volume ID
func (r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest) VolumeId(volumeId string) FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest {
	r.volumeId = &volumeId
	return r
}

func (r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest) Execute() (*ReplicationListResponse, *http.Response, error) {
	return r.ApiService.ListVolumeReplicationsExecute(r)
}

/*
ListVolumeReplications ListVolumeReplications

List Volume Replications

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest
*/
func (a *FilestorageV1VolumeReplicationAPIsAPIService) ListVolumeReplications(ctx context.Context) FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest {
	return FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ReplicationListResponse
func (a *FilestorageV1VolumeReplicationAPIsAPIService) ListVolumeReplicationsExecute(r FilestorageV1VolumeReplicationAPIsAPIListVolumeReplicationsRequest) (*ReplicationListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReplicationListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/replications"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeId == nil {
		return localVarReturnValue, nil, reportError("volumeId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "volume_id", r.volumeId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest struct {
	ctx                      context.Context
	ApiService               *FilestorageV1VolumeReplicationAPIsAPIService
	replicationId            string
	volumeId                 *string
	replicationUpdateRequest *ReplicationUpdateRequest
}

// Volume ID
func (r FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest) VolumeId(volumeId string) FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest {
	r.volumeId = &volumeId
	return r
}

func (r FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest) ReplicationUpdateRequest(replicationUpdateRequest ReplicationUpdateRequest) FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest {
	r.replicationUpdateRequest = &replicationUpdateRequest
	return r
}

func (r FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetVolumeReplicationExecute(r)
}

/*
SetVolumeReplication SetVolumeReplication

Set Volume Replication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param replicationId Replication ID
	@return FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest
*/
func (a *FilestorageV1VolumeReplicationAPIsAPIService) SetVolumeReplication(ctx context.Context, replicationId string) FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest {
	return FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest{
		ApiService:    a,
		ctx:           ctx,
		replicationId: replicationId,
	}
}

// Execute executes the request
func (a *FilestorageV1VolumeReplicationAPIsAPIService) SetVolumeReplicationExecute(r FilestorageV1VolumeReplicationAPIsAPISetVolumeReplicationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/replications/{replication_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"replication_id"+"}", url.PathEscape(parameterValueToString(r.replicationId, "replicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeId == nil {
		return nil, reportError("volumeId is required and must be specified")
	}
	if r.replicationUpdateRequest == nil {
		return nil, reportError("replicationUpdateRequest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "volume_id", r.volumeId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.replicationUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest struct {
	ctx           context.Context
	ApiService    *FilestorageV1VolumeReplicationAPIsAPIService
	replicationId string
	volumeId      *string
}

// Volume ID
func (r FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest) VolumeId(volumeId string) FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest {
	r.volumeId = &volumeId
	return r
}

func (r FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest) Execute() (*ReplicationShowResponse, *http.Response, error) {
	return r.ApiService.ShowVolumeReplicationExecute(r)
}

/*
ShowVolumeReplication ShowVolumeReplication

Show Volume Replication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param replicationId Replication ID
	@return FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest
*/
func (a *FilestorageV1VolumeReplicationAPIsAPIService) ShowVolumeReplication(ctx context.Context, replicationId string) FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest {
	return FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest{
		ApiService:    a,
		ctx:           ctx,
		replicationId: replicationId,
	}
}

// Execute executes the request
//
//	@return ReplicationShowResponse
func (a *FilestorageV1VolumeReplicationAPIsAPIService) ShowVolumeReplicationExecute(r FilestorageV1VolumeReplicationAPIsAPIShowVolumeReplicationRequest) (*ReplicationShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ReplicationShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/replications/{replication_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"replication_id"+"}", url.PathEscape(parameterValueToString(r.replicationId, "replicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeId == nil {
		return localVarReturnValue, nil, reportError("volumeId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "volume_id", r.volumeId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
