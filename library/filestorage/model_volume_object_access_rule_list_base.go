/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeObjectAccessRuleListBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeObjectAccessRuleListBase{}

// VolumeObjectAccessRuleListBase struct for VolumeObjectAccessRuleListBase
type VolumeObjectAccessRuleListBase struct {
	// Access Rule State
	AccessRuleState string `json:"access_rule_state"`
	// Object ID
	ObjectId string `json:"object_id"`
	// Object Type
	ObjectType string `json:"object_type"`
}

type _VolumeObjectAccessRuleListBase VolumeObjectAccessRuleListBase

// NewVolumeObjectAccessRuleListBase instantiates a new VolumeObjectAccessRuleListBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeObjectAccessRuleListBase(accessRuleState string, objectId string, objectType string) *VolumeObjectAccessRuleListBase {
	this := VolumeObjectAccessRuleListBase{}
	this.AccessRuleState = accessRuleState
	this.ObjectId = objectId
	this.ObjectType = objectType
	return &this
}

// NewVolumeObjectAccessRuleListBaseWithDefaults instantiates a new VolumeObjectAccessRuleListBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeObjectAccessRuleListBaseWithDefaults() *VolumeObjectAccessRuleListBase {
	this := VolumeObjectAccessRuleListBase{}
	return &this
}

// GetAccessRuleState returns the AccessRuleState field value
func (o *VolumeObjectAccessRuleListBase) GetAccessRuleState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessRuleState
}

// GetAccessRuleStateOk returns a tuple with the AccessRuleState field value
// and a boolean to check if the value has been set.
func (o *VolumeObjectAccessRuleListBase) GetAccessRuleStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessRuleState, true
}

// SetAccessRuleState sets field value
func (o *VolumeObjectAccessRuleListBase) SetAccessRuleState(v string) {
	o.AccessRuleState = v
}

// GetObjectId returns the ObjectId field value
func (o *VolumeObjectAccessRuleListBase) GetObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *VolumeObjectAccessRuleListBase) GetObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *VolumeObjectAccessRuleListBase) SetObjectId(v string) {
	o.ObjectId = v
}

// GetObjectType returns the ObjectType field value
func (o *VolumeObjectAccessRuleListBase) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *VolumeObjectAccessRuleListBase) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *VolumeObjectAccessRuleListBase) SetObjectType(v string) {
	o.ObjectType = v
}

func (o VolumeObjectAccessRuleListBase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeObjectAccessRuleListBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_rule_state"] = o.AccessRuleState
	toSerialize["object_id"] = o.ObjectId
	toSerialize["object_type"] = o.ObjectType
	return toSerialize, nil
}

func (o *VolumeObjectAccessRuleListBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_rule_state",
		"object_id",
		"object_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeObjectAccessRuleListBase := _VolumeObjectAccessRuleListBase{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeObjectAccessRuleListBase)

	if err != nil {
		return err
	}

	*o = VolumeObjectAccessRuleListBase(varVolumeObjectAccessRuleListBase)

	return err
}

type NullableVolumeObjectAccessRuleListBase struct {
	value *VolumeObjectAccessRuleListBase
	isSet bool
}

func (v NullableVolumeObjectAccessRuleListBase) Get() *VolumeObjectAccessRuleListBase {
	return v.value
}

func (v *NullableVolumeObjectAccessRuleListBase) Set(val *VolumeObjectAccessRuleListBase) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeObjectAccessRuleListBase) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeObjectAccessRuleListBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeObjectAccessRuleListBase(val *VolumeObjectAccessRuleListBase) *NullableVolumeObjectAccessRuleListBase {
	return &NullableVolumeObjectAccessRuleListBase{value: val, isSet: true}
}

func (v NullableVolumeObjectAccessRuleListBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeObjectAccessRuleListBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
