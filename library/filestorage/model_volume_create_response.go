/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeCreateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeCreateResponse{}

// VolumeCreateResponse struct for VolumeCreateResponse
type VolumeCreateResponse struct {
	// Protocol
	Protocol   string         `json:"protocol"`
	SnapshotId NullableString `json:"snapshot_id,omitempty"`
	// Volume Type Name
	TypeName string `json:"type_name"`
	// Volume ID
	VolumeId string `json:"volume_id"`
	// Volume Name
	VolumeName string `json:"volume_name"`
}

type _VolumeCreateResponse VolumeCreateResponse

// NewVolumeCreateResponse instantiates a new VolumeCreateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeCreateResponse(protocol string, typeName string, volumeId string, volumeName string) *VolumeCreateResponse {
	this := VolumeCreateResponse{}
	this.Protocol = protocol
	this.TypeName = typeName
	this.VolumeId = volumeId
	this.VolumeName = volumeName
	return &this
}

// NewVolumeCreateResponseWithDefaults instantiates a new VolumeCreateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeCreateResponseWithDefaults() *VolumeCreateResponse {
	this := VolumeCreateResponse{}
	return &this
}

// GetProtocol returns the Protocol field value
func (o *VolumeCreateResponse) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *VolumeCreateResponse) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *VolumeCreateResponse) SetProtocol(v string) {
	o.Protocol = v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeCreateResponse) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId.Get()) {
		var ret string
		return ret
	}
	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeCreateResponse) GetSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *VolumeCreateResponse) HasSnapshotId() bool {
	if o != nil && o.SnapshotId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given NullableString and assigns it to the SnapshotId field.
func (o *VolumeCreateResponse) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}

// SetSnapshotIdNil sets the value for SnapshotId to be an explicit nil
func (o *VolumeCreateResponse) SetSnapshotIdNil() {
	o.SnapshotId.Set(nil)
}

// UnsetSnapshotId ensures that no value is present for SnapshotId, not even an explicit nil
func (o *VolumeCreateResponse) UnsetSnapshotId() {
	o.SnapshotId.Unset()
}

// GetTypeName returns the TypeName field value
func (o *VolumeCreateResponse) GetTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value
// and a boolean to check if the value has been set.
func (o *VolumeCreateResponse) GetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeName, true
}

// SetTypeName sets field value
func (o *VolumeCreateResponse) SetTypeName(v string) {
	o.TypeName = v
}

// GetVolumeId returns the VolumeId field value
func (o *VolumeCreateResponse) GetVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value
// and a boolean to check if the value has been set.
func (o *VolumeCreateResponse) GetVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeId, true
}

// SetVolumeId sets field value
func (o *VolumeCreateResponse) SetVolumeId(v string) {
	o.VolumeId = v
}

// GetVolumeName returns the VolumeName field value
func (o *VolumeCreateResponse) GetVolumeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value
// and a boolean to check if the value has been set.
func (o *VolumeCreateResponse) GetVolumeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeName, true
}

// SetVolumeName sets field value
func (o *VolumeCreateResponse) SetVolumeName(v string) {
	o.VolumeName = v
}

func (o VolumeCreateResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeCreateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["protocol"] = o.Protocol
	if o.SnapshotId.IsSet() {
		toSerialize["snapshot_id"] = o.SnapshotId.Get()
	}
	toSerialize["type_name"] = o.TypeName
	toSerialize["volume_id"] = o.VolumeId
	toSerialize["volume_name"] = o.VolumeName
	return toSerialize, nil
}

func (o *VolumeCreateResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protocol",
		"type_name",
		"volume_id",
		"volume_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeCreateResponse := _VolumeCreateResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeCreateResponse)

	if err != nil {
		return err
	}

	*o = VolumeCreateResponse(varVolumeCreateResponse)

	return err
}

type NullableVolumeCreateResponse struct {
	value *VolumeCreateResponse
	isSet bool
}

func (v NullableVolumeCreateResponse) Get() *VolumeCreateResponse {
	return v.value
}

func (v *NullableVolumeCreateResponse) Set(val *VolumeCreateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeCreateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeCreateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeCreateResponse(val *VolumeCreateResponse) *NullableVolumeCreateResponse {
	return &NullableVolumeCreateResponse{value: val, isSet: true}
}

func (v NullableVolumeCreateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeCreateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
