/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeCreateRequest{}

// VolumeCreateRequest struct for VolumeCreateRequest
type VolumeCreateRequest struct {
	CifsPassword NullableString `json:"cifs_password,omitempty"`
	// Volume Name
	Name string `json:"name" validate:"regexp=^[a-z]([a-z0-9_]){2,20}$"`
	// Protocol
	Protocol   string         `json:"protocol" validate:"regexp=^(NFS|CIFS)$"`
	SnapshotId NullableString `json:"snapshot_id,omitempty"`
	Tags       []Tag          `json:"tags,omitempty"`
	// Volume Type Name
	TypeName string `json:"type_name" validate:"regexp=^(HDD|SSD|HighPerformanceSSD)$"`
}

type _VolumeCreateRequest VolumeCreateRequest

// NewVolumeCreateRequest instantiates a new VolumeCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeCreateRequest(name string, protocol string, typeName string) *VolumeCreateRequest {
	this := VolumeCreateRequest{}
	this.Name = name
	this.Protocol = protocol
	this.TypeName = typeName
	return &this
}

// NewVolumeCreateRequestWithDefaults instantiates a new VolumeCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeCreateRequestWithDefaults() *VolumeCreateRequest {
	this := VolumeCreateRequest{}
	return &this
}

// GetCifsPassword returns the CifsPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeCreateRequest) GetCifsPassword() string {
	if o == nil || IsNil(o.CifsPassword.Get()) {
		var ret string
		return ret
	}
	return *o.CifsPassword.Get()
}

// GetCifsPasswordOk returns a tuple with the CifsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeCreateRequest) GetCifsPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CifsPassword.Get(), o.CifsPassword.IsSet()
}

// HasCifsPassword returns a boolean if a field has been set.
func (o *VolumeCreateRequest) HasCifsPassword() bool {
	if o != nil && o.CifsPassword.IsSet() {
		return true
	}

	return false
}

// SetCifsPassword gets a reference to the given NullableString and assigns it to the CifsPassword field.
func (o *VolumeCreateRequest) SetCifsPassword(v string) {
	o.CifsPassword.Set(&v)
}

// SetCifsPasswordNil sets the value for CifsPassword to be an explicit nil
func (o *VolumeCreateRequest) SetCifsPasswordNil() {
	o.CifsPassword.Set(nil)
}

// UnsetCifsPassword ensures that no value is present for CifsPassword, not even an explicit nil
func (o *VolumeCreateRequest) UnsetCifsPassword() {
	o.CifsPassword.Unset()
}

// GetName returns the Name field value
func (o *VolumeCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VolumeCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VolumeCreateRequest) SetName(v string) {
	o.Name = v
}

// GetProtocol returns the Protocol field value
func (o *VolumeCreateRequest) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *VolumeCreateRequest) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *VolumeCreateRequest) SetProtocol(v string) {
	o.Protocol = v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeCreateRequest) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId.Get()) {
		var ret string
		return ret
	}
	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeCreateRequest) GetSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *VolumeCreateRequest) HasSnapshotId() bool {
	if o != nil && o.SnapshotId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given NullableString and assigns it to the SnapshotId field.
func (o *VolumeCreateRequest) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}

// SetSnapshotIdNil sets the value for SnapshotId to be an explicit nil
func (o *VolumeCreateRequest) SetSnapshotIdNil() {
	o.SnapshotId.Set(nil)
}

// UnsetSnapshotId ensures that no value is present for SnapshotId, not even an explicit nil
func (o *VolumeCreateRequest) UnsetSnapshotId() {
	o.SnapshotId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeCreateRequest) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeCreateRequest) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VolumeCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *VolumeCreateRequest) SetTags(v []Tag) {
	o.Tags = v
}

// GetTypeName returns the TypeName field value
func (o *VolumeCreateRequest) GetTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value
// and a boolean to check if the value has been set.
func (o *VolumeCreateRequest) GetTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeName, true
}

// SetTypeName sets field value
func (o *VolumeCreateRequest) SetTypeName(v string) {
	o.TypeName = v
}

func (o VolumeCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CifsPassword.IsSet() {
		toSerialize["cifs_password"] = o.CifsPassword.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["protocol"] = o.Protocol
	if o.SnapshotId.IsSet() {
		toSerialize["snapshot_id"] = o.SnapshotId.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type_name"] = o.TypeName
	return toSerialize, nil
}

func (o *VolumeCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"protocol",
		"type_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeCreateRequest := _VolumeCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeCreateRequest)

	if err != nil {
		return err
	}

	*o = VolumeCreateRequest(varVolumeCreateRequest)

	return err
}

type NullableVolumeCreateRequest struct {
	value *VolumeCreateRequest
	isSet bool
}

func (v NullableVolumeCreateRequest) Get() *VolumeCreateRequest {
	return v.value
}

func (v *NullableVolumeCreateRequest) Set(val *VolumeCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeCreateRequest(val *VolumeCreateRequest) *NullableVolumeCreateRequest {
	return &NullableVolumeCreateRequest{value: val, isSet: true}
}

func (v NullableVolumeCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
