/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccessRuleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessRuleResponse{}

// AccessRuleResponse struct for AccessRuleResponse
type AccessRuleResponse struct {
	// Access Rule Action
	Action string `json:"action"`
	// Object ID
	ObjectId string `json:"object_id"`
	// Object Type
	ObjectType string `json:"object_type"`
	// Volume ID
	VolumeId string `json:"volume_id"`
}

type _AccessRuleResponse AccessRuleResponse

// NewAccessRuleResponse instantiates a new AccessRuleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRuleResponse(action string, objectId string, objectType string, volumeId string) *AccessRuleResponse {
	this := AccessRuleResponse{}
	this.Action = action
	this.ObjectId = objectId
	this.ObjectType = objectType
	this.VolumeId = volumeId
	return &this
}

// NewAccessRuleResponseWithDefaults instantiates a new AccessRuleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRuleResponseWithDefaults() *AccessRuleResponse {
	this := AccessRuleResponse{}
	return &this
}

// GetAction returns the Action field value
func (o *AccessRuleResponse) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *AccessRuleResponse) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *AccessRuleResponse) SetAction(v string) {
	o.Action = v
}

// GetObjectId returns the ObjectId field value
func (o *AccessRuleResponse) GetObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *AccessRuleResponse) GetObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *AccessRuleResponse) SetObjectId(v string) {
	o.ObjectId = v
}

// GetObjectType returns the ObjectType field value
func (o *AccessRuleResponse) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *AccessRuleResponse) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *AccessRuleResponse) SetObjectType(v string) {
	o.ObjectType = v
}

// GetVolumeId returns the VolumeId field value
func (o *AccessRuleResponse) GetVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value
// and a boolean to check if the value has been set.
func (o *AccessRuleResponse) GetVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeId, true
}

// SetVolumeId sets field value
func (o *AccessRuleResponse) SetVolumeId(v string) {
	o.VolumeId = v
}

func (o AccessRuleResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessRuleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["object_id"] = o.ObjectId
	toSerialize["object_type"] = o.ObjectType
	toSerialize["volume_id"] = o.VolumeId
	return toSerialize, nil
}

func (o *AccessRuleResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"object_id",
		"object_type",
		"volume_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessRuleResponse := _AccessRuleResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessRuleResponse)

	if err != nil {
		return err
	}

	*o = AccessRuleResponse(varAccessRuleResponse)

	return err
}

type NullableAccessRuleResponse struct {
	value *AccessRuleResponse
	isSet bool
}

func (v NullableAccessRuleResponse) Get() *AccessRuleResponse {
	return v.value
}

func (v *NullableAccessRuleResponse) Set(val *AccessRuleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRuleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRuleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRuleResponse(val *AccessRuleResponse) *NullableAccessRuleResponse {
	return &NullableAccessRuleResponse{value: val, isSet: true}
}

func (v NullableAccessRuleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRuleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
