/*
SCP File Storage Service

SCP File Storage Service

API version: 1.1.1.dev1167
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package filestorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SnapshotScheduleShow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotScheduleShow{}

// SnapshotScheduleShow struct for SnapshotScheduleShow
type SnapshotScheduleShow struct {
	DayOfWeek NullableString `json:"day_of_week,omitempty" validate:"regexp=^(SUN|MON|TUE|WED|THU|FRI|SAT)$"`
	// Frequency of the snapshot
	Frequency string `json:"frequency" validate:"regexp=^(WEEKLY|DAILY)$"`
	// Hour of the snapshot schedule
	Hour string         `json:"hour" validate:"regexp=^([0-9]|1[0-9]|2[0-3])$"`
	Id   NullableString `json:"id,omitempty"`
}

type _SnapshotScheduleShow SnapshotScheduleShow

// NewSnapshotScheduleShow instantiates a new SnapshotScheduleShow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotScheduleShow(frequency string, hour string) *SnapshotScheduleShow {
	this := SnapshotScheduleShow{}
	this.Frequency = frequency
	this.Hour = hour
	return &this
}

// NewSnapshotScheduleShowWithDefaults instantiates a new SnapshotScheduleShow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotScheduleShowWithDefaults() *SnapshotScheduleShow {
	this := SnapshotScheduleShow{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotScheduleShow) GetDayOfWeek() string {
	if o == nil || IsNil(o.DayOfWeek.Get()) {
		var ret string
		return ret
	}
	return *o.DayOfWeek.Get()
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotScheduleShow) GetDayOfWeekOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DayOfWeek.Get(), o.DayOfWeek.IsSet()
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *SnapshotScheduleShow) HasDayOfWeek() bool {
	if o != nil && o.DayOfWeek.IsSet() {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given NullableString and assigns it to the DayOfWeek field.
func (o *SnapshotScheduleShow) SetDayOfWeek(v string) {
	o.DayOfWeek.Set(&v)
}

// SetDayOfWeekNil sets the value for DayOfWeek to be an explicit nil
func (o *SnapshotScheduleShow) SetDayOfWeekNil() {
	o.DayOfWeek.Set(nil)
}

// UnsetDayOfWeek ensures that no value is present for DayOfWeek, not even an explicit nil
func (o *SnapshotScheduleShow) UnsetDayOfWeek() {
	o.DayOfWeek.Unset()
}

// GetFrequency returns the Frequency field value
func (o *SnapshotScheduleShow) GetFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *SnapshotScheduleShow) GetFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *SnapshotScheduleShow) SetFrequency(v string) {
	o.Frequency = v
}

// GetHour returns the Hour field value
func (o *SnapshotScheduleShow) GetHour() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hour
}

// GetHourOk returns a tuple with the Hour field value
// and a boolean to check if the value has been set.
func (o *SnapshotScheduleShow) GetHourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hour, true
}

// SetHour sets field value
func (o *SnapshotScheduleShow) SetHour(v string) {
	o.Hour = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotScheduleShow) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotScheduleShow) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SnapshotScheduleShow) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SnapshotScheduleShow) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *SnapshotScheduleShow) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SnapshotScheduleShow) UnsetId() {
	o.Id.Unset()
}

func (o SnapshotScheduleShow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotScheduleShow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfWeek.IsSet() {
		toSerialize["day_of_week"] = o.DayOfWeek.Get()
	}
	toSerialize["frequency"] = o.Frequency
	toSerialize["hour"] = o.Hour
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	return toSerialize, nil
}

func (o *SnapshotScheduleShow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"frequency",
		"hour",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotScheduleShow := _SnapshotScheduleShow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotScheduleShow)

	if err != nil {
		return err
	}

	*o = SnapshotScheduleShow(varSnapshotScheduleShow)

	return err
}

type NullableSnapshotScheduleShow struct {
	value *SnapshotScheduleShow
	isSet bool
}

func (v NullableSnapshotScheduleShow) Get() *SnapshotScheduleShow {
	return v.value
}

func (v *NullableSnapshotScheduleShow) Set(val *SnapshotScheduleShow) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotScheduleShow) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotScheduleShow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotScheduleShow(val *SnapshotScheduleShow) *NullableSnapshotScheduleShow {
	return &NullableSnapshotScheduleShow{value: val, isSet: true}
}

func (v NullableSnapshotScheduleShow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotScheduleShow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
