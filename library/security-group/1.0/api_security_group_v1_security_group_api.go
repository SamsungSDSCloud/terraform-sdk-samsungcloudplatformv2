/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7080
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securitygroup

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SecurityGroupV1SecurityGroupApiAPIService SecurityGroupV1SecurityGroupApiAPI service
type SecurityGroupV1SecurityGroupApiAPIService service

type SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupApiAPIService
	securityGroupCreateRequest *SecurityGroupCreateRequest
}

func (r SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest) SecurityGroupCreateRequest(securityGroupCreateRequest SecurityGroupCreateRequest) SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest {
	r.securityGroupCreateRequest = &securityGroupCreateRequest
	return r
}

func (r SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest) Execute() (*SecurityGroupShowResponse, *http.Response, error) {
	return r.ApiService.CreateSecurityGroupExecute(r)
}

/*
CreateSecurityGroup Create Security Group

Create Security Group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest
*/
func (a *SecurityGroupV1SecurityGroupApiAPIService) CreateSecurityGroup(ctx context.Context) SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest {
	return SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityGroupShowResponse
func (a *SecurityGroupV1SecurityGroupApiAPIService) CreateSecurityGroupExecute(r SecurityGroupV1SecurityGroupApiAPICreateSecurityGroupRequest) (*SecurityGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupShowResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("securityGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityGroupCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupApiAPIDeleteSecurityGroupRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupApiAPIService
	securityGroupId string
}

func (r SecurityGroupV1SecurityGroupApiAPIDeleteSecurityGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecurityGroupExecute(r)
}

/*
DeleteSecurityGroup Delete Security Group

Delete Security Group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityGroupId Security Group ID
 @return SecurityGroupV1SecurityGroupApiAPIDeleteSecurityGroupRequest
*/
func (a *SecurityGroupV1SecurityGroupApiAPIService) DeleteSecurityGroup(ctx context.Context, securityGroupId string) SecurityGroupV1SecurityGroupApiAPIDeleteSecurityGroupRequest {
	return SecurityGroupV1SecurityGroupApiAPIDeleteSecurityGroupRequest{
		ApiService: a,
		ctx: ctx,
		securityGroupId: securityGroupId,
	}
}

// Execute executes the request
func (a *SecurityGroupV1SecurityGroupApiAPIService) DeleteSecurityGroupExecute(r SecurityGroupV1SecurityGroupApiAPIDeleteSecurityGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/security-groups/{security_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupId, "securityGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupApiAPIService
	securityGroupId *string
}

// Security Group ID
func (r SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest) SecurityGroupId(securityGroupId string) SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest {
	r.securityGroupId = &securityGroupId
	return r
}

func (r SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest) Execute() (*SecurityGroupQuotaResponse, *http.Response, error) {
	return r.ApiService.GetSecurityGroupQuotasExecute(r)
}

/*
GetSecurityGroupQuotas Get Security Group Quotas

Get Security Group quotas.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest
*/
func (a *SecurityGroupV1SecurityGroupApiAPIService) GetSecurityGroupQuotas(ctx context.Context) SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest {
	return SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityGroupQuotaResponse
func (a *SecurityGroupV1SecurityGroupApiAPIService) GetSecurityGroupQuotasExecute(r SecurityGroupV1SecurityGroupApiAPIGetSecurityGroupQuotasRequest) (*SecurityGroupQuotaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupQuotaResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-groups/metrics/quotas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.securityGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "security_group_id", r.securityGroupId, "form", "")
    }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupApiAPIService
	size *int32
	page *int32
	sort *string
	id *string
	name *string
}

// size
func (r SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest) Size(size int32) SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest {
	r.size = &size
	return r
}

// page
func (r SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest) Page(page int32) SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest {
	r.page = &page
	return r
}

// sort
func (r SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest) Sort(sort string) SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest {
	r.sort = &sort
	return r
}

// Security Group ID
func (r SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest) Id(id string) SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest {
	r.id = &id
	return r
}

// Security Group Name
func (r SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest) Name(name string) SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest {
	r.name = &name
	return r
}

func (r SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest) Execute() (*SecurityGroupListResponse, *http.Response, error) {
	return r.ApiService.ListSecurityGroupsExecute(r)
}

/*
ListSecurityGroups List Security Groups

Get Security Group list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest
*/
func (a *SecurityGroupV1SecurityGroupApiAPIService) ListSecurityGroups(ctx context.Context) SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest {
	return SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityGroupListResponse
func (a *SecurityGroupV1SecurityGroupApiAPIService) ListSecurityGroupsExecute(r SecurityGroupV1SecurityGroupApiAPIListSecurityGroupsRequest) (*SecurityGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupListResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
    }
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
    }
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
    }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
    }
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
    }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupApiAPIService
	securityGroupId string
	securityGroupSetRequest *SecurityGroupSetRequest
}

func (r SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest) SecurityGroupSetRequest(securityGroupSetRequest SecurityGroupSetRequest) SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest {
	r.securityGroupSetRequest = &securityGroupSetRequest
	return r
}

func (r SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.SetSecurityGroupExecute(r)
}

/*
SetSecurityGroup Set Security Group

Set Security Group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityGroupId Security Group ID
 @return SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest
*/
func (a *SecurityGroupV1SecurityGroupApiAPIService) SetSecurityGroup(ctx context.Context, securityGroupId string) SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest {
	return SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest{
		ApiService: a,
		ctx: ctx,
		securityGroupId: securityGroupId,
	}
}

// Execute executes the request
func (a *SecurityGroupV1SecurityGroupApiAPIService) SetSecurityGroupExecute(r SecurityGroupV1SecurityGroupApiAPISetSecurityGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/security-groups/{security_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupId, "securityGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityGroupSetRequest == nil {
		return nil, reportError("securityGroupSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityGroupSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupApiAPIShowSecurityGroupRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupApiAPIService
	securityGroupId string
}

func (r SecurityGroupV1SecurityGroupApiAPIShowSecurityGroupRequest) Execute() (*SecurityGroupShowResponse, *http.Response, error) {
	return r.ApiService.ShowSecurityGroupExecute(r)
}

/*
ShowSecurityGroup Show Security Group

Show Security Group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityGroupId Security Group ID
 @return SecurityGroupV1SecurityGroupApiAPIShowSecurityGroupRequest
*/
func (a *SecurityGroupV1SecurityGroupApiAPIService) ShowSecurityGroup(ctx context.Context, securityGroupId string) SecurityGroupV1SecurityGroupApiAPIShowSecurityGroupRequest {
	return SecurityGroupV1SecurityGroupApiAPIShowSecurityGroupRequest{
		ApiService: a,
		ctx: ctx,
		securityGroupId: securityGroupId,
	}
}

// Execute executes the request
//  @return SecurityGroupShowResponse
func (a *SecurityGroupV1SecurityGroupApiAPIService) ShowSecurityGroupExecute(r SecurityGroupV1SecurityGroupApiAPIShowSecurityGroupRequest) (*SecurityGroupShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupShowResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-groups/{security_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupId, "securityGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
