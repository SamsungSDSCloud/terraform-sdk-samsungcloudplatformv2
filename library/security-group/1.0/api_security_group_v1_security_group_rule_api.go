/*
SCP Network Service

SCP Network Service

API version: 0.0.1.dev7080
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package securitygroup

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
    "reflect"
	"strings"
)


// SecurityGroupV1SecurityGroupRuleApiAPIService SecurityGroupV1SecurityGroupRuleApiAPI service
type SecurityGroupV1SecurityGroupRuleApiAPIService service

type SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupRuleApiAPIService
	securityGroupRuleCreateRequest *SecurityGroupRuleCreateRequest
}

func (r SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest) SecurityGroupRuleCreateRequest(securityGroupRuleCreateRequest SecurityGroupRuleCreateRequest) SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest {
	r.securityGroupRuleCreateRequest = &securityGroupRuleCreateRequest
	return r
}

func (r SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest) Execute() (*SecurityGroupRuleShowResponse, *http.Response, error) {
	return r.ApiService.CreateSecurityGroupRuleExecute(r)
}

/*
CreateSecurityGroupRule Create Security Group Rule

Create Security Group rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest
*/
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) CreateSecurityGroupRule(ctx context.Context) SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest {
	return SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityGroupRuleShowResponse
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) CreateSecurityGroupRuleExecute(r SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRuleRequest) (*SecurityGroupRuleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupRuleShowResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-group-rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityGroupRuleCreateRequest == nil {
		return localVarReturnValue, nil, reportError("securityGroupRuleCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityGroupRuleCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupRuleApiAPIService
	securityGroupRulesCreateRequest *SecurityGroupRulesCreateRequest
}

func (r SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest) SecurityGroupRulesCreateRequest(securityGroupRulesCreateRequest SecurityGroupRulesCreateRequest) SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest {
	r.securityGroupRulesCreateRequest = &securityGroupRulesCreateRequest
	return r
}

func (r SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest) Execute() (*SecurityGroupRulesCreateResponse, *http.Response, error) {
	return r.ApiService.CreateSecurityGroupRulesExecute(r)
}

/*
CreateSecurityGroupRules Create Security Group Rules

Create Security Group rules.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest
*/
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) CreateSecurityGroupRules(ctx context.Context) SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest {
	return SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityGroupRulesCreateResponse
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) CreateSecurityGroupRulesExecute(r SecurityGroupV1SecurityGroupRuleApiAPICreateSecurityGroupRulesRequest) (*SecurityGroupRulesCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupRulesCreateResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-group-rules/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityGroupRulesCreateRequest == nil {
		return localVarReturnValue, nil, reportError("securityGroupRulesCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.securityGroupRulesCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupRuleApiAPIDeleteSecurityGroupRuleRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupRuleApiAPIService
	securityGroupRuleId string
}

func (r SecurityGroupV1SecurityGroupRuleApiAPIDeleteSecurityGroupRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSecurityGroupRuleExecute(r)
}

/*
DeleteSecurityGroupRule Delete Security Group Rule

Delete Security Group rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityGroupRuleId Security Group Rule ID
 @return SecurityGroupV1SecurityGroupRuleApiAPIDeleteSecurityGroupRuleRequest
*/
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) DeleteSecurityGroupRule(ctx context.Context, securityGroupRuleId string) SecurityGroupV1SecurityGroupRuleApiAPIDeleteSecurityGroupRuleRequest {
	return SecurityGroupV1SecurityGroupRuleApiAPIDeleteSecurityGroupRuleRequest{
		ApiService: a,
		ctx: ctx,
		securityGroupRuleId: securityGroupRuleId,
	}
}

// Execute executes the request
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) DeleteSecurityGroupRuleExecute(r SecurityGroupV1SecurityGroupRuleApiAPIDeleteSecurityGroupRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/security-group-rules/{security_group_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_rule_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupRuleId, "securityGroupRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupRuleApiAPIDownloadSecurityGroupRulesRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupRuleApiAPIService
	securityGroupId string
}

func (r SecurityGroupV1SecurityGroupRuleApiAPIDownloadSecurityGroupRulesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DownloadSecurityGroupRulesExecute(r)
}

/*
DownloadSecurityGroupRules Download Security Group Rules

Download Security Group rule list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityGroupId Security Group ID
 @return SecurityGroupV1SecurityGroupRuleApiAPIDownloadSecurityGroupRulesRequest
*/
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) DownloadSecurityGroupRules(ctx context.Context, securityGroupId string) SecurityGroupV1SecurityGroupRuleApiAPIDownloadSecurityGroupRulesRequest {
	return SecurityGroupV1SecurityGroupRuleApiAPIDownloadSecurityGroupRulesRequest{
		ApiService: a,
		ctx: ctx,
		securityGroupId: securityGroupId,
	}
}

// Execute executes the request
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) DownloadSecurityGroupRulesExecute(r SecurityGroupV1SecurityGroupRuleApiAPIDownloadSecurityGroupRulesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/security-group-rules/{security_group_id}/downloads"
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupId, "securityGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupRuleApiAPIService
	securityGroupId *string
	size *int32
	page *int32
	sort *string
	id *string
	remoteIpPrefix *string
	remoteGroupId *string
	description *string
	direction *string
	service *string
}

// Security Group ID
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) SecurityGroupId(securityGroupId string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.securityGroupId = &securityGroupId
	return r
}

// size
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Size(size int32) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.size = &size
	return r
}

// page
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Page(page int32) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.page = &page
	return r
}

// sort
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Sort(sort string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.sort = &sort
	return r
}

// Security Group Rule ID
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Id(id string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.id = &id
	return r
}

// Security Group Rule Remote IP Address
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) RemoteIpPrefix(remoteIpPrefix string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.remoteIpPrefix = &remoteIpPrefix
	return r
}

// Security Group Rule Remote Group ID
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) RemoteGroupId(remoteGroupId string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.remoteGroupId = &remoteGroupId
	return r
}

// Security Group Rule Description
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Description(description string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.description = &description
	return r
}

// Security Group Rule Direction (Ingress, Egress)
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Direction(direction string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.direction = &direction
	return r
}

// Security Group Rule Service
func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Service(service string) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	r.service = &service
	return r
}

func (r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) Execute() (*SecurityGroupRuleListResponse, *http.Response, error) {
	return r.ApiService.ListSecurityGroupRulesExecute(r)
}

/*
ListSecurityGroupRules List Security Group Rules

Get Security Group rule list.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest
*/
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) ListSecurityGroupRules(ctx context.Context) SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest {
	return SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityGroupRuleListResponse
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) ListSecurityGroupRulesExecute(r SecurityGroupV1SecurityGroupRuleApiAPIListSecurityGroupRulesRequest) (*SecurityGroupRuleListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupRuleListResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-group-rules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityGroupId == nil {
		return localVarReturnValue, nil, reportError("securityGroupId is required and must be specified")
	}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
    }
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
    }
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
    }
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
    }
	parameterAddToHeaderOrQuery(localVarQueryParams, "security_group_id", r.securityGroupId, "form", "")
	if r.remoteIpPrefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote_ip_prefix", r.remoteIpPrefix, "form", "")
    }
	if r.remoteGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "remote_group_id", r.remoteGroupId, "form", "")
    }
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
    }
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "form", "")
    }
	if r.service != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service", r.service, "form", "")
    }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest struct {
	ctx context.Context
	ApiService *SecurityGroupV1SecurityGroupRuleApiAPIService
	securityGroupRuleId string
	fields *Fields
}

// Field Name
func (r SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest) Fields(fields Fields) SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest {
	r.fields = &fields
	return r
}

func (r SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest) Execute() (*SecurityGroupRuleShowResponse, *http.Response, error) {
	return r.ApiService.ShowSecurityGroupRuleExecute(r)
}

/*
ShowSecurityGroupRule Show Security Group Rule

Show Security Group rule.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityGroupRuleId Security Group Rule ID
 @return SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest
*/
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) ShowSecurityGroupRule(ctx context.Context, securityGroupRuleId string) SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest {
	return SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest{
		ApiService: a,
		ctx: ctx,
		securityGroupRuleId: securityGroupRuleId,
	}
}

// Execute executes the request
//  @return SecurityGroupRuleShowResponse
func (a *SecurityGroupV1SecurityGroupRuleApiAPIService) ShowSecurityGroupRuleExecute(r SecurityGroupV1SecurityGroupRuleApiAPIShowSecurityGroupRuleRequest) (*SecurityGroupRuleShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityGroupRuleShowResponse
	)

    var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/security-group-rules/{security_group_rule_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"security_group_rule_id"+"}", url.PathEscape(parameterValueToString(r.securityGroupRuleId, "securityGroupRuleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
        data := r.fields
        data_val := *data
        val := reflect.ValueOf(data_val)
        for i := 0; i < val.NumField(); i++ {
            field := val.Field(i)
            if field.IsValid() && !field.IsZero() {
                parameterAddToHeaderOrQuery(localVarQueryParams, "fields", field.Interface(), "form", "")
            }
        }
    }
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

    localVarHeaderParams["Scp-API-Version"] = "securitygroup 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
