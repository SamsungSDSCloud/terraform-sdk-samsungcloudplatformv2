/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
)

// OpenAPIMetricDataV2APIService OpenAPIMetricDataV2API service
type OpenAPIMetricDataV2APIService service

type OpenAPIMetricDataV2APIGetMetricPerfDataListRequest struct {
	ctx                               context.Context
	ApiService                        *OpenAPIMetricDataV2APIService
	xResourceType                     *string
	metricDataSearchCriteriaOpenAPIV2 *MetricDataSearchCriteriaOpenAPIV2
}

// Resource Type
func (r OpenAPIMetricDataV2APIGetMetricPerfDataListRequest) XResourceType(xResourceType string) OpenAPIMetricDataV2APIGetMetricPerfDataListRequest {
	r.xResourceType = &xResourceType
	return r
}

func (r OpenAPIMetricDataV2APIGetMetricPerfDataListRequest) MetricDataSearchCriteriaOpenAPIV2(metricDataSearchCriteriaOpenAPIV2 MetricDataSearchCriteriaOpenAPIV2) OpenAPIMetricDataV2APIGetMetricPerfDataListRequest {
	r.metricDataSearchCriteriaOpenAPIV2 = &metricDataSearchCriteriaOpenAPIV2
	return r
}

func (r OpenAPIMetricDataV2APIGetMetricPerfDataListRequest) Execute() (*ListResponseMetricStatisticsDataDtoOpenAPIV2, *http.Response, error) {
	return r.ApiService.GetMetricPerfDataListExecute(r)
}

/*
GetMetricPerfDataList ListMetricPefData

Search the performance values of the collected metrics. Up to 10 query conditions can be specified, and the maximum query period is 24 hours.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OpenAPIMetricDataV2APIGetMetricPerfDataListRequest
*/
func (a *OpenAPIMetricDataV2APIService) GetMetricPerfDataList(ctx context.Context) OpenAPIMetricDataV2APIGetMetricPerfDataListRequest {
	return OpenAPIMetricDataV2APIGetMetricPerfDataListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListResponseMetricStatisticsDataDtoOpenAPIV2
func (a *OpenAPIMetricDataV2APIService) GetMetricPerfDataListExecute(r OpenAPIMetricDataV2APIGetMetricPerfDataListRequest) (*ListResponseMetricStatisticsDataDtoOpenAPIV2, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListResponseMetricStatisticsDataDtoOpenAPIV2
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/product/v2/metric-data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}
	if r.metricDataSearchCriteriaOpenAPIV2 == nil {
		return localVarReturnValue, nil, reportError("metricDataSearchCriteriaOpenAPIV2 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	// body params
	localVarPostBody = r.metricDataSearchCriteriaOpenAPIV2
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
