/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProductResourceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductResourceInfo{}

// ProductResourceInfo 리소스 정보를 전달하기 위한 객체
type ProductResourceInfo struct {
	// 개별항목 목록
	ObjectList []string `json:"objectList,omitempty"`
	// 상품 리소스 아이디
	ProductResourceId string `json:"productResourceId"`
}

type _ProductResourceInfo ProductResourceInfo

// NewProductResourceInfo instantiates a new ProductResourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductResourceInfo(productResourceId string) *ProductResourceInfo {
	this := ProductResourceInfo{}
	this.ProductResourceId = productResourceId
	return &this
}

// NewProductResourceInfoWithDefaults instantiates a new ProductResourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductResourceInfoWithDefaults() *ProductResourceInfo {
	this := ProductResourceInfo{}
	return &this
}

// GetObjectList returns the ObjectList field value if set, zero value otherwise.
func (o *ProductResourceInfo) GetObjectList() []string {
	if o == nil || IsNil(o.ObjectList) {
		var ret []string
		return ret
	}
	return o.ObjectList
}

// GetObjectListOk returns a tuple with the ObjectList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductResourceInfo) GetObjectListOk() ([]string, bool) {
	if o == nil || IsNil(o.ObjectList) {
		return nil, false
	}
	return o.ObjectList, true
}

// HasObjectList returns a boolean if a field has been set.
func (o *ProductResourceInfo) HasObjectList() bool {
	if o != nil && !IsNil(o.ObjectList) {
		return true
	}

	return false
}

// SetObjectList gets a reference to the given []string and assigns it to the ObjectList field.
func (o *ProductResourceInfo) SetObjectList(v []string) {
	o.ObjectList = v
}

// GetProductResourceId returns the ProductResourceId field value
func (o *ProductResourceInfo) GetProductResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductResourceId
}

// GetProductResourceIdOk returns a tuple with the ProductResourceId field value
// and a boolean to check if the value has been set.
func (o *ProductResourceInfo) GetProductResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductResourceId, true
}

// SetProductResourceId sets field value
func (o *ProductResourceInfo) SetProductResourceId(v string) {
	o.ProductResourceId = v
}

func (o ProductResourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductResourceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectList) {
		toSerialize["objectList"] = o.ObjectList
	}
	toSerialize["productResourceId"] = o.ProductResourceId
	return toSerialize, nil
}

func (o *ProductResourceInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"productResourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductResourceInfo := _ProductResourceInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductResourceInfo)

	if err != nil {
		return err
	}

	*o = ProductResourceInfo(varProductResourceInfo)

	return err
}

type NullableProductResourceInfo struct {
	value *ProductResourceInfo
	isSet bool
}

func (v NullableProductResourceInfo) Get() *ProductResourceInfo {
	return v.value
}

func (v *NullableProductResourceInfo) Set(val *ProductResourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProductResourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProductResourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductResourceInfo(val *ProductResourceInfo) *NullableProductResourceInfo {
	return &NullableProductResourceInfo{value: val, isSet: true}
}

func (v NullableProductResourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductResourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
