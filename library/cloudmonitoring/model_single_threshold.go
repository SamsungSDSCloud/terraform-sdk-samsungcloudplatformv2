/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SingleThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SingleThreshold{}

// SingleThreshold 이벤트 임계치 중 단일 임계치 정보 객체
type SingleThreshold struct {
	// 비교 연산자
	ComparisonOperator string `json:"comparisonOperator"`
	// 값
	Value float64 `json:"value"`
}

type _SingleThreshold SingleThreshold

// NewSingleThreshold instantiates a new SingleThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleThreshold(comparisonOperator string, value float64) *SingleThreshold {
	this := SingleThreshold{}
	this.ComparisonOperator = comparisonOperator
	this.Value = value
	return &this
}

// NewSingleThresholdWithDefaults instantiates a new SingleThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleThresholdWithDefaults() *SingleThreshold {
	this := SingleThreshold{}
	return &this
}

// GetComparisonOperator returns the ComparisonOperator field value
func (o *SingleThreshold) GetComparisonOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComparisonOperator
}

// GetComparisonOperatorOk returns a tuple with the ComparisonOperator field value
// and a boolean to check if the value has been set.
func (o *SingleThreshold) GetComparisonOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComparisonOperator, true
}

// SetComparisonOperator sets field value
func (o *SingleThreshold) SetComparisonOperator(v string) {
	o.ComparisonOperator = v
}

// GetValue returns the Value field value
func (o *SingleThreshold) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SingleThreshold) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SingleThreshold) SetValue(v float64) {
	o.Value = v
}

func (o SingleThreshold) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SingleThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comparisonOperator"] = o.ComparisonOperator
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *SingleThreshold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comparisonOperator",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSingleThreshold := _SingleThreshold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSingleThreshold)

	if err != nil {
		return err
	}

	*o = SingleThreshold(varSingleThreshold)

	return err
}

type NullableSingleThreshold struct {
	value *SingleThreshold
	isSet bool
}

func (v NullableSingleThreshold) Get() *SingleThreshold {
	return v.value
}

func (v *NullableSingleThreshold) Set(val *SingleThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleThreshold(val *SingleThreshold) *NullableSingleThreshold {
	return &NullableSingleThreshold{value: val, isSet: true}
}

func (v NullableSingleThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
