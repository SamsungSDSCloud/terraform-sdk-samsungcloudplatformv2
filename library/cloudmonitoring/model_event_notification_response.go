/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventNotificationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventNotificationResponse{}

// EventNotificationResponse 이벤트 알림 응답 전송 객체
type EventNotificationResponse struct {
	// 이벤트 알림 상태
	NotificationStates []NotificationStatus   `json:"notificationStates"`
	User               map[string]interface{} `json:"user,omitempty"`
	// 사용자 이메일
	UserEmail *string `json:"userEmail,omitempty"`
	// 사용자 아이디
	UserId string `json:"userId"`
	// 사용자 휴대 전화번호
	UserMobileTelNo *string `json:"userMobileTelNo,omitempty"`
	// 사용자 이름
	UserNameNotification string `json:"userNameNotification"`
}

type _EventNotificationResponse EventNotificationResponse

// NewEventNotificationResponse instantiates a new EventNotificationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventNotificationResponse(notificationStates []NotificationStatus, userId string, userNameNotification string) *EventNotificationResponse {
	this := EventNotificationResponse{}
	this.NotificationStates = notificationStates
	this.UserId = userId
	this.UserNameNotification = userNameNotification
	return &this
}

// NewEventNotificationResponseWithDefaults instantiates a new EventNotificationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventNotificationResponseWithDefaults() *EventNotificationResponse {
	this := EventNotificationResponse{}
	return &this
}

// GetNotificationStates returns the NotificationStates field value
func (o *EventNotificationResponse) GetNotificationStates() []NotificationStatus {
	if o == nil {
		var ret []NotificationStatus
		return ret
	}

	return o.NotificationStates
}

// GetNotificationStatesOk returns a tuple with the NotificationStates field value
// and a boolean to check if the value has been set.
func (o *EventNotificationResponse) GetNotificationStatesOk() ([]NotificationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationStates, true
}

// SetNotificationStates sets field value
func (o *EventNotificationResponse) SetNotificationStates(v []NotificationStatus) {
	o.NotificationStates = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *EventNotificationResponse) GetUser() map[string]interface{} {
	if o == nil || IsNil(o.User) {
		var ret map[string]interface{}
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotificationResponse) GetUserOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.User) {
		return map[string]interface{}{}, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EventNotificationResponse) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given map[string]interface{} and assigns it to the User field.
func (o *EventNotificationResponse) SetUser(v map[string]interface{}) {
	o.User = v
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *EventNotificationResponse) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail) {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotificationResponse) GetUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserEmail) {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *EventNotificationResponse) HasUserEmail() bool {
	if o != nil && !IsNil(o.UserEmail) {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *EventNotificationResponse) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetUserId returns the UserId field value
func (o *EventNotificationResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *EventNotificationResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *EventNotificationResponse) SetUserId(v string) {
	o.UserId = v
}

// GetUserMobileTelNo returns the UserMobileTelNo field value if set, zero value otherwise.
func (o *EventNotificationResponse) GetUserMobileTelNo() string {
	if o == nil || IsNil(o.UserMobileTelNo) {
		var ret string
		return ret
	}
	return *o.UserMobileTelNo
}

// GetUserMobileTelNoOk returns a tuple with the UserMobileTelNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventNotificationResponse) GetUserMobileTelNoOk() (*string, bool) {
	if o == nil || IsNil(o.UserMobileTelNo) {
		return nil, false
	}
	return o.UserMobileTelNo, true
}

// HasUserMobileTelNo returns a boolean if a field has been set.
func (o *EventNotificationResponse) HasUserMobileTelNo() bool {
	if o != nil && !IsNil(o.UserMobileTelNo) {
		return true
	}

	return false
}

// SetUserMobileTelNo gets a reference to the given string and assigns it to the UserMobileTelNo field.
func (o *EventNotificationResponse) SetUserMobileTelNo(v string) {
	o.UserMobileTelNo = &v
}

// GetUserNameNotification returns the UserNameNotification field value
func (o *EventNotificationResponse) GetUserNameNotification() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserNameNotification
}

// GetUserNameNotificationOk returns a tuple with the UserNameNotification field value
// and a boolean to check if the value has been set.
func (o *EventNotificationResponse) GetUserNameNotificationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserNameNotification, true
}

// SetUserNameNotification sets field value
func (o *EventNotificationResponse) SetUserNameNotification(v string) {
	o.UserNameNotification = v
}

func (o EventNotificationResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventNotificationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notificationStates"] = o.NotificationStates
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserEmail) {
		toSerialize["userEmail"] = o.UserEmail
	}
	toSerialize["userId"] = o.UserId
	if !IsNil(o.UserMobileTelNo) {
		toSerialize["userMobileTelNo"] = o.UserMobileTelNo
	}
	toSerialize["userNameNotification"] = o.UserNameNotification
	return toSerialize, nil
}

func (o *EventNotificationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notificationStates",
		"userId",
		"userNameNotification",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventNotificationResponse := _EventNotificationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventNotificationResponse)

	if err != nil {
		return err
	}

	*o = EventNotificationResponse(varEventNotificationResponse)

	return err
}

type NullableEventNotificationResponse struct {
	value *EventNotificationResponse
	isSet bool
}

func (v NullableEventNotificationResponse) Get() *EventNotificationResponse {
	return v.value
}

func (v *NullableEventNotificationResponse) Set(val *EventNotificationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEventNotificationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEventNotificationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventNotificationResponse(val *EventNotificationResponse) *NullableEventNotificationResponse {
	return &NullableEventNotificationResponse{value: val, isSet: true}
}

func (v NullableEventNotificationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventNotificationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
