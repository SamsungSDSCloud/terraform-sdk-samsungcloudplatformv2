/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProductSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductSummary{}

// ProductSummary 상품 요약 객체
type ProductSummary struct {
	// 상품 상태
	AgentState string `json:"agentState"`
	// swagger.event.productSummary.lbName.value
	LbName *string `json:"lbName,omitempty"`
	// swagger.event.productSummary.lbSize.value
	LbSize *string `json:"lbSize,omitempty"`
	// 상품 IP주소
	ProductIpAddress *string `json:"productIpAddress,omitempty"`
	// 상품 이름
	ProductName string `json:"productName"`
	// 상품 리소스 아이디
	ProductResourceId string `json:"productResourceId"`
	// 상품 시퀀스
	ProductSq *int64 `json:"productSq,omitempty"`
	// 상품 상태
	ProductState string `json:"productState"`
	// swagger.event.productSummary.productSubName.value
	ProductSubName *string `json:"productSubName,omitempty"`
	// swagger.event.productSummary.productSubType.value
	ProductSubType *string `json:"productSubType,omitempty"`
	// 상품 유형 코드
	ProductTypeCode string `json:"productTypeCode"`
	// 상품 유형 이름
	ProductTypeName string `json:"productTypeName"`
	// swagger.event.productSummary.vpcName.value
	VpcName *string `json:"vpcName,omitempty"`
}

type _ProductSummary ProductSummary

// NewProductSummary instantiates a new ProductSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductSummary(agentState string, productName string, productResourceId string, productState string, productTypeCode string, productTypeName string) *ProductSummary {
	this := ProductSummary{}
	this.AgentState = agentState
	this.ProductName = productName
	this.ProductResourceId = productResourceId
	this.ProductState = productState
	this.ProductTypeCode = productTypeCode
	this.ProductTypeName = productTypeName
	return &this
}

// NewProductSummaryWithDefaults instantiates a new ProductSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductSummaryWithDefaults() *ProductSummary {
	this := ProductSummary{}
	return &this
}

// GetAgentState returns the AgentState field value
func (o *ProductSummary) GetAgentState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AgentState
}

// GetAgentStateOk returns a tuple with the AgentState field value
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetAgentStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AgentState, true
}

// SetAgentState sets field value
func (o *ProductSummary) SetAgentState(v string) {
	o.AgentState = v
}

// GetLbName returns the LbName field value if set, zero value otherwise.
func (o *ProductSummary) GetLbName() string {
	if o == nil || IsNil(o.LbName) {
		var ret string
		return ret
	}
	return *o.LbName
}

// GetLbNameOk returns a tuple with the LbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetLbNameOk() (*string, bool) {
	if o == nil || IsNil(o.LbName) {
		return nil, false
	}
	return o.LbName, true
}

// HasLbName returns a boolean if a field has been set.
func (o *ProductSummary) HasLbName() bool {
	if o != nil && !IsNil(o.LbName) {
		return true
	}

	return false
}

// SetLbName gets a reference to the given string and assigns it to the LbName field.
func (o *ProductSummary) SetLbName(v string) {
	o.LbName = &v
}

// GetLbSize returns the LbSize field value if set, zero value otherwise.
func (o *ProductSummary) GetLbSize() string {
	if o == nil || IsNil(o.LbSize) {
		var ret string
		return ret
	}
	return *o.LbSize
}

// GetLbSizeOk returns a tuple with the LbSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetLbSizeOk() (*string, bool) {
	if o == nil || IsNil(o.LbSize) {
		return nil, false
	}
	return o.LbSize, true
}

// HasLbSize returns a boolean if a field has been set.
func (o *ProductSummary) HasLbSize() bool {
	if o != nil && !IsNil(o.LbSize) {
		return true
	}

	return false
}

// SetLbSize gets a reference to the given string and assigns it to the LbSize field.
func (o *ProductSummary) SetLbSize(v string) {
	o.LbSize = &v
}

// GetProductIpAddress returns the ProductIpAddress field value if set, zero value otherwise.
func (o *ProductSummary) GetProductIpAddress() string {
	if o == nil || IsNil(o.ProductIpAddress) {
		var ret string
		return ret
	}
	return *o.ProductIpAddress
}

// GetProductIpAddressOk returns a tuple with the ProductIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ProductIpAddress) {
		return nil, false
	}
	return o.ProductIpAddress, true
}

// HasProductIpAddress returns a boolean if a field has been set.
func (o *ProductSummary) HasProductIpAddress() bool {
	if o != nil && !IsNil(o.ProductIpAddress) {
		return true
	}

	return false
}

// SetProductIpAddress gets a reference to the given string and assigns it to the ProductIpAddress field.
func (o *ProductSummary) SetProductIpAddress(v string) {
	o.ProductIpAddress = &v
}

// GetProductName returns the ProductName field value
func (o *ProductSummary) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *ProductSummary) SetProductName(v string) {
	o.ProductName = v
}

// GetProductResourceId returns the ProductResourceId field value
func (o *ProductSummary) GetProductResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductResourceId
}

// GetProductResourceIdOk returns a tuple with the ProductResourceId field value
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductResourceId, true
}

// SetProductResourceId sets field value
func (o *ProductSummary) SetProductResourceId(v string) {
	o.ProductResourceId = v
}

// GetProductSq returns the ProductSq field value if set, zero value otherwise.
func (o *ProductSummary) GetProductSq() int64 {
	if o == nil || IsNil(o.ProductSq) {
		var ret int64
		return ret
	}
	return *o.ProductSq
}

// GetProductSqOk returns a tuple with the ProductSq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductSqOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductSq) {
		return nil, false
	}
	return o.ProductSq, true
}

// HasProductSq returns a boolean if a field has been set.
func (o *ProductSummary) HasProductSq() bool {
	if o != nil && !IsNil(o.ProductSq) {
		return true
	}

	return false
}

// SetProductSq gets a reference to the given int64 and assigns it to the ProductSq field.
func (o *ProductSummary) SetProductSq(v int64) {
	o.ProductSq = &v
}

// GetProductState returns the ProductState field value
func (o *ProductSummary) GetProductState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductState
}

// GetProductStateOk returns a tuple with the ProductState field value
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductState, true
}

// SetProductState sets field value
func (o *ProductSummary) SetProductState(v string) {
	o.ProductState = v
}

// GetProductSubName returns the ProductSubName field value if set, zero value otherwise.
func (o *ProductSummary) GetProductSubName() string {
	if o == nil || IsNil(o.ProductSubName) {
		var ret string
		return ret
	}
	return *o.ProductSubName
}

// GetProductSubNameOk returns a tuple with the ProductSubName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductSubNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductSubName) {
		return nil, false
	}
	return o.ProductSubName, true
}

// HasProductSubName returns a boolean if a field has been set.
func (o *ProductSummary) HasProductSubName() bool {
	if o != nil && !IsNil(o.ProductSubName) {
		return true
	}

	return false
}

// SetProductSubName gets a reference to the given string and assigns it to the ProductSubName field.
func (o *ProductSummary) SetProductSubName(v string) {
	o.ProductSubName = &v
}

// GetProductSubType returns the ProductSubType field value if set, zero value otherwise.
func (o *ProductSummary) GetProductSubType() string {
	if o == nil || IsNil(o.ProductSubType) {
		var ret string
		return ret
	}
	return *o.ProductSubType
}

// GetProductSubTypeOk returns a tuple with the ProductSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductSubType) {
		return nil, false
	}
	return o.ProductSubType, true
}

// HasProductSubType returns a boolean if a field has been set.
func (o *ProductSummary) HasProductSubType() bool {
	if o != nil && !IsNil(o.ProductSubType) {
		return true
	}

	return false
}

// SetProductSubType gets a reference to the given string and assigns it to the ProductSubType field.
func (o *ProductSummary) SetProductSubType(v string) {
	o.ProductSubType = &v
}

// GetProductTypeCode returns the ProductTypeCode field value
func (o *ProductSummary) GetProductTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeCode
}

// GetProductTypeCodeOk returns a tuple with the ProductTypeCode field value
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeCode, true
}

// SetProductTypeCode sets field value
func (o *ProductSummary) SetProductTypeCode(v string) {
	o.ProductTypeCode = v
}

// GetProductTypeName returns the ProductTypeName field value
func (o *ProductSummary) GetProductTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeName
}

// GetProductTypeNameOk returns a tuple with the ProductTypeName field value
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetProductTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeName, true
}

// SetProductTypeName sets field value
func (o *ProductSummary) SetProductTypeName(v string) {
	o.ProductTypeName = v
}

// GetVpcName returns the VpcName field value if set, zero value otherwise.
func (o *ProductSummary) GetVpcName() string {
	if o == nil || IsNil(o.VpcName) {
		var ret string
		return ret
	}
	return *o.VpcName
}

// GetVpcNameOk returns a tuple with the VpcName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductSummary) GetVpcNameOk() (*string, bool) {
	if o == nil || IsNil(o.VpcName) {
		return nil, false
	}
	return o.VpcName, true
}

// HasVpcName returns a boolean if a field has been set.
func (o *ProductSummary) HasVpcName() bool {
	if o != nil && !IsNil(o.VpcName) {
		return true
	}

	return false
}

// SetVpcName gets a reference to the given string and assigns it to the VpcName field.
func (o *ProductSummary) SetVpcName(v string) {
	o.VpcName = &v
}

func (o ProductSummary) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["agentState"] = o.AgentState
	if !IsNil(o.LbName) {
		toSerialize["lbName"] = o.LbName
	}
	if !IsNil(o.LbSize) {
		toSerialize["lbSize"] = o.LbSize
	}
	if !IsNil(o.ProductIpAddress) {
		toSerialize["productIpAddress"] = o.ProductIpAddress
	}
	toSerialize["productName"] = o.ProductName
	toSerialize["productResourceId"] = o.ProductResourceId
	if !IsNil(o.ProductSq) {
		toSerialize["productSq"] = o.ProductSq
	}
	toSerialize["productState"] = o.ProductState
	if !IsNil(o.ProductSubName) {
		toSerialize["productSubName"] = o.ProductSubName
	}
	if !IsNil(o.ProductSubType) {
		toSerialize["productSubType"] = o.ProductSubType
	}
	toSerialize["productTypeCode"] = o.ProductTypeCode
	toSerialize["productTypeName"] = o.ProductTypeName
	if !IsNil(o.VpcName) {
		toSerialize["vpcName"] = o.VpcName
	}
	return toSerialize, nil
}

func (o *ProductSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agentState",
		"productName",
		"productResourceId",
		"productState",
		"productTypeCode",
		"productTypeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductSummary := _ProductSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductSummary)

	if err != nil {
		return err
	}

	*o = ProductSummary(varProductSummary)

	return err
}

type NullableProductSummary struct {
	value *ProductSummary
	isSet bool
}

func (v NullableProductSummary) Get() *ProductSummary {
	return v.value
}

func (v *NullableProductSummary) Set(val *ProductSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableProductSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableProductSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductSummary(val *ProductSummary) *NullableProductSummary {
	return &NullableProductSummary{value: val, isSet: true}
}

func (v NullableProductSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
