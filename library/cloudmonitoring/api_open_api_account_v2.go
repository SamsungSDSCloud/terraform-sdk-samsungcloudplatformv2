/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"reflect"
)

// OpenAPIAccountV2APIService OpenAPIAccountV2API service
type OpenAPIAccountV2APIService service

type OpenAPIAccountV2APIGetAccountProductListRequest struct {
	ctx           context.Context
	ApiService    *OpenAPIAccountV2APIService
	xResourceType *string
	page          *int32
	size          *int32
	sort          *[]string
}

// Resource Type
func (r OpenAPIAccountV2APIGetAccountProductListRequest) XResourceType(xResourceType string) OpenAPIAccountV2APIGetAccountProductListRequest {
	r.xResourceType = &xResourceType
	return r
}

// Page Number (default: 0)
func (r OpenAPIAccountV2APIGetAccountProductListRequest) Page(page int32) OpenAPIAccountV2APIGetAccountProductListRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIAccountV2APIGetAccountProductListRequest) Size(size int32) OpenAPIAccountV2APIGetAccountProductListRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIAccountV2APIGetAccountProductListRequest) Sort(sort []string) OpenAPIAccountV2APIGetAccountProductListRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIAccountV2APIGetAccountProductListRequest) Execute() (*PageResponseAccountProductDto, *http.Response, error) {
	return r.ApiService.GetAccountProductListExecute(r)
}

/*
GetAccountProductList ListAccountResources

Search Resource included in an Account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OpenAPIAccountV2APIGetAccountProductListRequest
*/
func (a *OpenAPIAccountV2APIService) GetAccountProductList(ctx context.Context) OpenAPIAccountV2APIGetAccountProductListRequest {
	return OpenAPIAccountV2APIGetAccountProductListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PageResponseAccountProductDto
func (a *OpenAPIAccountV2APIService) GetAccountProductListExecute(r OpenAPIAccountV2APIGetAccountProductListRequest) (*PageResponseAccountProductDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseAccountProductDto
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/product/v2/accounts/products"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
