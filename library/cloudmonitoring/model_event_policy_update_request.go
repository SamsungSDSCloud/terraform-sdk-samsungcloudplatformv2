/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventPolicyUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventPolicyUpdateRequest{}

// EventPolicyUpdateRequest 이벤트 정책 수정 시 요청 전송 객체
type EventPolicyUpdateRequest struct {
	EventPolicyRequest EventPolicyInfoEditable `json:"eventPolicyRequest"`
	// 이벤트 알림 수신인 정보
	NotificationRecipients []NotificationRecipient `json:"notificationRecipients,omitempty"`
}

type _EventPolicyUpdateRequest EventPolicyUpdateRequest

// NewEventPolicyUpdateRequest instantiates a new EventPolicyUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventPolicyUpdateRequest(eventPolicyRequest EventPolicyInfoEditable) *EventPolicyUpdateRequest {
	this := EventPolicyUpdateRequest{}
	this.EventPolicyRequest = eventPolicyRequest
	return &this
}

// NewEventPolicyUpdateRequestWithDefaults instantiates a new EventPolicyUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventPolicyUpdateRequestWithDefaults() *EventPolicyUpdateRequest {
	this := EventPolicyUpdateRequest{}
	return &this
}

// GetEventPolicyRequest returns the EventPolicyRequest field value
func (o *EventPolicyUpdateRequest) GetEventPolicyRequest() EventPolicyInfoEditable {
	if o == nil {
		var ret EventPolicyInfoEditable
		return ret
	}

	return o.EventPolicyRequest
}

// GetEventPolicyRequestOk returns a tuple with the EventPolicyRequest field value
// and a boolean to check if the value has been set.
func (o *EventPolicyUpdateRequest) GetEventPolicyRequestOk() (*EventPolicyInfoEditable, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventPolicyRequest, true
}

// SetEventPolicyRequest sets field value
func (o *EventPolicyUpdateRequest) SetEventPolicyRequest(v EventPolicyInfoEditable) {
	o.EventPolicyRequest = v
}

// GetNotificationRecipients returns the NotificationRecipients field value if set, zero value otherwise.
func (o *EventPolicyUpdateRequest) GetNotificationRecipients() []NotificationRecipient {
	if o == nil || IsNil(o.NotificationRecipients) {
		var ret []NotificationRecipient
		return ret
	}
	return o.NotificationRecipients
}

// GetNotificationRecipientsOk returns a tuple with the NotificationRecipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyUpdateRequest) GetNotificationRecipientsOk() ([]NotificationRecipient, bool) {
	if o == nil || IsNil(o.NotificationRecipients) {
		return nil, false
	}
	return o.NotificationRecipients, true
}

// HasNotificationRecipients returns a boolean if a field has been set.
func (o *EventPolicyUpdateRequest) HasNotificationRecipients() bool {
	if o != nil && !IsNil(o.NotificationRecipients) {
		return true
	}

	return false
}

// SetNotificationRecipients gets a reference to the given []NotificationRecipient and assigns it to the NotificationRecipients field.
func (o *EventPolicyUpdateRequest) SetNotificationRecipients(v []NotificationRecipient) {
	o.NotificationRecipients = v
}

func (o EventPolicyUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventPolicyUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventPolicyRequest"] = o.EventPolicyRequest
	if !IsNil(o.NotificationRecipients) {
		toSerialize["notificationRecipients"] = o.NotificationRecipients
	}
	return toSerialize, nil
}

func (o *EventPolicyUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventPolicyRequest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventPolicyUpdateRequest := _EventPolicyUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventPolicyUpdateRequest)

	if err != nil {
		return err
	}

	*o = EventPolicyUpdateRequest(varEventPolicyUpdateRequest)

	return err
}

type NullableEventPolicyUpdateRequest struct {
	value *EventPolicyUpdateRequest
	isSet bool
}

func (v NullableEventPolicyUpdateRequest) Get() *EventPolicyUpdateRequest {
	return v.value
}

func (v *NullableEventPolicyUpdateRequest) Set(val *EventPolicyUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventPolicyUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventPolicyUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventPolicyUpdateRequest(val *EventPolicyUpdateRequest) *NullableEventPolicyUpdateRequest {
	return &NullableEventPolicyUpdateRequest{value: val, isSet: true}
}

func (v NullableEventPolicyUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventPolicyUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
