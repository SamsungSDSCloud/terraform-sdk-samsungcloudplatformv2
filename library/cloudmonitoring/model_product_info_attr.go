/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"encoding/json"
)

// checks if the ProductInfoAttr type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductInfoAttr{}

// ProductInfoAttr struct for ProductInfoAttr
type ProductInfoAttr struct {
	AttrName  *string `json:"attrName,omitempty"`
	AttrValue *string `json:"attrValue,omitempty"`
}

// NewProductInfoAttr instantiates a new ProductInfoAttr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductInfoAttr() *ProductInfoAttr {
	this := ProductInfoAttr{}
	return &this
}

// NewProductInfoAttrWithDefaults instantiates a new ProductInfoAttr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductInfoAttrWithDefaults() *ProductInfoAttr {
	this := ProductInfoAttr{}
	return &this
}

// GetAttrName returns the AttrName field value if set, zero value otherwise.
func (o *ProductInfoAttr) GetAttrName() string {
	if o == nil || IsNil(o.AttrName) {
		var ret string
		return ret
	}
	return *o.AttrName
}

// GetAttrNameOk returns a tuple with the AttrName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfoAttr) GetAttrNameOk() (*string, bool) {
	if o == nil || IsNil(o.AttrName) {
		return nil, false
	}
	return o.AttrName, true
}

// HasAttrName returns a boolean if a field has been set.
func (o *ProductInfoAttr) HasAttrName() bool {
	if o != nil && !IsNil(o.AttrName) {
		return true
	}

	return false
}

// SetAttrName gets a reference to the given string and assigns it to the AttrName field.
func (o *ProductInfoAttr) SetAttrName(v string) {
	o.AttrName = &v
}

// GetAttrValue returns the AttrValue field value if set, zero value otherwise.
func (o *ProductInfoAttr) GetAttrValue() string {
	if o == nil || IsNil(o.AttrValue) {
		var ret string
		return ret
	}
	return *o.AttrValue
}

// GetAttrValueOk returns a tuple with the AttrValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductInfoAttr) GetAttrValueOk() (*string, bool) {
	if o == nil || IsNil(o.AttrValue) {
		return nil, false
	}
	return o.AttrValue, true
}

// HasAttrValue returns a boolean if a field has been set.
func (o *ProductInfoAttr) HasAttrValue() bool {
	if o != nil && !IsNil(o.AttrValue) {
		return true
	}

	return false
}

// SetAttrValue gets a reference to the given string and assigns it to the AttrValue field.
func (o *ProductInfoAttr) SetAttrValue(v string) {
	o.AttrValue = &v
}

func (o ProductInfoAttr) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductInfoAttr) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AttrName) {
		toSerialize["attrName"] = o.AttrName
	}
	if !IsNil(o.AttrValue) {
		toSerialize["attrValue"] = o.AttrValue
	}
	return toSerialize, nil
}

type NullableProductInfoAttr struct {
	value *ProductInfoAttr
	isSet bool
}

func (v NullableProductInfoAttr) Get() *ProductInfoAttr {
	return v.value
}

func (v *NullableProductInfoAttr) Set(val *ProductInfoAttr) {
	v.value = val
	v.isSet = true
}

func (v NullableProductInfoAttr) IsSet() bool {
	return v.isSet
}

func (v *NullableProductInfoAttr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductInfoAttr(val *ProductInfoAttr) *NullableProductInfoAttr {
	return &NullableProductInfoAttr{value: val, isSet: true}
}

func (v NullableProductInfoAttr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductInfoAttr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
