/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"encoding/json"
)

// checks if the ProductList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductList{}

// ProductList struct for ProductList
type ProductList struct {
	ProductName       *string `json:"productName,omitempty"`
	ProductResourceId *string `json:"productResourceId,omitempty"`
	ProductSq         *int64  `json:"productSq,omitempty"`
}

// NewProductList instantiates a new ProductList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductList() *ProductList {
	this := ProductList{}
	return &this
}

// NewProductListWithDefaults instantiates a new ProductList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductListWithDefaults() *ProductList {
	this := ProductList{}
	return &this
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *ProductList) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductList) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *ProductList) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *ProductList) SetProductName(v string) {
	o.ProductName = &v
}

// GetProductResourceId returns the ProductResourceId field value if set, zero value otherwise.
func (o *ProductList) GetProductResourceId() string {
	if o == nil || IsNil(o.ProductResourceId) {
		var ret string
		return ret
	}
	return *o.ProductResourceId
}

// GetProductResourceIdOk returns a tuple with the ProductResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductList) GetProductResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductResourceId) {
		return nil, false
	}
	return o.ProductResourceId, true
}

// HasProductResourceId returns a boolean if a field has been set.
func (o *ProductList) HasProductResourceId() bool {
	if o != nil && !IsNil(o.ProductResourceId) {
		return true
	}

	return false
}

// SetProductResourceId gets a reference to the given string and assigns it to the ProductResourceId field.
func (o *ProductList) SetProductResourceId(v string) {
	o.ProductResourceId = &v
}

// GetProductSq returns the ProductSq field value if set, zero value otherwise.
func (o *ProductList) GetProductSq() int64 {
	if o == nil || IsNil(o.ProductSq) {
		var ret int64
		return ret
	}
	return *o.ProductSq
}

// GetProductSqOk returns a tuple with the ProductSq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductList) GetProductSqOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductSq) {
		return nil, false
	}
	return o.ProductSq, true
}

// HasProductSq returns a boolean if a field has been set.
func (o *ProductList) HasProductSq() bool {
	if o != nil && !IsNil(o.ProductSq) {
		return true
	}

	return false
}

// SetProductSq gets a reference to the given int64 and assigns it to the ProductSq field.
func (o *ProductList) SetProductSq(v int64) {
	o.ProductSq = &v
}

func (o ProductList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductName) {
		toSerialize["productName"] = o.ProductName
	}
	if !IsNil(o.ProductResourceId) {
		toSerialize["productResourceId"] = o.ProductResourceId
	}
	if !IsNil(o.ProductSq) {
		toSerialize["productSq"] = o.ProductSq
	}
	return toSerialize, nil
}

type NullableProductList struct {
	value *ProductList
	isSet bool
}

func (v NullableProductList) Get() *ProductList {
	return v.value
}

func (v *NullableProductList) Set(val *ProductList) {
	v.value = val
	v.isSet = true
}

func (v NullableProductList) IsSet() bool {
	return v.isSet
}

func (v *NullableProductList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductList(val *ProductList) *NullableProductList {
	return &NullableProductList{value: val, isSet: true}
}

func (v NullableProductList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
