/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationMethod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationMethod{}

// NotificationMethod 이벤트 레벨별 알림 방법 정보 객체
type NotificationMethod struct {
	// 이벤트 레벨
	EventLevel string `json:"eventLevel"`
	// 전송 메소드 - 허용 값: MESSENGER, SMS, MAIL
	SendMethod []string `json:"sendMethod"`
}

type _NotificationMethod NotificationMethod

// NewNotificationMethod instantiates a new NotificationMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationMethod(eventLevel string, sendMethod []string) *NotificationMethod {
	this := NotificationMethod{}
	this.EventLevel = eventLevel
	this.SendMethod = sendMethod
	return &this
}

// NewNotificationMethodWithDefaults instantiates a new NotificationMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationMethodWithDefaults() *NotificationMethod {
	this := NotificationMethod{}
	return &this
}

// GetEventLevel returns the EventLevel field value
func (o *NotificationMethod) GetEventLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventLevel
}

// GetEventLevelOk returns a tuple with the EventLevel field value
// and a boolean to check if the value has been set.
func (o *NotificationMethod) GetEventLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventLevel, true
}

// SetEventLevel sets field value
func (o *NotificationMethod) SetEventLevel(v string) {
	o.EventLevel = v
}

// GetSendMethod returns the SendMethod field value
func (o *NotificationMethod) GetSendMethod() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SendMethod
}

// GetSendMethodOk returns a tuple with the SendMethod field value
// and a boolean to check if the value has been set.
func (o *NotificationMethod) GetSendMethodOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SendMethod, true
}

// SetSendMethod sets field value
func (o *NotificationMethod) SetSendMethod(v []string) {
	o.SendMethod = v
}

func (o NotificationMethod) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationMethod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eventLevel"] = o.EventLevel
	toSerialize["sendMethod"] = o.SendMethod
	return toSerialize, nil
}

func (o *NotificationMethod) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eventLevel",
		"sendMethod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationMethod := _NotificationMethod{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationMethod)

	if err != nil {
		return err
	}

	*o = NotificationMethod(varNotificationMethod)

	return err
}

type NullableNotificationMethod struct {
	value *NotificationMethod
	isSet bool
}

func (v NullableNotificationMethod) Get() *NotificationMethod {
	return v.value
}

func (v *NullableNotificationMethod) Set(val *NotificationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationMethod(val *NotificationMethod) *NullableNotificationMethod {
	return &NullableNotificationMethod{value: val, isSet: true}
}

func (v NullableNotificationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
