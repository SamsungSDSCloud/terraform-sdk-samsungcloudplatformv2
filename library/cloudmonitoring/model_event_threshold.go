/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventThreshold{}

// EventThreshold 이벤트 임계치 객체
type EventThreshold struct {
	// 메트릭 함수 - 유효한 값: [delta] - 이벤트 발생 여부를 판단하기 위해 성능항목의 현재 값을 사용할지, 이전 값과 현재 값의 차이를 사용할지를 지정합니다. - 이전 값과 현재 값의 차이를 사용하고자 할 경우에만 delta로 지정합니다.
	MetricFunction  *string          `json:"metricFunction,omitempty"`
	RangeThreshold  *RangeThreshold  `json:"rangeThreshold,omitempty"`
	SingleThreshold *SingleThreshold `json:"singleThreshold,omitempty"`
	// 임계치 유형 - 임계치를 범위로 지정할 경우에는 \"RANGE_VALUE\"를, 임계치를 단일값으로 지정할 경우에는 \"SINGLE_VALUE\" 지정해야 합니다.
	ThresholdType string `json:"thresholdType"`
}

type _EventThreshold EventThreshold

// NewEventThreshold instantiates a new EventThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventThreshold(thresholdType string) *EventThreshold {
	this := EventThreshold{}
	this.ThresholdType = thresholdType
	return &this
}

// NewEventThresholdWithDefaults instantiates a new EventThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventThresholdWithDefaults() *EventThreshold {
	this := EventThreshold{}
	return &this
}

// GetMetricFunction returns the MetricFunction field value if set, zero value otherwise.
func (o *EventThreshold) GetMetricFunction() string {
	if o == nil || IsNil(o.MetricFunction) {
		var ret string
		return ret
	}
	return *o.MetricFunction
}

// GetMetricFunctionOk returns a tuple with the MetricFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventThreshold) GetMetricFunctionOk() (*string, bool) {
	if o == nil || IsNil(o.MetricFunction) {
		return nil, false
	}
	return o.MetricFunction, true
}

// HasMetricFunction returns a boolean if a field has been set.
func (o *EventThreshold) HasMetricFunction() bool {
	if o != nil && !IsNil(o.MetricFunction) {
		return true
	}

	return false
}

// SetMetricFunction gets a reference to the given string and assigns it to the MetricFunction field.
func (o *EventThreshold) SetMetricFunction(v string) {
	o.MetricFunction = &v
}

// GetRangeThreshold returns the RangeThreshold field value if set, zero value otherwise.
func (o *EventThreshold) GetRangeThreshold() RangeThreshold {
	if o == nil || IsNil(o.RangeThreshold) {
		var ret RangeThreshold
		return ret
	}
	return *o.RangeThreshold
}

// GetRangeThresholdOk returns a tuple with the RangeThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventThreshold) GetRangeThresholdOk() (*RangeThreshold, bool) {
	if o == nil || IsNil(o.RangeThreshold) {
		return nil, false
	}
	return o.RangeThreshold, true
}

// HasRangeThreshold returns a boolean if a field has been set.
func (o *EventThreshold) HasRangeThreshold() bool {
	if o != nil && !IsNil(o.RangeThreshold) {
		return true
	}

	return false
}

// SetRangeThreshold gets a reference to the given RangeThreshold and assigns it to the RangeThreshold field.
func (o *EventThreshold) SetRangeThreshold(v RangeThreshold) {
	o.RangeThreshold = &v
}

// GetSingleThreshold returns the SingleThreshold field value if set, zero value otherwise.
func (o *EventThreshold) GetSingleThreshold() SingleThreshold {
	if o == nil || IsNil(o.SingleThreshold) {
		var ret SingleThreshold
		return ret
	}
	return *o.SingleThreshold
}

// GetSingleThresholdOk returns a tuple with the SingleThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventThreshold) GetSingleThresholdOk() (*SingleThreshold, bool) {
	if o == nil || IsNil(o.SingleThreshold) {
		return nil, false
	}
	return o.SingleThreshold, true
}

// HasSingleThreshold returns a boolean if a field has been set.
func (o *EventThreshold) HasSingleThreshold() bool {
	if o != nil && !IsNil(o.SingleThreshold) {
		return true
	}

	return false
}

// SetSingleThreshold gets a reference to the given SingleThreshold and assigns it to the SingleThreshold field.
func (o *EventThreshold) SetSingleThreshold(v SingleThreshold) {
	o.SingleThreshold = &v
}

// GetThresholdType returns the ThresholdType field value
func (o *EventThreshold) GetThresholdType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThresholdType
}

// GetThresholdTypeOk returns a tuple with the ThresholdType field value
// and a boolean to check if the value has been set.
func (o *EventThreshold) GetThresholdTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThresholdType, true
}

// SetThresholdType sets field value
func (o *EventThreshold) SetThresholdType(v string) {
	o.ThresholdType = v
}

func (o EventThreshold) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetricFunction) {
		toSerialize["metricFunction"] = o.MetricFunction
	}
	if !IsNil(o.RangeThreshold) {
		toSerialize["rangeThreshold"] = o.RangeThreshold
	}
	if !IsNil(o.SingleThreshold) {
		toSerialize["singleThreshold"] = o.SingleThreshold
	}
	toSerialize["thresholdType"] = o.ThresholdType
	return toSerialize, nil
}

func (o *EventThreshold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"thresholdType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventThreshold := _EventThreshold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventThreshold)

	if err != nil {
		return err
	}

	*o = EventThreshold(varEventThreshold)

	return err
}

type NullableEventThreshold struct {
	value *EventThreshold
	isSet bool
}

func (v NullableEventThreshold) Get() *EventThreshold {
	return v.value
}

func (v *NullableEventThreshold) Set(val *EventThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableEventThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableEventThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventThreshold(val *EventThreshold) *NullableEventThreshold {
	return &NullableEventThreshold{value: val, isSet: true}
}

func (v NullableEventThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
