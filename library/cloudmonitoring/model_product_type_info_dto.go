/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProductTypeInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductTypeInfoDto{}

// ProductTypeInfoDto 상품 정보 조회 시 응답을 전달하기 위한 객체
type ProductTypeInfoDto struct {
	// 부모 상품 이름
	ParentProductTypeName string `json:"parentProductTypeName"`
	// 상품 코드
	ProductTypeCode string `json:"productTypeCode"`
	// 상품 이름
	ProductTypeName string `json:"productTypeName"`
	// 상태 메트릭 키
	StateMetricKey string `json:"stateMetricKey"`
}

type _ProductTypeInfoDto ProductTypeInfoDto

// NewProductTypeInfoDto instantiates a new ProductTypeInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductTypeInfoDto(parentProductTypeName string, productTypeCode string, productTypeName string, stateMetricKey string) *ProductTypeInfoDto {
	this := ProductTypeInfoDto{}
	this.ParentProductTypeName = parentProductTypeName
	this.ProductTypeCode = productTypeCode
	this.ProductTypeName = productTypeName
	this.StateMetricKey = stateMetricKey
	return &this
}

// NewProductTypeInfoDtoWithDefaults instantiates a new ProductTypeInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductTypeInfoDtoWithDefaults() *ProductTypeInfoDto {
	this := ProductTypeInfoDto{}
	return &this
}

// GetParentProductTypeName returns the ParentProductTypeName field value
func (o *ProductTypeInfoDto) GetParentProductTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParentProductTypeName
}

// GetParentProductTypeNameOk returns a tuple with the ParentProductTypeName field value
// and a boolean to check if the value has been set.
func (o *ProductTypeInfoDto) GetParentProductTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentProductTypeName, true
}

// SetParentProductTypeName sets field value
func (o *ProductTypeInfoDto) SetParentProductTypeName(v string) {
	o.ParentProductTypeName = v
}

// GetProductTypeCode returns the ProductTypeCode field value
func (o *ProductTypeInfoDto) GetProductTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeCode
}

// GetProductTypeCodeOk returns a tuple with the ProductTypeCode field value
// and a boolean to check if the value has been set.
func (o *ProductTypeInfoDto) GetProductTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeCode, true
}

// SetProductTypeCode sets field value
func (o *ProductTypeInfoDto) SetProductTypeCode(v string) {
	o.ProductTypeCode = v
}

// GetProductTypeName returns the ProductTypeName field value
func (o *ProductTypeInfoDto) GetProductTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeName
}

// GetProductTypeNameOk returns a tuple with the ProductTypeName field value
// and a boolean to check if the value has been set.
func (o *ProductTypeInfoDto) GetProductTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeName, true
}

// SetProductTypeName sets field value
func (o *ProductTypeInfoDto) SetProductTypeName(v string) {
	o.ProductTypeName = v
}

// GetStateMetricKey returns the StateMetricKey field value
func (o *ProductTypeInfoDto) GetStateMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateMetricKey
}

// GetStateMetricKeyOk returns a tuple with the StateMetricKey field value
// and a boolean to check if the value has been set.
func (o *ProductTypeInfoDto) GetStateMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateMetricKey, true
}

// SetStateMetricKey sets field value
func (o *ProductTypeInfoDto) SetStateMetricKey(v string) {
	o.StateMetricKey = v
}

func (o ProductTypeInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductTypeInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parentProductTypeName"] = o.ParentProductTypeName
	toSerialize["productTypeCode"] = o.ProductTypeCode
	toSerialize["productTypeName"] = o.ProductTypeName
	toSerialize["stateMetricKey"] = o.StateMetricKey
	return toSerialize, nil
}

func (o *ProductTypeInfoDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parentProductTypeName",
		"productTypeCode",
		"productTypeName",
		"stateMetricKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductTypeInfoDto := _ProductTypeInfoDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductTypeInfoDto)

	if err != nil {
		return err
	}

	*o = ProductTypeInfoDto(varProductTypeInfoDto)

	return err
}

type NullableProductTypeInfoDto struct {
	value *ProductTypeInfoDto
	isSet bool
}

func (v NullableProductTypeInfoDto) Get() *ProductTypeInfoDto {
	return v.value
}

func (v *NullableProductTypeInfoDto) Set(val *ProductTypeInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProductTypeInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProductTypeInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductTypeInfoDto(val *ProductTypeInfoDto) *NullableProductTypeInfoDto {
	return &NullableProductTypeInfoDto{value: val, isSet: true}
}

func (v NullableProductTypeInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductTypeInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
