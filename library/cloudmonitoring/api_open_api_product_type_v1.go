/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"reflect"
)

// OpenAPIProductTypeV1APIService OpenAPIProductTypeV1API service
type OpenAPIProductTypeV1APIService service

type OpenAPIProductTypeV1APIGetProductTypeListRequest struct {
	ctx                 context.Context
	ApiService          *OpenAPIProductTypeV1APIService
	productCategoryCode *string
	page                *int32
	size                *int32
	sort                *[]string
}

// Product type category - If not specified, the entire product type code will be retrieved.
func (r OpenAPIProductTypeV1APIGetProductTypeListRequest) ProductCategoryCode(productCategoryCode string) OpenAPIProductTypeV1APIGetProductTypeListRequest {
	r.productCategoryCode = &productCategoryCode
	return r
}

// Page Number (default: 0)
func (r OpenAPIProductTypeV1APIGetProductTypeListRequest) Page(page int32) OpenAPIProductTypeV1APIGetProductTypeListRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIProductTypeV1APIGetProductTypeListRequest) Size(size int32) OpenAPIProductTypeV1APIGetProductTypeListRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIProductTypeV1APIGetProductTypeListRequest) Sort(sort []string) OpenAPIProductTypeV1APIGetProductTypeListRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIProductTypeV1APIGetProductTypeListRequest) Execute() (*PageResponseProductTypeInfoDto, *http.Response, error) {
	return r.ApiService.GetProductTypeListExecute(r)
}

/*
GetProductTypeList ListService

Search a list of product types supported by monitoring.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OpenAPIProductTypeV1APIGetProductTypeListRequest
*/
func (a *OpenAPIProductTypeV1APIService) GetProductTypeList(ctx context.Context) OpenAPIProductTypeV1APIGetProductTypeListRequest {
	return OpenAPIProductTypeV1APIGetProductTypeListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PageResponseProductTypeInfoDto
func (a *OpenAPIProductTypeV1APIService) GetProductTypeListExecute(r OpenAPIProductTypeV1APIGetProductTypeListRequest) (*PageResponseProductTypeInfoDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseProductTypeInfoDto
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/product/v1/product-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.productCategoryCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productCategoryCode", r.productCategoryCode, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
