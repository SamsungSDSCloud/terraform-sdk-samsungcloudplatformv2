/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"encoding/json"
	"time"
)

// checks if the NotificationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationStatus{}

// NotificationStatus 이벤트 알림 상태 전송 객체
type NotificationStatus struct {
	// swagger.event.notificationStatus.errorMsg.value
	ErrorMsg *string `json:"errorMsg,omitempty"`
	// 전송일시
	SendDt *time.Time `json:"sendDt,omitempty"`
	// 전송 메소드
	SendMethod *string `json:"sendMethod,omitempty"`
	// 전송 결과 - SUCCESS : 전송 성공 - FAIL : 전송을 시도했으나 전송 실패 - NOT SEND : 전송 메소드 미설정으로 전송 안함 - FILTERED : 알림 필터링 설정으로 전송 안함 - NO PERMISSION : 권한이 없어 전송 안함
	SendResult *string `json:"sendResult,omitempty"`
}

// NewNotificationStatus instantiates a new NotificationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationStatus() *NotificationStatus {
	this := NotificationStatus{}
	return &this
}

// NewNotificationStatusWithDefaults instantiates a new NotificationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationStatusWithDefaults() *NotificationStatus {
	this := NotificationStatus{}
	return &this
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise.
func (o *NotificationStatus) GetErrorMsg() string {
	if o == nil || IsNil(o.ErrorMsg) {
		var ret string
		return ret
	}
	return *o.ErrorMsg
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationStatus) GetErrorMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMsg) {
		return nil, false
	}
	return o.ErrorMsg, true
}

// HasErrorMsg returns a boolean if a field has been set.
func (o *NotificationStatus) HasErrorMsg() bool {
	if o != nil && !IsNil(o.ErrorMsg) {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given string and assigns it to the ErrorMsg field.
func (o *NotificationStatus) SetErrorMsg(v string) {
	o.ErrorMsg = &v
}

// GetSendDt returns the SendDt field value if set, zero value otherwise.
func (o *NotificationStatus) GetSendDt() time.Time {
	if o == nil || IsNil(o.SendDt) {
		var ret time.Time
		return ret
	}
	return *o.SendDt
}

// GetSendDtOk returns a tuple with the SendDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationStatus) GetSendDtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SendDt) {
		return nil, false
	}
	return o.SendDt, true
}

// HasSendDt returns a boolean if a field has been set.
func (o *NotificationStatus) HasSendDt() bool {
	if o != nil && !IsNil(o.SendDt) {
		return true
	}

	return false
}

// SetSendDt gets a reference to the given time.Time and assigns it to the SendDt field.
func (o *NotificationStatus) SetSendDt(v time.Time) {
	o.SendDt = &v
}

// GetSendMethod returns the SendMethod field value if set, zero value otherwise.
func (o *NotificationStatus) GetSendMethod() string {
	if o == nil || IsNil(o.SendMethod) {
		var ret string
		return ret
	}
	return *o.SendMethod
}

// GetSendMethodOk returns a tuple with the SendMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationStatus) GetSendMethodOk() (*string, bool) {
	if o == nil || IsNil(o.SendMethod) {
		return nil, false
	}
	return o.SendMethod, true
}

// HasSendMethod returns a boolean if a field has been set.
func (o *NotificationStatus) HasSendMethod() bool {
	if o != nil && !IsNil(o.SendMethod) {
		return true
	}

	return false
}

// SetSendMethod gets a reference to the given string and assigns it to the SendMethod field.
func (o *NotificationStatus) SetSendMethod(v string) {
	o.SendMethod = &v
}

// GetSendResult returns the SendResult field value if set, zero value otherwise.
func (o *NotificationStatus) GetSendResult() string {
	if o == nil || IsNil(o.SendResult) {
		var ret string
		return ret
	}
	return *o.SendResult
}

// GetSendResultOk returns a tuple with the SendResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationStatus) GetSendResultOk() (*string, bool) {
	if o == nil || IsNil(o.SendResult) {
		return nil, false
	}
	return o.SendResult, true
}

// HasSendResult returns a boolean if a field has been set.
func (o *NotificationStatus) HasSendResult() bool {
	if o != nil && !IsNil(o.SendResult) {
		return true
	}

	return false
}

// SetSendResult gets a reference to the given string and assigns it to the SendResult field.
func (o *NotificationStatus) SetSendResult(v string) {
	o.SendResult = &v
}

func (o NotificationStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMsg) {
		toSerialize["errorMsg"] = o.ErrorMsg
	}
	if !IsNil(o.SendDt) {
		toSerialize["sendDt"] = o.SendDt
	}
	if !IsNil(o.SendMethod) {
		toSerialize["sendMethod"] = o.SendMethod
	}
	if !IsNil(o.SendResult) {
		toSerialize["sendResult"] = o.SendResult
	}
	return toSerialize, nil
}

type NullableNotificationStatus struct {
	value *NotificationStatus
	isSet bool
}

func (v NullableNotificationStatus) Get() *NotificationStatus {
	return v.value
}

func (v *NullableNotificationStatus) Set(val *NotificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationStatus(val *NotificationStatus) *NullableNotificationStatus {
	return &NullableNotificationStatus{value: val, isSet: true}
}

func (v NullableNotificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
