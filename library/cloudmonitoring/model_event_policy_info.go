/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventPolicyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventPolicyInfo{}

// EventPolicyInfo 이벤트 정책을 담기 위한 정보 객체
type EventPolicyInfo struct {
	// swagger.event.eventPolicyResponse.disableYn.value
	DisableYn string `json:"disableYn"`
	// 이벤트 레벨
	EventLevel string `json:"eventLevel"`
	// 이벤트 메시지 접두사
	EventMessagePrefix *string `json:"eventMessagePrefix,omitempty"`
	// swagger.event.eventPolicyResponse.eventOccurTimeZone.value
	EventOccurTimeZone    *string                `json:"eventOccurTimeZone,omitempty"`
	EventPolicyStatistics *EventPolicyStatistics `json:"eventPolicyStatistics,omitempty"`
	EventThreshold        EventThreshold         `json:"eventThreshold"`
	// 결함허용 개수 - 설정한 조건에 맞는 값이 몇 번 반복해서 발생하면 이벤트를 발생시킬지 설정하는 값
	FtCount int64 `json:"ftCount"`
	// 로그 메트릭 여부
	IsLogMetric string `json:"isLogMetric"`
	// 메트릭 키
	MetricKey  string  `json:"metricKey"`
	MetricName *string `json:"metricName,omitempty"`
	// 오브젝트 이름
	ObjectDisplayName *string `json:"objectDisplayName,omitempty"`
	// 오브젝트 이름
	ObjectName *string `json:"objectName,omitempty"`
	// 개별항목 유형
	ObjectType *string `json:"objectType,omitempty"`
	// swagger.event.eventPolicyResponse.podObjectDisplayName.value
	PodObjectDisplayName *string `json:"podObjectDisplayName,omitempty"`
	// swagger.event.eventPolicyResponse.podObjectName.value
	PodObjectName *string `json:"podObjectName,omitempty"`
}

type _EventPolicyInfo EventPolicyInfo

// NewEventPolicyInfo instantiates a new EventPolicyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventPolicyInfo(disableYn string, eventLevel string, eventThreshold EventThreshold, ftCount int64, isLogMetric string, metricKey string) *EventPolicyInfo {
	this := EventPolicyInfo{}
	this.DisableYn = disableYn
	this.EventLevel = eventLevel
	this.EventThreshold = eventThreshold
	this.FtCount = ftCount
	this.IsLogMetric = isLogMetric
	this.MetricKey = metricKey
	return &this
}

// NewEventPolicyInfoWithDefaults instantiates a new EventPolicyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventPolicyInfoWithDefaults() *EventPolicyInfo {
	this := EventPolicyInfo{}
	return &this
}

// GetDisableYn returns the DisableYn field value
func (o *EventPolicyInfo) GetDisableYn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisableYn
}

// GetDisableYnOk returns a tuple with the DisableYn field value
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetDisableYnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisableYn, true
}

// SetDisableYn sets field value
func (o *EventPolicyInfo) SetDisableYn(v string) {
	o.DisableYn = v
}

// GetEventLevel returns the EventLevel field value
func (o *EventPolicyInfo) GetEventLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventLevel
}

// GetEventLevelOk returns a tuple with the EventLevel field value
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetEventLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventLevel, true
}

// SetEventLevel sets field value
func (o *EventPolicyInfo) SetEventLevel(v string) {
	o.EventLevel = v
}

// GetEventMessagePrefix returns the EventMessagePrefix field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetEventMessagePrefix() string {
	if o == nil || IsNil(o.EventMessagePrefix) {
		var ret string
		return ret
	}
	return *o.EventMessagePrefix
}

// GetEventMessagePrefixOk returns a tuple with the EventMessagePrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetEventMessagePrefixOk() (*string, bool) {
	if o == nil || IsNil(o.EventMessagePrefix) {
		return nil, false
	}
	return o.EventMessagePrefix, true
}

// HasEventMessagePrefix returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasEventMessagePrefix() bool {
	if o != nil && !IsNil(o.EventMessagePrefix) {
		return true
	}

	return false
}

// SetEventMessagePrefix gets a reference to the given string and assigns it to the EventMessagePrefix field.
func (o *EventPolicyInfo) SetEventMessagePrefix(v string) {
	o.EventMessagePrefix = &v
}

// GetEventOccurTimeZone returns the EventOccurTimeZone field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetEventOccurTimeZone() string {
	if o == nil || IsNil(o.EventOccurTimeZone) {
		var ret string
		return ret
	}
	return *o.EventOccurTimeZone
}

// GetEventOccurTimeZoneOk returns a tuple with the EventOccurTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetEventOccurTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.EventOccurTimeZone) {
		return nil, false
	}
	return o.EventOccurTimeZone, true
}

// HasEventOccurTimeZone returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasEventOccurTimeZone() bool {
	if o != nil && !IsNil(o.EventOccurTimeZone) {
		return true
	}

	return false
}

// SetEventOccurTimeZone gets a reference to the given string and assigns it to the EventOccurTimeZone field.
func (o *EventPolicyInfo) SetEventOccurTimeZone(v string) {
	o.EventOccurTimeZone = &v
}

// GetEventPolicyStatistics returns the EventPolicyStatistics field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetEventPolicyStatistics() EventPolicyStatistics {
	if o == nil || IsNil(o.EventPolicyStatistics) {
		var ret EventPolicyStatistics
		return ret
	}
	return *o.EventPolicyStatistics
}

// GetEventPolicyStatisticsOk returns a tuple with the EventPolicyStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetEventPolicyStatisticsOk() (*EventPolicyStatistics, bool) {
	if o == nil || IsNil(o.EventPolicyStatistics) {
		return nil, false
	}
	return o.EventPolicyStatistics, true
}

// HasEventPolicyStatistics returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasEventPolicyStatistics() bool {
	if o != nil && !IsNil(o.EventPolicyStatistics) {
		return true
	}

	return false
}

// SetEventPolicyStatistics gets a reference to the given EventPolicyStatistics and assigns it to the EventPolicyStatistics field.
func (o *EventPolicyInfo) SetEventPolicyStatistics(v EventPolicyStatistics) {
	o.EventPolicyStatistics = &v
}

// GetEventThreshold returns the EventThreshold field value
func (o *EventPolicyInfo) GetEventThreshold() EventThreshold {
	if o == nil {
		var ret EventThreshold
		return ret
	}

	return o.EventThreshold
}

// GetEventThresholdOk returns a tuple with the EventThreshold field value
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetEventThresholdOk() (*EventThreshold, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventThreshold, true
}

// SetEventThreshold sets field value
func (o *EventPolicyInfo) SetEventThreshold(v EventThreshold) {
	o.EventThreshold = v
}

// GetFtCount returns the FtCount field value
func (o *EventPolicyInfo) GetFtCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FtCount
}

// GetFtCountOk returns a tuple with the FtCount field value
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetFtCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FtCount, true
}

// SetFtCount sets field value
func (o *EventPolicyInfo) SetFtCount(v int64) {
	o.FtCount = v
}

// GetIsLogMetric returns the IsLogMetric field value
func (o *EventPolicyInfo) GetIsLogMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsLogMetric
}

// GetIsLogMetricOk returns a tuple with the IsLogMetric field value
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetIsLogMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLogMetric, true
}

// SetIsLogMetric sets field value
func (o *EventPolicyInfo) SetIsLogMetric(v string) {
	o.IsLogMetric = v
}

// GetMetricKey returns the MetricKey field value
func (o *EventPolicyInfo) GetMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricKey, true
}

// SetMetricKey sets field value
func (o *EventPolicyInfo) SetMetricKey(v string) {
	o.MetricKey = v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetMetricName() string {
	if o == nil || IsNil(o.MetricName) {
		var ret string
		return ret
	}
	return *o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetMetricNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetricName) {
		return nil, false
	}
	return o.MetricName, true
}

// HasMetricName returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasMetricName() bool {
	if o != nil && !IsNil(o.MetricName) {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given string and assigns it to the MetricName field.
func (o *EventPolicyInfo) SetMetricName(v string) {
	o.MetricName = &v
}

// GetObjectDisplayName returns the ObjectDisplayName field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetObjectDisplayName() string {
	if o == nil || IsNil(o.ObjectDisplayName) {
		var ret string
		return ret
	}
	return *o.ObjectDisplayName
}

// GetObjectDisplayNameOk returns a tuple with the ObjectDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetObjectDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectDisplayName) {
		return nil, false
	}
	return o.ObjectDisplayName, true
}

// HasObjectDisplayName returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasObjectDisplayName() bool {
	if o != nil && !IsNil(o.ObjectDisplayName) {
		return true
	}

	return false
}

// SetObjectDisplayName gets a reference to the given string and assigns it to the ObjectDisplayName field.
func (o *EventPolicyInfo) SetObjectDisplayName(v string) {
	o.ObjectDisplayName = &v
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName) {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectName) {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasObjectName() bool {
	if o != nil && !IsNil(o.ObjectName) {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *EventPolicyInfo) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *EventPolicyInfo) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetPodObjectDisplayName returns the PodObjectDisplayName field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetPodObjectDisplayName() string {
	if o == nil || IsNil(o.PodObjectDisplayName) {
		var ret string
		return ret
	}
	return *o.PodObjectDisplayName
}

// GetPodObjectDisplayNameOk returns a tuple with the PodObjectDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetPodObjectDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.PodObjectDisplayName) {
		return nil, false
	}
	return o.PodObjectDisplayName, true
}

// HasPodObjectDisplayName returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasPodObjectDisplayName() bool {
	if o != nil && !IsNil(o.PodObjectDisplayName) {
		return true
	}

	return false
}

// SetPodObjectDisplayName gets a reference to the given string and assigns it to the PodObjectDisplayName field.
func (o *EventPolicyInfo) SetPodObjectDisplayName(v string) {
	o.PodObjectDisplayName = &v
}

// GetPodObjectName returns the PodObjectName field value if set, zero value otherwise.
func (o *EventPolicyInfo) GetPodObjectName() string {
	if o == nil || IsNil(o.PodObjectName) {
		var ret string
		return ret
	}
	return *o.PodObjectName
}

// GetPodObjectNameOk returns a tuple with the PodObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventPolicyInfo) GetPodObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.PodObjectName) {
		return nil, false
	}
	return o.PodObjectName, true
}

// HasPodObjectName returns a boolean if a field has been set.
func (o *EventPolicyInfo) HasPodObjectName() bool {
	if o != nil && !IsNil(o.PodObjectName) {
		return true
	}

	return false
}

// SetPodObjectName gets a reference to the given string and assigns it to the PodObjectName field.
func (o *EventPolicyInfo) SetPodObjectName(v string) {
	o.PodObjectName = &v
}

func (o EventPolicyInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventPolicyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disableYn"] = o.DisableYn
	toSerialize["eventLevel"] = o.EventLevel
	if !IsNil(o.EventMessagePrefix) {
		toSerialize["eventMessagePrefix"] = o.EventMessagePrefix
	}
	if !IsNil(o.EventOccurTimeZone) {
		toSerialize["eventOccurTimeZone"] = o.EventOccurTimeZone
	}
	if !IsNil(o.EventPolicyStatistics) {
		toSerialize["eventPolicyStatistics"] = o.EventPolicyStatistics
	}
	toSerialize["eventThreshold"] = o.EventThreshold
	toSerialize["ftCount"] = o.FtCount
	toSerialize["isLogMetric"] = o.IsLogMetric
	toSerialize["metricKey"] = o.MetricKey
	if !IsNil(o.MetricName) {
		toSerialize["metricName"] = o.MetricName
	}
	if !IsNil(o.ObjectDisplayName) {
		toSerialize["objectDisplayName"] = o.ObjectDisplayName
	}
	if !IsNil(o.ObjectName) {
		toSerialize["objectName"] = o.ObjectName
	}
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !IsNil(o.PodObjectDisplayName) {
		toSerialize["podObjectDisplayName"] = o.PodObjectDisplayName
	}
	if !IsNil(o.PodObjectName) {
		toSerialize["podObjectName"] = o.PodObjectName
	}
	return toSerialize, nil
}

func (o *EventPolicyInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disableYn",
		"eventLevel",
		"eventThreshold",
		"ftCount",
		"isLogMetric",
		"metricKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventPolicyInfo := _EventPolicyInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventPolicyInfo)

	if err != nil {
		return err
	}

	*o = EventPolicyInfo(varEventPolicyInfo)

	return err
}

type NullableEventPolicyInfo struct {
	value *EventPolicyInfo
	isSet bool
}

func (v NullableEventPolicyInfo) Get() *EventPolicyInfo {
	return v.value
}

func (v *NullableEventPolicyInfo) Set(val *EventPolicyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventPolicyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventPolicyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventPolicyInfo(val *EventPolicyInfo) *NullableEventPolicyInfo {
	return &NullableEventPolicyInfo{value: val, isSet: true}
}

func (v NullableEventPolicyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventPolicyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
