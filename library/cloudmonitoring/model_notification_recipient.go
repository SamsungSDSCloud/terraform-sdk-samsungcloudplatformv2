/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificationRecipient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationRecipient{}

// NotificationRecipient 이벤트 알림 수신인 정보 객체
type NotificationRecipient struct {
	// 알림 메소드
	NotificationMethods []NotificationMethod `json:"notificationMethods"`
	// 수신인 키 - 수신인 키는 @[프로젝트 멤버 조회] 또는 @[사용자의 주소록 목록 조회]를 이용하여 조회합니다.
	RecipientKey string `json:"recipientKey"`
	// 수신인 유형 - USER : 사용자, ADDRBOOK : 주소록
	RecipientType string `json:"recipientType"`
}

type _NotificationRecipient NotificationRecipient

// NewNotificationRecipient instantiates a new NotificationRecipient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRecipient(notificationMethods []NotificationMethod, recipientKey string, recipientType string) *NotificationRecipient {
	this := NotificationRecipient{}
	this.NotificationMethods = notificationMethods
	this.RecipientKey = recipientKey
	this.RecipientType = recipientType
	return &this
}

// NewNotificationRecipientWithDefaults instantiates a new NotificationRecipient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRecipientWithDefaults() *NotificationRecipient {
	this := NotificationRecipient{}
	return &this
}

// GetNotificationMethods returns the NotificationMethods field value
func (o *NotificationRecipient) GetNotificationMethods() []NotificationMethod {
	if o == nil {
		var ret []NotificationMethod
		return ret
	}

	return o.NotificationMethods
}

// GetNotificationMethodsOk returns a tuple with the NotificationMethods field value
// and a boolean to check if the value has been set.
func (o *NotificationRecipient) GetNotificationMethodsOk() ([]NotificationMethod, bool) {
	if o == nil {
		return nil, false
	}
	return o.NotificationMethods, true
}

// SetNotificationMethods sets field value
func (o *NotificationRecipient) SetNotificationMethods(v []NotificationMethod) {
	o.NotificationMethods = v
}

// GetRecipientKey returns the RecipientKey field value
func (o *NotificationRecipient) GetRecipientKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientKey
}

// GetRecipientKeyOk returns a tuple with the RecipientKey field value
// and a boolean to check if the value has been set.
func (o *NotificationRecipient) GetRecipientKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientKey, true
}

// SetRecipientKey sets field value
func (o *NotificationRecipient) SetRecipientKey(v string) {
	o.RecipientKey = v
}

// GetRecipientType returns the RecipientType field value
func (o *NotificationRecipient) GetRecipientType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientType
}

// GetRecipientTypeOk returns a tuple with the RecipientType field value
// and a boolean to check if the value has been set.
func (o *NotificationRecipient) GetRecipientTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientType, true
}

// SetRecipientType sets field value
func (o *NotificationRecipient) SetRecipientType(v string) {
	o.RecipientType = v
}

func (o NotificationRecipient) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationRecipient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["notificationMethods"] = o.NotificationMethods
	toSerialize["recipientKey"] = o.RecipientKey
	toSerialize["recipientType"] = o.RecipientType
	return toSerialize, nil
}

func (o *NotificationRecipient) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"notificationMethods",
		"recipientKey",
		"recipientType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationRecipient := _NotificationRecipient{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationRecipient)

	if err != nil {
		return err
	}

	*o = NotificationRecipient(varNotificationRecipient)

	return err
}

type NullableNotificationRecipient struct {
	value *NotificationRecipient
	isSet bool
}

func (v NullableNotificationRecipient) Get() *NotificationRecipient {
	return v.value
}

func (v *NullableNotificationRecipient) Set(val *NotificationRecipient) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRecipient) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRecipient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRecipient(val *NotificationRecipient) *NullableNotificationRecipient {
	return &NullableNotificationRecipient{value: val, isSet: true}
}

func (v NullableNotificationRecipient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRecipient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
