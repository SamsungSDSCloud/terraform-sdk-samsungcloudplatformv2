/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MetricInfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetricInfoDto{}

// MetricInfoDto 메트릭 정보 조회 시 응답 전달하기 위한 객체
type MetricInfoDto struct {
	// swagger.product.MetricInfoDto.disableObject.value
	DisableObject *string `json:"disableObject,omitempty"`
	DisplayUnit   *string `json:"displayUnit,omitempty"`
	// 메트릭 단위 (고정)
	FixedUnit *string `json:"fixedUnit,omitempty"`
	// 로그 메트릭 여부
	IsLogMetric string `json:"isLogMetric"`
	// 개별항목 성능 존재 여부
	IsObjectExist string `json:"isObjectExist"`
	// 메트릭 설명
	MetricDescription *string `json:"metricDescription,omitempty"`
	// 메트릭 설명
	MetricDescriptionEn *string `json:"metricDescriptionEn,omitempty"`
	// 메트릭 키
	MetricKey string `json:"metricKey"`
	// 메트릭 이름
	MetricName string `json:"metricName"`
	// 메트릭 순서
	MetricOrder *int32 `json:"metricOrder,omitempty"`
	// swagger.product.MetricInfoDto.metricSetKey.value
	MetricSetKey string `json:"metricSetKey"`
	// 메트릭 세트 이름
	MetricSetName string `json:"metricSetName"`
	// 메트릭 유형
	MetricType string `json:"metricType"`
	// 메트릭 단위
	MetricUnit *string `json:"metricUnit,omitempty"`
	// 오브젝트 키 이름
	ObjectKeyName string `json:"objectKeyName"`
	// swagger.product.MetricInfoDto.disableObject.value
	ObjectType *string `json:"objectType,omitempty"`
	// swagger.product.MetricInfoDto.disableObject.value
	ObjectTypeNameEng *string `json:"objectTypeNameEng,omitempty"`
	// swagger.product.MetricInfoDto.disableObject.value
	ObjectTypeNameLoc *string `json:"objectTypeNameLoc,omitempty"`
	// swagger.product.MetricInfoDto.perfTitle.value
	PerfTitle string `json:"perfTitle"`
	// 메트릭 대상 유형
	ProductTargetType *string `json:"productTargetType,omitempty"`
	// 메트릭 대상 유형
	ProductTargetTypeEn *string `json:"productTargetTypeEn,omitempty"`
	// 상품 유형 코드
	ProductTypeCode string `json:"productTypeCode"`
	// 상품 유형 이름
	ProductTypeName string `json:"productTypeName"`
}

type _MetricInfoDto MetricInfoDto

// NewMetricInfoDto instantiates a new MetricInfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricInfoDto(isLogMetric string, isObjectExist string, metricKey string, metricName string, metricSetKey string, metricSetName string, metricType string, objectKeyName string, perfTitle string, productTypeCode string, productTypeName string) *MetricInfoDto {
	this := MetricInfoDto{}
	this.IsLogMetric = isLogMetric
	this.IsObjectExist = isObjectExist
	this.MetricKey = metricKey
	this.MetricName = metricName
	this.MetricSetKey = metricSetKey
	this.MetricSetName = metricSetName
	this.MetricType = metricType
	this.ObjectKeyName = objectKeyName
	this.PerfTitle = perfTitle
	this.ProductTypeCode = productTypeCode
	this.ProductTypeName = productTypeName
	return &this
}

// NewMetricInfoDtoWithDefaults instantiates a new MetricInfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricInfoDtoWithDefaults() *MetricInfoDto {
	this := MetricInfoDto{}
	return &this
}

// GetDisableObject returns the DisableObject field value if set, zero value otherwise.
func (o *MetricInfoDto) GetDisableObject() string {
	if o == nil || IsNil(o.DisableObject) {
		var ret string
		return ret
	}
	return *o.DisableObject
}

// GetDisableObjectOk returns a tuple with the DisableObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetDisableObjectOk() (*string, bool) {
	if o == nil || IsNil(o.DisableObject) {
		return nil, false
	}
	return o.DisableObject, true
}

// HasDisableObject returns a boolean if a field has been set.
func (o *MetricInfoDto) HasDisableObject() bool {
	if o != nil && !IsNil(o.DisableObject) {
		return true
	}

	return false
}

// SetDisableObject gets a reference to the given string and assigns it to the DisableObject field.
func (o *MetricInfoDto) SetDisableObject(v string) {
	o.DisableObject = &v
}

// GetDisplayUnit returns the DisplayUnit field value if set, zero value otherwise.
func (o *MetricInfoDto) GetDisplayUnit() string {
	if o == nil || IsNil(o.DisplayUnit) {
		var ret string
		return ret
	}
	return *o.DisplayUnit
}

// GetDisplayUnitOk returns a tuple with the DisplayUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetDisplayUnitOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayUnit) {
		return nil, false
	}
	return o.DisplayUnit, true
}

// HasDisplayUnit returns a boolean if a field has been set.
func (o *MetricInfoDto) HasDisplayUnit() bool {
	if o != nil && !IsNil(o.DisplayUnit) {
		return true
	}

	return false
}

// SetDisplayUnit gets a reference to the given string and assigns it to the DisplayUnit field.
func (o *MetricInfoDto) SetDisplayUnit(v string) {
	o.DisplayUnit = &v
}

// GetFixedUnit returns the FixedUnit field value if set, zero value otherwise.
func (o *MetricInfoDto) GetFixedUnit() string {
	if o == nil || IsNil(o.FixedUnit) {
		var ret string
		return ret
	}
	return *o.FixedUnit
}

// GetFixedUnitOk returns a tuple with the FixedUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetFixedUnitOk() (*string, bool) {
	if o == nil || IsNil(o.FixedUnit) {
		return nil, false
	}
	return o.FixedUnit, true
}

// HasFixedUnit returns a boolean if a field has been set.
func (o *MetricInfoDto) HasFixedUnit() bool {
	if o != nil && !IsNil(o.FixedUnit) {
		return true
	}

	return false
}

// SetFixedUnit gets a reference to the given string and assigns it to the FixedUnit field.
func (o *MetricInfoDto) SetFixedUnit(v string) {
	o.FixedUnit = &v
}

// GetIsLogMetric returns the IsLogMetric field value
func (o *MetricInfoDto) GetIsLogMetric() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsLogMetric
}

// GetIsLogMetricOk returns a tuple with the IsLogMetric field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetIsLogMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLogMetric, true
}

// SetIsLogMetric sets field value
func (o *MetricInfoDto) SetIsLogMetric(v string) {
	o.IsLogMetric = v
}

// GetIsObjectExist returns the IsObjectExist field value
func (o *MetricInfoDto) GetIsObjectExist() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsObjectExist
}

// GetIsObjectExistOk returns a tuple with the IsObjectExist field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetIsObjectExistOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsObjectExist, true
}

// SetIsObjectExist sets field value
func (o *MetricInfoDto) SetIsObjectExist(v string) {
	o.IsObjectExist = v
}

// GetMetricDescription returns the MetricDescription field value if set, zero value otherwise.
func (o *MetricInfoDto) GetMetricDescription() string {
	if o == nil || IsNil(o.MetricDescription) {
		var ret string
		return ret
	}
	return *o.MetricDescription
}

// GetMetricDescriptionOk returns a tuple with the MetricDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.MetricDescription) {
		return nil, false
	}
	return o.MetricDescription, true
}

// HasMetricDescription returns a boolean if a field has been set.
func (o *MetricInfoDto) HasMetricDescription() bool {
	if o != nil && !IsNil(o.MetricDescription) {
		return true
	}

	return false
}

// SetMetricDescription gets a reference to the given string and assigns it to the MetricDescription field.
func (o *MetricInfoDto) SetMetricDescription(v string) {
	o.MetricDescription = &v
}

// GetMetricDescriptionEn returns the MetricDescriptionEn field value if set, zero value otherwise.
func (o *MetricInfoDto) GetMetricDescriptionEn() string {
	if o == nil || IsNil(o.MetricDescriptionEn) {
		var ret string
		return ret
	}
	return *o.MetricDescriptionEn
}

// GetMetricDescriptionEnOk returns a tuple with the MetricDescriptionEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricDescriptionEnOk() (*string, bool) {
	if o == nil || IsNil(o.MetricDescriptionEn) {
		return nil, false
	}
	return o.MetricDescriptionEn, true
}

// HasMetricDescriptionEn returns a boolean if a field has been set.
func (o *MetricInfoDto) HasMetricDescriptionEn() bool {
	if o != nil && !IsNil(o.MetricDescriptionEn) {
		return true
	}

	return false
}

// SetMetricDescriptionEn gets a reference to the given string and assigns it to the MetricDescriptionEn field.
func (o *MetricInfoDto) SetMetricDescriptionEn(v string) {
	o.MetricDescriptionEn = &v
}

// GetMetricKey returns the MetricKey field value
func (o *MetricInfoDto) GetMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricKey, true
}

// SetMetricKey sets field value
func (o *MetricInfoDto) SetMetricKey(v string) {
	o.MetricKey = v
}

// GetMetricName returns the MetricName field value
func (o *MetricInfoDto) GetMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricName, true
}

// SetMetricName sets field value
func (o *MetricInfoDto) SetMetricName(v string) {
	o.MetricName = v
}

// GetMetricOrder returns the MetricOrder field value if set, zero value otherwise.
func (o *MetricInfoDto) GetMetricOrder() int32 {
	if o == nil || IsNil(o.MetricOrder) {
		var ret int32
		return ret
	}
	return *o.MetricOrder
}

// GetMetricOrderOk returns a tuple with the MetricOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.MetricOrder) {
		return nil, false
	}
	return o.MetricOrder, true
}

// HasMetricOrder returns a boolean if a field has been set.
func (o *MetricInfoDto) HasMetricOrder() bool {
	if o != nil && !IsNil(o.MetricOrder) {
		return true
	}

	return false
}

// SetMetricOrder gets a reference to the given int32 and assigns it to the MetricOrder field.
func (o *MetricInfoDto) SetMetricOrder(v int32) {
	o.MetricOrder = &v
}

// GetMetricSetKey returns the MetricSetKey field value
func (o *MetricInfoDto) GetMetricSetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricSetKey
}

// GetMetricSetKeyOk returns a tuple with the MetricSetKey field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricSetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricSetKey, true
}

// SetMetricSetKey sets field value
func (o *MetricInfoDto) SetMetricSetKey(v string) {
	o.MetricSetKey = v
}

// GetMetricSetName returns the MetricSetName field value
func (o *MetricInfoDto) GetMetricSetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricSetName
}

// GetMetricSetNameOk returns a tuple with the MetricSetName field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricSetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricSetName, true
}

// SetMetricSetName sets field value
func (o *MetricInfoDto) SetMetricSetName(v string) {
	o.MetricSetName = v
}

// GetMetricType returns the MetricType field value
func (o *MetricInfoDto) GetMetricType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricType
}

// GetMetricTypeOk returns a tuple with the MetricType field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricType, true
}

// SetMetricType sets field value
func (o *MetricInfoDto) SetMetricType(v string) {
	o.MetricType = v
}

// GetMetricUnit returns the MetricUnit field value if set, zero value otherwise.
func (o *MetricInfoDto) GetMetricUnit() string {
	if o == nil || IsNil(o.MetricUnit) {
		var ret string
		return ret
	}
	return *o.MetricUnit
}

// GetMetricUnitOk returns a tuple with the MetricUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetMetricUnitOk() (*string, bool) {
	if o == nil || IsNil(o.MetricUnit) {
		return nil, false
	}
	return o.MetricUnit, true
}

// HasMetricUnit returns a boolean if a field has been set.
func (o *MetricInfoDto) HasMetricUnit() bool {
	if o != nil && !IsNil(o.MetricUnit) {
		return true
	}

	return false
}

// SetMetricUnit gets a reference to the given string and assigns it to the MetricUnit field.
func (o *MetricInfoDto) SetMetricUnit(v string) {
	o.MetricUnit = &v
}

// GetObjectKeyName returns the ObjectKeyName field value
func (o *MetricInfoDto) GetObjectKeyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectKeyName
}

// GetObjectKeyNameOk returns a tuple with the ObjectKeyName field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetObjectKeyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectKeyName, true
}

// SetObjectKeyName sets field value
func (o *MetricInfoDto) SetObjectKeyName(v string) {
	o.ObjectKeyName = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *MetricInfoDto) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *MetricInfoDto) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *MetricInfoDto) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetObjectTypeNameEng returns the ObjectTypeNameEng field value if set, zero value otherwise.
func (o *MetricInfoDto) GetObjectTypeNameEng() string {
	if o == nil || IsNil(o.ObjectTypeNameEng) {
		var ret string
		return ret
	}
	return *o.ObjectTypeNameEng
}

// GetObjectTypeNameEngOk returns a tuple with the ObjectTypeNameEng field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetObjectTypeNameEngOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectTypeNameEng) {
		return nil, false
	}
	return o.ObjectTypeNameEng, true
}

// HasObjectTypeNameEng returns a boolean if a field has been set.
func (o *MetricInfoDto) HasObjectTypeNameEng() bool {
	if o != nil && !IsNil(o.ObjectTypeNameEng) {
		return true
	}

	return false
}

// SetObjectTypeNameEng gets a reference to the given string and assigns it to the ObjectTypeNameEng field.
func (o *MetricInfoDto) SetObjectTypeNameEng(v string) {
	o.ObjectTypeNameEng = &v
}

// GetObjectTypeNameLoc returns the ObjectTypeNameLoc field value if set, zero value otherwise.
func (o *MetricInfoDto) GetObjectTypeNameLoc() string {
	if o == nil || IsNil(o.ObjectTypeNameLoc) {
		var ret string
		return ret
	}
	return *o.ObjectTypeNameLoc
}

// GetObjectTypeNameLocOk returns a tuple with the ObjectTypeNameLoc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetObjectTypeNameLocOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectTypeNameLoc) {
		return nil, false
	}
	return o.ObjectTypeNameLoc, true
}

// HasObjectTypeNameLoc returns a boolean if a field has been set.
func (o *MetricInfoDto) HasObjectTypeNameLoc() bool {
	if o != nil && !IsNil(o.ObjectTypeNameLoc) {
		return true
	}

	return false
}

// SetObjectTypeNameLoc gets a reference to the given string and assigns it to the ObjectTypeNameLoc field.
func (o *MetricInfoDto) SetObjectTypeNameLoc(v string) {
	o.ObjectTypeNameLoc = &v
}

// GetPerfTitle returns the PerfTitle field value
func (o *MetricInfoDto) GetPerfTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PerfTitle
}

// GetPerfTitleOk returns a tuple with the PerfTitle field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetPerfTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerfTitle, true
}

// SetPerfTitle sets field value
func (o *MetricInfoDto) SetPerfTitle(v string) {
	o.PerfTitle = v
}

// GetProductTargetType returns the ProductTargetType field value if set, zero value otherwise.
func (o *MetricInfoDto) GetProductTargetType() string {
	if o == nil || IsNil(o.ProductTargetType) {
		var ret string
		return ret
	}
	return *o.ProductTargetType
}

// GetProductTargetTypeOk returns a tuple with the ProductTargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetProductTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTargetType) {
		return nil, false
	}
	return o.ProductTargetType, true
}

// HasProductTargetType returns a boolean if a field has been set.
func (o *MetricInfoDto) HasProductTargetType() bool {
	if o != nil && !IsNil(o.ProductTargetType) {
		return true
	}

	return false
}

// SetProductTargetType gets a reference to the given string and assigns it to the ProductTargetType field.
func (o *MetricInfoDto) SetProductTargetType(v string) {
	o.ProductTargetType = &v
}

// GetProductTargetTypeEn returns the ProductTargetTypeEn field value if set, zero value otherwise.
func (o *MetricInfoDto) GetProductTargetTypeEn() string {
	if o == nil || IsNil(o.ProductTargetTypeEn) {
		var ret string
		return ret
	}
	return *o.ProductTargetTypeEn
}

// GetProductTargetTypeEnOk returns a tuple with the ProductTargetTypeEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetProductTargetTypeEnOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTargetTypeEn) {
		return nil, false
	}
	return o.ProductTargetTypeEn, true
}

// HasProductTargetTypeEn returns a boolean if a field has been set.
func (o *MetricInfoDto) HasProductTargetTypeEn() bool {
	if o != nil && !IsNil(o.ProductTargetTypeEn) {
		return true
	}

	return false
}

// SetProductTargetTypeEn gets a reference to the given string and assigns it to the ProductTargetTypeEn field.
func (o *MetricInfoDto) SetProductTargetTypeEn(v string) {
	o.ProductTargetTypeEn = &v
}

// GetProductTypeCode returns the ProductTypeCode field value
func (o *MetricInfoDto) GetProductTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeCode
}

// GetProductTypeCodeOk returns a tuple with the ProductTypeCode field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetProductTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeCode, true
}

// SetProductTypeCode sets field value
func (o *MetricInfoDto) SetProductTypeCode(v string) {
	o.ProductTypeCode = v
}

// GetProductTypeName returns the ProductTypeName field value
func (o *MetricInfoDto) GetProductTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeName
}

// GetProductTypeNameOk returns a tuple with the ProductTypeName field value
// and a boolean to check if the value has been set.
func (o *MetricInfoDto) GetProductTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeName, true
}

// SetProductTypeName sets field value
func (o *MetricInfoDto) SetProductTypeName(v string) {
	o.ProductTypeName = v
}

func (o MetricInfoDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetricInfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableObject) {
		toSerialize["disableObject"] = o.DisableObject
	}
	if !IsNil(o.DisplayUnit) {
		toSerialize["displayUnit"] = o.DisplayUnit
	}
	if !IsNil(o.FixedUnit) {
		toSerialize["fixedUnit"] = o.FixedUnit
	}
	toSerialize["isLogMetric"] = o.IsLogMetric
	toSerialize["isObjectExist"] = o.IsObjectExist
	if !IsNil(o.MetricDescription) {
		toSerialize["metricDescription"] = o.MetricDescription
	}
	if !IsNil(o.MetricDescriptionEn) {
		toSerialize["metricDescriptionEn"] = o.MetricDescriptionEn
	}
	toSerialize["metricKey"] = o.MetricKey
	toSerialize["metricName"] = o.MetricName
	if !IsNil(o.MetricOrder) {
		toSerialize["metricOrder"] = o.MetricOrder
	}
	toSerialize["metricSetKey"] = o.MetricSetKey
	toSerialize["metricSetName"] = o.MetricSetName
	toSerialize["metricType"] = o.MetricType
	if !IsNil(o.MetricUnit) {
		toSerialize["metricUnit"] = o.MetricUnit
	}
	toSerialize["objectKeyName"] = o.ObjectKeyName
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !IsNil(o.ObjectTypeNameEng) {
		toSerialize["objectTypeNameEng"] = o.ObjectTypeNameEng
	}
	if !IsNil(o.ObjectTypeNameLoc) {
		toSerialize["objectTypeNameLoc"] = o.ObjectTypeNameLoc
	}
	toSerialize["perfTitle"] = o.PerfTitle
	if !IsNil(o.ProductTargetType) {
		toSerialize["productTargetType"] = o.ProductTargetType
	}
	if !IsNil(o.ProductTargetTypeEn) {
		toSerialize["productTargetTypeEn"] = o.ProductTargetTypeEn
	}
	toSerialize["productTypeCode"] = o.ProductTypeCode
	toSerialize["productTypeName"] = o.ProductTypeName
	return toSerialize, nil
}

func (o *MetricInfoDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isLogMetric",
		"isObjectExist",
		"metricKey",
		"metricName",
		"metricSetKey",
		"metricSetName",
		"metricType",
		"objectKeyName",
		"perfTitle",
		"productTypeCode",
		"productTypeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetricInfoDto := _MetricInfoDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetricInfoDto)

	if err != nil {
		return err
	}

	*o = MetricInfoDto(varMetricInfoDto)

	return err
}

type NullableMetricInfoDto struct {
	value *MetricInfoDto
	isSet bool
}

func (v NullableMetricInfoDto) Get() *MetricInfoDto {
	return v.value
}

func (v *NullableMetricInfoDto) Set(val *MetricInfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricInfoDto(val *MetricInfoDto) *NullableMetricInfoDto {
	return &NullableMetricInfoDto{value: val, isSet: true}
}

func (v NullableMetricInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
