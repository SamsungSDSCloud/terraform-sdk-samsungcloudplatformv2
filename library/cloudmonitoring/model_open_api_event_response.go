/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OpenApiEventResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenApiEventResponse{}

// OpenApiEventResponse 이벤트 응답 전송 객체
type OpenApiEventResponse struct {
	// 이벤트 지속 시간 - 단위: 초
	DurationSecond int64 `json:"durationSecond"`
	// 종료일시
	EndDt *time.Time `json:"endDt,omitempty"`
	// 이벤트 아이디
	EventId string `json:"eventId"`
	// 이벤트 레벨
	EventLevel string `json:"eventLevel"`
	// 이벤트 메시지
	EventMessage string `json:"eventMessage"`
	// 이벤트 정책 아이디
	EventPolicyId int64 `json:"eventPolicyId"`
	// Event State
	EventState string `json:"eventState"`
	// 메트릭 키
	MetricKey string `json:"metricKey"`
	// 메트릭 이름
	MetricName string `json:"metricName"`
	// 오브젝트 이름
	ObjectDisplayName *string `json:"objectDisplayName,omitempty"`
	// 오브젝트 이름
	ObjectName *string `json:"objectName,omitempty"`
	// 개별항목 유형
	ObjectType *string `json:"objectType,omitempty"`
	// 개별항목 유형 이름
	ObjectTypeName *string `json:"objectTypeName,omitempty"`
	// 상품 리소스 아이디
	ProductResourceId string `json:"productResourceId"`
	// 메트릭 대상 유형
	ProductTargetType *string `json:"productTargetType,omitempty"`
	// 메트릭 대상 유형
	ProductTargetTypeEn *string `json:"productTargetTypeEn,omitempty"`
	// 상품 유형 이름
	ProductTypeName string `json:"productTypeName"`
	// 시작일시
	StartDt time.Time `json:"startDt"`
}

type _OpenApiEventResponse OpenApiEventResponse

// NewOpenApiEventResponse instantiates a new OpenApiEventResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenApiEventResponse(durationSecond int64, eventId string, eventLevel string, eventMessage string, eventPolicyId int64, eventState string, metricKey string, metricName string, productResourceId string, productTypeName string, startDt time.Time) *OpenApiEventResponse {
	this := OpenApiEventResponse{}
	this.DurationSecond = durationSecond
	this.EventId = eventId
	this.EventLevel = eventLevel
	this.EventMessage = eventMessage
	this.EventPolicyId = eventPolicyId
	this.EventState = eventState
	this.MetricKey = metricKey
	this.MetricName = metricName
	this.ProductResourceId = productResourceId
	this.ProductTypeName = productTypeName
	this.StartDt = startDt
	return &this
}

// NewOpenApiEventResponseWithDefaults instantiates a new OpenApiEventResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenApiEventResponseWithDefaults() *OpenApiEventResponse {
	this := OpenApiEventResponse{}
	return &this
}

// GetDurationSecond returns the DurationSecond field value
func (o *OpenApiEventResponse) GetDurationSecond() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DurationSecond
}

// GetDurationSecondOk returns a tuple with the DurationSecond field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetDurationSecondOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationSecond, true
}

// SetDurationSecond sets field value
func (o *OpenApiEventResponse) SetDurationSecond(v int64) {
	o.DurationSecond = v
}

// GetEndDt returns the EndDt field value if set, zero value otherwise.
func (o *OpenApiEventResponse) GetEndDt() time.Time {
	if o == nil || IsNil(o.EndDt) {
		var ret time.Time
		return ret
	}
	return *o.EndDt
}

// GetEndDtOk returns a tuple with the EndDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetEndDtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDt) {
		return nil, false
	}
	return o.EndDt, true
}

// HasEndDt returns a boolean if a field has been set.
func (o *OpenApiEventResponse) HasEndDt() bool {
	if o != nil && !IsNil(o.EndDt) {
		return true
	}

	return false
}

// SetEndDt gets a reference to the given time.Time and assigns it to the EndDt field.
func (o *OpenApiEventResponse) SetEndDt(v time.Time) {
	o.EndDt = &v
}

// GetEventId returns the EventId field value
func (o *OpenApiEventResponse) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *OpenApiEventResponse) SetEventId(v string) {
	o.EventId = v
}

// GetEventLevel returns the EventLevel field value
func (o *OpenApiEventResponse) GetEventLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventLevel
}

// GetEventLevelOk returns a tuple with the EventLevel field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetEventLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventLevel, true
}

// SetEventLevel sets field value
func (o *OpenApiEventResponse) SetEventLevel(v string) {
	o.EventLevel = v
}

// GetEventMessage returns the EventMessage field value
func (o *OpenApiEventResponse) GetEventMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventMessage
}

// GetEventMessageOk returns a tuple with the EventMessage field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetEventMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventMessage, true
}

// SetEventMessage sets field value
func (o *OpenApiEventResponse) SetEventMessage(v string) {
	o.EventMessage = v
}

// GetEventPolicyId returns the EventPolicyId field value
func (o *OpenApiEventResponse) GetEventPolicyId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EventPolicyId
}

// GetEventPolicyIdOk returns a tuple with the EventPolicyId field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetEventPolicyIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventPolicyId, true
}

// SetEventPolicyId sets field value
func (o *OpenApiEventResponse) SetEventPolicyId(v int64) {
	o.EventPolicyId = v
}

// GetEventState returns the EventState field value
func (o *OpenApiEventResponse) GetEventState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventState
}

// GetEventStateOk returns a tuple with the EventState field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetEventStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventState, true
}

// SetEventState sets field value
func (o *OpenApiEventResponse) SetEventState(v string) {
	o.EventState = v
}

// GetMetricKey returns the MetricKey field value
func (o *OpenApiEventResponse) GetMetricKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetMetricKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricKey, true
}

// SetMetricKey sets field value
func (o *OpenApiEventResponse) SetMetricKey(v string) {
	o.MetricKey = v
}

// GetMetricName returns the MetricName field value
func (o *OpenApiEventResponse) GetMetricName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetricName, true
}

// SetMetricName sets field value
func (o *OpenApiEventResponse) SetMetricName(v string) {
	o.MetricName = v
}

// GetObjectDisplayName returns the ObjectDisplayName field value if set, zero value otherwise.
func (o *OpenApiEventResponse) GetObjectDisplayName() string {
	if o == nil || IsNil(o.ObjectDisplayName) {
		var ret string
		return ret
	}
	return *o.ObjectDisplayName
}

// GetObjectDisplayNameOk returns a tuple with the ObjectDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetObjectDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectDisplayName) {
		return nil, false
	}
	return o.ObjectDisplayName, true
}

// HasObjectDisplayName returns a boolean if a field has been set.
func (o *OpenApiEventResponse) HasObjectDisplayName() bool {
	if o != nil && !IsNil(o.ObjectDisplayName) {
		return true
	}

	return false
}

// SetObjectDisplayName gets a reference to the given string and assigns it to the ObjectDisplayName field.
func (o *OpenApiEventResponse) SetObjectDisplayName(v string) {
	o.ObjectDisplayName = &v
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise.
func (o *OpenApiEventResponse) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName) {
		var ret string
		return ret
	}
	return *o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetObjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectName) {
		return nil, false
	}
	return o.ObjectName, true
}

// HasObjectName returns a boolean if a field has been set.
func (o *OpenApiEventResponse) HasObjectName() bool {
	if o != nil && !IsNil(o.ObjectName) {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given string and assigns it to the ObjectName field.
func (o *OpenApiEventResponse) SetObjectName(v string) {
	o.ObjectName = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *OpenApiEventResponse) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *OpenApiEventResponse) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *OpenApiEventResponse) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetObjectTypeName returns the ObjectTypeName field value if set, zero value otherwise.
func (o *OpenApiEventResponse) GetObjectTypeName() string {
	if o == nil || IsNil(o.ObjectTypeName) {
		var ret string
		return ret
	}
	return *o.ObjectTypeName
}

// GetObjectTypeNameOk returns a tuple with the ObjectTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetObjectTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectTypeName) {
		return nil, false
	}
	return o.ObjectTypeName, true
}

// HasObjectTypeName returns a boolean if a field has been set.
func (o *OpenApiEventResponse) HasObjectTypeName() bool {
	if o != nil && !IsNil(o.ObjectTypeName) {
		return true
	}

	return false
}

// SetObjectTypeName gets a reference to the given string and assigns it to the ObjectTypeName field.
func (o *OpenApiEventResponse) SetObjectTypeName(v string) {
	o.ObjectTypeName = &v
}

// GetProductResourceId returns the ProductResourceId field value
func (o *OpenApiEventResponse) GetProductResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductResourceId
}

// GetProductResourceIdOk returns a tuple with the ProductResourceId field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetProductResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductResourceId, true
}

// SetProductResourceId sets field value
func (o *OpenApiEventResponse) SetProductResourceId(v string) {
	o.ProductResourceId = v
}

// GetProductTargetType returns the ProductTargetType field value if set, zero value otherwise.
func (o *OpenApiEventResponse) GetProductTargetType() string {
	if o == nil || IsNil(o.ProductTargetType) {
		var ret string
		return ret
	}
	return *o.ProductTargetType
}

// GetProductTargetTypeOk returns a tuple with the ProductTargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetProductTargetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTargetType) {
		return nil, false
	}
	return o.ProductTargetType, true
}

// HasProductTargetType returns a boolean if a field has been set.
func (o *OpenApiEventResponse) HasProductTargetType() bool {
	if o != nil && !IsNil(o.ProductTargetType) {
		return true
	}

	return false
}

// SetProductTargetType gets a reference to the given string and assigns it to the ProductTargetType field.
func (o *OpenApiEventResponse) SetProductTargetType(v string) {
	o.ProductTargetType = &v
}

// GetProductTargetTypeEn returns the ProductTargetTypeEn field value if set, zero value otherwise.
func (o *OpenApiEventResponse) GetProductTargetTypeEn() string {
	if o == nil || IsNil(o.ProductTargetTypeEn) {
		var ret string
		return ret
	}
	return *o.ProductTargetTypeEn
}

// GetProductTargetTypeEnOk returns a tuple with the ProductTargetTypeEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetProductTargetTypeEnOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTargetTypeEn) {
		return nil, false
	}
	return o.ProductTargetTypeEn, true
}

// HasProductTargetTypeEn returns a boolean if a field has been set.
func (o *OpenApiEventResponse) HasProductTargetTypeEn() bool {
	if o != nil && !IsNil(o.ProductTargetTypeEn) {
		return true
	}

	return false
}

// SetProductTargetTypeEn gets a reference to the given string and assigns it to the ProductTargetTypeEn field.
func (o *OpenApiEventResponse) SetProductTargetTypeEn(v string) {
	o.ProductTargetTypeEn = &v
}

// GetProductTypeName returns the ProductTypeName field value
func (o *OpenApiEventResponse) GetProductTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeName
}

// GetProductTypeNameOk returns a tuple with the ProductTypeName field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetProductTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeName, true
}

// SetProductTypeName sets field value
func (o *OpenApiEventResponse) SetProductTypeName(v string) {
	o.ProductTypeName = v
}

// GetStartDt returns the StartDt field value
func (o *OpenApiEventResponse) GetStartDt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDt
}

// GetStartDtOk returns a tuple with the StartDt field value
// and a boolean to check if the value has been set.
func (o *OpenApiEventResponse) GetStartDtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDt, true
}

// SetStartDt sets field value
func (o *OpenApiEventResponse) SetStartDt(v time.Time) {
	o.StartDt = v
}

func (o OpenApiEventResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenApiEventResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["durationSecond"] = o.DurationSecond
	if !IsNil(o.EndDt) {
		toSerialize["endDt"] = o.EndDt
	}
	toSerialize["eventId"] = o.EventId
	toSerialize["eventLevel"] = o.EventLevel
	toSerialize["eventMessage"] = o.EventMessage
	toSerialize["eventPolicyId"] = o.EventPolicyId
	toSerialize["eventState"] = o.EventState
	toSerialize["metricKey"] = o.MetricKey
	toSerialize["metricName"] = o.MetricName
	if !IsNil(o.ObjectDisplayName) {
		toSerialize["objectDisplayName"] = o.ObjectDisplayName
	}
	if !IsNil(o.ObjectName) {
		toSerialize["objectName"] = o.ObjectName
	}
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !IsNil(o.ObjectTypeName) {
		toSerialize["objectTypeName"] = o.ObjectTypeName
	}
	toSerialize["productResourceId"] = o.ProductResourceId
	if !IsNil(o.ProductTargetType) {
		toSerialize["productTargetType"] = o.ProductTargetType
	}
	if !IsNil(o.ProductTargetTypeEn) {
		toSerialize["productTargetTypeEn"] = o.ProductTargetTypeEn
	}
	toSerialize["productTypeName"] = o.ProductTypeName
	toSerialize["startDt"] = o.StartDt
	return toSerialize, nil
}

func (o *OpenApiEventResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"durationSecond",
		"eventId",
		"eventLevel",
		"eventMessage",
		"eventPolicyId",
		"eventState",
		"metricKey",
		"metricName",
		"productResourceId",
		"productTypeName",
		"startDt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenApiEventResponse := _OpenApiEventResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenApiEventResponse)

	if err != nil {
		return err
	}

	*o = OpenApiEventResponse(varOpenApiEventResponse)

	return err
}

type NullableOpenApiEventResponse struct {
	value *OpenApiEventResponse
	isSet bool
}

func (v NullableOpenApiEventResponse) Get() *OpenApiEventResponse {
	return v.value
}

func (v *NullableOpenApiEventResponse) Set(val *OpenApiEventResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenApiEventResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenApiEventResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenApiEventResponse(val *OpenApiEventResponse) *NullableOpenApiEventResponse {
	return &NullableOpenApiEventResponse{value: val, isSet: true}
}

func (v NullableOpenApiEventResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenApiEventResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
