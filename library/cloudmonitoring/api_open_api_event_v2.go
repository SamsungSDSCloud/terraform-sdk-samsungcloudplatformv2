/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// OpenAPIEventV2APIService OpenAPIEventV2API service
type OpenAPIEventV2APIService service

type OpenAPIEventV2APIGetAccountEventListRequest struct {
	ctx          context.Context
	ApiService   *OpenAPIEventV2APIService
	eventState   *string
	queryStartDt *string
	queryEndDt   *string
	page         *int32
	size         *int32
	sort         *[]string
}

// Event State
func (r OpenAPIEventV2APIGetAccountEventListRequest) EventState(eventState string) OpenAPIEventV2APIGetAccountEventListRequest {
	r.eventState = &eventState
	return r
}

// Query Start Date
func (r OpenAPIEventV2APIGetAccountEventListRequest) QueryStartDt(queryStartDt string) OpenAPIEventV2APIGetAccountEventListRequest {
	r.queryStartDt = &queryStartDt
	return r
}

// Query End Date
func (r OpenAPIEventV2APIGetAccountEventListRequest) QueryEndDt(queryEndDt string) OpenAPIEventV2APIGetAccountEventListRequest {
	r.queryEndDt = &queryEndDt
	return r
}

// Page Number (default: 0)
func (r OpenAPIEventV2APIGetAccountEventListRequest) Page(page int32) OpenAPIEventV2APIGetAccountEventListRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIEventV2APIGetAccountEventListRequest) Size(size int32) OpenAPIEventV2APIGetAccountEventListRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIEventV2APIGetAccountEventListRequest) Sort(sort []string) OpenAPIEventV2APIGetAccountEventListRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIEventV2APIGetAccountEventListRequest) Execute() (*PageResponseOpenApiEventResponse, *http.Response, error) {
	return r.ApiService.GetAccountEventListExecute(r)
}

/*
GetAccountEventList ListAccountEvents

Search Account Event List

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OpenAPIEventV2APIGetAccountEventListRequest
*/
func (a *OpenAPIEventV2APIService) GetAccountEventList(ctx context.Context) OpenAPIEventV2APIGetAccountEventListRequest {
	return OpenAPIEventV2APIGetAccountEventListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PageResponseOpenApiEventResponse
func (a *OpenAPIEventV2APIService) GetAccountEventListExecute(r OpenAPIEventV2APIGetAccountEventListRequest) (*PageResponseOpenApiEventResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseOpenApiEventResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/accounts/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventState == nil {
		return localVarReturnValue, nil, reportError("eventState is required and must be specified")
	}
	if r.queryStartDt == nil {
		return localVarReturnValue, nil, reportError("queryStartDt is required and must be specified")
	}
	if r.queryEndDt == nil {
		return localVarReturnValue, nil, reportError("queryEndDt is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "eventState", r.eventState, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "queryStartDt", r.queryStartDt, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndDt", r.queryEndDt, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventV2APIGetEventDetailRequest struct {
	ctx           context.Context
	ApiService    *OpenAPIEventV2APIService
	eventId       string
	xResourceType *string
}

// Resource Type
func (r OpenAPIEventV2APIGetEventDetailRequest) XResourceType(xResourceType string) OpenAPIEventV2APIGetEventDetailRequest {
	r.xResourceType = &xResourceType
	return r
}

func (r OpenAPIEventV2APIGetEventDetailRequest) Execute() (*EventDetailResponse, *http.Response, error) {
	return r.ApiService.GetEventDetailExecute(r)
}

/*
GetEventDetail ShowResourceEvent

Show Resource Event

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventId Event ID - Event ID can be viewed using @[ListResourceEvents].
	@return OpenAPIEventV2APIGetEventDetailRequest
*/
func (a *OpenAPIEventV2APIService) GetEventDetail(ctx context.Context, eventId string) OpenAPIEventV2APIGetEventDetailRequest {
	return OpenAPIEventV2APIGetEventDetailRequest{
		ApiService: a,
		ctx:        ctx,
		eventId:    eventId,
	}
}

// Execute executes the request
//
//	@return EventDetailResponse
func (a *OpenAPIEventV2APIService) GetEventDetailExecute(r OpenAPIEventV2APIGetEventDetailRequest) (*EventDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventDetailResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/events/{eventId}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventId"+"}", url.PathEscape(parameterValueToString(r.eventId, "eventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventV2APIGetEventNotificationStatesRequest struct {
	ctx           context.Context
	ApiService    *OpenAPIEventV2APIService
	eventId       string
	xResourceType *string
	page          *int32
	size          *int32
	sort          *[]string
}

// Resource Type
func (r OpenAPIEventV2APIGetEventNotificationStatesRequest) XResourceType(xResourceType string) OpenAPIEventV2APIGetEventNotificationStatesRequest {
	r.xResourceType = &xResourceType
	return r
}

// Page Number (default: 0)
func (r OpenAPIEventV2APIGetEventNotificationStatesRequest) Page(page int32) OpenAPIEventV2APIGetEventNotificationStatesRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIEventV2APIGetEventNotificationStatesRequest) Size(size int32) OpenAPIEventV2APIGetEventNotificationStatesRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIEventV2APIGetEventNotificationStatesRequest) Sort(sort []string) OpenAPIEventV2APIGetEventNotificationStatesRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIEventV2APIGetEventNotificationStatesRequest) Execute() (*PageResponseEventNotificationResponse, *http.Response, error) {
	return r.ApiService.GetEventNotificationStatesExecute(r)
}

/*
GetEventNotificationStates ShowEventNotificationStates

Search Event Notification States

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventId Event ID - Event ID can be viewed using @[ListResourceEvents].
	@return OpenAPIEventV2APIGetEventNotificationStatesRequest
*/
func (a *OpenAPIEventV2APIService) GetEventNotificationStates(ctx context.Context, eventId string) OpenAPIEventV2APIGetEventNotificationStatesRequest {
	return OpenAPIEventV2APIGetEventNotificationStatesRequest{
		ApiService: a,
		ctx:        ctx,
		eventId:    eventId,
	}
}

// Execute executes the request
//
//	@return PageResponseEventNotificationResponse
func (a *OpenAPIEventV2APIService) GetEventNotificationStatesExecute(r OpenAPIEventV2APIGetEventNotificationStatesRequest) (*PageResponseEventNotificationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseEventNotificationResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/events/{eventId}/notification-states"
	localVarPath = strings.Replace(localVarPath, "{"+"eventId"+"}", url.PathEscape(parameterValueToString(r.eventId, "eventId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventV2APIGetProductEventListRequest struct {
	ctx               context.Context
	ApiService        *OpenAPIEventV2APIService
	productResourceId *string
	eventState        *string
	queryStartDt      *string
	queryEndDt        *string
	xResourceType     *string
	metricKey         *string
	page              *int32
	size              *int32
	sort              *[]string
}

// Product Resource ID - Product Resource ID can be viewed using @[ListAccountResources].
func (r OpenAPIEventV2APIGetProductEventListRequest) ProductResourceId(productResourceId string) OpenAPIEventV2APIGetProductEventListRequest {
	r.productResourceId = &productResourceId
	return r
}

// Event State
func (r OpenAPIEventV2APIGetProductEventListRequest) EventState(eventState string) OpenAPIEventV2APIGetProductEventListRequest {
	r.eventState = &eventState
	return r
}

// Query Start Date
func (r OpenAPIEventV2APIGetProductEventListRequest) QueryStartDt(queryStartDt string) OpenAPIEventV2APIGetProductEventListRequest {
	r.queryStartDt = &queryStartDt
	return r
}

// Query End Date
func (r OpenAPIEventV2APIGetProductEventListRequest) QueryEndDt(queryEndDt string) OpenAPIEventV2APIGetProductEventListRequest {
	r.queryEndDt = &queryEndDt
	return r
}

// Resource Type
func (r OpenAPIEventV2APIGetProductEventListRequest) XResourceType(xResourceType string) OpenAPIEventV2APIGetProductEventListRequest {
	r.xResourceType = &xResourceType
	return r
}

// Metric Key - Metric Key can be viewed using @[ListMetrics].
func (r OpenAPIEventV2APIGetProductEventListRequest) MetricKey(metricKey string) OpenAPIEventV2APIGetProductEventListRequest {
	r.metricKey = &metricKey
	return r
}

// Page Number (default: 0)
func (r OpenAPIEventV2APIGetProductEventListRequest) Page(page int32) OpenAPIEventV2APIGetProductEventListRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIEventV2APIGetProductEventListRequest) Size(size int32) OpenAPIEventV2APIGetProductEventListRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIEventV2APIGetProductEventListRequest) Sort(sort []string) OpenAPIEventV2APIGetProductEventListRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIEventV2APIGetProductEventListRequest) Execute() (*PageResponseOpenApiEventResponse, *http.Response, error) {
	return r.ApiService.GetProductEventListExecute(r)
}

/*
GetProductEventList ListResourceEvents

Search a list of events that occurred on a product resource.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OpenAPIEventV2APIGetProductEventListRequest
*/
func (a *OpenAPIEventV2APIService) GetProductEventList(ctx context.Context) OpenAPIEventV2APIGetProductEventListRequest {
	return OpenAPIEventV2APIGetProductEventListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PageResponseOpenApiEventResponse
func (a *OpenAPIEventV2APIService) GetProductEventListExecute(r OpenAPIEventV2APIGetProductEventListRequest) (*PageResponseOpenApiEventResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseOpenApiEventResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productResourceId == nil {
		return localVarReturnValue, nil, reportError("productResourceId is required and must be specified")
	}
	if strlen(*r.productResourceId) < 0 {
		return localVarReturnValue, nil, reportError("productResourceId must have at least 0 elements")
	}
	if strlen(*r.productResourceId) > 1000 {
		return localVarReturnValue, nil, reportError("productResourceId must have less than 1000 elements")
	}
	if r.eventState == nil {
		return localVarReturnValue, nil, reportError("eventState is required and must be specified")
	}
	if r.queryStartDt == nil {
		return localVarReturnValue, nil, reportError("queryStartDt is required and must be specified")
	}
	if r.queryEndDt == nil {
		return localVarReturnValue, nil, reportError("queryEndDt is required and must be specified")
	}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "productResourceId", r.productResourceId, "form", "")
	if r.metricKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metricKey", r.metricKey, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "eventState", r.eventState, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "queryStartDt", r.queryStartDt, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndDt", r.queryEndDt, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
