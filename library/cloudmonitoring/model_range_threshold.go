/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RangeThreshold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RangeThreshold{}

// RangeThreshold 이벤트 임계치 중 범위 임계치 정보 객체
type RangeThreshold struct {
	// 최대 비교 연산자
	MaxComparisonOperator string `json:"maxComparisonOperator"`
	// 최대 값
	MaxValue float64 `json:"maxValue"`
	// 최소 비교 연산자
	MinComparisonOperator string `json:"minComparisonOperator"`
	// 최소 값
	MinValue float64 `json:"minValue"`
}

type _RangeThreshold RangeThreshold

// NewRangeThreshold instantiates a new RangeThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRangeThreshold(maxComparisonOperator string, maxValue float64, minComparisonOperator string, minValue float64) *RangeThreshold {
	this := RangeThreshold{}
	this.MaxComparisonOperator = maxComparisonOperator
	this.MaxValue = maxValue
	this.MinComparisonOperator = minComparisonOperator
	this.MinValue = minValue
	return &this
}

// NewRangeThresholdWithDefaults instantiates a new RangeThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRangeThresholdWithDefaults() *RangeThreshold {
	this := RangeThreshold{}
	return &this
}

// GetMaxComparisonOperator returns the MaxComparisonOperator field value
func (o *RangeThreshold) GetMaxComparisonOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxComparisonOperator
}

// GetMaxComparisonOperatorOk returns a tuple with the MaxComparisonOperator field value
// and a boolean to check if the value has been set.
func (o *RangeThreshold) GetMaxComparisonOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxComparisonOperator, true
}

// SetMaxComparisonOperator sets field value
func (o *RangeThreshold) SetMaxComparisonOperator(v string) {
	o.MaxComparisonOperator = v
}

// GetMaxValue returns the MaxValue field value
func (o *RangeThreshold) GetMaxValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value
// and a boolean to check if the value has been set.
func (o *RangeThreshold) GetMaxValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxValue, true
}

// SetMaxValue sets field value
func (o *RangeThreshold) SetMaxValue(v float64) {
	o.MaxValue = v
}

// GetMinComparisonOperator returns the MinComparisonOperator field value
func (o *RangeThreshold) GetMinComparisonOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MinComparisonOperator
}

// GetMinComparisonOperatorOk returns a tuple with the MinComparisonOperator field value
// and a boolean to check if the value has been set.
func (o *RangeThreshold) GetMinComparisonOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinComparisonOperator, true
}

// SetMinComparisonOperator sets field value
func (o *RangeThreshold) SetMinComparisonOperator(v string) {
	o.MinComparisonOperator = v
}

// GetMinValue returns the MinValue field value
func (o *RangeThreshold) GetMinValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value
// and a boolean to check if the value has been set.
func (o *RangeThreshold) GetMinValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinValue, true
}

// SetMinValue sets field value
func (o *RangeThreshold) SetMinValue(v float64) {
	o.MinValue = v
}

func (o RangeThreshold) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RangeThreshold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maxComparisonOperator"] = o.MaxComparisonOperator
	toSerialize["maxValue"] = o.MaxValue
	toSerialize["minComparisonOperator"] = o.MinComparisonOperator
	toSerialize["minValue"] = o.MinValue
	return toSerialize, nil
}

func (o *RangeThreshold) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maxComparisonOperator",
		"maxValue",
		"minComparisonOperator",
		"minValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRangeThreshold := _RangeThreshold{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRangeThreshold)

	if err != nil {
		return err
	}

	*o = RangeThreshold(varRangeThreshold)

	return err
}

type NullableRangeThreshold struct {
	value *RangeThreshold
	isSet bool
}

func (v NullableRangeThreshold) Get() *RangeThreshold {
	return v.value
}

func (v *NullableRangeThreshold) Set(val *RangeThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableRangeThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableRangeThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRangeThreshold(val *RangeThreshold) *NullableRangeThreshold {
	return &NullableRangeThreshold{value: val, isSet: true}
}

func (v NullableRangeThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRangeThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
