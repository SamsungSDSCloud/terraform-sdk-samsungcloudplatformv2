/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// OpenAPIEventPolicyV2APIService OpenAPIEventPolicyV2API service
type OpenAPIEventPolicyV2APIService service

type OpenAPIEventPolicyV2APIDeleteEventPolicyRequest struct {
	ctx           context.Context
	ApiService    *OpenAPIEventPolicyV2APIService
	eventPolicyId int64
	xResourceType *string
}

// Resource Type
func (r OpenAPIEventPolicyV2APIDeleteEventPolicyRequest) XResourceType(xResourceType string) OpenAPIEventPolicyV2APIDeleteEventPolicyRequest {
	r.xResourceType = &xResourceType
	return r
}

func (r OpenAPIEventPolicyV2APIDeleteEventPolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEventPolicyExecute(r)
}

/*
DeleteEventPolicy DeleteEventPolicy

Delete Event policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventPolicyId Event policy ID to delete - Event Policy ID can be viewed using @[ListEventPolicies].
	@return OpenAPIEventPolicyV2APIDeleteEventPolicyRequest
*/
func (a *OpenAPIEventPolicyV2APIService) DeleteEventPolicy(ctx context.Context, eventPolicyId int64) OpenAPIEventPolicyV2APIDeleteEventPolicyRequest {
	return OpenAPIEventPolicyV2APIDeleteEventPolicyRequest{
		ApiService:    a,
		ctx:           ctx,
		eventPolicyId: eventPolicyId,
	}
}

// Execute executes the request
func (a *OpenAPIEventPolicyV2APIService) DeleteEventPolicyExecute(r OpenAPIEventPolicyV2APIDeleteEventPolicyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/event-policies/{eventPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventPolicyId"+"}", url.PathEscape(parameterValueToString(r.eventPolicyId, "eventPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xResourceType == nil {
		return nil, reportError("xResourceType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest struct {
	ctx           context.Context
	ApiService    *OpenAPIEventPolicyV2APIService
	eventPolicyId int64
	xResourceType *string
}

// Resource Type
func (r OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest) XResourceType(xResourceType string) OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest {
	r.xResourceType = &xResourceType
	return r
}

func (r OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest) Execute() (*EventPolicyDetailResponse, *http.Response, error) {
	return r.ApiService.GetEventPolicyDetailExecute(r)
}

/*
GetEventPolicyDetail ShowEventPolicy

Show Event Policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventPolicyId Event Policy ID to inquire - Event Policy ID can be viewed using @[ListEventPolicies].
	@return OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest
*/
func (a *OpenAPIEventPolicyV2APIService) GetEventPolicyDetail(ctx context.Context, eventPolicyId int64) OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest {
	return OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest{
		ApiService:    a,
		ctx:           ctx,
		eventPolicyId: eventPolicyId,
	}
}

// Execute executes the request
//
//	@return EventPolicyDetailResponse
func (a *OpenAPIEventPolicyV2APIService) GetEventPolicyDetailExecute(r OpenAPIEventPolicyV2APIGetEventPolicyDetailRequest) (*EventPolicyDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventPolicyDetailResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/event-policies/{eventPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventPolicyId"+"}", url.PathEscape(parameterValueToString(r.eventPolicyId, "eventPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventPolicyId < 1 {
		return localVarReturnValue, nil, reportError("eventPolicyId must be greater than 1")
	}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest struct {
	ctx           context.Context
	ApiService    *OpenAPIEventPolicyV2APIService
	eventPolicyId int64
	queryStartDt  *string
	queryEndDt    *string
	xResourceType *string
	page          *int32
	size          *int32
	sort          *[]string
}

// Query Start Date
func (r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) QueryStartDt(queryStartDt string) OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest {
	r.queryStartDt = &queryStartDt
	return r
}

// Query End Date
func (r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) QueryEndDt(queryEndDt string) OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest {
	r.queryEndDt = &queryEndDt
	return r
}

// Resource Type
func (r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) XResourceType(xResourceType string) OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest {
	r.xResourceType = &xResourceType
	return r
}

// Page Number (default: 0)
func (r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) Page(page int32) OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) Size(size int32) OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) Sort(sort []string) OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) Execute() (*PageResponseEventPolicyHistoryResponse, *http.Response, error) {
	return r.ApiService.GetEventPolicyHistoriesExecute(r)
}

/*
GetEventPolicyHistories ListEventPolicyHistories

Search event policy histories

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventPolicyId Event Policy ID to inquire - Event Policy ID can be viewed using @[ListEventPolicies].
	@return OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest
*/
func (a *OpenAPIEventPolicyV2APIService) GetEventPolicyHistories(ctx context.Context, eventPolicyId int64) OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest {
	return OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest{
		ApiService:    a,
		ctx:           ctx,
		eventPolicyId: eventPolicyId,
	}
}

// Execute executes the request
//
//	@return PageResponseEventPolicyHistoryResponse
func (a *OpenAPIEventPolicyV2APIService) GetEventPolicyHistoriesExecute(r OpenAPIEventPolicyV2APIGetEventPolicyHistoriesRequest) (*PageResponseEventPolicyHistoryResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseEventPolicyHistoryResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/event-policies/{eventPolicyId}/histories"
	localVarPath = strings.Replace(localVarPath, "{"+"eventPolicyId"+"}", url.PathEscape(parameterValueToString(r.eventPolicyId, "eventPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventPolicyId < 1 {
		return localVarReturnValue, nil, reportError("eventPolicyId must be greater than 1")
	}
	if r.queryStartDt == nil {
		return localVarReturnValue, nil, reportError("queryStartDt is required and must be specified")
	}
	if r.queryEndDt == nil {
		return localVarReturnValue, nil, reportError("queryEndDt is required and must be specified")
	}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "queryStartDt", r.queryStartDt, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "queryEndDt", r.queryEndDt, "form", "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest struct {
	ctx           context.Context
	ApiService    *OpenAPIEventPolicyV2APIService
	eventPolicyId int64
	xResourceType *string
	page          *int32
	size          *int32
	sort          *[]string
}

// Resource Type
func (r OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest) XResourceType(xResourceType string) OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest {
	r.xResourceType = &xResourceType
	return r
}

// Page Number (default: 0)
func (r OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest) Page(page int32) OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest) Size(size int32) OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest) Sort(sort []string) OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest) Execute() (*PageResponseNotificationResponse, *http.Response, error) {
	return r.ApiService.GetEventPolicyNotificationExecute(r)
}

/*
GetEventPolicyNotification ListEventPolicyNotification

Search Event Policy Notification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventPolicyId Event Policy ID to inquire - Event Policy ID can be viewed using @[ListEventPolicies].
	@return OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest
*/
func (a *OpenAPIEventPolicyV2APIService) GetEventPolicyNotification(ctx context.Context, eventPolicyId int64) OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest {
	return OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest{
		ApiService:    a,
		ctx:           ctx,
		eventPolicyId: eventPolicyId,
	}
}

// Execute executes the request
//
//	@return PageResponseNotificationResponse
func (a *OpenAPIEventPolicyV2APIService) GetEventPolicyNotificationExecute(r OpenAPIEventPolicyV2APIGetEventPolicyNotificationRequest) (*PageResponseNotificationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseNotificationResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/event-policies/{eventPolicyId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"eventPolicyId"+"}", url.PathEscape(parameterValueToString(r.eventPolicyId, "eventPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest struct {
	ctx               context.Context
	ApiService        *OpenAPIEventPolicyV2APIService
	productResourceId *string
	xResourceType     *string
	metricKey         *string
	page              *int32
	size              *int32
	sort              *[]string
}

// Product Resource ID - Product Resource ID can be viewed using @[ListAccountResources].
func (r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) ProductResourceId(productResourceId string) OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest {
	r.productResourceId = &productResourceId
	return r
}

// Resource Type
func (r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) XResourceType(xResourceType string) OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest {
	r.xResourceType = &xResourceType
	return r
}

// Metric Key - Metric Key can be viewed using @[ListMetrics].
func (r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) MetricKey(metricKey string) OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest {
	r.metricKey = &metricKey
	return r
}

// Page Number (default: 0)
func (r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) Page(page int32) OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest {
	r.page = &page
	return r
}

// Page Contents Size (default: 10)
func (r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) Size(size int32) OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest {
	r.size = &size
	return r
}

// Sorting Field List
func (r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) Sort(sort []string) OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest {
	r.sort = &sort
	return r
}

func (r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) Execute() (*PageResponseEventPolicyResponse, *http.Response, error) {
	return r.ApiService.GetProductEventPolicyListExecute(r)
}

/*
GetProductEventPolicyList ListEventPolicies

Search Event Policies

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest
*/
func (a *OpenAPIEventPolicyV2APIService) GetProductEventPolicyList(ctx context.Context) OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest {
	return OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PageResponseEventPolicyResponse
func (a *OpenAPIEventPolicyV2APIService) GetProductEventPolicyListExecute(r OpenAPIEventPolicyV2APIGetProductEventPolicyListRequest) (*PageResponseEventPolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageResponseEventPolicyResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/event-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productResourceId == nil {
		return localVarReturnValue, nil, reportError("productResourceId is required and must be specified")
	}
	if strlen(*r.productResourceId) < 0 {
		return localVarReturnValue, nil, reportError("productResourceId must have at least 0 elements")
	}
	if strlen(*r.productResourceId) > 1000 {
		return localVarReturnValue, nil, reportError("productResourceId must have less than 1000 elements")
	}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "productResourceId", r.productResourceId, "form", "")
	if r.metricKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metricKey", r.metricKey, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventPolicyV2APIModifyEventPolicyRequest struct {
	ctx                      context.Context
	ApiService               *OpenAPIEventPolicyV2APIService
	eventPolicyId            int64
	xResourceType            *string
	eventPolicyUpdateRequest *EventPolicyUpdateRequest
}

// Resource Type
func (r OpenAPIEventPolicyV2APIModifyEventPolicyRequest) XResourceType(xResourceType string) OpenAPIEventPolicyV2APIModifyEventPolicyRequest {
	r.xResourceType = &xResourceType
	return r
}

func (r OpenAPIEventPolicyV2APIModifyEventPolicyRequest) EventPolicyUpdateRequest(eventPolicyUpdateRequest EventPolicyUpdateRequest) OpenAPIEventPolicyV2APIModifyEventPolicyRequest {
	r.eventPolicyUpdateRequest = &eventPolicyUpdateRequest
	return r
}

func (r OpenAPIEventPolicyV2APIModifyEventPolicyRequest) Execute() (*EventPolicyDetailResponse, *http.Response, error) {
	return r.ApiService.ModifyEventPolicyExecute(r)
}

/*
ModifyEventPolicy SetEventPolicy

Set Event Policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param eventPolicyId Event policy ID to modify - Event Policy ID can be viewed using @[ListEventPolicies].
	@return OpenAPIEventPolicyV2APIModifyEventPolicyRequest
*/
func (a *OpenAPIEventPolicyV2APIService) ModifyEventPolicy(ctx context.Context, eventPolicyId int64) OpenAPIEventPolicyV2APIModifyEventPolicyRequest {
	return OpenAPIEventPolicyV2APIModifyEventPolicyRequest{
		ApiService:    a,
		ctx:           ctx,
		eventPolicyId: eventPolicyId,
	}
}

// Execute executes the request
//
//	@return EventPolicyDetailResponse
func (a *OpenAPIEventPolicyV2APIService) ModifyEventPolicyExecute(r OpenAPIEventPolicyV2APIModifyEventPolicyRequest) (*EventPolicyDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventPolicyDetailResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/event-policies/{eventPolicyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"eventPolicyId"+"}", url.PathEscape(parameterValueToString(r.eventPolicyId, "eventPolicyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eventPolicyId < 1 {
		return localVarReturnValue, nil, reportError("eventPolicyId must be greater than 1")
	}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}
	if r.eventPolicyUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("eventPolicyUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	// body params
	localVarPostBody = r.eventPolicyUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OpenAPIEventPolicyV2APIPutEventPolicyRequest struct {
	ctx                      context.Context
	ApiService               *OpenAPIEventPolicyV2APIService
	xResourceType            *string
	eventPolicyCreateRequest *EventPolicyCreateRequest
}

// Resource Type
func (r OpenAPIEventPolicyV2APIPutEventPolicyRequest) XResourceType(xResourceType string) OpenAPIEventPolicyV2APIPutEventPolicyRequest {
	r.xResourceType = &xResourceType
	return r
}

func (r OpenAPIEventPolicyV2APIPutEventPolicyRequest) EventPolicyCreateRequest(eventPolicyCreateRequest EventPolicyCreateRequest) OpenAPIEventPolicyV2APIPutEventPolicyRequest {
	r.eventPolicyCreateRequest = &eventPolicyCreateRequest
	return r
}

func (r OpenAPIEventPolicyV2APIPutEventPolicyRequest) Execute() (*EventPolicyDetailResponse, *http.Response, error) {
	return r.ApiService.PutEventPolicyExecute(r)
}

/*
PutEventPolicy CreateEventPolicy

Create Event Policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return OpenAPIEventPolicyV2APIPutEventPolicyRequest
*/
func (a *OpenAPIEventPolicyV2APIService) PutEventPolicy(ctx context.Context) OpenAPIEventPolicyV2APIPutEventPolicyRequest {
	return OpenAPIEventPolicyV2APIPutEventPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EventPolicyDetailResponse
func (a *OpenAPIEventPolicyV2APIService) PutEventPolicyExecute(r OpenAPIEventPolicyV2APIPutEventPolicyRequest) (*EventPolicyDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EventPolicyDetailResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/cloudmonitorings/event/v2/event-policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xResourceType == nil {
		return localVarReturnValue, nil, reportError("xResourceType is required and must be specified")
	}
	if r.eventPolicyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("eventPolicyCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "X-ResourceType", r.xResourceType, "simple", "")
	// body params
	localVarPostBody = r.eventPolicyCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
