/*
Nuri Monitoring service

Nuri Monitoring service

API version: Nuri
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudmonitoring

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AccountProductDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountProductDto{}

// AccountProductDto 프로젝트의 상품 정보 조회 시 응답을 전달하기 위한 객체
type AccountProductDto struct {
	// 프로젝트 아이디
	AccountId string `json:"accountId"`
	// 상품 삭제 일시
	EndDt *time.Time `json:"endDt,omitempty"`
	// 최종 이벤트 레벨
	LastEventLevel *string `json:"lastEventLevel,omitempty"`
	// 풀 이름
	PoolName *string `json:"poolName,omitempty"`
	// 상품 IP주소
	ProductIpAddress *string `json:"productIpAddress,omitempty"`
	// 상품 이름
	ProductName string `json:"productName"`
	// 상품 리소스 아이디
	ProductResourceId string `json:"productResourceId"`
	// 상품 상태 - 유효한 값 : Running, Down
	ProductState string `json:"productState"`
	// 상품 유형코드
	ProductTypeCode string `json:"productTypeCode"`
	// 상품 유형이름
	ProductTypeName string `json:"productTypeName"`
	// 상품 생성 일시
	StartDt time.Time `json:"startDt"`
}

type _AccountProductDto AccountProductDto

// NewAccountProductDto instantiates a new AccountProductDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountProductDto(accountId string, productName string, productResourceId string, productState string, productTypeCode string, productTypeName string, startDt time.Time) *AccountProductDto {
	this := AccountProductDto{}
	this.AccountId = accountId
	this.ProductName = productName
	this.ProductResourceId = productResourceId
	this.ProductState = productState
	this.ProductTypeCode = productTypeCode
	this.ProductTypeName = productTypeName
	this.StartDt = startDt
	return &this
}

// NewAccountProductDtoWithDefaults instantiates a new AccountProductDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountProductDtoWithDefaults() *AccountProductDto {
	this := AccountProductDto{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *AccountProductDto) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AccountProductDto) SetAccountId(v string) {
	o.AccountId = v
}

// GetEndDt returns the EndDt field value if set, zero value otherwise.
func (o *AccountProductDto) GetEndDt() time.Time {
	if o == nil || IsNil(o.EndDt) {
		var ret time.Time
		return ret
	}
	return *o.EndDt
}

// GetEndDtOk returns a tuple with the EndDt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetEndDtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDt) {
		return nil, false
	}
	return o.EndDt, true
}

// HasEndDt returns a boolean if a field has been set.
func (o *AccountProductDto) HasEndDt() bool {
	if o != nil && !IsNil(o.EndDt) {
		return true
	}

	return false
}

// SetEndDt gets a reference to the given time.Time and assigns it to the EndDt field.
func (o *AccountProductDto) SetEndDt(v time.Time) {
	o.EndDt = &v
}

// GetLastEventLevel returns the LastEventLevel field value if set, zero value otherwise.
func (o *AccountProductDto) GetLastEventLevel() string {
	if o == nil || IsNil(o.LastEventLevel) {
		var ret string
		return ret
	}
	return *o.LastEventLevel
}

// GetLastEventLevelOk returns a tuple with the LastEventLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetLastEventLevelOk() (*string, bool) {
	if o == nil || IsNil(o.LastEventLevel) {
		return nil, false
	}
	return o.LastEventLevel, true
}

// HasLastEventLevel returns a boolean if a field has been set.
func (o *AccountProductDto) HasLastEventLevel() bool {
	if o != nil && !IsNil(o.LastEventLevel) {
		return true
	}

	return false
}

// SetLastEventLevel gets a reference to the given string and assigns it to the LastEventLevel field.
func (o *AccountProductDto) SetLastEventLevel(v string) {
	o.LastEventLevel = &v
}

// GetPoolName returns the PoolName field value if set, zero value otherwise.
func (o *AccountProductDto) GetPoolName() string {
	if o == nil || IsNil(o.PoolName) {
		var ret string
		return ret
	}
	return *o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetPoolNameOk() (*string, bool) {
	if o == nil || IsNil(o.PoolName) {
		return nil, false
	}
	return o.PoolName, true
}

// HasPoolName returns a boolean if a field has been set.
func (o *AccountProductDto) HasPoolName() bool {
	if o != nil && !IsNil(o.PoolName) {
		return true
	}

	return false
}

// SetPoolName gets a reference to the given string and assigns it to the PoolName field.
func (o *AccountProductDto) SetPoolName(v string) {
	o.PoolName = &v
}

// GetProductIpAddress returns the ProductIpAddress field value if set, zero value otherwise.
func (o *AccountProductDto) GetProductIpAddress() string {
	if o == nil || IsNil(o.ProductIpAddress) {
		var ret string
		return ret
	}
	return *o.ProductIpAddress
}

// GetProductIpAddressOk returns a tuple with the ProductIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetProductIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ProductIpAddress) {
		return nil, false
	}
	return o.ProductIpAddress, true
}

// HasProductIpAddress returns a boolean if a field has been set.
func (o *AccountProductDto) HasProductIpAddress() bool {
	if o != nil && !IsNil(o.ProductIpAddress) {
		return true
	}

	return false
}

// SetProductIpAddress gets a reference to the given string and assigns it to the ProductIpAddress field.
func (o *AccountProductDto) SetProductIpAddress(v string) {
	o.ProductIpAddress = &v
}

// GetProductName returns the ProductName field value
func (o *AccountProductDto) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *AccountProductDto) SetProductName(v string) {
	o.ProductName = v
}

// GetProductResourceId returns the ProductResourceId field value
func (o *AccountProductDto) GetProductResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductResourceId
}

// GetProductResourceIdOk returns a tuple with the ProductResourceId field value
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetProductResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductResourceId, true
}

// SetProductResourceId sets field value
func (o *AccountProductDto) SetProductResourceId(v string) {
	o.ProductResourceId = v
}

// GetProductState returns the ProductState field value
func (o *AccountProductDto) GetProductState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductState
}

// GetProductStateOk returns a tuple with the ProductState field value
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetProductStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductState, true
}

// SetProductState sets field value
func (o *AccountProductDto) SetProductState(v string) {
	o.ProductState = v
}

// GetProductTypeCode returns the ProductTypeCode field value
func (o *AccountProductDto) GetProductTypeCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeCode
}

// GetProductTypeCodeOk returns a tuple with the ProductTypeCode field value
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetProductTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeCode, true
}

// SetProductTypeCode sets field value
func (o *AccountProductDto) SetProductTypeCode(v string) {
	o.ProductTypeCode = v
}

// GetProductTypeName returns the ProductTypeName field value
func (o *AccountProductDto) GetProductTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductTypeName
}

// GetProductTypeNameOk returns a tuple with the ProductTypeName field value
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetProductTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeName, true
}

// SetProductTypeName sets field value
func (o *AccountProductDto) SetProductTypeName(v string) {
	o.ProductTypeName = v
}

// GetStartDt returns the StartDt field value
func (o *AccountProductDto) GetStartDt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDt
}

// GetStartDtOk returns a tuple with the StartDt field value
// and a boolean to check if the value has been set.
func (o *AccountProductDto) GetStartDtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDt, true
}

// SetStartDt sets field value
func (o *AccountProductDto) SetStartDt(v time.Time) {
	o.StartDt = v
}

func (o AccountProductDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountProductDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accountId"] = o.AccountId
	if !IsNil(o.EndDt) {
		toSerialize["endDt"] = o.EndDt
	}
	if !IsNil(o.LastEventLevel) {
		toSerialize["lastEventLevel"] = o.LastEventLevel
	}
	if !IsNil(o.PoolName) {
		toSerialize["poolName"] = o.PoolName
	}
	if !IsNil(o.ProductIpAddress) {
		toSerialize["productIpAddress"] = o.ProductIpAddress
	}
	toSerialize["productName"] = o.ProductName
	toSerialize["productResourceId"] = o.ProductResourceId
	toSerialize["productState"] = o.ProductState
	toSerialize["productTypeCode"] = o.ProductTypeCode
	toSerialize["productTypeName"] = o.ProductTypeName
	toSerialize["startDt"] = o.StartDt
	return toSerialize, nil
}

func (o *AccountProductDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accountId",
		"productName",
		"productResourceId",
		"productState",
		"productTypeCode",
		"productTypeName",
		"startDt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountProductDto := _AccountProductDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountProductDto)

	if err != nil {
		return err
	}

	*o = AccountProductDto(varAccountProductDto)

	return err
}

type NullableAccountProductDto struct {
	value *AccountProductDto
	isSet bool
}

func (v NullableAccountProductDto) Get() *AccountProductDto {
	return v.value
}

func (v *NullableAccountProductDto) Set(val *AccountProductDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountProductDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountProductDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountProductDto(val *AccountProductDto) *NullableAccountProductDto {
	return &NullableAccountProductDto{value: val, isSet: true}
}

func (v NullableAccountProductDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountProductDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
