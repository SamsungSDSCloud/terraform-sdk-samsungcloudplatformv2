/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SqlserverV1SqlserverMasterDataApiAPIService SqlserverV1SqlserverMasterDataApiAPI service
type SqlserverV1SqlserverMasterDataApiAPIService service

type SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionPropertiesRequest struct {
	ctx                  context.Context
	ApiService           *SqlserverV1SqlserverMasterDataApiAPIService
	dbaasEngineVersionId string
}

func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionPropertiesRequest) Execute() (*EnginePropertyListResponse, *http.Response, error) {
	return r.ApiService.SqlserverListEngineVersionPropertiesExecute(r)
}

/*
SqlserverListEngineVersionProperties List Engine Version Properties

List Engine Version Properties.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param dbaasEngineVersionId DBaaS engine version ID
	@return SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionPropertiesRequest
*/
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListEngineVersionProperties(ctx context.Context, dbaasEngineVersionId string) SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionPropertiesRequest {
	return SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionPropertiesRequest{
		ApiService:           a,
		ctx:                  ctx,
		dbaasEngineVersionId: dbaasEngineVersionId,
	}
}

// Execute executes the request
//
//	@return EnginePropertyListResponse
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListEngineVersionPropertiesExecute(r SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionPropertiesRequest) (*EnginePropertyListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EnginePropertyListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/engine-versions/{dbaas_engine_version_id}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"dbaas_engine_version_id"+"}", url.PathEscape(parameterValueToString(r.dbaasEngineVersionId, "dbaasEngineVersionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "sqlserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest struct {
	ctx              context.Context
	ApiService       *SqlserverV1SqlserverMasterDataApiAPIService
	id               *string
	productImageType *ProductImageType
	eosIncluded      *bool
}

// DBaaS engine version ID
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest) Id(id string) SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest {
	r.id = &id
	return r
}

// Product image type
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest) ProductImageType(productImageType ProductImageType) SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest {
	r.productImageType = &productImageType
	return r
}

// EoS included
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest) EosIncluded(eosIncluded bool) SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest {
	r.eosIncluded = &eosIncluded
	return r
}

func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest) Execute() (*EngineListResponse, *http.Response, error) {
	return r.ApiService.SqlserverListEngineVersionsExecute(r)
}

/*
SqlserverListEngineVersions List Engine Versions

List Engine Versions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest
*/
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListEngineVersions(ctx context.Context) SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest {
	return SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EngineListResponse
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListEngineVersionsExecute(r SqlserverV1SqlserverMasterDataApiAPISqlserverListEngineVersionsRequest) (*EngineListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EngineListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/engine-versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
	}
	if r.eosIncluded != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eos_included", r.eosIncluded, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "sqlserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest struct {
	ctx              context.Context
	ApiService       *SqlserverV1SqlserverMasterDataApiAPIService
	majorVersion     *string
	productImageType *string
	sort             *string
}

// Software major version
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest) MajorVersion(majorVersion string) SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest {
	r.majorVersion = &majorVersion
	return r
}

// Product image type
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest) ProductImageType(productImageType string) SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest {
	r.productImageType = &productImageType
	return r
}

// sort
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest) Sort(sort string) SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest {
	r.sort = &sort
	return r
}

func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest) Execute() (*ParameterGroupListResponse, *http.Response, error) {
	return r.ApiService.SqlserverListParameterGroupsExecute(r)
}

/*
SqlserverListParameterGroups List Parameter Groups

List Parameter Groups.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest
*/
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListParameterGroups(ctx context.Context) SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest {
	return SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ParameterGroupListResponse
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListParameterGroupsExecute(r SqlserverV1SqlserverMasterDataApiAPISqlserverListParameterGroupsRequest) (*ParameterGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ParameterGroupListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/parameter-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.majorVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "major_version", r.majorVersion, "form", "")
	}
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "sqlserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest struct {
	ctx                   context.Context
	ApiService            *SqlserverV1SqlserverMasterDataApiAPIService
	dbaasParameterGroupId *string
	size                  *int32
	page                  *int32
	sort                  *string
}

// Parameter group ID
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest) DbaasParameterGroupId(dbaasParameterGroupId string) SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest {
	r.dbaasParameterGroupId = &dbaasParameterGroupId
	return r
}

// size
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest) Size(size int32) SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest {
	r.size = &size
	return r
}

// page
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest) Page(page int32) SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest {
	r.page = &page
	return r
}

// sort
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest) Sort(sort string) SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest {
	r.sort = &sort
	return r
}

func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest) Execute() (*ParameterPageResponse, *http.Response, error) {
	return r.ApiService.SqlserverListParametersExecute(r)
}

/*
SqlserverListParameters List Parameters

List Parameters.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest
*/
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListParameters(ctx context.Context) SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest {
	return SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ParameterPageResponse
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListParametersExecute(r SqlserverV1SqlserverMasterDataApiAPISqlserverListParametersRequest) (*ParameterPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ParameterPageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/parameters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dbaasParameterGroupId == nil {
		return localVarReturnValue, nil, reportError("dbaasParameterGroupId is required and must be specified")
	}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "dbaas_parameter_group_id", r.dbaasParameterGroupId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "sqlserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest struct {
	ctx              context.Context
	ApiService       *SqlserverV1SqlserverMasterDataApiAPIService
	name             *string
	productImageType *string
}

// Server type name
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest) Name(name string) SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest {
	r.name = &name
	return r
}

// Product image type
func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest) ProductImageType(productImageType string) SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest {
	r.productImageType = &productImageType
	return r
}

func (r SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest) Execute() (*ServerTypeListResponse, *http.Response, error) {
	return r.ApiService.SqlserverListServerTypesExecute(r)
}

/*
SqlserverListServerTypes List Server Types

List Server Types.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest
*/
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListServerTypes(ctx context.Context) SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest {
	return SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ServerTypeListResponse
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverListServerTypesExecute(r SqlserverV1SqlserverMasterDataApiAPISqlserverListServerTypesRequest) (*ServerTypeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServerTypeListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/server-types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.productImageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_image_type", r.productImageType, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "sqlserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SqlserverV1SqlserverMasterDataApiAPISqlserverShowRequestRequest struct {
	ctx        context.Context
	ApiService *SqlserverV1SqlserverMasterDataApiAPIService
	requestId  string
}

func (r SqlserverV1SqlserverMasterDataApiAPISqlserverShowRequestRequest) Execute() (*RequestStateResponse, *http.Response, error) {
	return r.ApiService.SqlserverShowRequestExecute(r)
}

/*
SqlserverShowRequest Show Request

Show Request.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param requestId Request ID
	@return SqlserverV1SqlserverMasterDataApiAPISqlserverShowRequestRequest
*/
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverShowRequest(ctx context.Context, requestId string) SqlserverV1SqlserverMasterDataApiAPISqlserverShowRequestRequest {
	return SqlserverV1SqlserverMasterDataApiAPISqlserverShowRequestRequest{
		ApiService: a,
		ctx:        ctx,
		requestId:  requestId,
	}
}

// Execute executes the request
//
//	@return RequestStateResponse
func (a *SqlserverV1SqlserverMasterDataApiAPIService) SqlserverShowRequestExecute(r SqlserverV1SqlserverMasterDataApiAPISqlserverShowRequestRequest) (*RequestStateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *RequestStateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/requests/{request_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"request_id"+"}", url.PathEscape(parameterValueToString(r.requestId, "requestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "sqlserver 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
