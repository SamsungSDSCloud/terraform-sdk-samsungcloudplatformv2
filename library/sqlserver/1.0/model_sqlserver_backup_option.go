/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SqlserverBackupOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverBackupOption{}

// SqlserverBackupOption struct for SqlserverBackupOption
type SqlserverBackupOption struct {
	// Backup starting time (minute)
	ArchiveFrequencyMinute string `json:"archive_frequency_minute" validate:"regexp=^(5|10|30|60)$"`
	// Full backup day of week
	FullBackupDayOfWeek *DayOfWeek     `json:"full_backup_day_of_week,omitempty"`
	RetentionPeriodDay  NullableString `json:"retention_period_day,omitempty"`
	StartingTimeHour    NullableString `json:"starting_time_hour,omitempty"`
}

type _SqlserverBackupOption SqlserverBackupOption

// NewSqlserverBackupOption instantiates a new SqlserverBackupOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverBackupOption(archiveFrequencyMinute string) *SqlserverBackupOption {
	this := SqlserverBackupOption{}
	this.ArchiveFrequencyMinute = archiveFrequencyMinute
	var fullBackupDayOfWeek DayOfWeek = DAYOFWEEK_SUN
	this.FullBackupDayOfWeek = &fullBackupDayOfWeek
	return &this
}

// NewSqlserverBackupOptionWithDefaults instantiates a new SqlserverBackupOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverBackupOptionWithDefaults() *SqlserverBackupOption {
	this := SqlserverBackupOption{}
	var fullBackupDayOfWeek DayOfWeek = DAYOFWEEK_SUN
	this.FullBackupDayOfWeek = &fullBackupDayOfWeek
	return &this
}

// GetArchiveFrequencyMinute returns the ArchiveFrequencyMinute field value
func (o *SqlserverBackupOption) GetArchiveFrequencyMinute() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArchiveFrequencyMinute
}

// GetArchiveFrequencyMinuteOk returns a tuple with the ArchiveFrequencyMinute field value
// and a boolean to check if the value has been set.
func (o *SqlserverBackupOption) GetArchiveFrequencyMinuteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArchiveFrequencyMinute, true
}

// SetArchiveFrequencyMinute sets field value
func (o *SqlserverBackupOption) SetArchiveFrequencyMinute(v string) {
	o.ArchiveFrequencyMinute = v
}

// GetFullBackupDayOfWeek returns the FullBackupDayOfWeek field value if set, zero value otherwise.
func (o *SqlserverBackupOption) GetFullBackupDayOfWeek() DayOfWeek {
	if o == nil || IsNil(o.FullBackupDayOfWeek) {
		var ret DayOfWeek
		return ret
	}
	return *o.FullBackupDayOfWeek
}

// GetFullBackupDayOfWeekOk returns a tuple with the FullBackupDayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlserverBackupOption) GetFullBackupDayOfWeekOk() (*DayOfWeek, bool) {
	if o == nil || IsNil(o.FullBackupDayOfWeek) {
		return nil, false
	}
	return o.FullBackupDayOfWeek, true
}

// HasFullBackupDayOfWeek returns a boolean if a field has been set.
func (o *SqlserverBackupOption) HasFullBackupDayOfWeek() bool {
	if o != nil && !IsNil(o.FullBackupDayOfWeek) {
		return true
	}

	return false
}

// SetFullBackupDayOfWeek gets a reference to the given DayOfWeek and assigns it to the FullBackupDayOfWeek field.
func (o *SqlserverBackupOption) SetFullBackupDayOfWeek(v DayOfWeek) {
	o.FullBackupDayOfWeek = &v
}

// GetRetentionPeriodDay returns the RetentionPeriodDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverBackupOption) GetRetentionPeriodDay() string {
	if o == nil || IsNil(o.RetentionPeriodDay.Get()) {
		var ret string
		return ret
	}
	return *o.RetentionPeriodDay.Get()
}

// GetRetentionPeriodDayOk returns a tuple with the RetentionPeriodDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverBackupOption) GetRetentionPeriodDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetentionPeriodDay.Get(), o.RetentionPeriodDay.IsSet()
}

// HasRetentionPeriodDay returns a boolean if a field has been set.
func (o *SqlserverBackupOption) HasRetentionPeriodDay() bool {
	if o != nil && o.RetentionPeriodDay.IsSet() {
		return true
	}

	return false
}

// SetRetentionPeriodDay gets a reference to the given NullableString and assigns it to the RetentionPeriodDay field.
func (o *SqlserverBackupOption) SetRetentionPeriodDay(v string) {
	o.RetentionPeriodDay.Set(&v)
}

// SetRetentionPeriodDayNil sets the value for RetentionPeriodDay to be an explicit nil
func (o *SqlserverBackupOption) SetRetentionPeriodDayNil() {
	o.RetentionPeriodDay.Set(nil)
}

// UnsetRetentionPeriodDay ensures that no value is present for RetentionPeriodDay, not even an explicit nil
func (o *SqlserverBackupOption) UnsetRetentionPeriodDay() {
	o.RetentionPeriodDay.Unset()
}

// GetStartingTimeHour returns the StartingTimeHour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverBackupOption) GetStartingTimeHour() string {
	if o == nil || IsNil(o.StartingTimeHour.Get()) {
		var ret string
		return ret
	}
	return *o.StartingTimeHour.Get()
}

// GetStartingTimeHourOk returns a tuple with the StartingTimeHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverBackupOption) GetStartingTimeHourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartingTimeHour.Get(), o.StartingTimeHour.IsSet()
}

// HasStartingTimeHour returns a boolean if a field has been set.
func (o *SqlserverBackupOption) HasStartingTimeHour() bool {
	if o != nil && o.StartingTimeHour.IsSet() {
		return true
	}

	return false
}

// SetStartingTimeHour gets a reference to the given NullableString and assigns it to the StartingTimeHour field.
func (o *SqlserverBackupOption) SetStartingTimeHour(v string) {
	o.StartingTimeHour.Set(&v)
}

// SetStartingTimeHourNil sets the value for StartingTimeHour to be an explicit nil
func (o *SqlserverBackupOption) SetStartingTimeHourNil() {
	o.StartingTimeHour.Set(nil)
}

// UnsetStartingTimeHour ensures that no value is present for StartingTimeHour, not even an explicit nil
func (o *SqlserverBackupOption) UnsetStartingTimeHour() {
	o.StartingTimeHour.Unset()
}

func (o SqlserverBackupOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverBackupOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archive_frequency_minute"] = o.ArchiveFrequencyMinute
	if !IsNil(o.FullBackupDayOfWeek) {
		toSerialize["full_backup_day_of_week"] = o.FullBackupDayOfWeek
	}
	if o.RetentionPeriodDay.IsSet() {
		toSerialize["retention_period_day"] = o.RetentionPeriodDay.Get()
	}
	if o.StartingTimeHour.IsSet() {
		toSerialize["starting_time_hour"] = o.StartingTimeHour.Get()
	}
	return toSerialize, nil
}

func (o *SqlserverBackupOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archive_frequency_minute",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlserverBackupOption := _SqlserverBackupOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlserverBackupOption)

	if err != nil {
		return err
	}

	*o = SqlserverBackupOption(varSqlserverBackupOption)

	return err
}

type NullableSqlserverBackupOption struct {
	value *SqlserverBackupOption
	isSet bool
}

func (v NullableSqlserverBackupOption) Get() *SqlserverBackupOption {
	return v.value
}

func (v *NullableSqlserverBackupOption) Set(val *SqlserverBackupOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverBackupOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverBackupOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverBackupOption(val *SqlserverBackupOption) *NullableSqlserverBackupOption {
	return &NullableSqlserverBackupOption{value: val, isSet: true}
}

func (v NullableSqlserverBackupOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverBackupOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
