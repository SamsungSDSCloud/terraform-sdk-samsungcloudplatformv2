/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"encoding/json"
)

// checks if the SqlserverUpdateDatabasesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverUpdateDatabasesRequest{}

// SqlserverUpdateDatabasesRequest struct for SqlserverUpdateDatabasesRequest
type SqlserverUpdateDatabasesRequest struct {
	AddDatabases []SqlserverDatabaseOption `json:"add_databases,omitempty"`
	DelDatabases []SqlserverDatabaseOption `json:"del_databases,omitempty"`
}

// NewSqlserverUpdateDatabasesRequest instantiates a new SqlserverUpdateDatabasesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverUpdateDatabasesRequest() *SqlserverUpdateDatabasesRequest {
	this := SqlserverUpdateDatabasesRequest{}
	return &this
}

// NewSqlserverUpdateDatabasesRequestWithDefaults instantiates a new SqlserverUpdateDatabasesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverUpdateDatabasesRequestWithDefaults() *SqlserverUpdateDatabasesRequest {
	this := SqlserverUpdateDatabasesRequest{}
	return &this
}

// GetAddDatabases returns the AddDatabases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverUpdateDatabasesRequest) GetAddDatabases() []SqlserverDatabaseOption {
	if o == nil {
		var ret []SqlserverDatabaseOption
		return ret
	}
	return o.AddDatabases
}

// GetAddDatabasesOk returns a tuple with the AddDatabases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverUpdateDatabasesRequest) GetAddDatabasesOk() ([]SqlserverDatabaseOption, bool) {
	if o == nil || IsNil(o.AddDatabases) {
		return nil, false
	}
	return o.AddDatabases, true
}

// HasAddDatabases returns a boolean if a field has been set.
func (o *SqlserverUpdateDatabasesRequest) HasAddDatabases() bool {
	if o != nil && !IsNil(o.AddDatabases) {
		return true
	}

	return false
}

// SetAddDatabases gets a reference to the given []SqlserverDatabaseOption and assigns it to the AddDatabases field.
func (o *SqlserverUpdateDatabasesRequest) SetAddDatabases(v []SqlserverDatabaseOption) {
	o.AddDatabases = v
}

// GetDelDatabases returns the DelDatabases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverUpdateDatabasesRequest) GetDelDatabases() []SqlserverDatabaseOption {
	if o == nil {
		var ret []SqlserverDatabaseOption
		return ret
	}
	return o.DelDatabases
}

// GetDelDatabasesOk returns a tuple with the DelDatabases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverUpdateDatabasesRequest) GetDelDatabasesOk() ([]SqlserverDatabaseOption, bool) {
	if o == nil || IsNil(o.DelDatabases) {
		return nil, false
	}
	return o.DelDatabases, true
}

// HasDelDatabases returns a boolean if a field has been set.
func (o *SqlserverUpdateDatabasesRequest) HasDelDatabases() bool {
	if o != nil && !IsNil(o.DelDatabases) {
		return true
	}

	return false
}

// SetDelDatabases gets a reference to the given []SqlserverDatabaseOption and assigns it to the DelDatabases field.
func (o *SqlserverUpdateDatabasesRequest) SetDelDatabases(v []SqlserverDatabaseOption) {
	o.DelDatabases = v
}

func (o SqlserverUpdateDatabasesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverUpdateDatabasesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AddDatabases != nil {
		toSerialize["add_databases"] = o.AddDatabases
	}
	if o.DelDatabases != nil {
		toSerialize["del_databases"] = o.DelDatabases
	}
	return toSerialize, nil
}

type NullableSqlserverUpdateDatabasesRequest struct {
	value *SqlserverUpdateDatabasesRequest
	isSet bool
}

func (v NullableSqlserverUpdateDatabasesRequest) Get() *SqlserverUpdateDatabasesRequest {
	return v.value
}

func (v *NullableSqlserverUpdateDatabasesRequest) Set(val *SqlserverUpdateDatabasesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverUpdateDatabasesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverUpdateDatabasesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverUpdateDatabasesRequest(val *SqlserverUpdateDatabasesRequest) *NullableSqlserverUpdateDatabasesRequest {
	return &NullableSqlserverUpdateDatabasesRequest{value: val, isSet: true}
}

func (v NullableSqlserverUpdateDatabasesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverUpdateDatabasesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
