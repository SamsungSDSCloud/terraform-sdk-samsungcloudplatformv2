/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LogExportConfigListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogExportConfigListResponse{}

// LogExportConfigListResponse struct for LogExportConfigListResponse
type LogExportConfigListResponse struct {
	// Log export config contents
	Contents []LogExportConfig `json:"contents"`
	// Log export config count
	Count int32 `json:"count"`
}

type _LogExportConfigListResponse LogExportConfigListResponse

// NewLogExportConfigListResponse instantiates a new LogExportConfigListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogExportConfigListResponse(contents []LogExportConfig, count int32) *LogExportConfigListResponse {
	this := LogExportConfigListResponse{}
	this.Contents = contents
	this.Count = count
	return &this
}

// NewLogExportConfigListResponseWithDefaults instantiates a new LogExportConfigListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogExportConfigListResponseWithDefaults() *LogExportConfigListResponse {
	this := LogExportConfigListResponse{}
	return &this
}

// GetContents returns the Contents field value
func (o *LogExportConfigListResponse) GetContents() []LogExportConfig {
	if o == nil {
		var ret []LogExportConfig
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *LogExportConfigListResponse) GetContentsOk() ([]LogExportConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *LogExportConfigListResponse) SetContents(v []LogExportConfig) {
	o.Contents = v
}

// GetCount returns the Count field value
func (o *LogExportConfigListResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *LogExportConfigListResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *LogExportConfigListResponse) SetCount(v int32) {
	o.Count = v
}

func (o LogExportConfigListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogExportConfigListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contents"] = o.Contents
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *LogExportConfigListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contents",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogExportConfigListResponse := _LogExportConfigListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogExportConfigListResponse)

	if err != nil {
		return err
	}

	*o = LogExportConfigListResponse(varLogExportConfigListResponse)

	return err
}

type NullableLogExportConfigListResponse struct {
	value *LogExportConfigListResponse
	isSet bool
}

func (v NullableLogExportConfigListResponse) Get() *LogExportConfigListResponse {
	return v.value
}

func (v *NullableLogExportConfigListResponse) Set(val *LogExportConfigListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogExportConfigListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogExportConfigListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogExportConfigListResponse(val *LogExportConfigListResponse) *NullableLogExportConfigListResponse {
	return &NullableLogExportConfigListResponse{value: val, isSet: true}
}

func (v NullableLogExportConfigListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogExportConfigListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
