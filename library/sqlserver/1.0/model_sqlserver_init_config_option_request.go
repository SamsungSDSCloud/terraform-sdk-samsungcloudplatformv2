/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SqlserverInitConfigOptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverInitConfigOptionRequest{}

// SqlserverInitConfigOptionRequest struct for SqlserverInitConfigOptionRequest
type SqlserverInitConfigOptionRequest struct {
	// Audit usage state
	AuditEnabled      *bool                         `json:"audit_enabled,omitempty"`
	BackupOption      NullableSqlserverBackupOption `json:"backup_option,omitempty"`
	DatabaseCollation *DbCollation                  `json:"database_collation,omitempty"`
	DatabaseName      interface{}                   `json:"database_name,omitempty"`
	// Database service port
	DatabasePort *int32 `json:"database_port,omitempty"`
	// Database Service Name
	DatabaseServiceName string `json:"database_service_name" validate:"regexp=^[A-Z][a-zA-Z]*$"`
	// Database User Name
	DatabaseUserName string `json:"database_user_name" validate:"regexp=^[a-z]*$"`
	// Database user password
	DatabaseUserPassword string `json:"database_user_password"`
	// Databases
	Databases []SqlserverDatabaseOption `json:"databases"`
	// license
	License string `json:"license"`
}

type _SqlserverInitConfigOptionRequest SqlserverInitConfigOptionRequest

// NewSqlserverInitConfigOptionRequest instantiates a new SqlserverInitConfigOptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverInitConfigOptionRequest(databaseServiceName string, databaseUserName string, databaseUserPassword string, databases []SqlserverDatabaseOption, license string) *SqlserverInitConfigOptionRequest {
	this := SqlserverInitConfigOptionRequest{}
	var auditEnabled bool = false
	this.AuditEnabled = &auditEnabled
	var databaseCollation DbCollation = DBCOLLATION_SQL_LATIN1_GENERAL_CP1_CI_AS
	this.DatabaseCollation = &databaseCollation
	var databasePort int32 = 2866
	this.DatabasePort = &databasePort
	this.DatabaseServiceName = databaseServiceName
	this.DatabaseUserName = databaseUserName
	this.DatabaseUserPassword = databaseUserPassword
	this.Databases = databases
	this.License = license
	return &this
}

// NewSqlserverInitConfigOptionRequestWithDefaults instantiates a new SqlserverInitConfigOptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverInitConfigOptionRequestWithDefaults() *SqlserverInitConfigOptionRequest {
	this := SqlserverInitConfigOptionRequest{}
	var auditEnabled bool = false
	this.AuditEnabled = &auditEnabled
	var databaseCollation DbCollation = DBCOLLATION_SQL_LATIN1_GENERAL_CP1_CI_AS
	this.DatabaseCollation = &databaseCollation
	var databasePort int32 = 2866
	this.DatabasePort = &databasePort
	return &this
}

// GetAuditEnabled returns the AuditEnabled field value if set, zero value otherwise.
func (o *SqlserverInitConfigOptionRequest) GetAuditEnabled() bool {
	if o == nil || IsNil(o.AuditEnabled) {
		var ret bool
		return ret
	}
	return *o.AuditEnabled
}

// GetAuditEnabledOk returns a tuple with the AuditEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetAuditEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AuditEnabled) {
		return nil, false
	}
	return o.AuditEnabled, true
}

// HasAuditEnabled returns a boolean if a field has been set.
func (o *SqlserverInitConfigOptionRequest) HasAuditEnabled() bool {
	if o != nil && !IsNil(o.AuditEnabled) {
		return true
	}

	return false
}

// SetAuditEnabled gets a reference to the given bool and assigns it to the AuditEnabled field.
func (o *SqlserverInitConfigOptionRequest) SetAuditEnabled(v bool) {
	o.AuditEnabled = &v
}

// GetBackupOption returns the BackupOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverInitConfigOptionRequest) GetBackupOption() SqlserverBackupOption {
	if o == nil || IsNil(o.BackupOption.Get()) {
		var ret SqlserverBackupOption
		return ret
	}
	return *o.BackupOption.Get()
}

// GetBackupOptionOk returns a tuple with the BackupOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverInitConfigOptionRequest) GetBackupOptionOk() (*SqlserverBackupOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupOption.Get(), o.BackupOption.IsSet()
}

// HasBackupOption returns a boolean if a field has been set.
func (o *SqlserverInitConfigOptionRequest) HasBackupOption() bool {
	if o != nil && o.BackupOption.IsSet() {
		return true
	}

	return false
}

// SetBackupOption gets a reference to the given NullableSqlserverBackupOption and assigns it to the BackupOption field.
func (o *SqlserverInitConfigOptionRequest) SetBackupOption(v SqlserverBackupOption) {
	o.BackupOption.Set(&v)
}

// SetBackupOptionNil sets the value for BackupOption to be an explicit nil
func (o *SqlserverInitConfigOptionRequest) SetBackupOptionNil() {
	o.BackupOption.Set(nil)
}

// UnsetBackupOption ensures that no value is present for BackupOption, not even an explicit nil
func (o *SqlserverInitConfigOptionRequest) UnsetBackupOption() {
	o.BackupOption.Unset()
}

// GetDatabaseCollation returns the DatabaseCollation field value if set, zero value otherwise.
func (o *SqlserverInitConfigOptionRequest) GetDatabaseCollation() DbCollation {
	if o == nil || IsNil(o.DatabaseCollation) {
		var ret DbCollation
		return ret
	}
	return *o.DatabaseCollation
}

// GetDatabaseCollationOk returns a tuple with the DatabaseCollation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetDatabaseCollationOk() (*DbCollation, bool) {
	if o == nil || IsNil(o.DatabaseCollation) {
		return nil, false
	}
	return o.DatabaseCollation, true
}

// HasDatabaseCollation returns a boolean if a field has been set.
func (o *SqlserverInitConfigOptionRequest) HasDatabaseCollation() bool {
	if o != nil && !IsNil(o.DatabaseCollation) {
		return true
	}

	return false
}

// SetDatabaseCollation gets a reference to the given DbCollation and assigns it to the DatabaseCollation field.
func (o *SqlserverInitConfigOptionRequest) SetDatabaseCollation(v DbCollation) {
	o.DatabaseCollation = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverInitConfigOptionRequest) GetDatabaseName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverInitConfigOptionRequest) GetDatabaseNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DatabaseName) {
		return nil, false
	}
	return &o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *SqlserverInitConfigOptionRequest) HasDatabaseName() bool {
	if o != nil && !IsNil(o.DatabaseName) {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given interface{} and assigns it to the DatabaseName field.
func (o *SqlserverInitConfigOptionRequest) SetDatabaseName(v interface{}) {
	o.DatabaseName = v
}

// GetDatabasePort returns the DatabasePort field value if set, zero value otherwise.
func (o *SqlserverInitConfigOptionRequest) GetDatabasePort() int32 {
	if o == nil || IsNil(o.DatabasePort) {
		var ret int32
		return ret
	}
	return *o.DatabasePort
}

// GetDatabasePortOk returns a tuple with the DatabasePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetDatabasePortOk() (*int32, bool) {
	if o == nil || IsNil(o.DatabasePort) {
		return nil, false
	}
	return o.DatabasePort, true
}

// HasDatabasePort returns a boolean if a field has been set.
func (o *SqlserverInitConfigOptionRequest) HasDatabasePort() bool {
	if o != nil && !IsNil(o.DatabasePort) {
		return true
	}

	return false
}

// SetDatabasePort gets a reference to the given int32 and assigns it to the DatabasePort field.
func (o *SqlserverInitConfigOptionRequest) SetDatabasePort(v int32) {
	o.DatabasePort = &v
}

// GetDatabaseServiceName returns the DatabaseServiceName field value
func (o *SqlserverInitConfigOptionRequest) GetDatabaseServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseServiceName
}

// GetDatabaseServiceNameOk returns a tuple with the DatabaseServiceName field value
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetDatabaseServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseServiceName, true
}

// SetDatabaseServiceName sets field value
func (o *SqlserverInitConfigOptionRequest) SetDatabaseServiceName(v string) {
	o.DatabaseServiceName = v
}

// GetDatabaseUserName returns the DatabaseUserName field value
func (o *SqlserverInitConfigOptionRequest) GetDatabaseUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserName
}

// GetDatabaseUserNameOk returns a tuple with the DatabaseUserName field value
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserName, true
}

// SetDatabaseUserName sets field value
func (o *SqlserverInitConfigOptionRequest) SetDatabaseUserName(v string) {
	o.DatabaseUserName = v
}

// GetDatabaseUserPassword returns the DatabaseUserPassword field value
func (o *SqlserverInitConfigOptionRequest) GetDatabaseUserPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserPassword
}

// GetDatabaseUserPasswordOk returns a tuple with the DatabaseUserPassword field value
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetDatabaseUserPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserPassword, true
}

// SetDatabaseUserPassword sets field value
func (o *SqlserverInitConfigOptionRequest) SetDatabaseUserPassword(v string) {
	o.DatabaseUserPassword = v
}

// GetDatabases returns the Databases field value
func (o *SqlserverInitConfigOptionRequest) GetDatabases() []SqlserverDatabaseOption {
	if o == nil {
		var ret []SqlserverDatabaseOption
		return ret
	}

	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetDatabasesOk() ([]SqlserverDatabaseOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.Databases, true
}

// SetDatabases sets field value
func (o *SqlserverInitConfigOptionRequest) SetDatabases(v []SqlserverDatabaseOption) {
	o.Databases = v
}

// GetLicense returns the License field value
func (o *SqlserverInitConfigOptionRequest) GetLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *SqlserverInitConfigOptionRequest) GetLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *SqlserverInitConfigOptionRequest) SetLicense(v string) {
	o.License = v
}

func (o SqlserverInitConfigOptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverInitConfigOptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditEnabled) {
		toSerialize["audit_enabled"] = o.AuditEnabled
	}
	if o.BackupOption.IsSet() {
		toSerialize["backup_option"] = o.BackupOption.Get()
	}
	if !IsNil(o.DatabaseCollation) {
		toSerialize["database_collation"] = o.DatabaseCollation
	}
	if o.DatabaseName != nil {
		toSerialize["database_name"] = o.DatabaseName
	}
	if !IsNil(o.DatabasePort) {
		toSerialize["database_port"] = o.DatabasePort
	}
	toSerialize["database_service_name"] = o.DatabaseServiceName
	toSerialize["database_user_name"] = o.DatabaseUserName
	toSerialize["database_user_password"] = o.DatabaseUserPassword
	toSerialize["databases"] = o.Databases
	toSerialize["license"] = o.License
	return toSerialize, nil
}

func (o *SqlserverInitConfigOptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_service_name",
		"database_user_name",
		"database_user_password",
		"databases",
		"license",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlserverInitConfigOptionRequest := _SqlserverInitConfigOptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlserverInitConfigOptionRequest)

	if err != nil {
		return err
	}

	*o = SqlserverInitConfigOptionRequest(varSqlserverInitConfigOptionRequest)

	return err
}

type NullableSqlserverInitConfigOptionRequest struct {
	value *SqlserverInitConfigOptionRequest
	isSet bool
}

func (v NullableSqlserverInitConfigOptionRequest) Get() *SqlserverInitConfigOptionRequest {
	return v.value
}

func (v *NullableSqlserverInitConfigOptionRequest) Set(val *SqlserverInitConfigOptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverInitConfigOptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverInitConfigOptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverInitConfigOptionRequest(val *SqlserverInitConfigOptionRequest) *NullableSqlserverInitConfigOptionRequest {
	return &NullableSqlserverInitConfigOptionRequest{value: val, isSet: true}
}

func (v NullableSqlserverInitConfigOptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverInitConfigOptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
