/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SqlserverInstanceGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverInstanceGroupRequest{}

// SqlserverInstanceGroupRequest struct for SqlserverInstanceGroupRequest
type SqlserverInstanceGroupRequest struct {
	// Block storage groups list
	BlockStorageGroups []BlockStorageGroupRequest `json:"block_storage_groups"`
	// Instances list
	Instances []SqlserverInstanceRequest `json:"instances"`
	RoleType  interface{}                `json:"role_type,omitempty"`
	// Server type name
	ServerTypeName string `json:"server_type_name"`
}

type _SqlserverInstanceGroupRequest SqlserverInstanceGroupRequest

// NewSqlserverInstanceGroupRequest instantiates a new SqlserverInstanceGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverInstanceGroupRequest(blockStorageGroups []BlockStorageGroupRequest, instances []SqlserverInstanceRequest, serverTypeName string) *SqlserverInstanceGroupRequest {
	this := SqlserverInstanceGroupRequest{}
	this.BlockStorageGroups = blockStorageGroups
	this.Instances = instances
	this.ServerTypeName = serverTypeName
	return &this
}

// NewSqlserverInstanceGroupRequestWithDefaults instantiates a new SqlserverInstanceGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverInstanceGroupRequestWithDefaults() *SqlserverInstanceGroupRequest {
	this := SqlserverInstanceGroupRequest{}
	return &this
}

// GetBlockStorageGroups returns the BlockStorageGroups field value
func (o *SqlserverInstanceGroupRequest) GetBlockStorageGroups() []BlockStorageGroupRequest {
	if o == nil {
		var ret []BlockStorageGroupRequest
		return ret
	}

	return o.BlockStorageGroups
}

// GetBlockStorageGroupsOk returns a tuple with the BlockStorageGroups field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupRequest) GetBlockStorageGroupsOk() ([]BlockStorageGroupRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockStorageGroups, true
}

// SetBlockStorageGroups sets field value
func (o *SqlserverInstanceGroupRequest) SetBlockStorageGroups(v []BlockStorageGroupRequest) {
	o.BlockStorageGroups = v
}

// GetInstances returns the Instances field value
func (o *SqlserverInstanceGroupRequest) GetInstances() []SqlserverInstanceRequest {
	if o == nil {
		var ret []SqlserverInstanceRequest
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupRequest) GetInstancesOk() ([]SqlserverInstanceRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *SqlserverInstanceGroupRequest) SetInstances(v []SqlserverInstanceRequest) {
	o.Instances = v
}

// GetRoleType returns the RoleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverInstanceGroupRequest) GetRoleType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverInstanceGroupRequest) GetRoleTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RoleType) {
		return nil, false
	}
	return &o.RoleType, true
}

// HasRoleType returns a boolean if a field has been set.
func (o *SqlserverInstanceGroupRequest) HasRoleType() bool {
	if o != nil && !IsNil(o.RoleType) {
		return true
	}

	return false
}

// SetRoleType gets a reference to the given interface{} and assigns it to the RoleType field.
func (o *SqlserverInstanceGroupRequest) SetRoleType(v interface{}) {
	o.RoleType = v
}

// GetServerTypeName returns the ServerTypeName field value
func (o *SqlserverInstanceGroupRequest) GetServerTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerTypeName
}

// GetServerTypeNameOk returns a tuple with the ServerTypeName field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupRequest) GetServerTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerTypeName, true
}

// SetServerTypeName sets field value
func (o *SqlserverInstanceGroupRequest) SetServerTypeName(v string) {
	o.ServerTypeName = v
}

func (o SqlserverInstanceGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverInstanceGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["block_storage_groups"] = o.BlockStorageGroups
	toSerialize["instances"] = o.Instances
	if o.RoleType != nil {
		toSerialize["role_type"] = o.RoleType
	}
	toSerialize["server_type_name"] = o.ServerTypeName
	return toSerialize, nil
}

func (o *SqlserverInstanceGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"block_storage_groups",
		"instances",
		"server_type_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlserverInstanceGroupRequest := _SqlserverInstanceGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlserverInstanceGroupRequest)

	if err != nil {
		return err
	}

	*o = SqlserverInstanceGroupRequest(varSqlserverInstanceGroupRequest)

	return err
}

type NullableSqlserverInstanceGroupRequest struct {
	value *SqlserverInstanceGroupRequest
	isSet bool
}

func (v NullableSqlserverInstanceGroupRequest) Get() *SqlserverInstanceGroupRequest {
	return v.value
}

func (v *NullableSqlserverInstanceGroupRequest) Set(val *SqlserverInstanceGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverInstanceGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverInstanceGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverInstanceGroupRequest(val *SqlserverInstanceGroupRequest) *NullableSqlserverInstanceGroupRequest {
	return &NullableSqlserverInstanceGroupRequest{value: val, isSet: true}
}

func (v NullableSqlserverInstanceGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverInstanceGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
