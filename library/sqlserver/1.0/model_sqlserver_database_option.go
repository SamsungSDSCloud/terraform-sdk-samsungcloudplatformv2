/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SqlserverDatabaseOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverDatabaseOption{}

// SqlserverDatabaseOption struct for SqlserverDatabaseOption
type SqlserverDatabaseOption struct {
	// Database Name
	DatabaseName string `json:"database_name" validate:"regexp=^[a-zA-Z][a-zA-Z0-9._]*$"`
	// Drive letter
	DriveLetter *string `json:"drive_letter,omitempty" validate:"regexp=[E-Z]"`
}

type _SqlserverDatabaseOption SqlserverDatabaseOption

// NewSqlserverDatabaseOption instantiates a new SqlserverDatabaseOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverDatabaseOption(databaseName string) *SqlserverDatabaseOption {
	this := SqlserverDatabaseOption{}
	this.DatabaseName = databaseName
	var driveLetter string = "E"
	this.DriveLetter = &driveLetter
	return &this
}

// NewSqlserverDatabaseOptionWithDefaults instantiates a new SqlserverDatabaseOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverDatabaseOptionWithDefaults() *SqlserverDatabaseOption {
	this := SqlserverDatabaseOption{}
	var driveLetter string = "E"
	this.DriveLetter = &driveLetter
	return &this
}

// GetDatabaseName returns the DatabaseName field value
func (o *SqlserverDatabaseOption) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *SqlserverDatabaseOption) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *SqlserverDatabaseOption) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetDriveLetter returns the DriveLetter field value if set, zero value otherwise.
func (o *SqlserverDatabaseOption) GetDriveLetter() string {
	if o == nil || IsNil(o.DriveLetter) {
		var ret string
		return ret
	}
	return *o.DriveLetter
}

// GetDriveLetterOk returns a tuple with the DriveLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlserverDatabaseOption) GetDriveLetterOk() (*string, bool) {
	if o == nil || IsNil(o.DriveLetter) {
		return nil, false
	}
	return o.DriveLetter, true
}

// HasDriveLetter returns a boolean if a field has been set.
func (o *SqlserverDatabaseOption) HasDriveLetter() bool {
	if o != nil && !IsNil(o.DriveLetter) {
		return true
	}

	return false
}

// SetDriveLetter gets a reference to the given string and assigns it to the DriveLetter field.
func (o *SqlserverDatabaseOption) SetDriveLetter(v string) {
	o.DriveLetter = &v
}

func (o SqlserverDatabaseOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverDatabaseOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["database_name"] = o.DatabaseName
	if !IsNil(o.DriveLetter) {
		toSerialize["drive_letter"] = o.DriveLetter
	}
	return toSerialize, nil
}

func (o *SqlserverDatabaseOption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlserverDatabaseOption := _SqlserverDatabaseOption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlserverDatabaseOption)

	if err != nil {
		return err
	}

	*o = SqlserverDatabaseOption(varSqlserverDatabaseOption)

	return err
}

type NullableSqlserverDatabaseOption struct {
	value *SqlserverDatabaseOption
	isSet bool
}

func (v NullableSqlserverDatabaseOption) Get() *SqlserverDatabaseOption {
	return v.value
}

func (v *NullableSqlserverDatabaseOption) Set(val *SqlserverDatabaseOption) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverDatabaseOption) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverDatabaseOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverDatabaseOption(val *SqlserverDatabaseOption) *NullableSqlserverDatabaseOption {
	return &NullableSqlserverDatabaseOption{value: val, isSet: true}
}

func (v NullableSqlserverDatabaseOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverDatabaseOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
