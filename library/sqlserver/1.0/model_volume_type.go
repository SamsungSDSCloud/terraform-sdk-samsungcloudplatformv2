/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"encoding/json"
	"fmt"
)

// VolumeType the model 'VolumeType'
type VolumeType string

// List of VolumeType
const (
	VOLUMETYPE_SSD     VolumeType = "SSD"
	VOLUMETYPE_SSD_KMS VolumeType = "SSD_KMS"
	VOLUMETYPE_HDD     VolumeType = "HDD"
	VOLUMETYPE_HDD_KMS VolumeType = "HDD_KMS"
)

// All allowed values of VolumeType enum
var AllowedVolumeTypeEnumValues = []VolumeType{
	"SSD",
	"SSD_KMS",
	"HDD",
	"HDD_KMS",
}

func (v *VolumeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeType(value)
	for _, existing := range AllowedVolumeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeType", value)
}

// NewVolumeTypeFromValue returns a pointer to a valid VolumeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeTypeFromValue(v string) (*VolumeType, error) {
	ev := VolumeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeType: valid values are %v", v, AllowedVolumeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeType) IsValid() bool {
	for _, existing := range AllowedVolumeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeType value
func (v VolumeType) Ptr() *VolumeType {
	return &v
}

type NullableVolumeType struct {
	value *VolumeType
	isSet bool
}

func (v NullableVolumeType) Get() *VolumeType {
	return v.value
}

func (v *NullableVolumeType) Set(val *VolumeType) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeType) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeType(val *VolumeType) *NullableVolumeType {
	return &NullableVolumeType{value: val, isSet: true}
}

func (v NullableVolumeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
