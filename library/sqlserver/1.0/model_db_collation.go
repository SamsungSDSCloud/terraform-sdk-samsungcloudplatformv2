/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"encoding/json"
	"fmt"
)

// DbCollation the model 'DbCollation'
type DbCollation string

// List of DbCollation
const (
	DBCOLLATION_SQL_LATIN1_GENERAL_CP1_CI_AS DbCollation = "SQL_Latin1_General_CP1_CI_AS"
	DBCOLLATION_KOREAN_WANSUNG_CS_AS         DbCollation = "Korean_Wansung_CS_AS"
	DBCOLLATION_CHINESE_PRC_CI_AS            DbCollation = "Chinese_PRC_CI_AS"
)

// All allowed values of DbCollation enum
var AllowedDbCollationEnumValues = []DbCollation{
	"SQL_Latin1_General_CP1_CI_AS",
	"Korean_Wansung_CS_AS",
	"Chinese_PRC_CI_AS",
}

func (v *DbCollation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DbCollation(value)
	for _, existing := range AllowedDbCollationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DbCollation", value)
}

// NewDbCollationFromValue returns a pointer to a valid DbCollation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDbCollationFromValue(v string) (*DbCollation, error) {
	ev := DbCollation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DbCollation: valid values are %v", v, AllowedDbCollationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DbCollation) IsValid() bool {
	for _, existing := range AllowedDbCollationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DbCollation value
func (v DbCollation) Ptr() *DbCollation {
	return &v
}

type NullableDbCollation struct {
	value *DbCollation
	isSet bool
}

func (v NullableDbCollation) Get() *DbCollation {
	return v.value
}

func (v *NullableDbCollation) Set(val *DbCollation) {
	v.value = val
	v.isSet = true
}

func (v NullableDbCollation) IsSet() bool {
	return v.isSet
}

func (v *NullableDbCollation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbCollation(val *DbCollation) *NullableDbCollation {
	return &NullableDbCollation{value: val, isSet: true}
}

func (v NullableDbCollation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbCollation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
