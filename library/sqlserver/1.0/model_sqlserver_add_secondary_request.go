/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SqlserverAddSecondaryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverAddSecondaryRequest{}

// SqlserverAddSecondaryRequest struct for SqlserverAddSecondaryRequest
type SqlserverAddSecondaryRequest struct {
	// license
	License string `json:"license"`
	// Secondary Name
	Name             string         `json:"name" validate:"regexp=^[a-z][a-z0-9\\\\-]*[a-z0-9]$"`
	ServiceIpAddress NullableString `json:"service_ip_address,omitempty"`
}

type _SqlserverAddSecondaryRequest SqlserverAddSecondaryRequest

// NewSqlserverAddSecondaryRequest instantiates a new SqlserverAddSecondaryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverAddSecondaryRequest(license string, name string) *SqlserverAddSecondaryRequest {
	this := SqlserverAddSecondaryRequest{}
	this.License = license
	this.Name = name
	return &this
}

// NewSqlserverAddSecondaryRequestWithDefaults instantiates a new SqlserverAddSecondaryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverAddSecondaryRequestWithDefaults() *SqlserverAddSecondaryRequest {
	this := SqlserverAddSecondaryRequest{}
	return &this
}

// GetLicense returns the License field value
func (o *SqlserverAddSecondaryRequest) GetLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *SqlserverAddSecondaryRequest) GetLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *SqlserverAddSecondaryRequest) SetLicense(v string) {
	o.License = v
}

// GetName returns the Name field value
func (o *SqlserverAddSecondaryRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SqlserverAddSecondaryRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SqlserverAddSecondaryRequest) SetName(v string) {
	o.Name = v
}

// GetServiceIpAddress returns the ServiceIpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlserverAddSecondaryRequest) GetServiceIpAddress() string {
	if o == nil || IsNil(o.ServiceIpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceIpAddress.Get()
}

// GetServiceIpAddressOk returns a tuple with the ServiceIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlserverAddSecondaryRequest) GetServiceIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceIpAddress.Get(), o.ServiceIpAddress.IsSet()
}

// HasServiceIpAddress returns a boolean if a field has been set.
func (o *SqlserverAddSecondaryRequest) HasServiceIpAddress() bool {
	if o != nil && o.ServiceIpAddress.IsSet() {
		return true
	}

	return false
}

// SetServiceIpAddress gets a reference to the given NullableString and assigns it to the ServiceIpAddress field.
func (o *SqlserverAddSecondaryRequest) SetServiceIpAddress(v string) {
	o.ServiceIpAddress.Set(&v)
}

// SetServiceIpAddressNil sets the value for ServiceIpAddress to be an explicit nil
func (o *SqlserverAddSecondaryRequest) SetServiceIpAddressNil() {
	o.ServiceIpAddress.Set(nil)
}

// UnsetServiceIpAddress ensures that no value is present for ServiceIpAddress, not even an explicit nil
func (o *SqlserverAddSecondaryRequest) UnsetServiceIpAddress() {
	o.ServiceIpAddress.Unset()
}

func (o SqlserverAddSecondaryRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverAddSecondaryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["license"] = o.License
	toSerialize["name"] = o.Name
	if o.ServiceIpAddress.IsSet() {
		toSerialize["service_ip_address"] = o.ServiceIpAddress.Get()
	}
	return toSerialize, nil
}

func (o *SqlserverAddSecondaryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"license",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlserverAddSecondaryRequest := _SqlserverAddSecondaryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlserverAddSecondaryRequest)

	if err != nil {
		return err
	}

	*o = SqlserverAddSecondaryRequest(varSqlserverAddSecondaryRequest)

	return err
}

type NullableSqlserverAddSecondaryRequest struct {
	value *SqlserverAddSecondaryRequest
	isSet bool
}

func (v NullableSqlserverAddSecondaryRequest) Get() *SqlserverAddSecondaryRequest {
	return v.value
}

func (v *NullableSqlserverAddSecondaryRequest) Set(val *SqlserverAddSecondaryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverAddSecondaryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverAddSecondaryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverAddSecondaryRequest(val *SqlserverAddSecondaryRequest) *NullableSqlserverAddSecondaryRequest {
	return &NullableSqlserverAddSecondaryRequest{value: val, isSet: true}
}

func (v NullableSqlserverAddSecondaryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverAddSecondaryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
