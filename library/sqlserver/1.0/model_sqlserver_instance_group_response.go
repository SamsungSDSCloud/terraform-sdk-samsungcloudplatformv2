/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SqlserverInstanceGroupResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverInstanceGroupResponse{}

// SqlserverInstanceGroupResponse struct for SqlserverInstanceGroupResponse
type SqlserverInstanceGroupResponse struct {
	BlockStorageGroups []SqlserverBlockStorageGroupResponse `json:"block_storage_groups"`
	// ID
	Id string `json:"id"`
	// Instances list
	Instances []InstanceResponse `json:"instances"`
	// Role type
	RoleType InstanceGroupRoleType `json:"role_type"`
	// Server type name
	ServerTypeName string `json:"server_type_name"`
}

type _SqlserverInstanceGroupResponse SqlserverInstanceGroupResponse

// NewSqlserverInstanceGroupResponse instantiates a new SqlserverInstanceGroupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverInstanceGroupResponse(blockStorageGroups []SqlserverBlockStorageGroupResponse, id string, instances []InstanceResponse, roleType InstanceGroupRoleType, serverTypeName string) *SqlserverInstanceGroupResponse {
	this := SqlserverInstanceGroupResponse{}
	this.BlockStorageGroups = blockStorageGroups
	this.Id = id
	this.Instances = instances
	this.RoleType = roleType
	this.ServerTypeName = serverTypeName
	return &this
}

// NewSqlserverInstanceGroupResponseWithDefaults instantiates a new SqlserverInstanceGroupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverInstanceGroupResponseWithDefaults() *SqlserverInstanceGroupResponse {
	this := SqlserverInstanceGroupResponse{}
	return &this
}

// GetBlockStorageGroups returns the BlockStorageGroups field value
func (o *SqlserverInstanceGroupResponse) GetBlockStorageGroups() []SqlserverBlockStorageGroupResponse {
	if o == nil {
		var ret []SqlserverBlockStorageGroupResponse
		return ret
	}

	return o.BlockStorageGroups
}

// GetBlockStorageGroupsOk returns a tuple with the BlockStorageGroups field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupResponse) GetBlockStorageGroupsOk() ([]SqlserverBlockStorageGroupResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockStorageGroups, true
}

// SetBlockStorageGroups sets field value
func (o *SqlserverInstanceGroupResponse) SetBlockStorageGroups(v []SqlserverBlockStorageGroupResponse) {
	o.BlockStorageGroups = v
}

// GetId returns the Id field value
func (o *SqlserverInstanceGroupResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SqlserverInstanceGroupResponse) SetId(v string) {
	o.Id = v
}

// GetInstances returns the Instances field value
func (o *SqlserverInstanceGroupResponse) GetInstances() []InstanceResponse {
	if o == nil {
		var ret []InstanceResponse
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupResponse) GetInstancesOk() ([]InstanceResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *SqlserverInstanceGroupResponse) SetInstances(v []InstanceResponse) {
	o.Instances = v
}

// GetRoleType returns the RoleType field value
func (o *SqlserverInstanceGroupResponse) GetRoleType() InstanceGroupRoleType {
	if o == nil {
		var ret InstanceGroupRoleType
		return ret
	}

	return o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupResponse) GetRoleTypeOk() (*InstanceGroupRoleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleType, true
}

// SetRoleType sets field value
func (o *SqlserverInstanceGroupResponse) SetRoleType(v InstanceGroupRoleType) {
	o.RoleType = v
}

// GetServerTypeName returns the ServerTypeName field value
func (o *SqlserverInstanceGroupResponse) GetServerTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerTypeName
}

// GetServerTypeNameOk returns a tuple with the ServerTypeName field value
// and a boolean to check if the value has been set.
func (o *SqlserverInstanceGroupResponse) GetServerTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerTypeName, true
}

// SetServerTypeName sets field value
func (o *SqlserverInstanceGroupResponse) SetServerTypeName(v string) {
	o.ServerTypeName = v
}

func (o SqlserverInstanceGroupResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverInstanceGroupResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["block_storage_groups"] = o.BlockStorageGroups
	toSerialize["id"] = o.Id
	toSerialize["instances"] = o.Instances
	toSerialize["role_type"] = o.RoleType
	toSerialize["server_type_name"] = o.ServerTypeName
	return toSerialize, nil
}

func (o *SqlserverInstanceGroupResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"block_storage_groups",
		"id",
		"instances",
		"role_type",
		"server_type_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlserverInstanceGroupResponse := _SqlserverInstanceGroupResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlserverInstanceGroupResponse)

	if err != nil {
		return err
	}

	*o = SqlserverInstanceGroupResponse(varSqlserverInstanceGroupResponse)

	return err
}

type NullableSqlserverInstanceGroupResponse struct {
	value *SqlserverInstanceGroupResponse
	isSet bool
}

func (v NullableSqlserverInstanceGroupResponse) Get() *SqlserverInstanceGroupResponse {
	return v.value
}

func (v *NullableSqlserverInstanceGroupResponse) Set(val *SqlserverInstanceGroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverInstanceGroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverInstanceGroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverInstanceGroupResponse(val *SqlserverInstanceGroupResponse) *NullableSqlserverInstanceGroupResponse {
	return &NullableSqlserverInstanceGroupResponse{value: val, isSet: true}
}

func (v NullableSqlserverInstanceGroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverInstanceGroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
