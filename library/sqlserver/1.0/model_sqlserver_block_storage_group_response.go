/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2181
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sqlserver

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SqlserverBlockStorageGroupResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SqlserverBlockStorageGroupResponse{}

// SqlserverBlockStorageGroupResponse struct for SqlserverBlockStorageGroupResponse
type SqlserverBlockStorageGroupResponse struct {
	// Drive letter
	DriveLetter string `json:"drive_letter"`
	// ID
	Id string `json:"id"`
	// Name
	Name string `json:"name"`
	// Role type
	RoleType BlockStorageGroupRoleType `json:"role_type"`
	// Size in GB
	SizeGb int32 `json:"size_gb"`
	// Volume type
	VolumeType VolumeType `json:"volume_type"`
}

type _SqlserverBlockStorageGroupResponse SqlserverBlockStorageGroupResponse

// NewSqlserverBlockStorageGroupResponse instantiates a new SqlserverBlockStorageGroupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlserverBlockStorageGroupResponse(driveLetter string, id string, name string, roleType BlockStorageGroupRoleType, sizeGb int32, volumeType VolumeType) *SqlserverBlockStorageGroupResponse {
	this := SqlserverBlockStorageGroupResponse{}
	this.DriveLetter = driveLetter
	this.Id = id
	this.Name = name
	this.RoleType = roleType
	this.SizeGb = sizeGb
	this.VolumeType = volumeType
	return &this
}

// NewSqlserverBlockStorageGroupResponseWithDefaults instantiates a new SqlserverBlockStorageGroupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlserverBlockStorageGroupResponseWithDefaults() *SqlserverBlockStorageGroupResponse {
	this := SqlserverBlockStorageGroupResponse{}
	return &this
}

// GetDriveLetter returns the DriveLetter field value
func (o *SqlserverBlockStorageGroupResponse) GetDriveLetter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DriveLetter
}

// GetDriveLetterOk returns a tuple with the DriveLetter field value
// and a boolean to check if the value has been set.
func (o *SqlserverBlockStorageGroupResponse) GetDriveLetterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DriveLetter, true
}

// SetDriveLetter sets field value
func (o *SqlserverBlockStorageGroupResponse) SetDriveLetter(v string) {
	o.DriveLetter = v
}

// GetId returns the Id field value
func (o *SqlserverBlockStorageGroupResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SqlserverBlockStorageGroupResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SqlserverBlockStorageGroupResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SqlserverBlockStorageGroupResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SqlserverBlockStorageGroupResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SqlserverBlockStorageGroupResponse) SetName(v string) {
	o.Name = v
}

// GetRoleType returns the RoleType field value
func (o *SqlserverBlockStorageGroupResponse) GetRoleType() BlockStorageGroupRoleType {
	if o == nil {
		var ret BlockStorageGroupRoleType
		return ret
	}

	return o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value
// and a boolean to check if the value has been set.
func (o *SqlserverBlockStorageGroupResponse) GetRoleTypeOk() (*BlockStorageGroupRoleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleType, true
}

// SetRoleType sets field value
func (o *SqlserverBlockStorageGroupResponse) SetRoleType(v BlockStorageGroupRoleType) {
	o.RoleType = v
}

// GetSizeGb returns the SizeGb field value
func (o *SqlserverBlockStorageGroupResponse) GetSizeGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value
// and a boolean to check if the value has been set.
func (o *SqlserverBlockStorageGroupResponse) GetSizeGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeGb, true
}

// SetSizeGb sets field value
func (o *SqlserverBlockStorageGroupResponse) SetSizeGb(v int32) {
	o.SizeGb = v
}

// GetVolumeType returns the VolumeType field value
func (o *SqlserverBlockStorageGroupResponse) GetVolumeType() VolumeType {
	if o == nil {
		var ret VolumeType
		return ret
	}

	return o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value
// and a boolean to check if the value has been set.
func (o *SqlserverBlockStorageGroupResponse) GetVolumeTypeOk() (*VolumeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeType, true
}

// SetVolumeType sets field value
func (o *SqlserverBlockStorageGroupResponse) SetVolumeType(v VolumeType) {
	o.VolumeType = v
}

func (o SqlserverBlockStorageGroupResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SqlserverBlockStorageGroupResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["drive_letter"] = o.DriveLetter
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["role_type"] = o.RoleType
	toSerialize["size_gb"] = o.SizeGb
	toSerialize["volume_type"] = o.VolumeType
	return toSerialize, nil
}

func (o *SqlserverBlockStorageGroupResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"drive_letter",
		"id",
		"name",
		"role_type",
		"size_gb",
		"volume_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSqlserverBlockStorageGroupResponse := _SqlserverBlockStorageGroupResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSqlserverBlockStorageGroupResponse)

	if err != nil {
		return err
	}

	*o = SqlserverBlockStorageGroupResponse(varSqlserverBlockStorageGroupResponse)

	return err
}

type NullableSqlserverBlockStorageGroupResponse struct {
	value *SqlserverBlockStorageGroupResponse
	isSet bool
}

func (v NullableSqlserverBlockStorageGroupResponse) Get() *SqlserverBlockStorageGroupResponse {
	return v.value
}

func (v *NullableSqlserverBlockStorageGroupResponse) Set(val *SqlserverBlockStorageGroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlserverBlockStorageGroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlserverBlockStorageGroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlserverBlockStorageGroupResponse(val *SqlserverBlockStorageGroupResponse) *NullableSqlserverBlockStorageGroupResponse {
	return &NullableSqlserverBlockStorageGroupResponse{value: val, isSet: true}
}

func (v NullableSqlserverBlockStorageGroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlserverBlockStorageGroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
