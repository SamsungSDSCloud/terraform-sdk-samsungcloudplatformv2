/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CommandItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandItem{}

// CommandItem struct for CommandItem
type CommandItem struct {
	AppliedValue NullableString `json:"applied_value,omitempty"`
	Description  NullableString `json:"description,omitempty"`
	Id           string         `json:"id"`
	Modifiable   bool           `json:"modifiable"`
	Name         string         `json:"name"`
}

type _CommandItem CommandItem

// NewCommandItem instantiates a new CommandItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandItem(id string, modifiable bool, name string) *CommandItem {
	this := CommandItem{}
	this.Id = id
	this.Modifiable = modifiable
	this.Name = name
	return &this
}

// NewCommandItemWithDefaults instantiates a new CommandItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandItemWithDefaults() *CommandItem {
	this := CommandItem{}
	return &this
}

// GetAppliedValue returns the AppliedValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommandItem) GetAppliedValue() string {
	if o == nil || IsNil(o.AppliedValue.Get()) {
		var ret string
		return ret
	}
	return *o.AppliedValue.Get()
}

// GetAppliedValueOk returns a tuple with the AppliedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommandItem) GetAppliedValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppliedValue.Get(), o.AppliedValue.IsSet()
}

// HasAppliedValue returns a boolean if a field has been set.
func (o *CommandItem) HasAppliedValue() bool {
	if o != nil && o.AppliedValue.IsSet() {
		return true
	}

	return false
}

// SetAppliedValue gets a reference to the given NullableString and assigns it to the AppliedValue field.
func (o *CommandItem) SetAppliedValue(v string) {
	o.AppliedValue.Set(&v)
}

// SetAppliedValueNil sets the value for AppliedValue to be an explicit nil
func (o *CommandItem) SetAppliedValueNil() {
	o.AppliedValue.Set(nil)
}

// UnsetAppliedValue ensures that no value is present for AppliedValue, not even an explicit nil
func (o *CommandItem) UnsetAppliedValue() {
	o.AppliedValue.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommandItem) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommandItem) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CommandItem) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CommandItem) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CommandItem) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CommandItem) UnsetDescription() {
	o.Description.Unset()
}

// GetId returns the Id field value
func (o *CommandItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CommandItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CommandItem) SetId(v string) {
	o.Id = v
}

// GetModifiable returns the Modifiable field value
func (o *CommandItem) GetModifiable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Modifiable
}

// GetModifiableOk returns a tuple with the Modifiable field value
// and a boolean to check if the value has been set.
func (o *CommandItem) GetModifiableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modifiable, true
}

// SetModifiable sets field value
func (o *CommandItem) SetModifiable(v bool) {
	o.Modifiable = v
}

// GetName returns the Name field value
func (o *CommandItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CommandItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CommandItem) SetName(v string) {
	o.Name = v
}

func (o CommandItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommandItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppliedValue.IsSet() {
		toSerialize["applied_value"] = o.AppliedValue.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["modifiable"] = o.Modifiable
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CommandItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"modifiable",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommandItem := _CommandItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommandItem)

	if err != nil {
		return err
	}

	*o = CommandItem(varCommandItem)

	return err
}

type NullableCommandItem struct {
	value *CommandItem
	isSet bool
}

func (v NullableCommandItem) Get() *CommandItem {
	return v.value
}

func (v *NullableCommandItem) Set(val *CommandItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandItem(val *CommandItem) *NullableCommandItem {
	return &NullableCommandItem{value: val, isSet: true}
}

func (v NullableCommandItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
