/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RedisSwitchOverTargetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedisSwitchOverTargetRequest{}

// RedisSwitchOverTargetRequest struct for RedisSwitchOverTargetRequest
type RedisSwitchOverTargetRequest struct {
	// Switch over target
	SwitchHostName string `json:"switch_host_name"`
}

type _RedisSwitchOverTargetRequest RedisSwitchOverTargetRequest

// NewRedisSwitchOverTargetRequest instantiates a new RedisSwitchOverTargetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedisSwitchOverTargetRequest(switchHostName string) *RedisSwitchOverTargetRequest {
	this := RedisSwitchOverTargetRequest{}
	this.SwitchHostName = switchHostName
	return &this
}

// NewRedisSwitchOverTargetRequestWithDefaults instantiates a new RedisSwitchOverTargetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedisSwitchOverTargetRequestWithDefaults() *RedisSwitchOverTargetRequest {
	this := RedisSwitchOverTargetRequest{}
	return &this
}

// GetSwitchHostName returns the SwitchHostName field value
func (o *RedisSwitchOverTargetRequest) GetSwitchHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SwitchHostName
}

// GetSwitchHostNameOk returns a tuple with the SwitchHostName field value
// and a boolean to check if the value has been set.
func (o *RedisSwitchOverTargetRequest) GetSwitchHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SwitchHostName, true
}

// SetSwitchHostName sets field value
func (o *RedisSwitchOverTargetRequest) SetSwitchHostName(v string) {
	o.SwitchHostName = v
}

func (o RedisSwitchOverTargetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedisSwitchOverTargetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["switch_host_name"] = o.SwitchHostName
	return toSerialize, nil
}

func (o *RedisSwitchOverTargetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"switch_host_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRedisSwitchOverTargetRequest := _RedisSwitchOverTargetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRedisSwitchOverTargetRequest)

	if err != nil {
		return err
	}

	*o = RedisSwitchOverTargetRequest(varRedisSwitchOverTargetRequest)

	return err
}

type NullableRedisSwitchOverTargetRequest struct {
	value *RedisSwitchOverTargetRequest
	isSet bool
}

func (v NullableRedisSwitchOverTargetRequest) Get() *RedisSwitchOverTargetRequest {
	return v.value
}

func (v *NullableRedisSwitchOverTargetRequest) Set(val *RedisSwitchOverTargetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRedisSwitchOverTargetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRedisSwitchOverTargetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedisSwitchOverTargetRequest(val *RedisSwitchOverTargetRequest) *NullableRedisSwitchOverTargetRequest {
	return &NullableRedisSwitchOverTargetRequest{value: val, isSet: true}
}

func (v NullableRedisSwitchOverTargetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedisSwitchOverTargetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
