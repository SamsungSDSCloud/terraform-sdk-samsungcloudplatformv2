/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RedisBlockStorageGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedisBlockStorageGroupRequest{}

// RedisBlockStorageGroupRequest struct for RedisBlockStorageGroupRequest
type RedisBlockStorageGroupRequest struct {
	// Role type
	RoleType BlockStorageGroupRoleType `json:"role_type"`
	// Size in GB
	SizeGb int32 `json:"size_gb"`
	// Volume type
	VolumeType *VolumeType `json:"volume_type,omitempty"`
}

type _RedisBlockStorageGroupRequest RedisBlockStorageGroupRequest

// NewRedisBlockStorageGroupRequest instantiates a new RedisBlockStorageGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedisBlockStorageGroupRequest(roleType BlockStorageGroupRoleType, sizeGb int32) *RedisBlockStorageGroupRequest {
	this := RedisBlockStorageGroupRequest{}
	this.RoleType = roleType
	this.SizeGb = sizeGb
	var volumeType VolumeType = VOLUMETYPE_SSD
	this.VolumeType = &volumeType
	return &this
}

// NewRedisBlockStorageGroupRequestWithDefaults instantiates a new RedisBlockStorageGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedisBlockStorageGroupRequestWithDefaults() *RedisBlockStorageGroupRequest {
	this := RedisBlockStorageGroupRequest{}
	var volumeType VolumeType = VOLUMETYPE_SSD
	this.VolumeType = &volumeType
	return &this
}

// GetRoleType returns the RoleType field value
func (o *RedisBlockStorageGroupRequest) GetRoleType() BlockStorageGroupRoleType {
	if o == nil {
		var ret BlockStorageGroupRoleType
		return ret
	}

	return o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value
// and a boolean to check if the value has been set.
func (o *RedisBlockStorageGroupRequest) GetRoleTypeOk() (*BlockStorageGroupRoleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleType, true
}

// SetRoleType sets field value
func (o *RedisBlockStorageGroupRequest) SetRoleType(v BlockStorageGroupRoleType) {
	o.RoleType = v
}

// GetSizeGb returns the SizeGb field value
func (o *RedisBlockStorageGroupRequest) GetSizeGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value
// and a boolean to check if the value has been set.
func (o *RedisBlockStorageGroupRequest) GetSizeGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeGb, true
}

// SetSizeGb sets field value
func (o *RedisBlockStorageGroupRequest) SetSizeGb(v int32) {
	o.SizeGb = v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *RedisBlockStorageGroupRequest) GetVolumeType() VolumeType {
	if o == nil || IsNil(o.VolumeType) {
		var ret VolumeType
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedisBlockStorageGroupRequest) GetVolumeTypeOk() (*VolumeType, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return o.VolumeType, true
}

// HasVolumeType returns a boolean if a field has been set.
func (o *RedisBlockStorageGroupRequest) HasVolumeType() bool {
	if o != nil && !IsNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given VolumeType and assigns it to the VolumeType field.
func (o *RedisBlockStorageGroupRequest) SetVolumeType(v VolumeType) {
	o.VolumeType = &v
}

func (o RedisBlockStorageGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedisBlockStorageGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role_type"] = o.RoleType
	toSerialize["size_gb"] = o.SizeGb
	if !IsNil(o.VolumeType) {
		toSerialize["volume_type"] = o.VolumeType
	}
	return toSerialize, nil
}

func (o *RedisBlockStorageGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role_type",
		"size_gb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRedisBlockStorageGroupRequest := _RedisBlockStorageGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRedisBlockStorageGroupRequest)

	if err != nil {
		return err
	}

	*o = RedisBlockStorageGroupRequest(varRedisBlockStorageGroupRequest)

	return err
}

type NullableRedisBlockStorageGroupRequest struct {
	value *RedisBlockStorageGroupRequest
	isSet bool
}

func (v NullableRedisBlockStorageGroupRequest) Get() *RedisBlockStorageGroupRequest {
	return v.value
}

func (v *NullableRedisBlockStorageGroupRequest) Set(val *RedisBlockStorageGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRedisBlockStorageGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRedisBlockStorageGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedisBlockStorageGroupRequest(val *RedisBlockStorageGroupRequest) *NullableRedisBlockStorageGroupRequest {
	return &NullableRedisBlockStorageGroupRequest{value: val, isSet: true}
}

func (v NullableRedisBlockStorageGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedisBlockStorageGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
