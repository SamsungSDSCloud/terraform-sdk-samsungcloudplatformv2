/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"encoding/json"
	"fmt"
)

// ClusterRoleType the model 'ClusterRoleType'
type ClusterRoleType string

// List of ClusterRoleType
const (
	CLUSTERROLETYPE_ORIGIN    ClusterRoleType = "ORIGIN"
	CLUSTERROLETYPE_REPLICA   ClusterRoleType = "REPLICA"
	CLUSTERROLETYPE_RECOVERY  ClusterRoleType = "RECOVERY"
	CLUSTERROLETYPE_SECONDARY ClusterRoleType = "SECONDARY"
	CLUSTERROLETYPE_MIGRATION ClusterRoleType = "MIGRATION"
)

// All allowed values of ClusterRoleType enum
var AllowedClusterRoleTypeEnumValues = []ClusterRoleType{
	"ORIGIN",
	"REPLICA",
	"RECOVERY",
	"SECONDARY",
	"MIGRATION",
}

func (v *ClusterRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterRoleType(value)
	for _, existing := range AllowedClusterRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterRoleType", value)
}

// NewClusterRoleTypeFromValue returns a pointer to a valid ClusterRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterRoleTypeFromValue(v string) (*ClusterRoleType, error) {
	ev := ClusterRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterRoleType: valid values are %v", v, AllowedClusterRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterRoleType) IsValid() bool {
	for _, existing := range AllowedClusterRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterRoleType value
func (v ClusterRoleType) Ptr() *ClusterRoleType {
	return &v
}

type NullableClusterRoleType struct {
	value *ClusterRoleType
	isSet bool
}

func (v NullableClusterRoleType) Get() *ClusterRoleType {
	return v.value
}

func (v *NullableClusterRoleType) Set(val *ClusterRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterRoleType(val *ClusterRoleType) *NullableClusterRoleType {
	return &NullableClusterRoleType{value: val, isSet: true}
}

func (v NullableClusterRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
