/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RedisInstanceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedisInstanceResponse{}

// RedisInstanceResponse struct for RedisInstanceResponse
type RedisInstanceResponse struct {
	FloatingIpId NullableString `json:"floating_ip_id,omitempty"`
	// Name
	Name            string         `json:"name"`
	PublicIpAddress NullableString `json:"public_ip_address,omitempty"`
	PublicIpId      NullableString `json:"public_ip_id,omitempty"`
	// Role type
	RoleType         InstanceRoleType `json:"role_type"`
	ServiceIpAddress NullableString   `json:"service_ip_address,omitempty"`
	// Service state
	ServiceState ServiceState `json:"service_state"`
}

type _RedisInstanceResponse RedisInstanceResponse

// NewRedisInstanceResponse instantiates a new RedisInstanceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedisInstanceResponse(name string, roleType InstanceRoleType, serviceState ServiceState) *RedisInstanceResponse {
	this := RedisInstanceResponse{}
	this.Name = name
	this.RoleType = roleType
	this.ServiceState = serviceState
	return &this
}

// NewRedisInstanceResponseWithDefaults instantiates a new RedisInstanceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedisInstanceResponseWithDefaults() *RedisInstanceResponse {
	this := RedisInstanceResponse{}
	return &this
}

// GetFloatingIpId returns the FloatingIpId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedisInstanceResponse) GetFloatingIpId() string {
	if o == nil || IsNil(o.FloatingIpId.Get()) {
		var ret string
		return ret
	}
	return *o.FloatingIpId.Get()
}

// GetFloatingIpIdOk returns a tuple with the FloatingIpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedisInstanceResponse) GetFloatingIpIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FloatingIpId.Get(), o.FloatingIpId.IsSet()
}

// HasFloatingIpId returns a boolean if a field has been set.
func (o *RedisInstanceResponse) HasFloatingIpId() bool {
	if o != nil && o.FloatingIpId.IsSet() {
		return true
	}

	return false
}

// SetFloatingIpId gets a reference to the given NullableString and assigns it to the FloatingIpId field.
func (o *RedisInstanceResponse) SetFloatingIpId(v string) {
	o.FloatingIpId.Set(&v)
}

// SetFloatingIpIdNil sets the value for FloatingIpId to be an explicit nil
func (o *RedisInstanceResponse) SetFloatingIpIdNil() {
	o.FloatingIpId.Set(nil)
}

// UnsetFloatingIpId ensures that no value is present for FloatingIpId, not even an explicit nil
func (o *RedisInstanceResponse) UnsetFloatingIpId() {
	o.FloatingIpId.Unset()
}

// GetName returns the Name field value
func (o *RedisInstanceResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RedisInstanceResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RedisInstanceResponse) SetName(v string) {
	o.Name = v
}

// GetPublicIpAddress returns the PublicIpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedisInstanceResponse) GetPublicIpAddress() string {
	if o == nil || IsNil(o.PublicIpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.PublicIpAddress.Get()
}

// GetPublicIpAddressOk returns a tuple with the PublicIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedisInstanceResponse) GetPublicIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicIpAddress.Get(), o.PublicIpAddress.IsSet()
}

// HasPublicIpAddress returns a boolean if a field has been set.
func (o *RedisInstanceResponse) HasPublicIpAddress() bool {
	if o != nil && o.PublicIpAddress.IsSet() {
		return true
	}

	return false
}

// SetPublicIpAddress gets a reference to the given NullableString and assigns it to the PublicIpAddress field.
func (o *RedisInstanceResponse) SetPublicIpAddress(v string) {
	o.PublicIpAddress.Set(&v)
}

// SetPublicIpAddressNil sets the value for PublicIpAddress to be an explicit nil
func (o *RedisInstanceResponse) SetPublicIpAddressNil() {
	o.PublicIpAddress.Set(nil)
}

// UnsetPublicIpAddress ensures that no value is present for PublicIpAddress, not even an explicit nil
func (o *RedisInstanceResponse) UnsetPublicIpAddress() {
	o.PublicIpAddress.Unset()
}

// GetPublicIpId returns the PublicIpId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedisInstanceResponse) GetPublicIpId() string {
	if o == nil || IsNil(o.PublicIpId.Get()) {
		var ret string
		return ret
	}
	return *o.PublicIpId.Get()
}

// GetPublicIpIdOk returns a tuple with the PublicIpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedisInstanceResponse) GetPublicIpIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicIpId.Get(), o.PublicIpId.IsSet()
}

// HasPublicIpId returns a boolean if a field has been set.
func (o *RedisInstanceResponse) HasPublicIpId() bool {
	if o != nil && o.PublicIpId.IsSet() {
		return true
	}

	return false
}

// SetPublicIpId gets a reference to the given NullableString and assigns it to the PublicIpId field.
func (o *RedisInstanceResponse) SetPublicIpId(v string) {
	o.PublicIpId.Set(&v)
}

// SetPublicIpIdNil sets the value for PublicIpId to be an explicit nil
func (o *RedisInstanceResponse) SetPublicIpIdNil() {
	o.PublicIpId.Set(nil)
}

// UnsetPublicIpId ensures that no value is present for PublicIpId, not even an explicit nil
func (o *RedisInstanceResponse) UnsetPublicIpId() {
	o.PublicIpId.Unset()
}

// GetRoleType returns the RoleType field value
func (o *RedisInstanceResponse) GetRoleType() InstanceRoleType {
	if o == nil {
		var ret InstanceRoleType
		return ret
	}

	return o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value
// and a boolean to check if the value has been set.
func (o *RedisInstanceResponse) GetRoleTypeOk() (*InstanceRoleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleType, true
}

// SetRoleType sets field value
func (o *RedisInstanceResponse) SetRoleType(v InstanceRoleType) {
	o.RoleType = v
}

// GetServiceIpAddress returns the ServiceIpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedisInstanceResponse) GetServiceIpAddress() string {
	if o == nil || IsNil(o.ServiceIpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceIpAddress.Get()
}

// GetServiceIpAddressOk returns a tuple with the ServiceIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedisInstanceResponse) GetServiceIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceIpAddress.Get(), o.ServiceIpAddress.IsSet()
}

// HasServiceIpAddress returns a boolean if a field has been set.
func (o *RedisInstanceResponse) HasServiceIpAddress() bool {
	if o != nil && o.ServiceIpAddress.IsSet() {
		return true
	}

	return false
}

// SetServiceIpAddress gets a reference to the given NullableString and assigns it to the ServiceIpAddress field.
func (o *RedisInstanceResponse) SetServiceIpAddress(v string) {
	o.ServiceIpAddress.Set(&v)
}

// SetServiceIpAddressNil sets the value for ServiceIpAddress to be an explicit nil
func (o *RedisInstanceResponse) SetServiceIpAddressNil() {
	o.ServiceIpAddress.Set(nil)
}

// UnsetServiceIpAddress ensures that no value is present for ServiceIpAddress, not even an explicit nil
func (o *RedisInstanceResponse) UnsetServiceIpAddress() {
	o.ServiceIpAddress.Unset()
}

// GetServiceState returns the ServiceState field value
func (o *RedisInstanceResponse) GetServiceState() ServiceState {
	if o == nil {
		var ret ServiceState
		return ret
	}

	return o.ServiceState
}

// GetServiceStateOk returns a tuple with the ServiceState field value
// and a boolean to check if the value has been set.
func (o *RedisInstanceResponse) GetServiceStateOk() (*ServiceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceState, true
}

// SetServiceState sets field value
func (o *RedisInstanceResponse) SetServiceState(v ServiceState) {
	o.ServiceState = v
}

func (o RedisInstanceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedisInstanceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FloatingIpId.IsSet() {
		toSerialize["floating_ip_id"] = o.FloatingIpId.Get()
	}
	toSerialize["name"] = o.Name
	if o.PublicIpAddress.IsSet() {
		toSerialize["public_ip_address"] = o.PublicIpAddress.Get()
	}
	if o.PublicIpId.IsSet() {
		toSerialize["public_ip_id"] = o.PublicIpId.Get()
	}
	toSerialize["role_type"] = o.RoleType
	if o.ServiceIpAddress.IsSet() {
		toSerialize["service_ip_address"] = o.ServiceIpAddress.Get()
	}
	toSerialize["service_state"] = o.ServiceState
	return toSerialize, nil
}

func (o *RedisInstanceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"role_type",
		"service_state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRedisInstanceResponse := _RedisInstanceResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRedisInstanceResponse)

	if err != nil {
		return err
	}

	*o = RedisInstanceResponse(varRedisInstanceResponse)

	return err
}

type NullableRedisInstanceResponse struct {
	value *RedisInstanceResponse
	isSet bool
}

func (v NullableRedisInstanceResponse) Get() *RedisInstanceResponse {
	return v.value
}

func (v *NullableRedisInstanceResponse) Set(val *RedisInstanceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRedisInstanceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRedisInstanceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedisInstanceResponse(val *RedisInstanceResponse) *NullableRedisInstanceResponse {
	return &NullableRedisInstanceResponse{value: val, isSet: true}
}

func (v NullableRedisInstanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedisInstanceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
