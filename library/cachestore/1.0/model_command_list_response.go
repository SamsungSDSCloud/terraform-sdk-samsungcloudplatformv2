/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CommandListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandListResponse{}

// CommandListResponse struct for CommandListResponse
type CommandListResponse struct {
	// Command list information
	Contents []CommandItem `json:"contents"`
	// Modification time
	LastUpdatedAt string `json:"last_updated_at"`
	// Total number of commands
	TotalCount int32 `json:"total_count"`
}

type _CommandListResponse CommandListResponse

// NewCommandListResponse instantiates a new CommandListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandListResponse(contents []CommandItem, lastUpdatedAt string, totalCount int32) *CommandListResponse {
	this := CommandListResponse{}
	this.Contents = contents
	this.LastUpdatedAt = lastUpdatedAt
	this.TotalCount = totalCount
	return &this
}

// NewCommandListResponseWithDefaults instantiates a new CommandListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandListResponseWithDefaults() *CommandListResponse {
	this := CommandListResponse{}
	return &this
}

// GetContents returns the Contents field value
func (o *CommandListResponse) GetContents() []CommandItem {
	if o == nil {
		var ret []CommandItem
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *CommandListResponse) GetContentsOk() ([]CommandItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *CommandListResponse) SetContents(v []CommandItem) {
	o.Contents = v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value
func (o *CommandListResponse) GetLastUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CommandListResponse) GetLastUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdatedAt, true
}

// SetLastUpdatedAt sets field value
func (o *CommandListResponse) SetLastUpdatedAt(v string) {
	o.LastUpdatedAt = v
}

// GetTotalCount returns the TotalCount field value
func (o *CommandListResponse) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *CommandListResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *CommandListResponse) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o CommandListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommandListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contents"] = o.Contents
	toSerialize["last_updated_at"] = o.LastUpdatedAt
	toSerialize["total_count"] = o.TotalCount
	return toSerialize, nil
}

func (o *CommandListResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contents",
		"last_updated_at",
		"total_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommandListResponse := _CommandListResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommandListResponse)

	if err != nil {
		return err
	}

	*o = CommandListResponse(varCommandListResponse)

	return err
}

type NullableCommandListResponse struct {
	value *CommandListResponse
	isSet bool
}

func (v NullableCommandListResponse) Get() *CommandListResponse {
	return v.value
}

func (v *NullableCommandListResponse) Set(val *CommandListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandListResponse(val *CommandListResponse) *NullableCommandListResponse {
	return &NullableCommandListResponse{value: val, isSet: true}
}

func (v NullableCommandListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
