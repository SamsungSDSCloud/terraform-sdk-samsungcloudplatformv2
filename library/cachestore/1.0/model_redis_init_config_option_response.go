/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"encoding/json"
)

// checks if the RedisInitConfigOptionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedisInitConfigOptionResponse{}

// RedisInitConfigOptionResponse struct for RedisInitConfigOptionResponse
type RedisInitConfigOptionResponse struct {
	BackupOption NullableBackupOption `json:"backup_option,omitempty"`
	DatabasePort NullableInt32        `json:"database_port,omitempty"`
	SentinelPort NullableInt32        `json:"sentinel_port,omitempty"`
}

// NewRedisInitConfigOptionResponse instantiates a new RedisInitConfigOptionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedisInitConfigOptionResponse() *RedisInitConfigOptionResponse {
	this := RedisInitConfigOptionResponse{}
	return &this
}

// NewRedisInitConfigOptionResponseWithDefaults instantiates a new RedisInitConfigOptionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedisInitConfigOptionResponseWithDefaults() *RedisInitConfigOptionResponse {
	this := RedisInitConfigOptionResponse{}
	return &this
}

// GetBackupOption returns the BackupOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedisInitConfigOptionResponse) GetBackupOption() BackupOption {
	if o == nil || IsNil(o.BackupOption.Get()) {
		var ret BackupOption
		return ret
	}
	return *o.BackupOption.Get()
}

// GetBackupOptionOk returns a tuple with the BackupOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedisInitConfigOptionResponse) GetBackupOptionOk() (*BackupOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupOption.Get(), o.BackupOption.IsSet()
}

// HasBackupOption returns a boolean if a field has been set.
func (o *RedisInitConfigOptionResponse) HasBackupOption() bool {
	if o != nil && o.BackupOption.IsSet() {
		return true
	}

	return false
}

// SetBackupOption gets a reference to the given NullableBackupOption and assigns it to the BackupOption field.
func (o *RedisInitConfigOptionResponse) SetBackupOption(v BackupOption) {
	o.BackupOption.Set(&v)
}

// SetBackupOptionNil sets the value for BackupOption to be an explicit nil
func (o *RedisInitConfigOptionResponse) SetBackupOptionNil() {
	o.BackupOption.Set(nil)
}

// UnsetBackupOption ensures that no value is present for BackupOption, not even an explicit nil
func (o *RedisInitConfigOptionResponse) UnsetBackupOption() {
	o.BackupOption.Unset()
}

// GetDatabasePort returns the DatabasePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedisInitConfigOptionResponse) GetDatabasePort() int32 {
	if o == nil || IsNil(o.DatabasePort.Get()) {
		var ret int32
		return ret
	}
	return *o.DatabasePort.Get()
}

// GetDatabasePortOk returns a tuple with the DatabasePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedisInitConfigOptionResponse) GetDatabasePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabasePort.Get(), o.DatabasePort.IsSet()
}

// HasDatabasePort returns a boolean if a field has been set.
func (o *RedisInitConfigOptionResponse) HasDatabasePort() bool {
	if o != nil && o.DatabasePort.IsSet() {
		return true
	}

	return false
}

// SetDatabasePort gets a reference to the given NullableInt32 and assigns it to the DatabasePort field.
func (o *RedisInitConfigOptionResponse) SetDatabasePort(v int32) {
	o.DatabasePort.Set(&v)
}

// SetDatabasePortNil sets the value for DatabasePort to be an explicit nil
func (o *RedisInitConfigOptionResponse) SetDatabasePortNil() {
	o.DatabasePort.Set(nil)
}

// UnsetDatabasePort ensures that no value is present for DatabasePort, not even an explicit nil
func (o *RedisInitConfigOptionResponse) UnsetDatabasePort() {
	o.DatabasePort.Unset()
}

// GetSentinelPort returns the SentinelPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedisInitConfigOptionResponse) GetSentinelPort() int32 {
	if o == nil || IsNil(o.SentinelPort.Get()) {
		var ret int32
		return ret
	}
	return *o.SentinelPort.Get()
}

// GetSentinelPortOk returns a tuple with the SentinelPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedisInitConfigOptionResponse) GetSentinelPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SentinelPort.Get(), o.SentinelPort.IsSet()
}

// HasSentinelPort returns a boolean if a field has been set.
func (o *RedisInitConfigOptionResponse) HasSentinelPort() bool {
	if o != nil && o.SentinelPort.IsSet() {
		return true
	}

	return false
}

// SetSentinelPort gets a reference to the given NullableInt32 and assigns it to the SentinelPort field.
func (o *RedisInitConfigOptionResponse) SetSentinelPort(v int32) {
	o.SentinelPort.Set(&v)
}

// SetSentinelPortNil sets the value for SentinelPort to be an explicit nil
func (o *RedisInitConfigOptionResponse) SetSentinelPortNil() {
	o.SentinelPort.Set(nil)
}

// UnsetSentinelPort ensures that no value is present for SentinelPort, not even an explicit nil
func (o *RedisInitConfigOptionResponse) UnsetSentinelPort() {
	o.SentinelPort.Unset()
}

func (o RedisInitConfigOptionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedisInitConfigOptionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupOption.IsSet() {
		toSerialize["backup_option"] = o.BackupOption.Get()
	}
	if o.DatabasePort.IsSet() {
		toSerialize["database_port"] = o.DatabasePort.Get()
	}
	if o.SentinelPort.IsSet() {
		toSerialize["sentinel_port"] = o.SentinelPort.Get()
	}
	return toSerialize, nil
}

type NullableRedisInitConfigOptionResponse struct {
	value *RedisInitConfigOptionResponse
	isSet bool
}

func (v NullableRedisInitConfigOptionResponse) Get() *RedisInitConfigOptionResponse {
	return v.value
}

func (v *NullableRedisInitConfigOptionResponse) Set(val *RedisInitConfigOptionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRedisInitConfigOptionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRedisInitConfigOptionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedisInitConfigOptionResponse(val *RedisInitConfigOptionResponse) *NullableRedisInitConfigOptionResponse {
	return &NullableRedisInitConfigOptionResponse{value: val, isSet: true}
}

func (v NullableRedisInitConfigOptionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedisInitConfigOptionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
