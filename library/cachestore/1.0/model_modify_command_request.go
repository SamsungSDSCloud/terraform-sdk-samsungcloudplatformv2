/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ModifyCommandRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifyCommandRequest{}

// ModifyCommandRequest struct for ModifyCommandRequest
type ModifyCommandRequest struct {
	// Apply command information
	Commands []ModifyCommandItem `json:"commands"`
}

type _ModifyCommandRequest ModifyCommandRequest

// NewModifyCommandRequest instantiates a new ModifyCommandRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyCommandRequest(commands []ModifyCommandItem) *ModifyCommandRequest {
	this := ModifyCommandRequest{}
	this.Commands = commands
	return &this
}

// NewModifyCommandRequestWithDefaults instantiates a new ModifyCommandRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyCommandRequestWithDefaults() *ModifyCommandRequest {
	this := ModifyCommandRequest{}
	return &this
}

// GetCommands returns the Commands field value
func (o *ModifyCommandRequest) GetCommands() []ModifyCommandItem {
	if o == nil {
		var ret []ModifyCommandItem
		return ret
	}

	return o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value
// and a boolean to check if the value has been set.
func (o *ModifyCommandRequest) GetCommandsOk() ([]ModifyCommandItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commands, true
}

// SetCommands sets field value
func (o *ModifyCommandRequest) SetCommands(v []ModifyCommandItem) {
	o.Commands = v
}

func (o ModifyCommandRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyCommandRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commands"] = o.Commands
	return toSerialize, nil
}

func (o *ModifyCommandRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commands",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyCommandRequest := _ModifyCommandRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyCommandRequest)

	if err != nil {
		return err
	}

	*o = ModifyCommandRequest(varModifyCommandRequest)

	return err
}

type NullableModifyCommandRequest struct {
	value *ModifyCommandRequest
	isSet bool
}

func (v NullableModifyCommandRequest) Get() *ModifyCommandRequest {
	return v.value
}

func (v *NullableModifyCommandRequest) Set(val *ModifyCommandRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyCommandRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyCommandRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyCommandRequest(val *ModifyCommandRequest) *NullableModifyCommandRequest {
	return &NullableModifyCommandRequest{value: val, isSet: true}
}

func (v NullableModifyCommandRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyCommandRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
