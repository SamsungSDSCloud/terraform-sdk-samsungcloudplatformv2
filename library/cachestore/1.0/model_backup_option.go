/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"encoding/json"
)

// checks if the BackupOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupOption{}

// BackupOption struct for BackupOption
type BackupOption struct {
	RetentionPeriodDay NullableString `json:"retention_period_day,omitempty"`
	StartingTimeHour   NullableString `json:"starting_time_hour,omitempty"`
}

// NewBackupOption instantiates a new BackupOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupOption() *BackupOption {
	this := BackupOption{}
	return &this
}

// NewBackupOptionWithDefaults instantiates a new BackupOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupOptionWithDefaults() *BackupOption {
	this := BackupOption{}
	return &this
}

// GetRetentionPeriodDay returns the RetentionPeriodDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupOption) GetRetentionPeriodDay() string {
	if o == nil || IsNil(o.RetentionPeriodDay.Get()) {
		var ret string
		return ret
	}
	return *o.RetentionPeriodDay.Get()
}

// GetRetentionPeriodDayOk returns a tuple with the RetentionPeriodDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupOption) GetRetentionPeriodDayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetentionPeriodDay.Get(), o.RetentionPeriodDay.IsSet()
}

// HasRetentionPeriodDay returns a boolean if a field has been set.
func (o *BackupOption) HasRetentionPeriodDay() bool {
	if o != nil && o.RetentionPeriodDay.IsSet() {
		return true
	}

	return false
}

// SetRetentionPeriodDay gets a reference to the given NullableString and assigns it to the RetentionPeriodDay field.
func (o *BackupOption) SetRetentionPeriodDay(v string) {
	o.RetentionPeriodDay.Set(&v)
}

// SetRetentionPeriodDayNil sets the value for RetentionPeriodDay to be an explicit nil
func (o *BackupOption) SetRetentionPeriodDayNil() {
	o.RetentionPeriodDay.Set(nil)
}

// UnsetRetentionPeriodDay ensures that no value is present for RetentionPeriodDay, not even an explicit nil
func (o *BackupOption) UnsetRetentionPeriodDay() {
	o.RetentionPeriodDay.Unset()
}

// GetStartingTimeHour returns the StartingTimeHour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupOption) GetStartingTimeHour() string {
	if o == nil || IsNil(o.StartingTimeHour.Get()) {
		var ret string
		return ret
	}
	return *o.StartingTimeHour.Get()
}

// GetStartingTimeHourOk returns a tuple with the StartingTimeHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupOption) GetStartingTimeHourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartingTimeHour.Get(), o.StartingTimeHour.IsSet()
}

// HasStartingTimeHour returns a boolean if a field has been set.
func (o *BackupOption) HasStartingTimeHour() bool {
	if o != nil && o.StartingTimeHour.IsSet() {
		return true
	}

	return false
}

// SetStartingTimeHour gets a reference to the given NullableString and assigns it to the StartingTimeHour field.
func (o *BackupOption) SetStartingTimeHour(v string) {
	o.StartingTimeHour.Set(&v)
}

// SetStartingTimeHourNil sets the value for StartingTimeHour to be an explicit nil
func (o *BackupOption) SetStartingTimeHourNil() {
	o.StartingTimeHour.Set(nil)
}

// UnsetStartingTimeHour ensures that no value is present for StartingTimeHour, not even an explicit nil
func (o *BackupOption) UnsetStartingTimeHour() {
	o.StartingTimeHour.Unset()
}

func (o BackupOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RetentionPeriodDay.IsSet() {
		toSerialize["retention_period_day"] = o.RetentionPeriodDay.Get()
	}
	if o.StartingTimeHour.IsSet() {
		toSerialize["starting_time_hour"] = o.StartingTimeHour.Get()
	}
	return toSerialize, nil
}

type NullableBackupOption struct {
	value *BackupOption
	isSet bool
}

func (v NullableBackupOption) Get() *BackupOption {
	return v.value
}

func (v *NullableBackupOption) Set(val *BackupOption) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupOption) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupOption(val *BackupOption) *NullableBackupOption {
	return &NullableBackupOption{value: val, isSet: true}
}

func (v NullableBackupOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
