/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"encoding/json"
	"fmt"
)

// BlockStorageGroupRoleType the model 'BlockStorageGroupRoleType'
type BlockStorageGroupRoleType string

// List of BlockStorageGroupRoleType
const (
	BLOCKSTORAGEGROUPROLETYPE_OS      BlockStorageGroupRoleType = "OS"
	BLOCKSTORAGEGROUPROLETYPE_DATA    BlockStorageGroupRoleType = "DATA"
	BLOCKSTORAGEGROUPROLETYPE_ARCHIVE BlockStorageGroupRoleType = "ARCHIVE"
	BLOCKSTORAGEGROUPROLETYPE_TEMP    BlockStorageGroupRoleType = "TEMP"
	BLOCKSTORAGEGROUPROLETYPE_BACKUP  BlockStorageGroupRoleType = "BACKUP"
)

// All allowed values of BlockStorageGroupRoleType enum
var AllowedBlockStorageGroupRoleTypeEnumValues = []BlockStorageGroupRoleType{
	"OS",
	"DATA",
	"ARCHIVE",
	"TEMP",
	"BACKUP",
}

func (v *BlockStorageGroupRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockStorageGroupRoleType(value)
	for _, existing := range AllowedBlockStorageGroupRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockStorageGroupRoleType", value)
}

// NewBlockStorageGroupRoleTypeFromValue returns a pointer to a valid BlockStorageGroupRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockStorageGroupRoleTypeFromValue(v string) (*BlockStorageGroupRoleType, error) {
	ev := BlockStorageGroupRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockStorageGroupRoleType: valid values are %v", v, AllowedBlockStorageGroupRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockStorageGroupRoleType) IsValid() bool {
	for _, existing := range AllowedBlockStorageGroupRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BlockStorageGroupRoleType value
func (v BlockStorageGroupRoleType) Ptr() *BlockStorageGroupRoleType {
	return &v
}

type NullableBlockStorageGroupRoleType struct {
	value *BlockStorageGroupRoleType
	isSet bool
}

func (v NullableBlockStorageGroupRoleType) Get() *BlockStorageGroupRoleType {
	return v.value
}

func (v *NullableBlockStorageGroupRoleType) Set(val *BlockStorageGroupRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStorageGroupRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStorageGroupRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStorageGroupRoleType(val *BlockStorageGroupRoleType) *NullableBlockStorageGroupRoleType {
	return &NullableBlockStorageGroupRoleType{value: val, isSet: true}
}

func (v NullableBlockStorageGroupRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStorageGroupRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
