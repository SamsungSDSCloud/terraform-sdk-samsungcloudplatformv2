/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cachestore

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ModifyCommandItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifyCommandItem{}

// ModifyCommandItem struct for ModifyCommandItem
type ModifyCommandItem struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// Command modification value
	NewValue string `json:"new_value"`
}

type _ModifyCommandItem ModifyCommandItem

// NewModifyCommandItem instantiates a new ModifyCommandItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyCommandItem(id string, name string, newValue string) *ModifyCommandItem {
	this := ModifyCommandItem{}
	this.Id = id
	this.Name = name
	this.NewValue = newValue
	return &this
}

// NewModifyCommandItemWithDefaults instantiates a new ModifyCommandItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyCommandItemWithDefaults() *ModifyCommandItem {
	this := ModifyCommandItem{}
	return &this
}

// GetId returns the Id field value
func (o *ModifyCommandItem) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModifyCommandItem) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModifyCommandItem) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ModifyCommandItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModifyCommandItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModifyCommandItem) SetName(v string) {
	o.Name = v
}

// GetNewValue returns the NewValue field value
func (o *ModifyCommandItem) GetNewValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewValue
}

// GetNewValueOk returns a tuple with the NewValue field value
// and a boolean to check if the value has been set.
func (o *ModifyCommandItem) GetNewValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewValue, true
}

// SetNewValue sets field value
func (o *ModifyCommandItem) SetNewValue(v string) {
	o.NewValue = v
}

func (o ModifyCommandItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyCommandItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["new_value"] = o.NewValue
	return toSerialize, nil
}

func (o *ModifyCommandItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"new_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyCommandItem := _ModifyCommandItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyCommandItem)

	if err != nil {
		return err
	}

	*o = ModifyCommandItem(varModifyCommandItem)

	return err
}

type NullableModifyCommandItem struct {
	value *ModifyCommandItem
	isSet bool
}

func (v NullableModifyCommandItem) Get() *ModifyCommandItem {
	return v.value
}

func (v *NullableModifyCommandItem) Set(val *ModifyCommandItem) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyCommandItem) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyCommandItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyCommandItem(val *ModifyCommandItem) *NullableModifyCommandItem {
	return &NullableModifyCommandItem{value: val, isSet: true}
}

func (v NullableModifyCommandItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyCommandItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
