/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresql

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParameterDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterDTO{}

// ParameterDTO struct for ParameterDTO
type ParameterDTO struct {
	// Parameter allows value
	AllowsValue string `json:"allows_value"`
	// Parameter applied value
	AppliedValue string `json:"applied_value"`
	// Parameter apply type
	ApplyType string `json:"apply_type"`
	// Parameter data type
	DataType string `json:"data_type"`
	// Parameter default value
	DefaultValue string `json:"default_value"`
	Description NullableString `json:"description"`
	// Parameter id
	Id string `json:"id"`
	// Parameter is_modifiable
	IsModifiable bool `json:"is_modifiable"`
	// Parameter name
	Name string `json:"name"`
	SoftwareType NullableString `json:"software_type"`
}

type _ParameterDTO ParameterDTO

// NewParameterDTO instantiates a new ParameterDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterDTO(allowsValue string, appliedValue string, applyType string, dataType string, defaultValue string, description NullableString, id string, isModifiable bool, name string, softwareType NullableString) *ParameterDTO {
	this := ParameterDTO{}
	this.AllowsValue = allowsValue
	this.AppliedValue = appliedValue
	this.ApplyType = applyType
	this.DataType = dataType
	this.DefaultValue = defaultValue
	this.Description = description
	this.Id = id
	this.IsModifiable = isModifiable
	this.Name = name
	this.SoftwareType = softwareType
	return &this
}

// NewParameterDTOWithDefaults instantiates a new ParameterDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterDTOWithDefaults() *ParameterDTO {
	this := ParameterDTO{}
	return &this
}

// GetAllowsValue returns the AllowsValue field value
func (o *ParameterDTO) GetAllowsValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AllowsValue
}

// GetAllowsValueOk returns a tuple with the AllowsValue field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetAllowsValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowsValue, true
}

// SetAllowsValue sets field value
func (o *ParameterDTO) SetAllowsValue(v string) {
	o.AllowsValue = v
}

// GetAppliedValue returns the AppliedValue field value
func (o *ParameterDTO) GetAppliedValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppliedValue
}

// GetAppliedValueOk returns a tuple with the AppliedValue field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetAppliedValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppliedValue, true
}

// SetAppliedValue sets field value
func (o *ParameterDTO) SetAppliedValue(v string) {
	o.AppliedValue = v
}

// GetApplyType returns the ApplyType field value
func (o *ParameterDTO) GetApplyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApplyType
}

// GetApplyTypeOk returns a tuple with the ApplyType field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetApplyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApplyType, true
}

// SetApplyType sets field value
func (o *ParameterDTO) SetApplyType(v string) {
	o.ApplyType = v
}

// GetDataType returns the DataType field value
func (o *ParameterDTO) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *ParameterDTO) SetDataType(v string) {
	o.DataType = v
}

// GetDefaultValue returns the DefaultValue field value
func (o *ParameterDTO) GetDefaultValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultValue, true
}

// SetDefaultValue sets field value
func (o *ParameterDTO) SetDefaultValue(v string) {
	o.DefaultValue = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ParameterDTO) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterDTO) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *ParameterDTO) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetId returns the Id field value
func (o *ParameterDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParameterDTO) SetId(v string) {
	o.Id = v
}

// GetIsModifiable returns the IsModifiable field value
func (o *ParameterDTO) GetIsModifiable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsModifiable
}

// GetIsModifiableOk returns a tuple with the IsModifiable field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetIsModifiableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsModifiable, true
}

// SetIsModifiable sets field value
func (o *ParameterDTO) SetIsModifiable(v bool) {
	o.IsModifiable = v
}

// GetName returns the Name field value
func (o *ParameterDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParameterDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParameterDTO) SetName(v string) {
	o.Name = v
}

// GetSoftwareType returns the SoftwareType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ParameterDTO) GetSoftwareType() string {
	if o == nil || o.SoftwareType.Get() == nil {
		var ret string
		return ret
	}

	return *o.SoftwareType.Get()
}

// GetSoftwareTypeOk returns a tuple with the SoftwareType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParameterDTO) GetSoftwareTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoftwareType.Get(), o.SoftwareType.IsSet()
}

// SetSoftwareType sets field value
func (o *ParameterDTO) SetSoftwareType(v string) {
	o.SoftwareType.Set(&v)
}

func (o ParameterDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allows_value"] = o.AllowsValue
	toSerialize["applied_value"] = o.AppliedValue
	toSerialize["apply_type"] = o.ApplyType
	toSerialize["data_type"] = o.DataType
	toSerialize["default_value"] = o.DefaultValue
	toSerialize["description"] = o.Description.Get()
	toSerialize["id"] = o.Id
	toSerialize["is_modifiable"] = o.IsModifiable
	toSerialize["name"] = o.Name
	toSerialize["software_type"] = o.SoftwareType.Get()
	return toSerialize, nil
}

func (o *ParameterDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allows_value",
		"applied_value",
		"apply_type",
		"data_type",
		"default_value",
		"description",
		"id",
		"is_modifiable",
		"name",
		"software_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterDTO := _ParameterDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParameterDTO)

	if err != nil {
		return err
	}

	*o = ParameterDTO(varParameterDTO)

	return err
}

type NullableParameterDTO struct {
	value *ParameterDTO
	isSet bool
}

func (v NullableParameterDTO) Get() *ParameterDTO {
	return v.value
}

func (v *NullableParameterDTO) Set(val *ParameterDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterDTO(val *ParameterDTO) *NullableParameterDTO {
	return &NullableParameterDTO{value: val, isSet: true}
}

func (v NullableParameterDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


