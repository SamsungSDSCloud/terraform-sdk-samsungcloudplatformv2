/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresql

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterMigrationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterMigrationRequest{}

// ClusterMigrationRequest struct for ClusterMigrationRequest
type ClusterMigrationRequest struct {
	// Database Name
	SourceDatabaseName string `json:"source_database_name" validate:"regexp=^[a-zA-Z][a-zA-Z0-9]*$"`
	// Database service port
	SourceDatabasePort int32 `json:"source_database_port"`
	// Database User Name
	SourceDatabaseUserName string `json:"source_database_user_name" validate:"regexp=^[a-z]*$"`
	// Database user password
	SourceDatabaseUserPassword string `json:"source_database_user_password"`
	// User subnet IP address
	SourceIpAddress string `json:"source_ip_address"`
}

type _ClusterMigrationRequest ClusterMigrationRequest

// NewClusterMigrationRequest instantiates a new ClusterMigrationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterMigrationRequest(sourceDatabaseName string, sourceDatabasePort int32, sourceDatabaseUserName string, sourceDatabaseUserPassword string, sourceIpAddress string) *ClusterMigrationRequest {
	this := ClusterMigrationRequest{}
	this.SourceDatabaseName = sourceDatabaseName
	this.SourceDatabasePort = sourceDatabasePort
	this.SourceDatabaseUserName = sourceDatabaseUserName
	this.SourceDatabaseUserPassword = sourceDatabaseUserPassword
	this.SourceIpAddress = sourceIpAddress
	return &this
}

// NewClusterMigrationRequestWithDefaults instantiates a new ClusterMigrationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterMigrationRequestWithDefaults() *ClusterMigrationRequest {
	this := ClusterMigrationRequest{}
	return &this
}

// GetSourceDatabaseName returns the SourceDatabaseName field value
func (o *ClusterMigrationRequest) GetSourceDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceDatabaseName
}

// GetSourceDatabaseNameOk returns a tuple with the SourceDatabaseName field value
// and a boolean to check if the value has been set.
func (o *ClusterMigrationRequest) GetSourceDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceDatabaseName, true
}

// SetSourceDatabaseName sets field value
func (o *ClusterMigrationRequest) SetSourceDatabaseName(v string) {
	o.SourceDatabaseName = v
}

// GetSourceDatabasePort returns the SourceDatabasePort field value
func (o *ClusterMigrationRequest) GetSourceDatabasePort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SourceDatabasePort
}

// GetSourceDatabasePortOk returns a tuple with the SourceDatabasePort field value
// and a boolean to check if the value has been set.
func (o *ClusterMigrationRequest) GetSourceDatabasePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceDatabasePort, true
}

// SetSourceDatabasePort sets field value
func (o *ClusterMigrationRequest) SetSourceDatabasePort(v int32) {
	o.SourceDatabasePort = v
}

// GetSourceDatabaseUserName returns the SourceDatabaseUserName field value
func (o *ClusterMigrationRequest) GetSourceDatabaseUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceDatabaseUserName
}

// GetSourceDatabaseUserNameOk returns a tuple with the SourceDatabaseUserName field value
// and a boolean to check if the value has been set.
func (o *ClusterMigrationRequest) GetSourceDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceDatabaseUserName, true
}

// SetSourceDatabaseUserName sets field value
func (o *ClusterMigrationRequest) SetSourceDatabaseUserName(v string) {
	o.SourceDatabaseUserName = v
}

// GetSourceDatabaseUserPassword returns the SourceDatabaseUserPassword field value
func (o *ClusterMigrationRequest) GetSourceDatabaseUserPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceDatabaseUserPassword
}

// GetSourceDatabaseUserPasswordOk returns a tuple with the SourceDatabaseUserPassword field value
// and a boolean to check if the value has been set.
func (o *ClusterMigrationRequest) GetSourceDatabaseUserPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceDatabaseUserPassword, true
}

// SetSourceDatabaseUserPassword sets field value
func (o *ClusterMigrationRequest) SetSourceDatabaseUserPassword(v string) {
	o.SourceDatabaseUserPassword = v
}

// GetSourceIpAddress returns the SourceIpAddress field value
func (o *ClusterMigrationRequest) GetSourceIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceIpAddress
}

// GetSourceIpAddressOk returns a tuple with the SourceIpAddress field value
// and a boolean to check if the value has been set.
func (o *ClusterMigrationRequest) GetSourceIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceIpAddress, true
}

// SetSourceIpAddress sets field value
func (o *ClusterMigrationRequest) SetSourceIpAddress(v string) {
	o.SourceIpAddress = v
}

func (o ClusterMigrationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterMigrationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_database_name"] = o.SourceDatabaseName
	toSerialize["source_database_port"] = o.SourceDatabasePort
	toSerialize["source_database_user_name"] = o.SourceDatabaseUserName
	toSerialize["source_database_user_password"] = o.SourceDatabaseUserPassword
	toSerialize["source_ip_address"] = o.SourceIpAddress
	return toSerialize, nil
}

func (o *ClusterMigrationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_database_name",
		"source_database_port",
		"source_database_user_name",
		"source_database_user_password",
		"source_ip_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterMigrationRequest := _ClusterMigrationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterMigrationRequest)

	if err != nil {
		return err
	}

	*o = ClusterMigrationRequest(varClusterMigrationRequest)

	return err
}

type NullableClusterMigrationRequest struct {
	value *ClusterMigrationRequest
	isSet bool
}

func (v NullableClusterMigrationRequest) Get() *ClusterMigrationRequest {
	return v.value
}

func (v *NullableClusterMigrationRequest) Set(val *ClusterMigrationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterMigrationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterMigrationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterMigrationRequest(val *ClusterMigrationRequest) *NullableClusterMigrationRequest {
	return &NullableClusterMigrationRequest{value: val, isSet: true}
}

func (v NullableClusterMigrationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterMigrationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


