/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2150
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package postgresql

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostgresqlInitConfigOptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostgresqlInitConfigOptionRequest{}

// PostgresqlInitConfigOptionRequest struct for PostgresqlInitConfigOptionRequest
type PostgresqlInitConfigOptionRequest struct {
	// Audit usage state
	AuditEnabled *bool `json:"audit_enabled,omitempty"`
	BackupOption NullablePostgresqlBackupOption `json:"backup_option,omitempty"`
	DatabaseEncoding NullableString `json:"database_encoding,omitempty"`
	DatabaseLocale NullableString `json:"database_locale,omitempty"`
	// Database Name
	DatabaseName string `json:"database_name" validate:"regexp=^[a-zA-Z][a-zA-Z0-9]*$"`
	DatabasePort NullableInt32 `json:"database_port,omitempty"`
	// Database User Name
	DatabaseUserName string `json:"database_user_name" validate:"regexp=^[a-z]*$"`
	// Database user password
	DatabaseUserPassword string `json:"database_user_password"`
}

type _PostgresqlInitConfigOptionRequest PostgresqlInitConfigOptionRequest

// NewPostgresqlInitConfigOptionRequest instantiates a new PostgresqlInitConfigOptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresqlInitConfigOptionRequest(databaseName string, databaseUserName string, databaseUserPassword string) *PostgresqlInitConfigOptionRequest {
	this := PostgresqlInitConfigOptionRequest{}
	var auditEnabled bool = false
	this.AuditEnabled = &auditEnabled
	this.DatabaseName = databaseName
	this.DatabaseUserName = databaseUserName
	this.DatabaseUserPassword = databaseUserPassword
	return &this
}

// NewPostgresqlInitConfigOptionRequestWithDefaults instantiates a new PostgresqlInitConfigOptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresqlInitConfigOptionRequestWithDefaults() *PostgresqlInitConfigOptionRequest {
	this := PostgresqlInitConfigOptionRequest{}
	var auditEnabled bool = false
	this.AuditEnabled = &auditEnabled
	return &this
}

// GetAuditEnabled returns the AuditEnabled field value if set, zero value otherwise.
func (o *PostgresqlInitConfigOptionRequest) GetAuditEnabled() bool {
	if o == nil || IsNil(o.AuditEnabled) {
		var ret bool
		return ret
	}
	return *o.AuditEnabled
}

// GetAuditEnabledOk returns a tuple with the AuditEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlInitConfigOptionRequest) GetAuditEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AuditEnabled) {
		return nil, false
	}
	return o.AuditEnabled, true
}

// HasAuditEnabled returns a boolean if a field has been set.
func (o *PostgresqlInitConfigOptionRequest) HasAuditEnabled() bool {
	if o != nil && !IsNil(o.AuditEnabled) {
		return true
	}

	return false
}

// SetAuditEnabled gets a reference to the given bool and assigns it to the AuditEnabled field.
func (o *PostgresqlInitConfigOptionRequest) SetAuditEnabled(v bool) {
	o.AuditEnabled = &v
}

// GetBackupOption returns the BackupOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresqlInitConfigOptionRequest) GetBackupOption() PostgresqlBackupOption {
	if o == nil || IsNil(o.BackupOption.Get()) {
		var ret PostgresqlBackupOption
		return ret
	}
	return *o.BackupOption.Get()
}

// GetBackupOptionOk returns a tuple with the BackupOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresqlInitConfigOptionRequest) GetBackupOptionOk() (*PostgresqlBackupOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupOption.Get(), o.BackupOption.IsSet()
}

// HasBackupOption returns a boolean if a field has been set.
func (o *PostgresqlInitConfigOptionRequest) HasBackupOption() bool {
	if o != nil && o.BackupOption.IsSet() {
		return true
	}

	return false
}

// SetBackupOption gets a reference to the given NullablePostgresqlBackupOption and assigns it to the BackupOption field.
func (o *PostgresqlInitConfigOptionRequest) SetBackupOption(v PostgresqlBackupOption) {
	o.BackupOption.Set(&v)
}
// SetBackupOptionNil sets the value for BackupOption to be an explicit nil
func (o *PostgresqlInitConfigOptionRequest) SetBackupOptionNil() {
	o.BackupOption.Set(nil)
}

// UnsetBackupOption ensures that no value is present for BackupOption, not even an explicit nil
func (o *PostgresqlInitConfigOptionRequest) UnsetBackupOption() {
	o.BackupOption.Unset()
}

// GetDatabaseEncoding returns the DatabaseEncoding field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseEncoding() string {
	if o == nil || IsNil(o.DatabaseEncoding.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseEncoding.Get()
}

// GetDatabaseEncodingOk returns a tuple with the DatabaseEncoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseEncodingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseEncoding.Get(), o.DatabaseEncoding.IsSet()
}

// HasDatabaseEncoding returns a boolean if a field has been set.
func (o *PostgresqlInitConfigOptionRequest) HasDatabaseEncoding() bool {
	if o != nil && o.DatabaseEncoding.IsSet() {
		return true
	}

	return false
}

// SetDatabaseEncoding gets a reference to the given NullableString and assigns it to the DatabaseEncoding field.
func (o *PostgresqlInitConfigOptionRequest) SetDatabaseEncoding(v string) {
	o.DatabaseEncoding.Set(&v)
}
// SetDatabaseEncodingNil sets the value for DatabaseEncoding to be an explicit nil
func (o *PostgresqlInitConfigOptionRequest) SetDatabaseEncodingNil() {
	o.DatabaseEncoding.Set(nil)
}

// UnsetDatabaseEncoding ensures that no value is present for DatabaseEncoding, not even an explicit nil
func (o *PostgresqlInitConfigOptionRequest) UnsetDatabaseEncoding() {
	o.DatabaseEncoding.Unset()
}

// GetDatabaseLocale returns the DatabaseLocale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseLocale() string {
	if o == nil || IsNil(o.DatabaseLocale.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseLocale.Get()
}

// GetDatabaseLocaleOk returns a tuple with the DatabaseLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseLocaleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseLocale.Get(), o.DatabaseLocale.IsSet()
}

// HasDatabaseLocale returns a boolean if a field has been set.
func (o *PostgresqlInitConfigOptionRequest) HasDatabaseLocale() bool {
	if o != nil && o.DatabaseLocale.IsSet() {
		return true
	}

	return false
}

// SetDatabaseLocale gets a reference to the given NullableString and assigns it to the DatabaseLocale field.
func (o *PostgresqlInitConfigOptionRequest) SetDatabaseLocale(v string) {
	o.DatabaseLocale.Set(&v)
}
// SetDatabaseLocaleNil sets the value for DatabaseLocale to be an explicit nil
func (o *PostgresqlInitConfigOptionRequest) SetDatabaseLocaleNil() {
	o.DatabaseLocale.Set(nil)
}

// UnsetDatabaseLocale ensures that no value is present for DatabaseLocale, not even an explicit nil
func (o *PostgresqlInitConfigOptionRequest) UnsetDatabaseLocale() {
	o.DatabaseLocale.Unset()
}

// GetDatabaseName returns the DatabaseName field value
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *PostgresqlInitConfigOptionRequest) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetDatabasePort returns the DatabasePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresqlInitConfigOptionRequest) GetDatabasePort() int32 {
	if o == nil || IsNil(o.DatabasePort.Get()) {
		var ret int32
		return ret
	}
	return *o.DatabasePort.Get()
}

// GetDatabasePortOk returns a tuple with the DatabasePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresqlInitConfigOptionRequest) GetDatabasePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabasePort.Get(), o.DatabasePort.IsSet()
}

// HasDatabasePort returns a boolean if a field has been set.
func (o *PostgresqlInitConfigOptionRequest) HasDatabasePort() bool {
	if o != nil && o.DatabasePort.IsSet() {
		return true
	}

	return false
}

// SetDatabasePort gets a reference to the given NullableInt32 and assigns it to the DatabasePort field.
func (o *PostgresqlInitConfigOptionRequest) SetDatabasePort(v int32) {
	o.DatabasePort.Set(&v)
}
// SetDatabasePortNil sets the value for DatabasePort to be an explicit nil
func (o *PostgresqlInitConfigOptionRequest) SetDatabasePortNil() {
	o.DatabasePort.Set(nil)
}

// UnsetDatabasePort ensures that no value is present for DatabasePort, not even an explicit nil
func (o *PostgresqlInitConfigOptionRequest) UnsetDatabasePort() {
	o.DatabasePort.Unset()
}

// GetDatabaseUserName returns the DatabaseUserName field value
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserName
}

// GetDatabaseUserNameOk returns a tuple with the DatabaseUserName field value
// and a boolean to check if the value has been set.
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserName, true
}

// SetDatabaseUserName sets field value
func (o *PostgresqlInitConfigOptionRequest) SetDatabaseUserName(v string) {
	o.DatabaseUserName = v
}

// GetDatabaseUserPassword returns the DatabaseUserPassword field value
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseUserPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserPassword
}

// GetDatabaseUserPasswordOk returns a tuple with the DatabaseUserPassword field value
// and a boolean to check if the value has been set.
func (o *PostgresqlInitConfigOptionRequest) GetDatabaseUserPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserPassword, true
}

// SetDatabaseUserPassword sets field value
func (o *PostgresqlInitConfigOptionRequest) SetDatabaseUserPassword(v string) {
	o.DatabaseUserPassword = v
}

func (o PostgresqlInitConfigOptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostgresqlInitConfigOptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditEnabled) {
		toSerialize["audit_enabled"] = o.AuditEnabled
	}
	if o.BackupOption.IsSet() {
		toSerialize["backup_option"] = o.BackupOption.Get()
	}
	if o.DatabaseEncoding.IsSet() {
		toSerialize["database_encoding"] = o.DatabaseEncoding.Get()
	}
	if o.DatabaseLocale.IsSet() {
		toSerialize["database_locale"] = o.DatabaseLocale.Get()
	}
	toSerialize["database_name"] = o.DatabaseName
	if o.DatabasePort.IsSet() {
		toSerialize["database_port"] = o.DatabasePort.Get()
	}
	toSerialize["database_user_name"] = o.DatabaseUserName
	toSerialize["database_user_password"] = o.DatabaseUserPassword
	return toSerialize, nil
}

func (o *PostgresqlInitConfigOptionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_name",
		"database_user_name",
		"database_user_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostgresqlInitConfigOptionRequest := _PostgresqlInitConfigOptionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostgresqlInitConfigOptionRequest)

	if err != nil {
		return err
	}

	*o = PostgresqlInitConfigOptionRequest(varPostgresqlInitConfigOptionRequest)

	return err
}

type NullablePostgresqlInitConfigOptionRequest struct {
	value *PostgresqlInitConfigOptionRequest
	isSet bool
}

func (v NullablePostgresqlInitConfigOptionRequest) Get() *PostgresqlInitConfigOptionRequest {
	return v.value
}

func (v *NullablePostgresqlInitConfigOptionRequest) Set(val *PostgresqlInitConfigOptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresqlInitConfigOptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresqlInitConfigOptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresqlInitConfigOptionRequest(val *PostgresqlInitConfigOptionRequest) *NullablePostgresqlInitConfigOptionRequest {
	return &NullablePostgresqlInitConfigOptionRequest{value: val, isSet: true}
}

func (v NullablePostgresqlInitConfigOptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresqlInitConfigOptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


