/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// CurrencyCodeEnum the model 'CurrencyCodeEnum'
type CurrencyCodeEnum string

// List of CurrencyCodeEnum
const (
	CURRENCYCODEENUM_KRW CurrencyCodeEnum = "KRW"
	CURRENCYCODEENUM_USD CurrencyCodeEnum = "USD"
)

// All allowed values of CurrencyCodeEnum enum
var AllowedCurrencyCodeEnumEnumValues = []CurrencyCodeEnum{
	"KRW",
	"USD",
}

func (v *CurrencyCodeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CurrencyCodeEnum(value)
	for _, existing := range AllowedCurrencyCodeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CurrencyCodeEnum", value)
}

// NewCurrencyCodeEnumFromValue returns a pointer to a valid CurrencyCodeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyCodeEnumFromValue(v string) (*CurrencyCodeEnum, error) {
	ev := CurrencyCodeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CurrencyCodeEnum: valid values are %v", v, AllowedCurrencyCodeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CurrencyCodeEnum) IsValid() bool {
	for _, existing := range AllowedCurrencyCodeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CurrencyCodeEnum value
func (v CurrencyCodeEnum) Ptr() *CurrencyCodeEnum {
	return &v
}

type NullableCurrencyCodeEnum struct {
	value *CurrencyCodeEnum
	isSet bool
}

func (v NullableCurrencyCodeEnum) Get() *CurrencyCodeEnum {
	return v.value
}

func (v *NullableCurrencyCodeEnum) Set(val *CurrencyCodeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyCodeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyCodeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyCodeEnum(val *CurrencyCodeEnum) *NullableCurrencyCodeEnum {
	return &NullableCurrencyCodeEnum{value: val, isSet: true}
}

func (v NullableCurrencyCodeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyCodeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
