/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AccessKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessKey{}

// AccessKey struct for AccessKey
type AccessKey struct {
	// Access Key
	AccessKey string `json:"access_key"`
	// Access key type
	AccessKeyType AccessKeyTypeEnum `json:"access_key_type"`
	// Project ID
	AccountId string `json:"account_id"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Created By
	CreatedBy   string         `json:"created_by"`
	Description NullableString `json:"description,omitempty"`
	// Access key expiration timestamp
	ExpirationTimestamp time.Time `json:"expiration_timestamp"`
	// ID
	Id string `json:"id"`
	// Modified At
	ModifiedAt time.Time `json:"modified_at"`
	// Modified By
	ModifiedBy        string         `json:"modified_by"`
	ParentAccessKeyId NullableString `json:"parent_access_key_id"`
	// Secret Key
	SecretKey string `json:"secret_key"`
}

type _AccessKey AccessKey

// NewAccessKey instantiates a new AccessKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessKey(accessKey string, accessKeyType AccessKeyTypeEnum, accountId string, createdAt time.Time, createdBy string, expirationTimestamp time.Time, id string, modifiedAt time.Time, modifiedBy string, parentAccessKeyId NullableString, secretKey string) *AccessKey {
	this := AccessKey{}
	this.AccessKey = accessKey
	this.AccessKeyType = accessKeyType
	this.AccountId = accountId
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ExpirationTimestamp = expirationTimestamp
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.ParentAccessKeyId = parentAccessKeyId
	this.SecretKey = secretKey
	return &this
}

// NewAccessKeyWithDefaults instantiates a new AccessKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessKeyWithDefaults() *AccessKey {
	this := AccessKey{}
	return &this
}

// GetAccessKey returns the AccessKey field value
func (o *AccessKey) GetAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *AccessKey) SetAccessKey(v string) {
	o.AccessKey = v
}

// GetAccessKeyType returns the AccessKeyType field value
func (o *AccessKey) GetAccessKeyType() AccessKeyTypeEnum {
	if o == nil {
		var ret AccessKeyTypeEnum
		return ret
	}

	return o.AccessKeyType
}

// GetAccessKeyTypeOk returns a tuple with the AccessKeyType field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetAccessKeyTypeOk() (*AccessKeyTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKeyType, true
}

// SetAccessKeyType sets field value
func (o *AccessKey) SetAccessKeyType(v AccessKeyTypeEnum) {
	o.AccessKeyType = v
}

// GetAccountId returns the AccountId field value
func (o *AccessKey) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AccessKey) SetAccountId(v string) {
	o.AccountId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AccessKey) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AccessKey) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *AccessKey) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *AccessKey) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessKey) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessKey) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AccessKey) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AccessKey) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AccessKey) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AccessKey) UnsetDescription() {
	o.Description.Unset()
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value
func (o *AccessKey) GetExpirationTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetExpirationTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpirationTimestamp, true
}

// SetExpirationTimestamp sets field value
func (o *AccessKey) SetExpirationTimestamp(v time.Time) {
	o.ExpirationTimestamp = v
}

// GetId returns the Id field value
func (o *AccessKey) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccessKey) SetId(v string) {
	o.Id = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *AccessKey) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *AccessKey) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *AccessKey) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *AccessKey) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetParentAccessKeyId returns the ParentAccessKeyId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AccessKey) GetParentAccessKeyId() string {
	if o == nil || o.ParentAccessKeyId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ParentAccessKeyId.Get()
}

// GetParentAccessKeyIdOk returns a tuple with the ParentAccessKeyId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessKey) GetParentAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentAccessKeyId.Get(), o.ParentAccessKeyId.IsSet()
}

// SetParentAccessKeyId sets field value
func (o *AccessKey) SetParentAccessKeyId(v string) {
	o.ParentAccessKeyId.Set(&v)
}

// GetSecretKey returns the SecretKey field value
func (o *AccessKey) GetSecretKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value
// and a boolean to check if the value has been set.
func (o *AccessKey) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretKey, true
}

// SetSecretKey sets field value
func (o *AccessKey) SetSecretKey(v string) {
	o.SecretKey = v
}

func (o AccessKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_key"] = o.AccessKey
	toSerialize["access_key_type"] = o.AccessKeyType
	toSerialize["account_id"] = o.AccountId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["expiration_timestamp"] = o.ExpirationTimestamp
	toSerialize["id"] = o.Id
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["parent_access_key_id"] = o.ParentAccessKeyId.Get()
	toSerialize["secret_key"] = o.SecretKey
	return toSerialize, nil
}

func (o *AccessKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_key",
		"access_key_type",
		"account_id",
		"created_at",
		"created_by",
		"expiration_timestamp",
		"id",
		"modified_at",
		"modified_by",
		"parent_access_key_id",
		"secret_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessKey := _AccessKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessKey)

	if err != nil {
		return err
	}

	*o = AccessKey(varAccessKey)

	return err
}

type NullableAccessKey struct {
	value *AccessKey
	isSet bool
}

func (v NullableAccessKey) Get() *AccessKey {
	return v.value
}

func (v *NullableAccessKey) Set(val *AccessKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKey(val *AccessKey) *NullableAccessKey {
	return &NullableAccessKey{value: val, isSet: true}
}

func (v NullableAccessKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
