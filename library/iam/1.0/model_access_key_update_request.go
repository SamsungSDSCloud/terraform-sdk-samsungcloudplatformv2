/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the AccessKeyUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessKeyUpdateRequest{}

// AccessKeyUpdateRequest struct for AccessKeyUpdateRequest
type AccessKeyUpdateRequest struct {
	// 활성화 여부
	IsEnabled *bool `json:"is_enabled,omitempty"`
}

// NewAccessKeyUpdateRequest instantiates a new AccessKeyUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessKeyUpdateRequest() *AccessKeyUpdateRequest {
	this := AccessKeyUpdateRequest{}
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	return &this
}

// NewAccessKeyUpdateRequestWithDefaults instantiates a new AccessKeyUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessKeyUpdateRequestWithDefaults() *AccessKeyUpdateRequest {
	this := AccessKeyUpdateRequest{}
	var isEnabled bool = true
	this.IsEnabled = &isEnabled
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *AccessKeyUpdateRequest) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyUpdateRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *AccessKeyUpdateRequest) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *AccessKeyUpdateRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

func (o AccessKeyUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessKeyUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	return toSerialize, nil
}

type NullableAccessKeyUpdateRequest struct {
	value *AccessKeyUpdateRequest
	isSet bool
}

func (v NullableAccessKeyUpdateRequest) Get() *AccessKeyUpdateRequest {
	return v.value
}

func (v *NullableAccessKeyUpdateRequest) Set(val *AccessKeyUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKeyUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKeyUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKeyUpdateRequest(val *AccessKeyUpdateRequest) *NullableAccessKeyUpdateRequest {
	return &NullableAccessKeyUpdateRequest{value: val, isSet: true}
}

func (v NullableAccessKeyUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKeyUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
