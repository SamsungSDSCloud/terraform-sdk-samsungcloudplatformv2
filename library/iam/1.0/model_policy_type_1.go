/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// PolicyType1 Policy Type
type PolicyType1 struct {
	ArrayOfString *[]string
	String        *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PolicyType1) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into ArrayOfString
	err = json.Unmarshal(data, &dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			return nil // data stored in dst.ArrayOfString, return on the first match
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PolicyType1)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PolicyType1) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePolicyType1 struct {
	value *PolicyType1
	isSet bool
}

func (v NullablePolicyType1) Get() *PolicyType1 {
	return v.value
}

func (v *NullablePolicyType1) Set(val *PolicyType1) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyType1) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyType1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyType1(val *PolicyType1) *NullablePolicyType1 {
	return &NullablePolicyType1{value: val, isSet: true}
}

func (v NullablePolicyType1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyType1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
