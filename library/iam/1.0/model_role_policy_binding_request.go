/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RolePolicyBindingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolePolicyBindingRequest{}

// RolePolicyBindingRequest struct for RolePolicyBindingRequest
type RolePolicyBindingRequest struct {
	// Policy ID List
	PolicyIds []string `json:"policy_ids"`
}

type _RolePolicyBindingRequest RolePolicyBindingRequest

// NewRolePolicyBindingRequest instantiates a new RolePolicyBindingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePolicyBindingRequest(policyIds []string) *RolePolicyBindingRequest {
	this := RolePolicyBindingRequest{}
	this.PolicyIds = policyIds
	return &this
}

// NewRolePolicyBindingRequestWithDefaults instantiates a new RolePolicyBindingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePolicyBindingRequestWithDefaults() *RolePolicyBindingRequest {
	this := RolePolicyBindingRequest{}
	return &this
}

// GetPolicyIds returns the PolicyIds field value
func (o *RolePolicyBindingRequest) GetPolicyIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PolicyIds
}

// GetPolicyIdsOk returns a tuple with the PolicyIds field value
// and a boolean to check if the value has been set.
func (o *RolePolicyBindingRequest) GetPolicyIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyIds, true
}

// SetPolicyIds sets field value
func (o *RolePolicyBindingRequest) SetPolicyIds(v []string) {
	o.PolicyIds = v
}

func (o RolePolicyBindingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolePolicyBindingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["policy_ids"] = o.PolicyIds
	return toSerialize, nil
}

func (o *RolePolicyBindingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policy_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRolePolicyBindingRequest := _RolePolicyBindingRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRolePolicyBindingRequest)

	if err != nil {
		return err
	}

	*o = RolePolicyBindingRequest(varRolePolicyBindingRequest)

	return err
}

type NullableRolePolicyBindingRequest struct {
	value *RolePolicyBindingRequest
	isSet bool
}

func (v NullableRolePolicyBindingRequest) Get() *RolePolicyBindingRequest {
	return v.value
}

func (v *NullableRolePolicyBindingRequest) Set(val *RolePolicyBindingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePolicyBindingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePolicyBindingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePolicyBindingRequest(val *RolePolicyBindingRequest) *NullableRolePolicyBindingRequest {
	return &NullableRolePolicyBindingRequest{value: val, isSet: true}
}

func (v NullableRolePolicyBindingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePolicyBindingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
