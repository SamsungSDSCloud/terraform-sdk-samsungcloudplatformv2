/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Role type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Role{}

// Role struct for Role
type Role struct {
	AccountId NullableString `json:"account_id,omitempty"`
	// 역할 신뢰 정책
	AssumeRolePolicyDocument PolicyDocument `json:"assume_role_policy_document"`
	// 생성 일시
	CreatedAt time.Time `json:"created_at"`
	// 생성자
	CreatedBy string `json:"created_by"`
	// 생성자 Email
	CreatorEmail *string `json:"creator_email,omitempty"`
	// 생성자 성, 이름
	CreatorName *string        `json:"creator_name,omitempty"`
	Description NullableString `json:"description"`
	// ID
	Id string `json:"id"`
	// 역할 세션 최대 지속 시간(초)
	MaxSessionDuration int32 `json:"max_session_duration"`
	// 수정 일시
	ModifiedAt time.Time `json:"modified_at"`
	// 수정자
	ModifiedBy string `json:"modified_by"`
	// 수정자 Email
	ModifierEmail *string `json:"modifier_email,omitempty"`
	// 수정자 성, 이름
	ModifierName *string `json:"modifier_name,omitempty"`
	// 역할명
	Name     string   `json:"name"`
	Policies []Policy `json:"policies"`
	// 역할 유형
	Type *RoleTypeEnum `json:"type,omitempty"`
}

type _Role Role

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole(assumeRolePolicyDocument PolicyDocument, createdAt time.Time, createdBy string, description NullableString, id string, maxSessionDuration int32, modifiedAt time.Time, modifiedBy string, name string, policies []Policy) *Role {
	this := Role{}
	this.AssumeRolePolicyDocument = assumeRolePolicyDocument
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	var creatorEmail string = "-"
	this.CreatorEmail = &creatorEmail
	var creatorName string = "-"
	this.CreatorName = &creatorName
	this.Description = description
	this.Id = id
	this.MaxSessionDuration = maxSessionDuration
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	var modifierEmail string = "-"
	this.ModifierEmail = &modifierEmail
	var modifierName string = "-"
	this.ModifierName = &modifierName
	this.Name = name
	this.Policies = policies
	var type_ RoleTypeEnum = ROLETYPEENUM_DEFAULT
	this.Type = &type_
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	var creatorEmail string = "-"
	this.CreatorEmail = &creatorEmail
	var creatorName string = "-"
	this.CreatorName = &creatorName
	var modifierEmail string = "-"
	this.ModifierEmail = &modifierEmail
	var modifierName string = "-"
	this.ModifierName = &modifierName
	var type_ RoleTypeEnum = ROLETYPEENUM_DEFAULT
	this.Type = &type_
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetAccountId() string {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *Role) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *Role) SetAccountId(v string) {
	o.AccountId.Set(&v)
}

// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *Role) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *Role) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetAssumeRolePolicyDocument returns the AssumeRolePolicyDocument field value
func (o *Role) GetAssumeRolePolicyDocument() PolicyDocument {
	if o == nil {
		var ret PolicyDocument
		return ret
	}

	return o.AssumeRolePolicyDocument
}

// GetAssumeRolePolicyDocumentOk returns a tuple with the AssumeRolePolicyDocument field value
// and a boolean to check if the value has been set.
func (o *Role) GetAssumeRolePolicyDocumentOk() (*PolicyDocument, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssumeRolePolicyDocument, true
}

// SetAssumeRolePolicyDocument sets field value
func (o *Role) SetAssumeRolePolicyDocument(v PolicyDocument) {
	o.AssumeRolePolicyDocument = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Role) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Role) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Role) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Role) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Role) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Role) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *Role) GetCreatorEmail() string {
	if o == nil || IsNil(o.CreatorEmail) {
		var ret string
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetCreatorEmailOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorEmail) {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *Role) HasCreatorEmail() bool {
	if o != nil && !IsNil(o.CreatorEmail) {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given string and assigns it to the CreatorEmail field.
func (o *Role) SetCreatorEmail(v string) {
	o.CreatorEmail = &v
}

// GetCreatorName returns the CreatorName field value if set, zero value otherwise.
func (o *Role) GetCreatorName() string {
	if o == nil || IsNil(o.CreatorName) {
		var ret string
		return ret
	}
	return *o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetCreatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorName) {
		return nil, false
	}
	return o.CreatorName, true
}

// HasCreatorName returns a boolean if a field has been set.
func (o *Role) HasCreatorName() bool {
	if o != nil && !IsNil(o.CreatorName) {
		return true
	}

	return false
}

// SetCreatorName gets a reference to the given string and assigns it to the CreatorName field.
func (o *Role) SetCreatorName(v string) {
	o.CreatorName = &v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Role) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Role) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetId returns the Id field value
func (o *Role) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Role) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Role) SetId(v string) {
	o.Id = v
}

// GetMaxSessionDuration returns the MaxSessionDuration field value
func (o *Role) GetMaxSessionDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxSessionDuration
}

// GetMaxSessionDurationOk returns a tuple with the MaxSessionDuration field value
// and a boolean to check if the value has been set.
func (o *Role) GetMaxSessionDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSessionDuration, true
}

// SetMaxSessionDuration sets field value
func (o *Role) SetMaxSessionDuration(v int32) {
	o.MaxSessionDuration = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *Role) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *Role) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *Role) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Role) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Role) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Role) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModifierEmail returns the ModifierEmail field value if set, zero value otherwise.
func (o *Role) GetModifierEmail() string {
	if o == nil || IsNil(o.ModifierEmail) {
		var ret string
		return ret
	}
	return *o.ModifierEmail
}

// GetModifierEmailOk returns a tuple with the ModifierEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetModifierEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ModifierEmail) {
		return nil, false
	}
	return o.ModifierEmail, true
}

// HasModifierEmail returns a boolean if a field has been set.
func (o *Role) HasModifierEmail() bool {
	if o != nil && !IsNil(o.ModifierEmail) {
		return true
	}

	return false
}

// SetModifierEmail gets a reference to the given string and assigns it to the ModifierEmail field.
func (o *Role) SetModifierEmail(v string) {
	o.ModifierEmail = &v
}

// GetModifierName returns the ModifierName field value if set, zero value otherwise.
func (o *Role) GetModifierName() string {
	if o == nil || IsNil(o.ModifierName) {
		var ret string
		return ret
	}
	return *o.ModifierName
}

// GetModifierNameOk returns a tuple with the ModifierName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetModifierNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModifierName) {
		return nil, false
	}
	return o.ModifierName, true
}

// HasModifierName returns a boolean if a field has been set.
func (o *Role) HasModifierName() bool {
	if o != nil && !IsNil(o.ModifierName) {
		return true
	}

	return false
}

// SetModifierName gets a reference to the given string and assigns it to the ModifierName field.
func (o *Role) SetModifierName(v string) {
	o.ModifierName = &v
}

// GetName returns the Name field value
func (o *Role) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Role) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Role) SetName(v string) {
	o.Name = v
}

// GetPolicies returns the Policies field value
// If the value is explicit nil, the zero value for []Policy will be returned
func (o *Role) GetPolicies() []Policy {
	if o == nil {
		var ret []Policy
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetPoliciesOk() ([]Policy, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *Role) SetPolicies(v []Policy) {
	o.Policies = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Role) GetType() RoleTypeEnum {
	if o == nil || IsNil(o.Type) {
		var ret RoleTypeEnum
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Role) GetTypeOk() (*RoleTypeEnum, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Role) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given RoleTypeEnum and assigns it to the Type field.
func (o *Role) SetType(v RoleTypeEnum) {
	o.Type = &v
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Role) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId.IsSet() {
		toSerialize["account_id"] = o.AccountId.Get()
	}
	toSerialize["assume_role_policy_document"] = o.AssumeRolePolicyDocument
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	if !IsNil(o.CreatorEmail) {
		toSerialize["creator_email"] = o.CreatorEmail
	}
	if !IsNil(o.CreatorName) {
		toSerialize["creator_name"] = o.CreatorName
	}
	toSerialize["description"] = o.Description.Get()
	toSerialize["id"] = o.Id
	toSerialize["max_session_duration"] = o.MaxSessionDuration
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	if !IsNil(o.ModifierEmail) {
		toSerialize["modifier_email"] = o.ModifierEmail
	}
	if !IsNil(o.ModifierName) {
		toSerialize["modifier_name"] = o.ModifierName
	}
	toSerialize["name"] = o.Name
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *Role) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assume_role_policy_document",
		"created_at",
		"created_by",
		"description",
		"id",
		"max_session_duration",
		"modified_at",
		"modified_by",
		"name",
		"policies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRole := _Role{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRole)

	if err != nil {
		return err
	}

	*o = Role(varRole)

	return err
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
