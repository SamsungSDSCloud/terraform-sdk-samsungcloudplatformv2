/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// IamV1PoliciesApiAPIService IamV1PoliciesApiAPI service
type IamV1PoliciesApiAPIService service

type IamV1PoliciesApiAPICreatePolicyRequest struct {
	ctx                 context.Context
	ApiService          *IamV1PoliciesApiAPIService
	policyCreateRequest *PolicyCreateRequest
}

func (r IamV1PoliciesApiAPICreatePolicyRequest) PolicyCreateRequest(policyCreateRequest PolicyCreateRequest) IamV1PoliciesApiAPICreatePolicyRequest {
	r.policyCreateRequest = &policyCreateRequest
	return r
}

func (r IamV1PoliciesApiAPICreatePolicyRequest) Execute() (*PolicyShowResponse, *http.Response, error) {
	return r.ApiService.CreatePolicyExecute(r)
}

/*
CreatePolicy Create a policy

Create a policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IamV1PoliciesApiAPICreatePolicyRequest
*/
func (a *IamV1PoliciesApiAPIService) CreatePolicy(ctx context.Context) IamV1PoliciesApiAPICreatePolicyRequest {
	return IamV1PoliciesApiAPICreatePolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PolicyShowResponse
func (a *IamV1PoliciesApiAPIService) CreatePolicyExecute(r IamV1PoliciesApiAPICreatePolicyRequest) (*PolicyShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyCreateRequest == nil {
		return localVarReturnValue, nil, reportError("policyCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPIDeletePoliciesRequest struct {
	ctx                     context.Context
	ApiService              *IamV1PoliciesApiAPIService
	listPolicyRemoveRequest *ListPolicyRemoveRequest
}

func (r IamV1PoliciesApiAPIDeletePoliciesRequest) ListPolicyRemoveRequest(listPolicyRemoveRequest ListPolicyRemoveRequest) IamV1PoliciesApiAPIDeletePoliciesRequest {
	r.listPolicyRemoveRequest = &listPolicyRemoveRequest
	return r
}

func (r IamV1PoliciesApiAPIDeletePoliciesRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePoliciesExecute(r)
}

/*
DeletePolicies Remove policies

Remove policies

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IamV1PoliciesApiAPIDeletePoliciesRequest
*/
func (a *IamV1PoliciesApiAPIService) DeletePolicies(ctx context.Context) IamV1PoliciesApiAPIDeletePoliciesRequest {
	return IamV1PoliciesApiAPIDeletePoliciesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *IamV1PoliciesApiAPIService) DeletePoliciesExecute(r IamV1PoliciesApiAPIDeletePoliciesRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/policies/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.listPolicyRemoveRequest == nil {
		return nil, reportError("listPolicyRemoveRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.listPolicyRemoveRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPIDeletePolicyRequest struct {
	ctx        context.Context
	ApiService *IamV1PoliciesApiAPIService
	policyId   string
}

func (r IamV1PoliciesApiAPIDeletePolicyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePolicyExecute(r)
}

/*
DeletePolicy Delete the policy

Delete the policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyId Policy ID
	@return IamV1PoliciesApiAPIDeletePolicyRequest
*/
func (a *IamV1PoliciesApiAPIService) DeletePolicy(ctx context.Context, policyId string) IamV1PoliciesApiAPIDeletePolicyRequest {
	return IamV1PoliciesApiAPIDeletePolicyRequest{
		ApiService: a,
		ctx:        ctx,
		policyId:   policyId,
	}
}

// Execute executes the request
func (a *IamV1PoliciesApiAPIService) DeletePolicyExecute(r IamV1PoliciesApiAPIDeletePolicyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return nil, err
		}
	}

	localVarPath := basePath + "/v1/policies/{policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_id"+"}", url.PathEscape(parameterValueToString(r.policyId, "policyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPIListPolicyRequest struct {
	ctx            context.Context
	ApiService     *IamV1PoliciesApiAPIService
	size           *int32
	page           *int32
	sort           *string
	id             *string
	policyName     *string
	policyType     *PolicyType1
	serviceType    *ServiceType
	creatorName    *string
	creatorEmail   *string
	modifierName   *string
	modifierEmail  *string
	excludeGroupId *string
	excludeUserId  *string
}

// size
func (r IamV1PoliciesApiAPIListPolicyRequest) Size(size int32) IamV1PoliciesApiAPIListPolicyRequest {
	r.size = &size
	return r
}

// page
func (r IamV1PoliciesApiAPIListPolicyRequest) Page(page int32) IamV1PoliciesApiAPIListPolicyRequest {
	r.page = &page
	return r
}

// sort
func (r IamV1PoliciesApiAPIListPolicyRequest) Sort(sort string) IamV1PoliciesApiAPIListPolicyRequest {
	r.sort = &sort
	return r
}

// Policy ID
func (r IamV1PoliciesApiAPIListPolicyRequest) Id(id string) IamV1PoliciesApiAPIListPolicyRequest {
	r.id = &id
	return r
}

// Policy Name
func (r IamV1PoliciesApiAPIListPolicyRequest) PolicyName(policyName string) IamV1PoliciesApiAPIListPolicyRequest {
	r.policyName = &policyName
	return r
}

// Policy Type
func (r IamV1PoliciesApiAPIListPolicyRequest) PolicyType(policyType PolicyType1) IamV1PoliciesApiAPIListPolicyRequest {
	r.policyType = &policyType
	return r
}

// Service Type
func (r IamV1PoliciesApiAPIListPolicyRequest) ServiceType(serviceType ServiceType) IamV1PoliciesApiAPIListPolicyRequest {
	r.serviceType = &serviceType
	return r
}

// Policy 생성자 성, 이름
func (r IamV1PoliciesApiAPIListPolicyRequest) CreatorName(creatorName string) IamV1PoliciesApiAPIListPolicyRequest {
	r.creatorName = &creatorName
	return r
}

// Policy 생성자 Email
func (r IamV1PoliciesApiAPIListPolicyRequest) CreatorEmail(creatorEmail string) IamV1PoliciesApiAPIListPolicyRequest {
	r.creatorEmail = &creatorEmail
	return r
}

// Policy 수정자 성, 이름
func (r IamV1PoliciesApiAPIListPolicyRequest) ModifierName(modifierName string) IamV1PoliciesApiAPIListPolicyRequest {
	r.modifierName = &modifierName
	return r
}

// Policy 수정자 Email
func (r IamV1PoliciesApiAPIListPolicyRequest) ModifierEmail(modifierEmail string) IamV1PoliciesApiAPIListPolicyRequest {
	r.modifierEmail = &modifierEmail
	return r
}

// 제외할 Group ID
func (r IamV1PoliciesApiAPIListPolicyRequest) ExcludeGroupId(excludeGroupId string) IamV1PoliciesApiAPIListPolicyRequest {
	r.excludeGroupId = &excludeGroupId
	return r
}

// 제외할 User ID
func (r IamV1PoliciesApiAPIListPolicyRequest) ExcludeUserId(excludeUserId string) IamV1PoliciesApiAPIListPolicyRequest {
	r.excludeUserId = &excludeUserId
	return r
}

func (r IamV1PoliciesApiAPIListPolicyRequest) Execute() (*PolicyPageResponse, *http.Response, error) {
	return r.ApiService.ListPolicyExecute(r)
}

/*
ListPolicy Get policy list

Get policy list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IamV1PoliciesApiAPIListPolicyRequest
*/
func (a *IamV1PoliciesApiAPIService) ListPolicy(ctx context.Context) IamV1PoliciesApiAPIListPolicyRequest {
	return IamV1PoliciesApiAPIListPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PolicyPageResponse
func (a *IamV1PoliciesApiAPIService) ListPolicyExecute(r IamV1PoliciesApiAPIListPolicyRequest) (*PolicyPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyPageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.policyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy_name", r.policyName, "form", "")
	}
	if r.policyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy_type", r.policyType, "form", "")
	}
	if r.serviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service_type", r.serviceType, "form", "")
	}
	if r.creatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creator_name", r.creatorName, "form", "")
	}
	if r.creatorEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creator_email", r.creatorEmail, "form", "")
	}
	if r.modifierName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modifier_name", r.modifierName, "form", "")
	}
	if r.modifierEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modifier_email", r.modifierEmail, "form", "")
	}
	if r.excludeGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_group_id", r.excludeGroupId, "form", "")
	}
	if r.excludeUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_user_id", r.excludeUserId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPIListPolicyBindingRequest struct {
	ctx          context.Context
	ApiService   *IamV1PoliciesApiAPIService
	policyId     string
	size         *int32
	page         *int32
	sort         *string
	identityId   *string
	identityType *string
	name         *string
}

// size
func (r IamV1PoliciesApiAPIListPolicyBindingRequest) Size(size int32) IamV1PoliciesApiAPIListPolicyBindingRequest {
	r.size = &size
	return r
}

// page
func (r IamV1PoliciesApiAPIListPolicyBindingRequest) Page(page int32) IamV1PoliciesApiAPIListPolicyBindingRequest {
	r.page = &page
	return r
}

// sort
func (r IamV1PoliciesApiAPIListPolicyBindingRequest) Sort(sort string) IamV1PoliciesApiAPIListPolicyBindingRequest {
	r.sort = &sort
	return r
}

// Identity ID
func (r IamV1PoliciesApiAPIListPolicyBindingRequest) IdentityId(identityId string) IamV1PoliciesApiAPIListPolicyBindingRequest {
	r.identityId = &identityId
	return r
}

// Identity Type
func (r IamV1PoliciesApiAPIListPolicyBindingRequest) IdentityType(identityType string) IamV1PoliciesApiAPIListPolicyBindingRequest {
	r.identityType = &identityType
	return r
}

// Name
func (r IamV1PoliciesApiAPIListPolicyBindingRequest) Name(name string) IamV1PoliciesApiAPIListPolicyBindingRequest {
	r.name = &name
	return r
}

func (r IamV1PoliciesApiAPIListPolicyBindingRequest) Execute() (*PolicyBindingPageResponse, *http.Response, error) {
	return r.ApiService.ListPolicyBindingExecute(r)
}

/*
ListPolicyBinding Get a specific policy binding list

Get a specific policy binding list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyId Policy ID
	@return IamV1PoliciesApiAPIListPolicyBindingRequest
*/
func (a *IamV1PoliciesApiAPIService) ListPolicyBinding(ctx context.Context, policyId string) IamV1PoliciesApiAPIListPolicyBindingRequest {
	return IamV1PoliciesApiAPIListPolicyBindingRequest{
		ApiService: a,
		ctx:        ctx,
		policyId:   policyId,
	}
}

// Execute executes the request
//
//	@return PolicyBindingPageResponse
func (a *IamV1PoliciesApiAPIService) ListPolicyBindingExecute(r IamV1PoliciesApiAPIListPolicyBindingRequest) (*PolicyBindingPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyBindingPageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/policies/{policy_id}/bindings"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_id"+"}", url.PathEscape(parameterValueToString(r.policyId, "policyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.identityId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identity_id", r.identityId, "form", "")
	}
	if r.identityType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identity_type", r.identityType, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPIQueryPolicyRequest struct {
	ctx                context.Context
	ApiService         *IamV1PoliciesApiAPIService
	policyQueryRequest *PolicyQueryRequest
	size               *int32
	page               *int32
	sort               *string
	id                 *string
	policyName         *string
	policyType         *PolicyType2
	serviceType        *ServiceType1
	creatorName        *string
	creatorEmail       *string
	modifierName       *string
	modifierEmail      *string
	excludeGroupId     *string
	excludeUserId      *string
}

func (r IamV1PoliciesApiAPIQueryPolicyRequest) PolicyQueryRequest(policyQueryRequest PolicyQueryRequest) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.policyQueryRequest = &policyQueryRequest
	return r
}

// size
func (r IamV1PoliciesApiAPIQueryPolicyRequest) Size(size int32) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.size = &size
	return r
}

// page
func (r IamV1PoliciesApiAPIQueryPolicyRequest) Page(page int32) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.page = &page
	return r
}

// sort
func (r IamV1PoliciesApiAPIQueryPolicyRequest) Sort(sort string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.sort = &sort
	return r
}

// Policy ID
func (r IamV1PoliciesApiAPIQueryPolicyRequest) Id(id string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.id = &id
	return r
}

// Policy Name
func (r IamV1PoliciesApiAPIQueryPolicyRequest) PolicyName(policyName string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.policyName = &policyName
	return r
}

// Policy Type
func (r IamV1PoliciesApiAPIQueryPolicyRequest) PolicyType(policyType PolicyType2) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.policyType = &policyType
	return r
}

// Service Type
func (r IamV1PoliciesApiAPIQueryPolicyRequest) ServiceType(serviceType ServiceType1) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.serviceType = &serviceType
	return r
}

// Policy 생성자 성, 이름
func (r IamV1PoliciesApiAPIQueryPolicyRequest) CreatorName(creatorName string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.creatorName = &creatorName
	return r
}

// Policy 생성자 Email
func (r IamV1PoliciesApiAPIQueryPolicyRequest) CreatorEmail(creatorEmail string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.creatorEmail = &creatorEmail
	return r
}

// Policy 수정자 성, 이름
func (r IamV1PoliciesApiAPIQueryPolicyRequest) ModifierName(modifierName string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.modifierName = &modifierName
	return r
}

// Policy 수정자 Email
func (r IamV1PoliciesApiAPIQueryPolicyRequest) ModifierEmail(modifierEmail string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.modifierEmail = &modifierEmail
	return r
}

// 제외할 Group ID
func (r IamV1PoliciesApiAPIQueryPolicyRequest) ExcludeGroupId(excludeGroupId string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.excludeGroupId = &excludeGroupId
	return r
}

// 제외할 User ID
func (r IamV1PoliciesApiAPIQueryPolicyRequest) ExcludeUserId(excludeUserId string) IamV1PoliciesApiAPIQueryPolicyRequest {
	r.excludeUserId = &excludeUserId
	return r
}

func (r IamV1PoliciesApiAPIQueryPolicyRequest) Execute() (*PolicyPageResponse, *http.Response, error) {
	return r.ApiService.QueryPolicyExecute(r)
}

/*
QueryPolicy Query policy list

Query policy list

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IamV1PoliciesApiAPIQueryPolicyRequest
*/
func (a *IamV1PoliciesApiAPIService) QueryPolicy(ctx context.Context) IamV1PoliciesApiAPIQueryPolicyRequest {
	return IamV1PoliciesApiAPIQueryPolicyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PolicyPageResponse
func (a *IamV1PoliciesApiAPIService) QueryPolicyExecute(r IamV1PoliciesApiAPIQueryPolicyRequest) (*PolicyPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyPageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/policies/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyQueryRequest == nil {
		return localVarReturnValue, nil, reportError("policyQueryRequest is required and must be specified")
	}

	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.policyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy_name", r.policyName, "form", "")
	}
	if r.policyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy_type", r.policyType, "form", "")
	}
	if r.serviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "service_type", r.serviceType, "form", "")
	}
	if r.creatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creator_name", r.creatorName, "form", "")
	}
	if r.creatorEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creator_email", r.creatorEmail, "form", "")
	}
	if r.modifierName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modifier_name", r.modifierName, "form", "")
	}
	if r.modifierEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modifier_email", r.modifierEmail, "form", "")
	}
	if r.excludeGroupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_group_id", r.excludeGroupId, "form", "")
	}
	if r.excludeUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_user_id", r.excludeUserId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyQueryRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPISetPolicyRequest struct {
	ctx              context.Context
	ApiService       *IamV1PoliciesApiAPIService
	policyId         string
	policySetRequest *PolicySetRequest
}

func (r IamV1PoliciesApiAPISetPolicyRequest) PolicySetRequest(policySetRequest PolicySetRequest) IamV1PoliciesApiAPISetPolicyRequest {
	r.policySetRequest = &policySetRequest
	return r
}

func (r IamV1PoliciesApiAPISetPolicyRequest) Execute() (*PolicyShowResponse, *http.Response, error) {
	return r.ApiService.SetPolicyExecute(r)
}

/*
SetPolicy Set the policy

Set the policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyId Policy ID
	@return IamV1PoliciesApiAPISetPolicyRequest
*/
func (a *IamV1PoliciesApiAPIService) SetPolicy(ctx context.Context, policyId string) IamV1PoliciesApiAPISetPolicyRequest {
	return IamV1PoliciesApiAPISetPolicyRequest{
		ApiService: a,
		ctx:        ctx,
		policyId:   policyId,
	}
}

// Execute executes the request
//
//	@return PolicyShowResponse
func (a *IamV1PoliciesApiAPIService) SetPolicyExecute(r IamV1PoliciesApiAPISetPolicyRequest) (*PolicyShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/policies/{policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_id"+"}", url.PathEscape(parameterValueToString(r.policyId, "policyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policySetRequest == nil {
		return localVarReturnValue, nil, reportError("policySetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policySetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPISetPolicyGroupBindingRequest struct {
	ctx                     context.Context
	ApiService              *IamV1PoliciesApiAPIService
	policyId                string
	policyBindingSetRequest *PolicyBindingSetRequest
}

func (r IamV1PoliciesApiAPISetPolicyGroupBindingRequest) PolicyBindingSetRequest(policyBindingSetRequest PolicyBindingSetRequest) IamV1PoliciesApiAPISetPolicyGroupBindingRequest {
	r.policyBindingSetRequest = &policyBindingSetRequest
	return r
}

func (r IamV1PoliciesApiAPISetPolicyGroupBindingRequest) Execute() (*PolicyBindingPageResponse, *http.Response, error) {
	return r.ApiService.SetPolicyGroupBindingExecute(r)
}

/*
SetPolicyGroupBinding Set the policy group binding

Set the policy group binding

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyId Policy ID
	@return IamV1PoliciesApiAPISetPolicyGroupBindingRequest
*/
func (a *IamV1PoliciesApiAPIService) SetPolicyGroupBinding(ctx context.Context, policyId string) IamV1PoliciesApiAPISetPolicyGroupBindingRequest {
	return IamV1PoliciesApiAPISetPolicyGroupBindingRequest{
		ApiService: a,
		ctx:        ctx,
		policyId:   policyId,
	}
}

// Execute executes the request
//
//	@return PolicyBindingPageResponse
func (a *IamV1PoliciesApiAPIService) SetPolicyGroupBindingExecute(r IamV1PoliciesApiAPISetPolicyGroupBindingRequest) (*PolicyBindingPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyBindingPageResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/policies/{policy_id}/bindings"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_id"+"}", url.PathEscape(parameterValueToString(r.policyId, "policyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.policyBindingSetRequest == nil {
		return localVarReturnValue, nil, reportError("policyBindingSetRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.policyBindingSetRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IamV1PoliciesApiAPIShowPolicyRequest struct {
	ctx        context.Context
	ApiService *IamV1PoliciesApiAPIService
	policyId   string
}

func (r IamV1PoliciesApiAPIShowPolicyRequest) Execute() (*PolicyShowResponse, *http.Response, error) {
	return r.ApiService.ShowPolicyExecute(r)
}

/*
ShowPolicy Show the policy

Show the policy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param policyId Policy ID
	@return IamV1PoliciesApiAPIShowPolicyRequest
*/
func (a *IamV1PoliciesApiAPIService) ShowPolicy(ctx context.Context, policyId string) IamV1PoliciesApiAPIShowPolicyRequest {
	return IamV1PoliciesApiAPIShowPolicyRequest{
		ApiService: a,
		ctx:        ctx,
		policyId:   policyId,
	}
}

// Execute executes the request
//
//	@return PolicyShowResponse
func (a *IamV1PoliciesApiAPIService) ShowPolicyExecute(r IamV1PoliciesApiAPIShowPolicyRequest) (*PolicyShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PolicyShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/policies/{policy_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"policy_id"+"}", url.PathEscape(parameterValueToString(r.policyId, "policyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "iam 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v []ValidationErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.ErrorMessage = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.ErrorMessage = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.ErrorModel = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
