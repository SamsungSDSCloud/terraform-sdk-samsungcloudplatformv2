/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// AccessKeyTypeEnum the model 'AccessKeyTypeEnum'
type AccessKeyTypeEnum string

// List of AccessKeyTypeEnum
const (
	ACCESSKEYTYPEENUM_PERMANENT              AccessKeyTypeEnum = "PERMANENT"
	ACCESSKEYTYPEENUM_TEMPORARY              AccessKeyTypeEnum = "TEMPORARY"
	ACCESSKEYTYPEENUM_SECRET_VAULT_TEMPORARY AccessKeyTypeEnum = "SECRET_VAULT_TEMPORARY"
)

// All allowed values of AccessKeyTypeEnum enum
var AllowedAccessKeyTypeEnumEnumValues = []AccessKeyTypeEnum{
	"PERMANENT",
	"TEMPORARY",
	"SECRET_VAULT_TEMPORARY",
}

func (v *AccessKeyTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessKeyTypeEnum(value)
	for _, existing := range AllowedAccessKeyTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessKeyTypeEnum", value)
}

// NewAccessKeyTypeEnumFromValue returns a pointer to a valid AccessKeyTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessKeyTypeEnumFromValue(v string) (*AccessKeyTypeEnum, error) {
	ev := AccessKeyTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessKeyTypeEnum: valid values are %v", v, AllowedAccessKeyTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessKeyTypeEnum) IsValid() bool {
	for _, existing := range AllowedAccessKeyTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessKeyTypeEnum value
func (v AccessKeyTypeEnum) Ptr() *AccessKeyTypeEnum {
	return &v
}

type NullableAccessKeyTypeEnum struct {
	value *AccessKeyTypeEnum
	isSet bool
}

func (v NullableAccessKeyTypeEnum) Get() *AccessKeyTypeEnum {
	return v.value
}

func (v *NullableAccessKeyTypeEnum) Set(val *AccessKeyTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKeyTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKeyTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKeyTypeEnum(val *AccessKeyTypeEnum) *NullableAccessKeyTypeEnum {
	return &NullableAccessKeyTypeEnum{value: val, isSet: true}
}

func (v NullableAccessKeyTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKeyTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
