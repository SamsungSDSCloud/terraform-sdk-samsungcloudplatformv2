/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the PolicySetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicySetRequest{}

// PolicySetRequest struct for PolicySetRequest
type PolicySetRequest struct {
	DefaultVersionId NullableString                     `json:"default_version_id,omitempty"`
	Description      NullableString                     `json:"description,omitempty"`
	PolicyName       NullableString                     `json:"policy_name,omitempty" validate:"regexp=^[a-zA-Z0-9\\\\-.,_+=@ㄱ-ㅎㅏ-ㅣ가-힣]*$"`
	PolicyVersion    NullablePolicyVersionCreateRequest `json:"policy_version,omitempty"`
}

// NewPolicySetRequest instantiates a new PolicySetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicySetRequest() *PolicySetRequest {
	this := PolicySetRequest{}
	return &this
}

// NewPolicySetRequestWithDefaults instantiates a new PolicySetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicySetRequestWithDefaults() *PolicySetRequest {
	this := PolicySetRequest{}
	return &this
}

// GetDefaultVersionId returns the DefaultVersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicySetRequest) GetDefaultVersionId() string {
	if o == nil || IsNil(o.DefaultVersionId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultVersionId.Get()
}

// GetDefaultVersionIdOk returns a tuple with the DefaultVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicySetRequest) GetDefaultVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultVersionId.Get(), o.DefaultVersionId.IsSet()
}

// HasDefaultVersionId returns a boolean if a field has been set.
func (o *PolicySetRequest) HasDefaultVersionId() bool {
	if o != nil && o.DefaultVersionId.IsSet() {
		return true
	}

	return false
}

// SetDefaultVersionId gets a reference to the given NullableString and assigns it to the DefaultVersionId field.
func (o *PolicySetRequest) SetDefaultVersionId(v string) {
	o.DefaultVersionId.Set(&v)
}

// SetDefaultVersionIdNil sets the value for DefaultVersionId to be an explicit nil
func (o *PolicySetRequest) SetDefaultVersionIdNil() {
	o.DefaultVersionId.Set(nil)
}

// UnsetDefaultVersionId ensures that no value is present for DefaultVersionId, not even an explicit nil
func (o *PolicySetRequest) UnsetDefaultVersionId() {
	o.DefaultVersionId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicySetRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicySetRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicySetRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PolicySetRequest) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PolicySetRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PolicySetRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicySetRequest) GetPolicyName() string {
	if o == nil || IsNil(o.PolicyName.Get()) {
		var ret string
		return ret
	}
	return *o.PolicyName.Get()
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicySetRequest) GetPolicyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyName.Get(), o.PolicyName.IsSet()
}

// HasPolicyName returns a boolean if a field has been set.
func (o *PolicySetRequest) HasPolicyName() bool {
	if o != nil && o.PolicyName.IsSet() {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given NullableString and assigns it to the PolicyName field.
func (o *PolicySetRequest) SetPolicyName(v string) {
	o.PolicyName.Set(&v)
}

// SetPolicyNameNil sets the value for PolicyName to be an explicit nil
func (o *PolicySetRequest) SetPolicyNameNil() {
	o.PolicyName.Set(nil)
}

// UnsetPolicyName ensures that no value is present for PolicyName, not even an explicit nil
func (o *PolicySetRequest) UnsetPolicyName() {
	o.PolicyName.Unset()
}

// GetPolicyVersion returns the PolicyVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicySetRequest) GetPolicyVersion() PolicyVersionCreateRequest {
	if o == nil || IsNil(o.PolicyVersion.Get()) {
		var ret PolicyVersionCreateRequest
		return ret
	}
	return *o.PolicyVersion.Get()
}

// GetPolicyVersionOk returns a tuple with the PolicyVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicySetRequest) GetPolicyVersionOk() (*PolicyVersionCreateRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyVersion.Get(), o.PolicyVersion.IsSet()
}

// HasPolicyVersion returns a boolean if a field has been set.
func (o *PolicySetRequest) HasPolicyVersion() bool {
	if o != nil && o.PolicyVersion.IsSet() {
		return true
	}

	return false
}

// SetPolicyVersion gets a reference to the given NullablePolicyVersionCreateRequest and assigns it to the PolicyVersion field.
func (o *PolicySetRequest) SetPolicyVersion(v PolicyVersionCreateRequest) {
	o.PolicyVersion.Set(&v)
}

// SetPolicyVersionNil sets the value for PolicyVersion to be an explicit nil
func (o *PolicySetRequest) SetPolicyVersionNil() {
	o.PolicyVersion.Set(nil)
}

// UnsetPolicyVersion ensures that no value is present for PolicyVersion, not even an explicit nil
func (o *PolicySetRequest) UnsetPolicyVersion() {
	o.PolicyVersion.Unset()
}

func (o PolicySetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicySetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultVersionId.IsSet() {
		toSerialize["default_version_id"] = o.DefaultVersionId.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.PolicyName.IsSet() {
		toSerialize["policy_name"] = o.PolicyName.Get()
	}
	if o.PolicyVersion.IsSet() {
		toSerialize["policy_version"] = o.PolicyVersion.Get()
	}
	return toSerialize, nil
}

type NullablePolicySetRequest struct {
	value *PolicySetRequest
	isSet bool
}

func (v NullablePolicySetRequest) Get() *PolicySetRequest {
	return v.value
}

func (v *NullablePolicySetRequest) Set(val *PolicySetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicySetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicySetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicySetRequest(val *PolicySetRequest) *NullablePolicySetRequest {
	return &NullablePolicySetRequest{value: val, isSet: true}
}

func (v NullablePolicySetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicySetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
