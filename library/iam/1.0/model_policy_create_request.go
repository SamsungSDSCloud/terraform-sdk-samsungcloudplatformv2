/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PolicyCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyCreateRequest{}

// PolicyCreateRequest struct for PolicyCreateRequest
type PolicyCreateRequest struct {
	DefaultVersionId NullableString `json:"default_version_id,omitempty"`
	Description      NullableString `json:"description,omitempty"`
	// Policy Category
	PolicyCategory *PolicyCategoryEnum `json:"policy_category,omitempty"`
	// Policy Name
	PolicyName string `json:"policy_name" validate:"regexp=^[a-zA-Z0-9\\\\-.,_+=@ㄱ-ㅎㅏ-ㅣ가-힣]*$"`
	// Policy Type
	PolicyType *PolicyTypeEnum `json:"policy_type,omitempty"`
	// Policy Version
	PolicyVersion PolicyVersionCreateRequest `json:"policy_version"`
	ServiceType   NullableString             `json:"service_type,omitempty"`
	Tags          []map[string]string        `json:"tags,omitempty"`
}

type _PolicyCreateRequest PolicyCreateRequest

// NewPolicyCreateRequest instantiates a new PolicyCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyCreateRequest(policyName string, policyVersion PolicyVersionCreateRequest) *PolicyCreateRequest {
	this := PolicyCreateRequest{}
	var policyCategory PolicyCategoryEnum = POLICYCATEGORYENUM_IDENTITY_BASED
	this.PolicyCategory = &policyCategory
	this.PolicyName = policyName
	var policyType PolicyTypeEnum = POLICYTYPEENUM_USER_DEFINED
	this.PolicyType = &policyType
	this.PolicyVersion = policyVersion
	return &this
}

// NewPolicyCreateRequestWithDefaults instantiates a new PolicyCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyCreateRequestWithDefaults() *PolicyCreateRequest {
	this := PolicyCreateRequest{}
	var policyCategory PolicyCategoryEnum = POLICYCATEGORYENUM_IDENTITY_BASED
	this.PolicyCategory = &policyCategory
	var policyType PolicyTypeEnum = POLICYTYPEENUM_USER_DEFINED
	this.PolicyType = &policyType
	return &this
}

// GetDefaultVersionId returns the DefaultVersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyCreateRequest) GetDefaultVersionId() string {
	if o == nil || IsNil(o.DefaultVersionId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultVersionId.Get()
}

// GetDefaultVersionIdOk returns a tuple with the DefaultVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyCreateRequest) GetDefaultVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultVersionId.Get(), o.DefaultVersionId.IsSet()
}

// HasDefaultVersionId returns a boolean if a field has been set.
func (o *PolicyCreateRequest) HasDefaultVersionId() bool {
	if o != nil && o.DefaultVersionId.IsSet() {
		return true
	}

	return false
}

// SetDefaultVersionId gets a reference to the given NullableString and assigns it to the DefaultVersionId field.
func (o *PolicyCreateRequest) SetDefaultVersionId(v string) {
	o.DefaultVersionId.Set(&v)
}

// SetDefaultVersionIdNil sets the value for DefaultVersionId to be an explicit nil
func (o *PolicyCreateRequest) SetDefaultVersionIdNil() {
	o.DefaultVersionId.Set(nil)
}

// UnsetDefaultVersionId ensures that no value is present for DefaultVersionId, not even an explicit nil
func (o *PolicyCreateRequest) UnsetDefaultVersionId() {
	o.DefaultVersionId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyCreateRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PolicyCreateRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PolicyCreateRequest) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PolicyCreateRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PolicyCreateRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetPolicyCategory returns the PolicyCategory field value if set, zero value otherwise.
func (o *PolicyCreateRequest) GetPolicyCategory() PolicyCategoryEnum {
	if o == nil || IsNil(o.PolicyCategory) {
		var ret PolicyCategoryEnum
		return ret
	}
	return *o.PolicyCategory
}

// GetPolicyCategoryOk returns a tuple with the PolicyCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreateRequest) GetPolicyCategoryOk() (*PolicyCategoryEnum, bool) {
	if o == nil || IsNil(o.PolicyCategory) {
		return nil, false
	}
	return o.PolicyCategory, true
}

// HasPolicyCategory returns a boolean if a field has been set.
func (o *PolicyCreateRequest) HasPolicyCategory() bool {
	if o != nil && !IsNil(o.PolicyCategory) {
		return true
	}

	return false
}

// SetPolicyCategory gets a reference to the given PolicyCategoryEnum and assigns it to the PolicyCategory field.
func (o *PolicyCreateRequest) SetPolicyCategory(v PolicyCategoryEnum) {
	o.PolicyCategory = &v
}

// GetPolicyName returns the PolicyName field value
func (o *PolicyCreateRequest) GetPolicyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value
// and a boolean to check if the value has been set.
func (o *PolicyCreateRequest) GetPolicyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyName, true
}

// SetPolicyName sets field value
func (o *PolicyCreateRequest) SetPolicyName(v string) {
	o.PolicyName = v
}

// GetPolicyType returns the PolicyType field value if set, zero value otherwise.
func (o *PolicyCreateRequest) GetPolicyType() PolicyTypeEnum {
	if o == nil || IsNil(o.PolicyType) {
		var ret PolicyTypeEnum
		return ret
	}
	return *o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreateRequest) GetPolicyTypeOk() (*PolicyTypeEnum, bool) {
	if o == nil || IsNil(o.PolicyType) {
		return nil, false
	}
	return o.PolicyType, true
}

// HasPolicyType returns a boolean if a field has been set.
func (o *PolicyCreateRequest) HasPolicyType() bool {
	if o != nil && !IsNil(o.PolicyType) {
		return true
	}

	return false
}

// SetPolicyType gets a reference to the given PolicyTypeEnum and assigns it to the PolicyType field.
func (o *PolicyCreateRequest) SetPolicyType(v PolicyTypeEnum) {
	o.PolicyType = &v
}

// GetPolicyVersion returns the PolicyVersion field value
func (o *PolicyCreateRequest) GetPolicyVersion() PolicyVersionCreateRequest {
	if o == nil {
		var ret PolicyVersionCreateRequest
		return ret
	}

	return o.PolicyVersion
}

// GetPolicyVersionOk returns a tuple with the PolicyVersion field value
// and a boolean to check if the value has been set.
func (o *PolicyCreateRequest) GetPolicyVersionOk() (*PolicyVersionCreateRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyVersion, true
}

// SetPolicyVersion sets field value
func (o *PolicyCreateRequest) SetPolicyVersion(v PolicyVersionCreateRequest) {
	o.PolicyVersion = v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyCreateRequest) GetServiceType() string {
	if o == nil || IsNil(o.ServiceType.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceType.Get()
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyCreateRequest) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceType.Get(), o.ServiceType.IsSet()
}

// HasServiceType returns a boolean if a field has been set.
func (o *PolicyCreateRequest) HasServiceType() bool {
	if o != nil && o.ServiceType.IsSet() {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given NullableString and assigns it to the ServiceType field.
func (o *PolicyCreateRequest) SetServiceType(v string) {
	o.ServiceType.Set(&v)
}

// SetServiceTypeNil sets the value for ServiceType to be an explicit nil
func (o *PolicyCreateRequest) SetServiceTypeNil() {
	o.ServiceType.Set(nil)
}

// UnsetServiceType ensures that no value is present for ServiceType, not even an explicit nil
func (o *PolicyCreateRequest) UnsetServiceType() {
	o.ServiceType.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyCreateRequest) GetTags() []map[string]string {
	if o == nil {
		var ret []map[string]string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyCreateRequest) GetTagsOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PolicyCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []map[string]string and assigns it to the Tags field.
func (o *PolicyCreateRequest) SetTags(v []map[string]string) {
	o.Tags = v
}

func (o PolicyCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultVersionId.IsSet() {
		toSerialize["default_version_id"] = o.DefaultVersionId.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.PolicyCategory) {
		toSerialize["policy_category"] = o.PolicyCategory
	}
	toSerialize["policy_name"] = o.PolicyName
	if !IsNil(o.PolicyType) {
		toSerialize["policy_type"] = o.PolicyType
	}
	toSerialize["policy_version"] = o.PolicyVersion
	if o.ServiceType.IsSet() {
		toSerialize["service_type"] = o.ServiceType.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *PolicyCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"policy_name",
		"policy_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyCreateRequest := _PolicyCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyCreateRequest)

	if err != nil {
		return err
	}

	*o = PolicyCreateRequest(varPolicyCreateRequest)

	return err
}

type NullablePolicyCreateRequest struct {
	value *PolicyCreateRequest
	isSet bool
}

func (v NullablePolicyCreateRequest) Get() *PolicyCreateRequest {
	return v.value
}

func (v *NullablePolicyCreateRequest) Set(val *PolicyCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyCreateRequest(val *PolicyCreateRequest) *NullablePolicyCreateRequest {
	return &NullablePolicyCreateRequest{value: val, isSet: true}
}

func (v NullablePolicyCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
