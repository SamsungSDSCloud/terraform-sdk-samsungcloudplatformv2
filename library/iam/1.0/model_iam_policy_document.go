/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IamPolicyDocument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamPolicyDocument{}

// IamPolicyDocument struct for IamPolicyDocument
type IamPolicyDocument struct {
	// Statement
	Statement []Statement `json:"Statement"`
	// Policy Version
	Version string `json:"Version"`
}

type _IamPolicyDocument IamPolicyDocument

// NewIamPolicyDocument instantiates a new IamPolicyDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamPolicyDocument(statement []Statement, version string) *IamPolicyDocument {
	this := IamPolicyDocument{}
	this.Statement = statement
	this.Version = version
	return &this
}

// NewIamPolicyDocumentWithDefaults instantiates a new IamPolicyDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamPolicyDocumentWithDefaults() *IamPolicyDocument {
	this := IamPolicyDocument{}
	return &this
}

// GetStatement returns the Statement field value
func (o *IamPolicyDocument) GetStatement() []Statement {
	if o == nil {
		var ret []Statement
		return ret
	}

	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value
// and a boolean to check if the value has been set.
func (o *IamPolicyDocument) GetStatementOk() ([]Statement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Statement, true
}

// SetStatement sets field value
func (o *IamPolicyDocument) SetStatement(v []Statement) {
	o.Statement = v
}

// GetVersion returns the Version field value
func (o *IamPolicyDocument) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *IamPolicyDocument) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *IamPolicyDocument) SetVersion(v string) {
	o.Version = v
}

func (o IamPolicyDocument) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamPolicyDocument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Statement"] = o.Statement
	toSerialize["Version"] = o.Version
	return toSerialize, nil
}

func (o *IamPolicyDocument) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Statement",
		"Version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIamPolicyDocument := _IamPolicyDocument{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIamPolicyDocument)

	if err != nil {
		return err
	}

	*o = IamPolicyDocument(varIamPolicyDocument)

	return err
}

type NullableIamPolicyDocument struct {
	value *IamPolicyDocument
	isSet bool
}

func (v NullableIamPolicyDocument) Get() *IamPolicyDocument {
	return v.value
}

func (v *NullableIamPolicyDocument) Set(val *IamPolicyDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableIamPolicyDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableIamPolicyDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamPolicyDocument(val *IamPolicyDocument) *NullableIamPolicyDocument {
	return &NullableIamPolicyDocument{value: val, isSet: true}
}

func (v NullableIamPolicyDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamPolicyDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
