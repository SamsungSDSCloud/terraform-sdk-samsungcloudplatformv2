/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// OtpMethodEnum the model 'OtpMethodEnum'
type OtpMethodEnum string

// List of OtpMethodEnum
const (
	OTPMETHODENUM_PHONE OtpMethodEnum = "PHONE"
	OTPMETHODENUM_EMAIL OtpMethodEnum = "EMAIL"
)

// All allowed values of OtpMethodEnum enum
var AllowedOtpMethodEnumEnumValues = []OtpMethodEnum{
	"PHONE",
	"EMAIL",
}

func (v *OtpMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OtpMethodEnum(value)
	for _, existing := range AllowedOtpMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OtpMethodEnum", value)
}

// NewOtpMethodEnumFromValue returns a pointer to a valid OtpMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOtpMethodEnumFromValue(v string) (*OtpMethodEnum, error) {
	ev := OtpMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OtpMethodEnum: valid values are %v", v, AllowedOtpMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OtpMethodEnum) IsValid() bool {
	for _, existing := range AllowedOtpMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OtpMethodEnum value
func (v OtpMethodEnum) Ptr() *OtpMethodEnum {
	return &v
}

type NullableOtpMethodEnum struct {
	value *OtpMethodEnum
	isSet bool
}

func (v NullableOtpMethodEnum) Get() *OtpMethodEnum {
	return v.value
}

func (v *NullableOtpMethodEnum) Set(val *OtpMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOtpMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOtpMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtpMethodEnum(val *OtpMethodEnum) *NullableOtpMethodEnum {
	return &NullableOtpMethodEnum{value: val, isSet: true}
}

func (v NullableOtpMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtpMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
