/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PolicyBindingSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyBindingSetRequest{}

// PolicyBindingSetRequest struct for PolicyBindingSetRequest
type PolicyBindingSetRequest struct {
	AddIds []string `json:"add_ids,omitempty"`
	// Identity Type
	IdentityType string   `json:"identity_type"`
	RemoveIds    []string `json:"remove_ids,omitempty"`
}

type _PolicyBindingSetRequest PolicyBindingSetRequest

// NewPolicyBindingSetRequest instantiates a new PolicyBindingSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyBindingSetRequest(identityType string) *PolicyBindingSetRequest {
	this := PolicyBindingSetRequest{}
	this.IdentityType = identityType
	return &this
}

// NewPolicyBindingSetRequestWithDefaults instantiates a new PolicyBindingSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyBindingSetRequestWithDefaults() *PolicyBindingSetRequest {
	this := PolicyBindingSetRequest{}
	return &this
}

// GetAddIds returns the AddIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyBindingSetRequest) GetAddIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AddIds
}

// GetAddIdsOk returns a tuple with the AddIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyBindingSetRequest) GetAddIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AddIds) {
		return nil, false
	}
	return o.AddIds, true
}

// HasAddIds returns a boolean if a field has been set.
func (o *PolicyBindingSetRequest) HasAddIds() bool {
	if o != nil && !IsNil(o.AddIds) {
		return true
	}

	return false
}

// SetAddIds gets a reference to the given []string and assigns it to the AddIds field.
func (o *PolicyBindingSetRequest) SetAddIds(v []string) {
	o.AddIds = v
}

// GetIdentityType returns the IdentityType field value
func (o *PolicyBindingSetRequest) GetIdentityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityType
}

// GetIdentityTypeOk returns a tuple with the IdentityType field value
// and a boolean to check if the value has been set.
func (o *PolicyBindingSetRequest) GetIdentityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityType, true
}

// SetIdentityType sets field value
func (o *PolicyBindingSetRequest) SetIdentityType(v string) {
	o.IdentityType = v
}

// GetRemoveIds returns the RemoveIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyBindingSetRequest) GetRemoveIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RemoveIds
}

// GetRemoveIdsOk returns a tuple with the RemoveIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyBindingSetRequest) GetRemoveIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RemoveIds) {
		return nil, false
	}
	return o.RemoveIds, true
}

// HasRemoveIds returns a boolean if a field has been set.
func (o *PolicyBindingSetRequest) HasRemoveIds() bool {
	if o != nil && !IsNil(o.RemoveIds) {
		return true
	}

	return false
}

// SetRemoveIds gets a reference to the given []string and assigns it to the RemoveIds field.
func (o *PolicyBindingSetRequest) SetRemoveIds(v []string) {
	o.RemoveIds = v
}

func (o PolicyBindingSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyBindingSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AddIds != nil {
		toSerialize["add_ids"] = o.AddIds
	}
	toSerialize["identity_type"] = o.IdentityType
	if o.RemoveIds != nil {
		toSerialize["remove_ids"] = o.RemoveIds
	}
	return toSerialize, nil
}

func (o *PolicyBindingSetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identity_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyBindingSetRequest := _PolicyBindingSetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyBindingSetRequest)

	if err != nil {
		return err
	}

	*o = PolicyBindingSetRequest(varPolicyBindingSetRequest)

	return err
}

type NullablePolicyBindingSetRequest struct {
	value *PolicyBindingSetRequest
	isSet bool
}

func (v NullablePolicyBindingSetRequest) Get() *PolicyBindingSetRequest {
	return v.value
}

func (v *NullablePolicyBindingSetRequest) Set(val *PolicyBindingSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyBindingSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyBindingSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyBindingSetRequest(val *PolicyBindingSetRequest) *NullablePolicyBindingSetRequest {
	return &NullablePolicyBindingSetRequest{value: val, isSet: true}
}

func (v NullablePolicyBindingSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyBindingSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
