/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PolicyBindingPageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyBindingPageResponse{}

// PolicyBindingPageResponse struct for PolicyBindingPageResponse
type PolicyBindingPageResponse struct {
	// count
	Count  int32                    `json:"count"`
	Groups []map[string]interface{} `json:"groups,omitempty"`
	// page
	Page int32 `json:"page"`
	// Policy ID
	PolicyId *string                  `json:"policy_id,omitempty"`
	Roles    []map[string]interface{} `json:"roles,omitempty"`
	// size
	Size  int32                    `json:"size"`
	Sort  []string                 `json:"sort,omitempty"`
	Users []map[string]interface{} `json:"users,omitempty"`
}

type _PolicyBindingPageResponse PolicyBindingPageResponse

// NewPolicyBindingPageResponse instantiates a new PolicyBindingPageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyBindingPageResponse(count int32, page int32, size int32) *PolicyBindingPageResponse {
	this := PolicyBindingPageResponse{}
	this.Count = count
	this.Page = page
	this.Size = size
	return &this
}

// NewPolicyBindingPageResponseWithDefaults instantiates a new PolicyBindingPageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyBindingPageResponseWithDefaults() *PolicyBindingPageResponse {
	this := PolicyBindingPageResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *PolicyBindingPageResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *PolicyBindingPageResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *PolicyBindingPageResponse) SetCount(v int32) {
	o.Count = v
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyBindingPageResponse) GetGroups() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyBindingPageResponse) GetGroupsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *PolicyBindingPageResponse) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []map[string]interface{} and assigns it to the Groups field.
func (o *PolicyBindingPageResponse) SetGroups(v []map[string]interface{}) {
	o.Groups = v
}

// GetPage returns the Page field value
func (o *PolicyBindingPageResponse) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *PolicyBindingPageResponse) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *PolicyBindingPageResponse) SetPage(v int32) {
	o.Page = v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *PolicyBindingPageResponse) GetPolicyId() string {
	if o == nil || IsNil(o.PolicyId) {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyBindingPageResponse) GetPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *PolicyBindingPageResponse) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *PolicyBindingPageResponse) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyBindingPageResponse) GetRoles() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyBindingPageResponse) GetRolesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *PolicyBindingPageResponse) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []map[string]interface{} and assigns it to the Roles field.
func (o *PolicyBindingPageResponse) SetRoles(v []map[string]interface{}) {
	o.Roles = v
}

// GetSize returns the Size field value
func (o *PolicyBindingPageResponse) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PolicyBindingPageResponse) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PolicyBindingPageResponse) SetSize(v int32) {
	o.Size = v
}

// GetSort returns the Sort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyBindingPageResponse) GetSort() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyBindingPageResponse) GetSortOk() ([]string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *PolicyBindingPageResponse) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []string and assigns it to the Sort field.
func (o *PolicyBindingPageResponse) SetSort(v []string) {
	o.Sort = v
}

// GetUsers returns the Users field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyBindingPageResponse) GetUsers() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyBindingPageResponse) GetUsersOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *PolicyBindingPageResponse) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []map[string]interface{} and assigns it to the Users field.
func (o *PolicyBindingPageResponse) SetUsers(v []map[string]interface{}) {
	o.Users = v
}

func (o PolicyBindingPageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyBindingPageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	toSerialize["page"] = o.Page
	if !IsNil(o.PolicyId) {
		toSerialize["policy_id"] = o.PolicyId
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	toSerialize["size"] = o.Size
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

func (o *PolicyBindingPageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"page",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyBindingPageResponse := _PolicyBindingPageResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyBindingPageResponse)

	if err != nil {
		return err
	}

	*o = PolicyBindingPageResponse(varPolicyBindingPageResponse)

	return err
}

type NullablePolicyBindingPageResponse struct {
	value *PolicyBindingPageResponse
	isSet bool
}

func (v NullablePolicyBindingPageResponse) Get() *PolicyBindingPageResponse {
	return v.value
}

func (v *NullablePolicyBindingPageResponse) Set(val *PolicyBindingPageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyBindingPageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyBindingPageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyBindingPageResponse(val *PolicyBindingPageResponse) *NullablePolicyBindingPageResponse {
	return &NullablePolicyBindingPageResponse{value: val, isSet: true}
}

func (v NullablePolicyBindingPageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyBindingPageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
