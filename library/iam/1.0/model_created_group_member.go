/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CreatedGroupMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatedGroupMember{}

// CreatedGroupMember struct for CreatedGroupMember
type CreatedGroupMember struct {
	// 생성 일시
	CreatedAt time.Time `json:"created_at"`
	// 생성자
	CreatedBy string `json:"created_by"`
	// 생성자 Email
	CreatorEmail *string `json:"creator_email,omitempty"`
	// 생성자 성, 이름
	CreatorName *string `json:"creator_name,omitempty"`
	// User Email
	UserEmail *string `json:"user_email,omitempty"`
	// User ID
	UserId string `json:"user_id"`
	// User 성, 이름
	UserName *string `json:"user_name,omitempty"`
}

type _CreatedGroupMember CreatedGroupMember

// NewCreatedGroupMember instantiates a new CreatedGroupMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatedGroupMember(createdAt time.Time, createdBy string, userId string) *CreatedGroupMember {
	this := CreatedGroupMember{}
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	var creatorEmail string = "-"
	this.CreatorEmail = &creatorEmail
	var creatorName string = "-"
	this.CreatorName = &creatorName
	var userEmail string = "-"
	this.UserEmail = &userEmail
	this.UserId = userId
	var userName string = "-"
	this.UserName = &userName
	return &this
}

// NewCreatedGroupMemberWithDefaults instantiates a new CreatedGroupMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatedGroupMemberWithDefaults() *CreatedGroupMember {
	this := CreatedGroupMember{}
	var creatorEmail string = "-"
	this.CreatorEmail = &creatorEmail
	var creatorName string = "-"
	this.CreatorName = &creatorName
	var userEmail string = "-"
	this.UserEmail = &userEmail
	var userName string = "-"
	this.UserName = &userName
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *CreatedGroupMember) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CreatedGroupMember) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CreatedGroupMember) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *CreatedGroupMember) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *CreatedGroupMember) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *CreatedGroupMember) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *CreatedGroupMember) GetCreatorEmail() string {
	if o == nil || IsNil(o.CreatorEmail) {
		var ret string
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatedGroupMember) GetCreatorEmailOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorEmail) {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *CreatedGroupMember) HasCreatorEmail() bool {
	if o != nil && !IsNil(o.CreatorEmail) {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given string and assigns it to the CreatorEmail field.
func (o *CreatedGroupMember) SetCreatorEmail(v string) {
	o.CreatorEmail = &v
}

// GetCreatorName returns the CreatorName field value if set, zero value otherwise.
func (o *CreatedGroupMember) GetCreatorName() string {
	if o == nil || IsNil(o.CreatorName) {
		var ret string
		return ret
	}
	return *o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatedGroupMember) GetCreatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorName) {
		return nil, false
	}
	return o.CreatorName, true
}

// HasCreatorName returns a boolean if a field has been set.
func (o *CreatedGroupMember) HasCreatorName() bool {
	if o != nil && !IsNil(o.CreatorName) {
		return true
	}

	return false
}

// SetCreatorName gets a reference to the given string and assigns it to the CreatorName field.
func (o *CreatedGroupMember) SetCreatorName(v string) {
	o.CreatorName = &v
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise.
func (o *CreatedGroupMember) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail) {
		var ret string
		return ret
	}
	return *o.UserEmail
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatedGroupMember) GetUserEmailOk() (*string, bool) {
	if o == nil || IsNil(o.UserEmail) {
		return nil, false
	}
	return o.UserEmail, true
}

// HasUserEmail returns a boolean if a field has been set.
func (o *CreatedGroupMember) HasUserEmail() bool {
	if o != nil && !IsNil(o.UserEmail) {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given string and assigns it to the UserEmail field.
func (o *CreatedGroupMember) SetUserEmail(v string) {
	o.UserEmail = &v
}

// GetUserId returns the UserId field value
func (o *CreatedGroupMember) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *CreatedGroupMember) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *CreatedGroupMember) SetUserId(v string) {
	o.UserId = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *CreatedGroupMember) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatedGroupMember) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *CreatedGroupMember) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *CreatedGroupMember) SetUserName(v string) {
	o.UserName = &v
}

func (o CreatedGroupMember) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatedGroupMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	if !IsNil(o.CreatorEmail) {
		toSerialize["creator_email"] = o.CreatorEmail
	}
	if !IsNil(o.CreatorName) {
		toSerialize["creator_name"] = o.CreatorName
	}
	if !IsNil(o.UserEmail) {
		toSerialize["user_email"] = o.UserEmail
	}
	toSerialize["user_id"] = o.UserId
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	return toSerialize, nil
}

func (o *CreatedGroupMember) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"created_by",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatedGroupMember := _CreatedGroupMember{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatedGroupMember)

	if err != nil {
		return err
	}

	*o = CreatedGroupMember(varCreatedGroupMember)

	return err
}

type NullableCreatedGroupMember struct {
	value *CreatedGroupMember
	isSet bool
}

func (v NullableCreatedGroupMember) Get() *CreatedGroupMember {
	return v.value
}

func (v *NullableCreatedGroupMember) Set(val *CreatedGroupMember) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatedGroupMember) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatedGroupMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatedGroupMember(val *CreatedGroupMember) *NullableCreatedGroupMember {
	return &NullableCreatedGroupMember{value: val, isSet: true}
}

func (v NullableCreatedGroupMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatedGroupMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
