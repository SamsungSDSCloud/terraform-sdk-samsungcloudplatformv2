/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccessKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessKeyResponse{}

// AccessKeyResponse struct for AccessKeyResponse
type AccessKeyResponse struct {
	AccessKey AccessKey `json:"access_key"`
}

type _AccessKeyResponse AccessKeyResponse

// NewAccessKeyResponse instantiates a new AccessKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessKeyResponse(accessKey AccessKey) *AccessKeyResponse {
	this := AccessKeyResponse{}
	this.AccessKey = accessKey
	return &this
}

// NewAccessKeyResponseWithDefaults instantiates a new AccessKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessKeyResponseWithDefaults() *AccessKeyResponse {
	this := AccessKeyResponse{}
	return &this
}

// GetAccessKey returns the AccessKey field value
func (o *AccessKeyResponse) GetAccessKey() AccessKey {
	if o == nil {
		var ret AccessKey
		return ret
	}

	return o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
func (o *AccessKeyResponse) GetAccessKeyOk() (*AccessKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKey, true
}

// SetAccessKey sets field value
func (o *AccessKeyResponse) SetAccessKey(v AccessKey) {
	o.AccessKey = v
}

func (o AccessKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_key"] = o.AccessKey
	return toSerialize, nil
}

func (o *AccessKeyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessKeyResponse := _AccessKeyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessKeyResponse)

	if err != nil {
		return err
	}

	*o = AccessKeyResponse(varAccessKeyResponse)

	return err
}

type NullableAccessKeyResponse struct {
	value *AccessKeyResponse
	isSet bool
}

func (v NullableAccessKeyResponse) Get() *AccessKeyResponse {
	return v.value
}

func (v *NullableAccessKeyResponse) Set(val *AccessKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKeyResponse(val *AccessKeyResponse) *NullableAccessKeyResponse {
	return &NullableAccessKeyResponse{value: val, isSet: true}
}

func (v NullableAccessKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
