/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group struct for Group
type Group struct {
	// 생성 일시
	CreatedAt time.Time `json:"created_at"`
	// 생성자
	CreatedBy string `json:"created_by"`
	// 생성자 Email
	CreatorEmail *string `json:"creator_email,omitempty"`
	// 생성자 성, 이름
	CreatorName *string        `json:"creator_name,omitempty"`
	Description NullableString `json:"description"`
	// 도메인 이름
	DomainName string `json:"domain_name"`
	// ID
	Id      string        `json:"id"`
	Members []GroupMember `json:"members,omitempty"`
	// 수정 일시
	ModifiedAt time.Time `json:"modified_at"`
	// 수정자
	ModifiedBy string `json:"modified_by"`
	// 수정자 Email
	ModifierEmail *string `json:"modifier_email,omitempty"`
	// 수정자 성, 이름
	ModifierName *string `json:"modifier_name,omitempty"`
	// Group 이름
	Name         string         `json:"name" validate:"regexp=^[a-zA-Z0-9\\\\-.,_+=@ㄱ-ㅎㅏ-ㅣ가-힣]*$"`
	Policies     []Policy       `json:"policies"`
	ResourceType NullableString `json:"resource_type,omitempty"`
	Roles        []Role         `json:"roles"`
	ServiceName  NullableString `json:"service_name,omitempty"`
	ServiceType  NullableString `json:"service_type,omitempty"`
	Srn          NullableString `json:"srn,omitempty"`
	// Group Type
	Type string `json:"type"`
}

type _Group Group

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup(createdAt time.Time, createdBy string, description NullableString, domainName string, id string, modifiedAt time.Time, modifiedBy string, name string, policies []Policy, roles []Role, type_ string) *Group {
	this := Group{}
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	var creatorEmail string = "-"
	this.CreatorEmail = &creatorEmail
	var creatorName string = "-"
	this.CreatorName = &creatorName
	this.Description = description
	this.DomainName = domainName
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	var modifierEmail string = "-"
	this.ModifierEmail = &modifierEmail
	var modifierName string = "-"
	this.ModifierName = &modifierName
	this.Name = name
	this.Policies = policies
	this.Roles = roles
	this.Type = type_
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	var creatorEmail string = "-"
	this.CreatorEmail = &creatorEmail
	var creatorName string = "-"
	this.CreatorName = &creatorName
	var modifierEmail string = "-"
	this.ModifierEmail = &modifierEmail
	var modifierName string = "-"
	this.ModifierName = &modifierName
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *Group) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Group) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Group) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Group) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *Group) GetCreatorEmail() string {
	if o == nil || IsNil(o.CreatorEmail) {
		var ret string
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCreatorEmailOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorEmail) {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *Group) HasCreatorEmail() bool {
	if o != nil && !IsNil(o.CreatorEmail) {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given string and assigns it to the CreatorEmail field.
func (o *Group) SetCreatorEmail(v string) {
	o.CreatorEmail = &v
}

// GetCreatorName returns the CreatorName field value if set, zero value otherwise.
func (o *Group) GetCreatorName() string {
	if o == nil || IsNil(o.CreatorName) {
		var ret string
		return ret
	}
	return *o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCreatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorName) {
		return nil, false
	}
	return o.CreatorName, true
}

// HasCreatorName returns a boolean if a field has been set.
func (o *Group) HasCreatorName() bool {
	if o != nil && !IsNil(o.CreatorName) {
		return true
	}

	return false
}

// SetCreatorName gets a reference to the given string and assigns it to the CreatorName field.
func (o *Group) SetCreatorName(v string) {
	o.CreatorName = &v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Group) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Group) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetDomainName returns the DomainName field value
func (o *Group) GetDomainName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *Group) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DomainName, true
}

// SetDomainName sets field value
func (o *Group) SetDomainName(v string) {
	o.DomainName = v
}

// GetId returns the Id field value
func (o *Group) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Group) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Group) SetId(v string) {
	o.Id = v
}

// GetMembers returns the Members field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetMembers() []GroupMember {
	if o == nil {
		var ret []GroupMember
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetMembersOk() ([]GroupMember, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Group) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []GroupMember and assigns it to the Members field.
func (o *Group) SetMembers(v []GroupMember) {
	o.Members = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *Group) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *Group) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *Group) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Group) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Group) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Group) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModifierEmail returns the ModifierEmail field value if set, zero value otherwise.
func (o *Group) GetModifierEmail() string {
	if o == nil || IsNil(o.ModifierEmail) {
		var ret string
		return ret
	}
	return *o.ModifierEmail
}

// GetModifierEmailOk returns a tuple with the ModifierEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetModifierEmailOk() (*string, bool) {
	if o == nil || IsNil(o.ModifierEmail) {
		return nil, false
	}
	return o.ModifierEmail, true
}

// HasModifierEmail returns a boolean if a field has been set.
func (o *Group) HasModifierEmail() bool {
	if o != nil && !IsNil(o.ModifierEmail) {
		return true
	}

	return false
}

// SetModifierEmail gets a reference to the given string and assigns it to the ModifierEmail field.
func (o *Group) SetModifierEmail(v string) {
	o.ModifierEmail = &v
}

// GetModifierName returns the ModifierName field value if set, zero value otherwise.
func (o *Group) GetModifierName() string {
	if o == nil || IsNil(o.ModifierName) {
		var ret string
		return ret
	}
	return *o.ModifierName
}

// GetModifierNameOk returns a tuple with the ModifierName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetModifierNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModifierName) {
		return nil, false
	}
	return o.ModifierName, true
}

// HasModifierName returns a boolean if a field has been set.
func (o *Group) HasModifierName() bool {
	if o != nil && !IsNil(o.ModifierName) {
		return true
	}

	return false
}

// SetModifierName gets a reference to the given string and assigns it to the ModifierName field.
func (o *Group) SetModifierName(v string) {
	o.ModifierName = &v
}

// GetName returns the Name field value
func (o *Group) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Group) SetName(v string) {
	o.Name = v
}

// GetPolicies returns the Policies field value
// If the value is explicit nil, the zero value for []Policy will be returned
func (o *Group) GetPolicies() []Policy {
	if o == nil {
		var ret []Policy
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetPoliciesOk() ([]Policy, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *Group) SetPolicies(v []Policy) {
	o.Policies = v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType.Get()) {
		var ret string
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *Group) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given NullableString and assigns it to the ResourceType field.
func (o *Group) SetResourceType(v string) {
	o.ResourceType.Set(&v)
}

// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *Group) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *Group) UnsetResourceType() {
	o.ResourceType.Unset()
}

// GetRoles returns the Roles field value
// If the value is explicit nil, the zero value for []Role will be returned
func (o *Group) GetRoles() []Role {
	if o == nil {
		var ret []Role
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *Group) SetRoles(v []Role) {
	o.Roles = v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceName.Get()
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceName.Get(), o.ServiceName.IsSet()
}

// HasServiceName returns a boolean if a field has been set.
func (o *Group) HasServiceName() bool {
	if o != nil && o.ServiceName.IsSet() {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given NullableString and assigns it to the ServiceName field.
func (o *Group) SetServiceName(v string) {
	o.ServiceName.Set(&v)
}

// SetServiceNameNil sets the value for ServiceName to be an explicit nil
func (o *Group) SetServiceNameNil() {
	o.ServiceName.Set(nil)
}

// UnsetServiceName ensures that no value is present for ServiceName, not even an explicit nil
func (o *Group) UnsetServiceName() {
	o.ServiceName.Unset()
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetServiceType() string {
	if o == nil || IsNil(o.ServiceType.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceType.Get()
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceType.Get(), o.ServiceType.IsSet()
}

// HasServiceType returns a boolean if a field has been set.
func (o *Group) HasServiceType() bool {
	if o != nil && o.ServiceType.IsSet() {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given NullableString and assigns it to the ServiceType field.
func (o *Group) SetServiceType(v string) {
	o.ServiceType.Set(&v)
}

// SetServiceTypeNil sets the value for ServiceType to be an explicit nil
func (o *Group) SetServiceTypeNil() {
	o.ServiceType.Set(nil)
}

// UnsetServiceType ensures that no value is present for ServiceType, not even an explicit nil
func (o *Group) UnsetServiceType() {
	o.ServiceType.Unset()
}

// GetSrn returns the Srn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetSrn() string {
	if o == nil || IsNil(o.Srn.Get()) {
		var ret string
		return ret
	}
	return *o.Srn.Get()
}

// GetSrnOk returns a tuple with the Srn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetSrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Srn.Get(), o.Srn.IsSet()
}

// HasSrn returns a boolean if a field has been set.
func (o *Group) HasSrn() bool {
	if o != nil && o.Srn.IsSet() {
		return true
	}

	return false
}

// SetSrn gets a reference to the given NullableString and assigns it to the Srn field.
func (o *Group) SetSrn(v string) {
	o.Srn.Set(&v)
}

// SetSrnNil sets the value for Srn to be an explicit nil
func (o *Group) SetSrnNil() {
	o.Srn.Set(nil)
}

// UnsetSrn ensures that no value is present for Srn, not even an explicit nil
func (o *Group) UnsetSrn() {
	o.Srn.Unset()
}

// GetType returns the Type field value
func (o *Group) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Group) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Group) SetType(v string) {
	o.Type = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	if !IsNil(o.CreatorEmail) {
		toSerialize["creator_email"] = o.CreatorEmail
	}
	if !IsNil(o.CreatorName) {
		toSerialize["creator_name"] = o.CreatorName
	}
	toSerialize["description"] = o.Description.Get()
	toSerialize["domain_name"] = o.DomainName
	toSerialize["id"] = o.Id
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	if !IsNil(o.ModifierEmail) {
		toSerialize["modifier_email"] = o.ModifierEmail
	}
	if !IsNil(o.ModifierName) {
		toSerialize["modifier_name"] = o.ModifierName
	}
	toSerialize["name"] = o.Name
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.ResourceType.IsSet() {
		toSerialize["resource_type"] = o.ResourceType.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.ServiceName.IsSet() {
		toSerialize["service_name"] = o.ServiceName.Get()
	}
	if o.ServiceType.IsSet() {
		toSerialize["service_type"] = o.ServiceType.Get()
	}
	if o.Srn.IsSet() {
		toSerialize["srn"] = o.Srn.Get()
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *Group) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"created_by",
		"description",
		"domain_name",
		"id",
		"modified_at",
		"modified_by",
		"name",
		"policies",
		"roles",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroup := _Group{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroup)

	if err != nil {
		return err
	}

	*o = Group(varGroup)

	return err
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
