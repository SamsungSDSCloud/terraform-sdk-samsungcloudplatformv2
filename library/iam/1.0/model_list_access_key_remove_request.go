/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the ListAccessKeyRemoveRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListAccessKeyRemoveRequest{}

// ListAccessKeyRemoveRequest struct for ListAccessKeyRemoveRequest
type ListAccessKeyRemoveRequest struct {
	// Access key id list
	Ids       []string       `json:"ids,omitempty"`
	Limit     NullableInt32  `json:"limit,omitempty"`
	Marker    NullableString `json:"marker,omitempty"`
	Sort      NullableString `json:"sort,omitempty"`
	WithCount NullableString `json:"with_count,omitempty"`
}

// NewListAccessKeyRemoveRequest instantiates a new ListAccessKeyRemoveRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListAccessKeyRemoveRequest() *ListAccessKeyRemoveRequest {
	this := ListAccessKeyRemoveRequest{}
	return &this
}

// NewListAccessKeyRemoveRequestWithDefaults instantiates a new ListAccessKeyRemoveRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListAccessKeyRemoveRequestWithDefaults() *ListAccessKeyRemoveRequest {
	this := ListAccessKeyRemoveRequest{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *ListAccessKeyRemoveRequest) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListAccessKeyRemoveRequest) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *ListAccessKeyRemoveRequest) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *ListAccessKeyRemoveRequest) SetIds(v []string) {
	o.Ids = v
}

// GetLimit returns the Limit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListAccessKeyRemoveRequest) GetLimit() int32 {
	if o == nil || IsNil(o.Limit.Get()) {
		var ret int32
		return ret
	}
	return *o.Limit.Get()
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListAccessKeyRemoveRequest) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Limit.Get(), o.Limit.IsSet()
}

// HasLimit returns a boolean if a field has been set.
func (o *ListAccessKeyRemoveRequest) HasLimit() bool {
	if o != nil && o.Limit.IsSet() {
		return true
	}

	return false
}

// SetLimit gets a reference to the given NullableInt32 and assigns it to the Limit field.
func (o *ListAccessKeyRemoveRequest) SetLimit(v int32) {
	o.Limit.Set(&v)
}

// SetLimitNil sets the value for Limit to be an explicit nil
func (o *ListAccessKeyRemoveRequest) SetLimitNil() {
	o.Limit.Set(nil)
}

// UnsetLimit ensures that no value is present for Limit, not even an explicit nil
func (o *ListAccessKeyRemoveRequest) UnsetLimit() {
	o.Limit.Unset()
}

// GetMarker returns the Marker field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListAccessKeyRemoveRequest) GetMarker() string {
	if o == nil || IsNil(o.Marker.Get()) {
		var ret string
		return ret
	}
	return *o.Marker.Get()
}

// GetMarkerOk returns a tuple with the Marker field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListAccessKeyRemoveRequest) GetMarkerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Marker.Get(), o.Marker.IsSet()
}

// HasMarker returns a boolean if a field has been set.
func (o *ListAccessKeyRemoveRequest) HasMarker() bool {
	if o != nil && o.Marker.IsSet() {
		return true
	}

	return false
}

// SetMarker gets a reference to the given NullableString and assigns it to the Marker field.
func (o *ListAccessKeyRemoveRequest) SetMarker(v string) {
	o.Marker.Set(&v)
}

// SetMarkerNil sets the value for Marker to be an explicit nil
func (o *ListAccessKeyRemoveRequest) SetMarkerNil() {
	o.Marker.Set(nil)
}

// UnsetMarker ensures that no value is present for Marker, not even an explicit nil
func (o *ListAccessKeyRemoveRequest) UnsetMarker() {
	o.Marker.Unset()
}

// GetSort returns the Sort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListAccessKeyRemoveRequest) GetSort() string {
	if o == nil || IsNil(o.Sort.Get()) {
		var ret string
		return ret
	}
	return *o.Sort.Get()
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListAccessKeyRemoveRequest) GetSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sort.Get(), o.Sort.IsSet()
}

// HasSort returns a boolean if a field has been set.
func (o *ListAccessKeyRemoveRequest) HasSort() bool {
	if o != nil && o.Sort.IsSet() {
		return true
	}

	return false
}

// SetSort gets a reference to the given NullableString and assigns it to the Sort field.
func (o *ListAccessKeyRemoveRequest) SetSort(v string) {
	o.Sort.Set(&v)
}

// SetSortNil sets the value for Sort to be an explicit nil
func (o *ListAccessKeyRemoveRequest) SetSortNil() {
	o.Sort.Set(nil)
}

// UnsetSort ensures that no value is present for Sort, not even an explicit nil
func (o *ListAccessKeyRemoveRequest) UnsetSort() {
	o.Sort.Unset()
}

// GetWithCount returns the WithCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListAccessKeyRemoveRequest) GetWithCount() string {
	if o == nil || IsNil(o.WithCount.Get()) {
		var ret string
		return ret
	}
	return *o.WithCount.Get()
}

// GetWithCountOk returns a tuple with the WithCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListAccessKeyRemoveRequest) GetWithCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithCount.Get(), o.WithCount.IsSet()
}

// HasWithCount returns a boolean if a field has been set.
func (o *ListAccessKeyRemoveRequest) HasWithCount() bool {
	if o != nil && o.WithCount.IsSet() {
		return true
	}

	return false
}

// SetWithCount gets a reference to the given NullableString and assigns it to the WithCount field.
func (o *ListAccessKeyRemoveRequest) SetWithCount(v string) {
	o.WithCount.Set(&v)
}

// SetWithCountNil sets the value for WithCount to be an explicit nil
func (o *ListAccessKeyRemoveRequest) SetWithCountNil() {
	o.WithCount.Set(nil)
}

// UnsetWithCount ensures that no value is present for WithCount, not even an explicit nil
func (o *ListAccessKeyRemoveRequest) UnsetWithCount() {
	o.WithCount.Unset()
}

func (o ListAccessKeyRemoveRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListAccessKeyRemoveRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if o.Limit.IsSet() {
		toSerialize["limit"] = o.Limit.Get()
	}
	if o.Marker.IsSet() {
		toSerialize["marker"] = o.Marker.Get()
	}
	if o.Sort.IsSet() {
		toSerialize["sort"] = o.Sort.Get()
	}
	if o.WithCount.IsSet() {
		toSerialize["with_count"] = o.WithCount.Get()
	}
	return toSerialize, nil
}

type NullableListAccessKeyRemoveRequest struct {
	value *ListAccessKeyRemoveRequest
	isSet bool
}

func (v NullableListAccessKeyRemoveRequest) Get() *ListAccessKeyRemoveRequest {
	return v.value
}

func (v *NullableListAccessKeyRemoveRequest) Set(val *ListAccessKeyRemoveRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableListAccessKeyRemoveRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableListAccessKeyRemoveRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListAccessKeyRemoveRequest(val *ListAccessKeyRemoveRequest) *NullableListAccessKeyRemoveRequest {
	return &NullableListAccessKeyRemoveRequest{value: val, isSet: true}
}

func (v NullableListAccessKeyRemoveRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListAccessKeyRemoveRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
