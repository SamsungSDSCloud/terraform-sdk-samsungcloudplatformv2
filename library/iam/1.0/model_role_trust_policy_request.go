/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RoleTrustPolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleTrustPolicyRequest{}

// RoleTrustPolicyRequest struct for RoleTrustPolicyRequest
type RoleTrustPolicyRequest struct {
	// 역할 신뢰 정책
	AssumeRolePolicyDocument PolicyDocument `json:"assume_role_policy_document"`
}

type _RoleTrustPolicyRequest RoleTrustPolicyRequest

// NewRoleTrustPolicyRequest instantiates a new RoleTrustPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleTrustPolicyRequest(assumeRolePolicyDocument PolicyDocument) *RoleTrustPolicyRequest {
	this := RoleTrustPolicyRequest{}
	this.AssumeRolePolicyDocument = assumeRolePolicyDocument
	return &this
}

// NewRoleTrustPolicyRequestWithDefaults instantiates a new RoleTrustPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleTrustPolicyRequestWithDefaults() *RoleTrustPolicyRequest {
	this := RoleTrustPolicyRequest{}
	return &this
}

// GetAssumeRolePolicyDocument returns the AssumeRolePolicyDocument field value
func (o *RoleTrustPolicyRequest) GetAssumeRolePolicyDocument() PolicyDocument {
	if o == nil {
		var ret PolicyDocument
		return ret
	}

	return o.AssumeRolePolicyDocument
}

// GetAssumeRolePolicyDocumentOk returns a tuple with the AssumeRolePolicyDocument field value
// and a boolean to check if the value has been set.
func (o *RoleTrustPolicyRequest) GetAssumeRolePolicyDocumentOk() (*PolicyDocument, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssumeRolePolicyDocument, true
}

// SetAssumeRolePolicyDocument sets field value
func (o *RoleTrustPolicyRequest) SetAssumeRolePolicyDocument(v PolicyDocument) {
	o.AssumeRolePolicyDocument = v
}

func (o RoleTrustPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleTrustPolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["assume_role_policy_document"] = o.AssumeRolePolicyDocument
	return toSerialize, nil
}

func (o *RoleTrustPolicyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"assume_role_policy_document",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoleTrustPolicyRequest := _RoleTrustPolicyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoleTrustPolicyRequest)

	if err != nil {
		return err
	}

	*o = RoleTrustPolicyRequest(varRoleTrustPolicyRequest)

	return err
}

type NullableRoleTrustPolicyRequest struct {
	value *RoleTrustPolicyRequest
	isSet bool
}

func (v NullableRoleTrustPolicyRequest) Get() *RoleTrustPolicyRequest {
	return v.value
}

func (v *NullableRoleTrustPolicyRequest) Set(val *RoleTrustPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleTrustPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleTrustPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleTrustPolicyRequest(val *RoleTrustPolicyRequest) *NullableRoleTrustPolicyRequest {
	return &NullableRoleTrustPolicyRequest{value: val, isSet: true}
}

func (v NullableRoleTrustPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleTrustPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
