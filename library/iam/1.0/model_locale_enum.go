/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// LocaleEnum the model 'LocaleEnum'
type LocaleEnum string

// List of LocaleEnum
const (
	LOCALEENUM_KO_KR LocaleEnum = "ko_KR"
	LOCALEENUM_EN_US LocaleEnum = "en_US"
)

// All allowed values of LocaleEnum enum
var AllowedLocaleEnumEnumValues = []LocaleEnum{
	"ko_KR",
	"en_US",
}

func (v *LocaleEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LocaleEnum(value)
	for _, existing := range AllowedLocaleEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LocaleEnum", value)
}

// NewLocaleEnumFromValue returns a pointer to a valid LocaleEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocaleEnumFromValue(v string) (*LocaleEnum, error) {
	ev := LocaleEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LocaleEnum: valid values are %v", v, AllowedLocaleEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocaleEnum) IsValid() bool {
	for _, existing := range AllowedLocaleEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocaleEnum value
func (v LocaleEnum) Ptr() *LocaleEnum {
	return &v
}

type NullableLocaleEnum struct {
	value *LocaleEnum
	isSet bool
}

func (v NullableLocaleEnum) Get() *LocaleEnum {
	return v.value
}

func (v *NullableLocaleEnum) Set(val *LocaleEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableLocaleEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableLocaleEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocaleEnum(val *LocaleEnum) *NullableLocaleEnum {
	return &NullableLocaleEnum{value: val, isSet: true}
}

func (v NullableLocaleEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocaleEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
