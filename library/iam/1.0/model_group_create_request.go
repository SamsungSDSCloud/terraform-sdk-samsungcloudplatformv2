/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GroupCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupCreateRequest{}

// GroupCreateRequest struct for GroupCreateRequest
type GroupCreateRequest struct {
	Description NullableString `json:"description"`
	// Group 이름
	Name string              `json:"name" validate:"regexp=^[a-zA-Z0-9\\\\-.,_+=@ㄱ-ㅎㅏ-ㅣ가-힣]*$"`
	Tags []map[string]string `json:"tags,omitempty"`
}

type _GroupCreateRequest GroupCreateRequest

// NewGroupCreateRequest instantiates a new GroupCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupCreateRequest(description NullableString, name string) *GroupCreateRequest {
	this := GroupCreateRequest{}
	this.Description = description
	this.Name = name
	return &this
}

// NewGroupCreateRequestWithDefaults instantiates a new GroupCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupCreateRequestWithDefaults() *GroupCreateRequest {
	this := GroupCreateRequest{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GroupCreateRequest) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *GroupCreateRequest) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetName returns the Name field value
func (o *GroupCreateRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupCreateRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupCreateRequest) SetName(v string) {
	o.Name = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupCreateRequest) GetTags() []map[string]string {
	if o == nil {
		var ret []map[string]string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupCreateRequest) GetTagsOk() ([]map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *GroupCreateRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []map[string]string and assigns it to the Tags field.
func (o *GroupCreateRequest) SetTags(v []map[string]string) {
	o.Tags = v
}

func (o GroupCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description.Get()
	toSerialize["name"] = o.Name
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *GroupCreateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupCreateRequest := _GroupCreateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupCreateRequest)

	if err != nil {
		return err
	}

	*o = GroupCreateRequest(varGroupCreateRequest)

	return err
}

type NullableGroupCreateRequest struct {
	value *GroupCreateRequest
	isSet bool
}

func (v NullableGroupCreateRequest) Get() *GroupCreateRequest {
	return v.value
}

func (v *NullableGroupCreateRequest) Set(val *GroupCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupCreateRequest(val *GroupCreateRequest) *NullableGroupCreateRequest {
	return &NullableGroupCreateRequest{value: val, isSet: true}
}

func (v NullableGroupCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
