/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// AccessKeyTypeCreateRequestEnum the model 'AccessKeyTypeCreateRequestEnum'
type AccessKeyTypeCreateRequestEnum string

// List of AccessKeyTypeCreateRequestEnum
const (
	ACCESSKEYTYPECREATEREQUESTENUM_PERMANENT AccessKeyTypeCreateRequestEnum = "PERMANENT"
	ACCESSKEYTYPECREATEREQUESTENUM_TEMPORARY AccessKeyTypeCreateRequestEnum = "TEMPORARY"
)

// All allowed values of AccessKeyTypeCreateRequestEnum enum
var AllowedAccessKeyTypeCreateRequestEnumEnumValues = []AccessKeyTypeCreateRequestEnum{
	"PERMANENT",
	"TEMPORARY",
}

func (v *AccessKeyTypeCreateRequestEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessKeyTypeCreateRequestEnum(value)
	for _, existing := range AllowedAccessKeyTypeCreateRequestEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessKeyTypeCreateRequestEnum", value)
}

// NewAccessKeyTypeCreateRequestEnumFromValue returns a pointer to a valid AccessKeyTypeCreateRequestEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessKeyTypeCreateRequestEnumFromValue(v string) (*AccessKeyTypeCreateRequestEnum, error) {
	ev := AccessKeyTypeCreateRequestEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessKeyTypeCreateRequestEnum: valid values are %v", v, AllowedAccessKeyTypeCreateRequestEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessKeyTypeCreateRequestEnum) IsValid() bool {
	for _, existing := range AllowedAccessKeyTypeCreateRequestEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessKeyTypeCreateRequestEnum value
func (v AccessKeyTypeCreateRequestEnum) Ptr() *AccessKeyTypeCreateRequestEnum {
	return &v
}

type NullableAccessKeyTypeCreateRequestEnum struct {
	value *AccessKeyTypeCreateRequestEnum
	isSet bool
}

func (v NullableAccessKeyTypeCreateRequestEnum) Get() *AccessKeyTypeCreateRequestEnum {
	return v.value
}

func (v *NullableAccessKeyTypeCreateRequestEnum) Set(val *AccessKeyTypeCreateRequestEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKeyTypeCreateRequestEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKeyTypeCreateRequestEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKeyTypeCreateRequestEnum(val *AccessKeyTypeCreateRequestEnum) *NullableAccessKeyTypeCreateRequestEnum {
	return &NullableAccessKeyTypeCreateRequestEnum{value: val, isSet: true}
}

func (v NullableAccessKeyTypeCreateRequestEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKeyTypeCreateRequestEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
