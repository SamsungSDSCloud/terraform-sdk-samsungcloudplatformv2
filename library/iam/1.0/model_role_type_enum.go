/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// RoleTypeEnum the model 'RoleTypeEnum'
type RoleTypeEnum string

// List of RoleTypeEnum
const (
	ROLETYPEENUM_DEFAULT      RoleTypeEnum = "DEFAULT"
	ROLETYPEENUM_USER_DEFINED RoleTypeEnum = "USER_DEFINED"
)

// All allowed values of RoleTypeEnum enum
var AllowedRoleTypeEnumEnumValues = []RoleTypeEnum{
	"DEFAULT",
	"USER_DEFINED",
}

func (v *RoleTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoleTypeEnum(value)
	for _, existing := range AllowedRoleTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoleTypeEnum", value)
}

// NewRoleTypeEnumFromValue returns a pointer to a valid RoleTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleTypeEnumFromValue(v string) (*RoleTypeEnum, error) {
	ev := RoleTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoleTypeEnum: valid values are %v", v, AllowedRoleTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoleTypeEnum) IsValid() bool {
	for _, existing := range AllowedRoleTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoleTypeEnum value
func (v RoleTypeEnum) Ptr() *RoleTypeEnum {
	return &v
}

type NullableRoleTypeEnum struct {
	value *RoleTypeEnum
	isSet bool
}

func (v NullableRoleTypeEnum) Get() *RoleTypeEnum {
	return v.value
}

func (v *NullableRoleTypeEnum) Set(val *RoleTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleTypeEnum(val *RoleTypeEnum) *NullableRoleTypeEnum {
	return &NullableRoleTypeEnum{value: val, isSet: true}
}

func (v NullableRoleTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
