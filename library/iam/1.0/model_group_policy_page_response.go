/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev2450
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GroupPolicyPageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupPolicyPageResponse{}

// GroupPolicyPageResponse struct for GroupPolicyPageResponse
type GroupPolicyPageResponse struct {
	// count
	Count int32 `json:"count"`
	// page
	Page     int32    `json:"page"`
	Policies []Policy `json:"policies"`
	// size
	Size int32    `json:"size"`
	Sort []string `json:"sort,omitempty"`
}

type _GroupPolicyPageResponse GroupPolicyPageResponse

// NewGroupPolicyPageResponse instantiates a new GroupPolicyPageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupPolicyPageResponse(count int32, page int32, policies []Policy, size int32) *GroupPolicyPageResponse {
	this := GroupPolicyPageResponse{}
	this.Count = count
	this.Page = page
	this.Policies = policies
	this.Size = size
	return &this
}

// NewGroupPolicyPageResponseWithDefaults instantiates a new GroupPolicyPageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupPolicyPageResponseWithDefaults() *GroupPolicyPageResponse {
	this := GroupPolicyPageResponse{}
	return &this
}

// GetCount returns the Count field value
func (o *GroupPolicyPageResponse) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *GroupPolicyPageResponse) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *GroupPolicyPageResponse) SetCount(v int32) {
	o.Count = v
}

// GetPage returns the Page field value
func (o *GroupPolicyPageResponse) GetPage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *GroupPolicyPageResponse) GetPageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *GroupPolicyPageResponse) SetPage(v int32) {
	o.Page = v
}

// GetPolicies returns the Policies field value
func (o *GroupPolicyPageResponse) GetPolicies() []Policy {
	if o == nil {
		var ret []Policy
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
func (o *GroupPolicyPageResponse) GetPoliciesOk() ([]Policy, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *GroupPolicyPageResponse) SetPolicies(v []Policy) {
	o.Policies = v
}

// GetSize returns the Size field value
func (o *GroupPolicyPageResponse) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *GroupPolicyPageResponse) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *GroupPolicyPageResponse) SetSize(v int32) {
	o.Size = v
}

// GetSort returns the Sort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupPolicyPageResponse) GetSort() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupPolicyPageResponse) GetSortOk() ([]string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *GroupPolicyPageResponse) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given []string and assigns it to the Sort field.
func (o *GroupPolicyPageResponse) SetSort(v []string) {
	o.Sort = v
}

func (o GroupPolicyPageResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupPolicyPageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	toSerialize["page"] = o.Page
	toSerialize["policies"] = o.Policies
	toSerialize["size"] = o.Size
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	return toSerialize, nil
}

func (o *GroupPolicyPageResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"page",
		"policies",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupPolicyPageResponse := _GroupPolicyPageResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupPolicyPageResponse)

	if err != nil {
		return err
	}

	*o = GroupPolicyPageResponse(varGroupPolicyPageResponse)

	return err
}

type NullableGroupPolicyPageResponse struct {
	value *GroupPolicyPageResponse
	isSet bool
}

func (v NullableGroupPolicyPageResponse) Get() *GroupPolicyPageResponse {
	return v.value
}

func (v *NullableGroupPolicyPageResponse) Set(val *GroupPolicyPageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupPolicyPageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupPolicyPageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupPolicyPageResponse(val *GroupPolicyPageResponse) *NullableGroupPolicyPageResponse {
	return &NullableGroupPolicyPageResponse{value: val, isSet: true}
}

func (v NullableGroupPolicyPageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupPolicyPageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
