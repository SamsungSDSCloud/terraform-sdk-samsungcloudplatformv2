/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// YnEnum the model 'YnEnum'
type YnEnum string

// List of YnEnum
const (
	YNENUM_N YnEnum = "N"
	YNENUM_Y YnEnum = "Y"
)

// All allowed values of YnEnum enum
var AllowedYnEnumEnumValues = []YnEnum{
	"N",
	"Y",
}

func (v *YnEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := YnEnum(value)
	for _, existing := range AllowedYnEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid YnEnum", value)
}

// NewYnEnumFromValue returns a pointer to a valid YnEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewYnEnumFromValue(v string) (*YnEnum, error) {
	ev := YnEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for YnEnum: valid values are %v", v, AllowedYnEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v YnEnum) IsValid() bool {
	for _, existing := range AllowedYnEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to YnEnum value
func (v YnEnum) Ptr() *YnEnum {
	return &v
}

type NullableYnEnum struct {
	value *YnEnum
	isSet bool
}

func (v NullableYnEnum) Get() *YnEnum {
	return v.value
}

func (v *NullableYnEnum) Set(val *YnEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableYnEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableYnEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYnEnum(val *YnEnum) *NullableYnEnum {
	return &NullableYnEnum{value: val, isSet: true}
}

func (v NullableYnEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYnEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
