/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group struct for Group
type Group struct {
	// 생성 일시
	CreatedAt time.Time `json:"created_at"`
	// 생성자
	CreatedBy string `json:"created_by"`
	// 생성자 Email
	CreatorEmail string `json:"creator_email"`
	// 생성자 성, 이름
	CreatorName string         `json:"creator_name"`
	Description NullableString `json:"description"`
	// ID
	Id string `json:"id"`
	// 수정 일시
	ModifiedAt time.Time `json:"modified_at"`
	// 수정자
	ModifiedBy string `json:"modified_by"`
	// 수정자 Email
	ModifierEmail string `json:"modifier_email"`
	// 수정자 성, 이름
	ModifierName string `json:"modifier_name"`
	// Group 이름
	Name     string                   `json:"name" validate:"regexp=^[a-zA-Z0-9\\\\-.,_+=@ㄱ-ㅎㅏ-ㅣ가-힣\\\\s]*$"`
	Policies []Policy                 `json:"policies"`
	Roles    []Role                   `json:"roles"`
	Srn      NullableString           `json:"srn,omitempty"`
	Tags     []map[string]interface{} `json:"tags,omitempty"`
	// Group Type
	Type string `json:"type"`
}

type _Group Group

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup(createdAt time.Time, createdBy string, creatorEmail string, creatorName string, description NullableString, id string, modifiedAt time.Time, modifiedBy string, modifierEmail string, modifierName string, name string, policies []Policy, roles []Role, type_ string) *Group {
	this := Group{}
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.CreatorEmail = creatorEmail
	this.CreatorName = creatorName
	this.Description = description
	this.Id = id
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.ModifierEmail = modifierEmail
	this.ModifierName = modifierName
	this.Name = name
	this.Policies = policies
	this.Roles = roles
	this.Type = type_
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *Group) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Group) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *Group) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *Group) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetCreatorEmail returns the CreatorEmail field value
func (o *Group) GetCreatorEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreatorEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorEmail, true
}

// SetCreatorEmail sets field value
func (o *Group) SetCreatorEmail(v string) {
	o.CreatorEmail = v
}

// GetCreatorName returns the CreatorName field value
func (o *Group) GetCreatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value
// and a boolean to check if the value has been set.
func (o *Group) GetCreatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorName, true
}

// SetCreatorName sets field value
func (o *Group) SetCreatorName(v string) {
	o.CreatorName = v
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Group) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *Group) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetId returns the Id field value
func (o *Group) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Group) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Group) SetId(v string) {
	o.Id = v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *Group) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *Group) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *Group) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *Group) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *Group) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *Group) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetModifierEmail returns the ModifierEmail field value
func (o *Group) GetModifierEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifierEmail
}

// GetModifierEmailOk returns a tuple with the ModifierEmail field value
// and a boolean to check if the value has been set.
func (o *Group) GetModifierEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifierEmail, true
}

// SetModifierEmail sets field value
func (o *Group) SetModifierEmail(v string) {
	o.ModifierEmail = v
}

// GetModifierName returns the ModifierName field value
func (o *Group) GetModifierName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifierName
}

// GetModifierNameOk returns a tuple with the ModifierName field value
// and a boolean to check if the value has been set.
func (o *Group) GetModifierNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifierName, true
}

// SetModifierName sets field value
func (o *Group) SetModifierName(v string) {
	o.ModifierName = v
}

// GetName returns the Name field value
func (o *Group) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Group) SetName(v string) {
	o.Name = v
}

// GetPolicies returns the Policies field value
// If the value is explicit nil, the zero value for []Policy will be returned
func (o *Group) GetPolicies() []Policy {
	if o == nil {
		var ret []Policy
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetPoliciesOk() ([]Policy, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *Group) SetPolicies(v []Policy) {
	o.Policies = v
}

// GetRoles returns the Roles field value
// If the value is explicit nil, the zero value for []Role will be returned
func (o *Group) GetRoles() []Role {
	if o == nil {
		var ret []Role
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetRolesOk() ([]Role, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *Group) SetRoles(v []Role) {
	o.Roles = v
}

// GetSrn returns the Srn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetSrn() string {
	if o == nil || IsNil(o.Srn.Get()) {
		var ret string
		return ret
	}
	return *o.Srn.Get()
}

// GetSrnOk returns a tuple with the Srn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetSrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Srn.Get(), o.Srn.IsSet()
}

// HasSrn returns a boolean if a field has been set.
func (o *Group) HasSrn() bool {
	if o != nil && o.Srn.IsSet() {
		return true
	}

	return false
}

// SetSrn gets a reference to the given NullableString and assigns it to the Srn field.
func (o *Group) SetSrn(v string) {
	o.Srn.Set(&v)
}

// SetSrnNil sets the value for Srn to be an explicit nil
func (o *Group) SetSrnNil() {
	o.Srn.Set(nil)
}

// UnsetSrn ensures that no value is present for Srn, not even an explicit nil
func (o *Group) UnsetSrn() {
	o.Srn.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetTags() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetTagsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Group) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []map[string]interface{} and assigns it to the Tags field.
func (o *Group) SetTags(v []map[string]interface{}) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *Group) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Group) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Group) SetType(v string) {
	o.Type = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["creator_email"] = o.CreatorEmail
	toSerialize["creator_name"] = o.CreatorName
	toSerialize["description"] = o.Description.Get()
	toSerialize["id"] = o.Id
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["modifier_email"] = o.ModifierEmail
	toSerialize["modifier_name"] = o.ModifierName
	toSerialize["name"] = o.Name
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.Srn.IsSet() {
		toSerialize["srn"] = o.Srn.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *Group) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"created_by",
		"creator_email",
		"creator_name",
		"description",
		"id",
		"modified_at",
		"modified_by",
		"modifier_email",
		"modifier_name",
		"name",
		"policies",
		"roles",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroup := _Group{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroup)

	if err != nil {
		return err
	}

	*o = Group(varGroup)

	return err
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
