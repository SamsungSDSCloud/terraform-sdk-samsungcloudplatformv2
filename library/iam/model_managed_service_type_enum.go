/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// ManagedServiceTypeEnum the model 'ManagedServiceTypeEnum'
type ManagedServiceTypeEnum string

// List of ManagedServiceTypeEnum
const (
	MANAGEDSERVICETYPEENUM_NONE    ManagedServiceTypeEnum = "NONE"
	MANAGEDSERVICETYPEENUM_SDS     ManagedServiceTypeEnum = "SDS"
	MANAGEDSERVICETYPEENUM_PARTNER ManagedServiceTypeEnum = "PARTNER"
)

// All allowed values of ManagedServiceTypeEnum enum
var AllowedManagedServiceTypeEnumEnumValues = []ManagedServiceTypeEnum{
	"NONE",
	"SDS",
	"PARTNER",
}

func (v *ManagedServiceTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagedServiceTypeEnum(value)
	for _, existing := range AllowedManagedServiceTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagedServiceTypeEnum", value)
}

// NewManagedServiceTypeEnumFromValue returns a pointer to a valid ManagedServiceTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagedServiceTypeEnumFromValue(v string) (*ManagedServiceTypeEnum, error) {
	ev := ManagedServiceTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagedServiceTypeEnum: valid values are %v", v, AllowedManagedServiceTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagedServiceTypeEnum) IsValid() bool {
	for _, existing := range AllowedManagedServiceTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ManagedServiceTypeEnum value
func (v ManagedServiceTypeEnum) Ptr() *ManagedServiceTypeEnum {
	return &v
}

type NullableManagedServiceTypeEnum struct {
	value *ManagedServiceTypeEnum
	isSet bool
}

func (v NullableManagedServiceTypeEnum) Get() *ManagedServiceTypeEnum {
	return v.value
}

func (v *NullableManagedServiceTypeEnum) Set(val *ManagedServiceTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedServiceTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedServiceTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedServiceTypeEnum(val *ManagedServiceTypeEnum) *NullableManagedServiceTypeEnum {
	return &NullableManagedServiceTypeEnum{value: val, isSet: true}
}

func (v NullableManagedServiceTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedServiceTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
