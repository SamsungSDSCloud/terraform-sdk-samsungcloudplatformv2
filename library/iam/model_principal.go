/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// Principal Principal
type Principal struct {
	MapmapOfStringarrayOfString *map[string][]string
	String                      *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Principal) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into MapmapOfStringarrayOfString
	err = json.Unmarshal(data, &dst.MapmapOfStringarrayOfString)
	if err == nil {
		jsonMapmapOfStringarrayOfString, _ := json.Marshal(dst.MapmapOfStringarrayOfString)
		if string(jsonMapmapOfStringarrayOfString) == "{}" { // empty struct
			dst.MapmapOfStringarrayOfString = nil
		} else {
			return nil // data stored in dst.MapmapOfStringarrayOfString, return on the first match
		}
	} else {
		dst.MapmapOfStringarrayOfString = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Principal)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Principal) MarshalJSON() ([]byte, error) {
	if src.MapmapOfStringarrayOfString != nil {
		return json.Marshal(&src.MapmapOfStringarrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePrincipal struct {
	value *Principal
	isSet bool
}

func (v NullablePrincipal) Get() *Principal {
	return v.value
}

func (v *NullablePrincipal) Set(val *Principal) {
	v.value = val
	v.isSet = true
}

func (v NullablePrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullablePrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrincipal(val *Principal) *NullablePrincipal {
	return &NullablePrincipal{value: val, isSet: true}
}

func (v NullablePrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
