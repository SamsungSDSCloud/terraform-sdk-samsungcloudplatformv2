/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// IamV1PaymentContractsApiAPIService IamV1PaymentContractsApiAPI service
type IamV1PaymentContractsApiAPIService service

type IamV1PaymentContractsApiAPIPaymentContractListRequest struct {
	ctx                     context.Context
	ApiService              *IamV1PaymentContractsApiAPIService
	withCount               *string
	limit                   *int32
	marker                  *string
	sort                    *string
	id                      *string
	name                    *string
	businessCategoryIds     *string
	startCreatedAt          *string
	endCreatedAt            *string
	includeAccountOfProject *string
	creatorName             *string
	creatorEmail            *string
	creatorCompanyName      *string
	modifierName            *string
	modifierEmail           *string
	modifierCompanyName     *string
	requestScope            *AccountRequestScopeEnum
	accountManagerId        *string
	accountUserId           *string
}

// with count
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) WithCount(withCount string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) Limit(limit int32) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.limit = &limit
	return r
}

// marker
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) Marker(marker string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.marker = &marker
	return r
}

// sort
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) Sort(sort string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.sort = &sort
	return r
}

// Account ID
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) Id(id string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.id = &id
	return r
}

// Account 이름
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) Name(name string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.name = &name
	return r
}

// 회사 업무 구분 ID 목록
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) BusinessCategoryIds(businessCategoryIds string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.businessCategoryIds = &businessCategoryIds
	return r
}

// 시작 생성 일시
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) StartCreatedAt(startCreatedAt string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.startCreatedAt = &startCreatedAt
	return r
}

// 끝 생성 일시
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) EndCreatedAt(endCreatedAt string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.endCreatedAt = &endCreatedAt
	return r
}

// Project의 Account 포함 여부
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) IncludeAccountOfProject(includeAccountOfProject string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.includeAccountOfProject = &includeAccountOfProject
	return r
}

// Account 생성자 성, 이름
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) CreatorName(creatorName string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.creatorName = &creatorName
	return r
}

// Account 생성자 Email
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) CreatorEmail(creatorEmail string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.creatorEmail = &creatorEmail
	return r
}

// Account 생성자 회사 이름
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) CreatorCompanyName(creatorCompanyName string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.creatorCompanyName = &creatorCompanyName
	return r
}

// Account 수정자 성, 이름
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) ModifierName(modifierName string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.modifierName = &modifierName
	return r
}

// Account 수정자 Email
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) ModifierEmail(modifierEmail string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.modifierEmail = &modifierEmail
	return r
}

// Account 수정자 회사 이름
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) ModifierCompanyName(modifierCompanyName string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.modifierCompanyName = &modifierCompanyName
	return r
}

// 요청 범위
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) RequestScope(requestScope AccountRequestScopeEnum) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.requestScope = &requestScope
	return r
}

// Account Manager ID
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) AccountManagerId(accountManagerId string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.accountManagerId = &accountManagerId
	return r
}

// Account User ID
func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) AccountUserId(accountUserId string) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	r.accountUserId = &accountUserId
	return r
}

func (r IamV1PaymentContractsApiAPIPaymentContractListRequest) Execute() (*PaymentContractListResponse, *http.Response, error) {
	return r.ApiService.PaymentContractListExecute(r)
}

/*
PaymentContractList List Payment contracts

List Payment contracts

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IamV1PaymentContractsApiAPIPaymentContractListRequest
*/
func (a *IamV1PaymentContractsApiAPIService) PaymentContractList(ctx context.Context) IamV1PaymentContractsApiAPIPaymentContractListRequest {
	return IamV1PaymentContractsApiAPIPaymentContractListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaymentContractListResponse
func (a *IamV1PaymentContractsApiAPIService) PaymentContractListExecute(r IamV1PaymentContractsApiAPIPaymentContractListRequest) (*PaymentContractListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaymentContractListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/payment-contracts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.businessCategoryIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_category_ids", r.businessCategoryIds, "form", "")
	}
	if r.startCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_created_at", r.startCreatedAt, "form", "")
	}
	if r.endCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_created_at", r.endCreatedAt, "form", "")
	}
	if r.includeAccountOfProject != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_account_of_project", r.includeAccountOfProject, "form", "")
	}
	if r.creatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creator_name", r.creatorName, "form", "")
	}
	if r.creatorEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creator_email", r.creatorEmail, "form", "")
	}
	if r.creatorCompanyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creator_company_name", r.creatorCompanyName, "form", "")
	}
	if r.modifierName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modifier_name", r.modifierName, "form", "")
	}
	if r.modifierEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modifier_email", r.modifierEmail, "form", "")
	}
	if r.modifierCompanyName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "modifier_company_name", r.modifierCompanyName, "form", "")
	}
	if r.requestScope != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "request_scope", r.requestScope, "form", "")
	}
	if r.accountManagerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_manager_id", r.accountManagerId, "form", "")
	}
	if r.accountUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_user_id", r.accountUserId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IamV1PaymentContractsApiAPIPaymentContractShowRequest struct {
	ctx               context.Context
	ApiService        *IamV1PaymentContractsApiAPIService
	paymentContractId string
}

func (r IamV1PaymentContractsApiAPIPaymentContractShowRequest) Execute() (*PaymentContractShowResponse, *http.Response, error) {
	return r.ApiService.PaymentContractShowExecute(r)
}

/*
PaymentContractShow Show Payment contract

Show Payment contract

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param paymentContractId Payment contract ID
	@return IamV1PaymentContractsApiAPIPaymentContractShowRequest
*/
func (a *IamV1PaymentContractsApiAPIService) PaymentContractShow(ctx context.Context, paymentContractId string) IamV1PaymentContractsApiAPIPaymentContractShowRequest {
	return IamV1PaymentContractsApiAPIPaymentContractShowRequest{
		ApiService:        a,
		ctx:               ctx,
		paymentContractId: paymentContractId,
	}
}

// Execute executes the request
//
//	@return PaymentContractShowResponse
func (a *IamV1PaymentContractsApiAPIService) PaymentContractShowExecute(r IamV1PaymentContractsApiAPIPaymentContractShowRequest) (*PaymentContractShowResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaymentContractShowResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/payment-contracts/{payment_contract_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"payment_contract_id"+"}", url.PathEscape(parameterValueToString(r.paymentContractId, "paymentContractId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
