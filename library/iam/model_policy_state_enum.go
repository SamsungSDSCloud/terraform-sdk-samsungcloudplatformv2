/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// PolicyStateEnum the model 'PolicyStateEnum'
type PolicyStateEnum string

// List of PolicyStateEnum
const (
	POLICYSTATEENUM_ACTIVE   PolicyStateEnum = "ACTIVE"
	POLICYSTATEENUM_INACTIVE PolicyStateEnum = "INACTIVE"
	POLICYSTATEENUM_DELETED  PolicyStateEnum = "DELETED"
)

// All allowed values of PolicyStateEnum enum
var AllowedPolicyStateEnumEnumValues = []PolicyStateEnum{
	"ACTIVE",
	"INACTIVE",
	"DELETED",
}

func (v *PolicyStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyStateEnum(value)
	for _, existing := range AllowedPolicyStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyStateEnum", value)
}

// NewPolicyStateEnumFromValue returns a pointer to a valid PolicyStateEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyStateEnumFromValue(v string) (*PolicyStateEnum, error) {
	ev := PolicyStateEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyStateEnum: valid values are %v", v, AllowedPolicyStateEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyStateEnum) IsValid() bool {
	for _, existing := range AllowedPolicyStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyStateEnum value
func (v PolicyStateEnum) Ptr() *PolicyStateEnum {
	return &v
}

type NullablePolicyStateEnum struct {
	value *PolicyStateEnum
	isSet bool
}

func (v NullablePolicyStateEnum) Get() *PolicyStateEnum {
	return v.value
}

func (v *NullablePolicyStateEnum) Set(val *PolicyStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyStateEnum(val *PolicyStateEnum) *NullablePolicyStateEnum {
	return &NullablePolicyStateEnum{value: val, isSet: true}
}

func (v NullablePolicyStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
