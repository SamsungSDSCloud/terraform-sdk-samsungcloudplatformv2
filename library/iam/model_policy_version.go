/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PolicyVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyVersion{}

// PolicyVersion struct for PolicyVersion
type PolicyVersion struct {
	// Created At
	CreatedAt time.Time `json:"created_at"`
	// Created By
	CreatedBy string `json:"created_by"`
	// Policy Version Id
	Id *string `json:"id,omitempty"`
	// Modified At
	ModifiedAt time.Time `json:"modified_at"`
	// Modified By
	ModifiedBy string `json:"modified_by"`
	// Policy Document
	PolicyDocument PolicyDocument `json:"policy_document"`
	// Policy ID
	PolicyId *string `json:"policy_id,omitempty"`
	// Policy Version Name
	PolicyVersionName *string `json:"policy_version_name,omitempty"`
}

type _PolicyVersion PolicyVersion

// NewPolicyVersion instantiates a new PolicyVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyVersion(createdAt time.Time, createdBy string, modifiedAt time.Time, modifiedBy string, policyDocument PolicyDocument) *PolicyVersion {
	this := PolicyVersion{}
	this.CreatedAt = createdAt
	this.CreatedBy = createdBy
	this.ModifiedAt = modifiedAt
	this.ModifiedBy = modifiedBy
	this.PolicyDocument = policyDocument
	return &this
}

// NewPolicyVersionWithDefaults instantiates a new PolicyVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyVersionWithDefaults() *PolicyVersion {
	this := PolicyVersion{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *PolicyVersion) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PolicyVersion) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *PolicyVersion) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetCreatedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *PolicyVersion) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PolicyVersion) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PolicyVersion) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PolicyVersion) SetId(v string) {
	o.Id = &v
}

// GetModifiedAt returns the ModifiedAt field value
func (o *PolicyVersion) GetModifiedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// SetModifiedAt sets field value
func (o *PolicyVersion) SetModifiedAt(v time.Time) {
	o.ModifiedAt = v
}

// GetModifiedBy returns the ModifiedBy field value
func (o *PolicyVersion) GetModifiedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModifiedBy
}

// GetModifiedByOk returns a tuple with the ModifiedBy field value
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetModifiedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModifiedBy, true
}

// SetModifiedBy sets field value
func (o *PolicyVersion) SetModifiedBy(v string) {
	o.ModifiedBy = v
}

// GetPolicyDocument returns the PolicyDocument field value
func (o *PolicyVersion) GetPolicyDocument() PolicyDocument {
	if o == nil {
		var ret PolicyDocument
		return ret
	}

	return o.PolicyDocument
}

// GetPolicyDocumentOk returns a tuple with the PolicyDocument field value
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetPolicyDocumentOk() (*PolicyDocument, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyDocument, true
}

// SetPolicyDocument sets field value
func (o *PolicyVersion) SetPolicyDocument(v PolicyDocument) {
	o.PolicyDocument = v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *PolicyVersion) GetPolicyId() string {
	if o == nil || IsNil(o.PolicyId) {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetPolicyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyId) {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *PolicyVersion) HasPolicyId() bool {
	if o != nil && !IsNil(o.PolicyId) {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *PolicyVersion) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetPolicyVersionName returns the PolicyVersionName field value if set, zero value otherwise.
func (o *PolicyVersion) GetPolicyVersionName() string {
	if o == nil || IsNil(o.PolicyVersionName) {
		var ret string
		return ret
	}
	return *o.PolicyVersionName
}

// GetPolicyVersionNameOk returns a tuple with the PolicyVersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyVersion) GetPolicyVersionNameOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyVersionName) {
		return nil, false
	}
	return o.PolicyVersionName, true
}

// HasPolicyVersionName returns a boolean if a field has been set.
func (o *PolicyVersion) HasPolicyVersionName() bool {
	if o != nil && !IsNil(o.PolicyVersionName) {
		return true
	}

	return false
}

// SetPolicyVersionName gets a reference to the given string and assigns it to the PolicyVersionName field.
func (o *PolicyVersion) SetPolicyVersionName(v string) {
	o.PolicyVersionName = &v
}

func (o PolicyVersion) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by"] = o.CreatedBy
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["modified_at"] = o.ModifiedAt
	toSerialize["modified_by"] = o.ModifiedBy
	toSerialize["policy_document"] = o.PolicyDocument
	if !IsNil(o.PolicyId) {
		toSerialize["policy_id"] = o.PolicyId
	}
	if !IsNil(o.PolicyVersionName) {
		toSerialize["policy_version_name"] = o.PolicyVersionName
	}
	return toSerialize, nil
}

func (o *PolicyVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"created_by",
		"modified_at",
		"modified_by",
		"policy_document",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyVersion := _PolicyVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyVersion)

	if err != nil {
		return err
	}

	*o = PolicyVersion(varPolicyVersion)

	return err
}

type NullablePolicyVersion struct {
	value *PolicyVersion
	isSet bool
}

func (v NullablePolicyVersion) Get() *PolicyVersion {
	return v.value
}

func (v *NullablePolicyVersion) Set(val *PolicyVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyVersion(val *PolicyVersion) *NullablePolicyVersion {
	return &NullablePolicyVersion{value: val, isSet: true}
}

func (v NullablePolicyVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
