/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
	"fmt"
)

// PolicyCategoryEnum the model 'PolicyCategoryEnum'
type PolicyCategoryEnum string

// List of PolicyCategoryEnum
const (
	POLICYCATEGORYENUM_IDENTITY_BASED PolicyCategoryEnum = "IDENTITY_BASED"
	POLICYCATEGORYENUM_RESOURCE_BASED PolicyCategoryEnum = "RESOURCE_BASED"
)

// All allowed values of PolicyCategoryEnum enum
var AllowedPolicyCategoryEnumEnumValues = []PolicyCategoryEnum{
	"IDENTITY_BASED",
	"RESOURCE_BASED",
}

func (v *PolicyCategoryEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolicyCategoryEnum(value)
	for _, existing := range AllowedPolicyCategoryEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolicyCategoryEnum", value)
}

// NewPolicyCategoryEnumFromValue returns a pointer to a valid PolicyCategoryEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyCategoryEnumFromValue(v string) (*PolicyCategoryEnum, error) {
	ev := PolicyCategoryEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolicyCategoryEnum: valid values are %v", v, AllowedPolicyCategoryEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyCategoryEnum) IsValid() bool {
	for _, existing := range AllowedPolicyCategoryEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolicyCategoryEnum value
func (v PolicyCategoryEnum) Ptr() *PolicyCategoryEnum {
	return &v
}

type NullablePolicyCategoryEnum struct {
	value *PolicyCategoryEnum
	isSet bool
}

func (v NullablePolicyCategoryEnum) Get() *PolicyCategoryEnum {
	return v.value
}

func (v *NullablePolicyCategoryEnum) Set(val *PolicyCategoryEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyCategoryEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyCategoryEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyCategoryEnum(val *PolicyCategoryEnum) *NullablePolicyCategoryEnum {
	return &NullablePolicyCategoryEnum{value: val, isSet: true}
}

func (v NullablePolicyCategoryEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyCategoryEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
