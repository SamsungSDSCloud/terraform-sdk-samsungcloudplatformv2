/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ListEndpointsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListEndpointsResponse{}

// ListEndpointsResponse struct for ListEndpointsResponse
type ListEndpointsResponse struct {
	Endpoints []EndpointsResponse `json:"endpoints"`
}

type _ListEndpointsResponse ListEndpointsResponse

// NewListEndpointsResponse instantiates a new ListEndpointsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListEndpointsResponse(endpoints []EndpointsResponse) *ListEndpointsResponse {
	this := ListEndpointsResponse{}
	this.Endpoints = endpoints
	return &this
}

// NewListEndpointsResponseWithDefaults instantiates a new ListEndpointsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListEndpointsResponseWithDefaults() *ListEndpointsResponse {
	this := ListEndpointsResponse{}
	return &this
}

// GetEndpoints returns the Endpoints field value
func (o *ListEndpointsResponse) GetEndpoints() []EndpointsResponse {
	if o == nil {
		var ret []EndpointsResponse
		return ret
	}

	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value
// and a boolean to check if the value has been set.
func (o *ListEndpointsResponse) GetEndpointsOk() ([]EndpointsResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// SetEndpoints sets field value
func (o *ListEndpointsResponse) SetEndpoints(v []EndpointsResponse) {
	o.Endpoints = v
}

func (o ListEndpointsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListEndpointsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpoints"] = o.Endpoints
	return toSerialize, nil
}

func (o *ListEndpointsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpoints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListEndpointsResponse := _ListEndpointsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListEndpointsResponse)

	if err != nil {
		return err
	}

	*o = ListEndpointsResponse(varListEndpointsResponse)

	return err
}

type NullableListEndpointsResponse struct {
	value *ListEndpointsResponse
	isSet bool
}

func (v NullableListEndpointsResponse) Get() *ListEndpointsResponse {
	return v.value
}

func (v *NullableListEndpointsResponse) Set(val *ListEndpointsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListEndpointsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListEndpointsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListEndpointsResponse(val *ListEndpointsResponse) *NullableListEndpointsResponse {
	return &NullableListEndpointsResponse{value: val, isSet: true}
}

func (v NullableListEndpointsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListEndpointsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
