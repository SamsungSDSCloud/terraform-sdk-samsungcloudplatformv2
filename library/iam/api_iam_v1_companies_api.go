/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
)

// IamV1CompaniesApiAPIService IamV1CompaniesApiAPI service
type IamV1CompaniesApiAPIService service

type IamV1CompaniesApiAPIListCompaniesRequest struct {
	ctx                context.Context
	ApiService         *IamV1CompaniesApiAPIService
	withCount          *string
	limit              *int32
	marker             *string
	sort               *string
	registrationNumber *string
	name               *string
	id                 *string
	ids                *string
}

// with count
func (r IamV1CompaniesApiAPIListCompaniesRequest) WithCount(withCount string) IamV1CompaniesApiAPIListCompaniesRequest {
	r.withCount = &withCount
	return r
}

// limit
func (r IamV1CompaniesApiAPIListCompaniesRequest) Limit(limit int32) IamV1CompaniesApiAPIListCompaniesRequest {
	r.limit = &limit
	return r
}

// marker
func (r IamV1CompaniesApiAPIListCompaniesRequest) Marker(marker string) IamV1CompaniesApiAPIListCompaniesRequest {
	r.marker = &marker
	return r
}

// sort
func (r IamV1CompaniesApiAPIListCompaniesRequest) Sort(sort string) IamV1CompaniesApiAPIListCompaniesRequest {
	r.sort = &sort
	return r
}

// 사업자 등록 번호
func (r IamV1CompaniesApiAPIListCompaniesRequest) RegistrationNumber(registrationNumber string) IamV1CompaniesApiAPIListCompaniesRequest {
	r.registrationNumber = &registrationNumber
	return r
}

// 회사이름
func (r IamV1CompaniesApiAPIListCompaniesRequest) Name(name string) IamV1CompaniesApiAPIListCompaniesRequest {
	r.name = &name
	return r
}

// ID
func (r IamV1CompaniesApiAPIListCompaniesRequest) Id(id string) IamV1CompaniesApiAPIListCompaniesRequest {
	r.id = &id
	return r
}

// IDs
func (r IamV1CompaniesApiAPIListCompaniesRequest) Ids(ids string) IamV1CompaniesApiAPIListCompaniesRequest {
	r.ids = &ids
	return r
}

func (r IamV1CompaniesApiAPIListCompaniesRequest) Execute() (*ListCompanyResponse, *http.Response, error) {
	return r.ApiService.ListCompaniesExecute(r)
}

/*
ListCompanies Get list of companies registered in MDG

Get list of companies registered in MDG

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IamV1CompaniesApiAPIListCompaniesRequest
*/
func (a *IamV1CompaniesApiAPIService) ListCompanies(ctx context.Context) IamV1CompaniesApiAPIListCompaniesRequest {
	return IamV1CompaniesApiAPIListCompaniesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListCompanyResponse
func (a *IamV1CompaniesApiAPIService) ListCompaniesExecute(r IamV1CompaniesApiAPIListCompaniesRequest) (*ListCompanyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListCompanyResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/companies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.withCount != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "with_count", r.withCount, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.marker != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "marker", r.marker, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.registrationNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registration_number", r.registrationNumber, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ids", r.ids, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
