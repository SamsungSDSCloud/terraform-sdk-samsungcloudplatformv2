/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Statement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Statement{}

// Statement struct for Statement
type Statement struct {
	Action    []string                            `json:"Action,omitempty"`
	Condition map[string]map[string][]interface{} `json:"Condition,omitempty"`
	// Effect
	Effect    string            `json:"Effect"`
	NotAction []string          `json:"NotAction,omitempty"`
	Principal NullablePrincipal `json:"Principal,omitempty"`
	// Resource
	Resource []string `json:"Resource,omitempty"`
	// Statement Id
	Sid *string `json:"Sid,omitempty"`
}

type _Statement Statement

// NewStatement instantiates a new Statement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatement(effect string) *Statement {
	this := Statement{}
	this.Effect = effect
	var sid string = "statement1"
	this.Sid = &sid
	return &this
}

// NewStatementWithDefaults instantiates a new Statement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementWithDefaults() *Statement {
	this := Statement{}
	var sid string = "statement1"
	this.Sid = &sid
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Statement) GetAction() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Statement) GetActionOk() ([]string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Statement) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given []string and assigns it to the Action field.
func (o *Statement) SetAction(v []string) {
	o.Action = v
}

// GetCondition returns the Condition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Statement) GetCondition() map[string]map[string][]interface{} {
	if o == nil {
		var ret map[string]map[string][]interface{}
		return ret
	}
	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Statement) GetConditionOk() (map[string]map[string][]interface{}, bool) {
	if o == nil || IsNil(o.Condition) {
		return map[string]map[string][]interface{}{}, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *Statement) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given map[string]map[string][]interface{} and assigns it to the Condition field.
func (o *Statement) SetCondition(v map[string]map[string][]interface{}) {
	o.Condition = v
}

// GetEffect returns the Effect field value
func (o *Statement) GetEffect() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *Statement) GetEffectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Effect, true
}

// SetEffect sets field value
func (o *Statement) SetEffect(v string) {
	o.Effect = v
}

// GetNotAction returns the NotAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Statement) GetNotAction() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NotAction
}

// GetNotActionOk returns a tuple with the NotAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Statement) GetNotActionOk() ([]string, bool) {
	if o == nil || IsNil(o.NotAction) {
		return nil, false
	}
	return o.NotAction, true
}

// HasNotAction returns a boolean if a field has been set.
func (o *Statement) HasNotAction() bool {
	if o != nil && !IsNil(o.NotAction) {
		return true
	}

	return false
}

// SetNotAction gets a reference to the given []string and assigns it to the NotAction field.
func (o *Statement) SetNotAction(v []string) {
	o.NotAction = v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Statement) GetPrincipal() Principal {
	if o == nil || IsNil(o.Principal.Get()) {
		var ret Principal
		return ret
	}
	return *o.Principal.Get()
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Statement) GetPrincipalOk() (*Principal, bool) {
	if o == nil {
		return nil, false
	}
	return o.Principal.Get(), o.Principal.IsSet()
}

// HasPrincipal returns a boolean if a field has been set.
func (o *Statement) HasPrincipal() bool {
	if o != nil && o.Principal.IsSet() {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given NullablePrincipal and assigns it to the Principal field.
func (o *Statement) SetPrincipal(v Principal) {
	o.Principal.Set(&v)
}

// SetPrincipalNil sets the value for Principal to be an explicit nil
func (o *Statement) SetPrincipalNil() {
	o.Principal.Set(nil)
}

// UnsetPrincipal ensures that no value is present for Principal, not even an explicit nil
func (o *Statement) UnsetPrincipal() {
	o.Principal.Unset()
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Statement) GetResource() []string {
	if o == nil || IsNil(o.Resource) {
		var ret []string
		return ret
	}
	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statement) GetResourceOk() ([]string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Statement) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given []string and assigns it to the Resource field.
func (o *Statement) SetResource(v []string) {
	o.Resource = v
}

// GetSid returns the Sid field value if set, zero value otherwise.
func (o *Statement) GetSid() string {
	if o == nil || IsNil(o.Sid) {
		var ret string
		return ret
	}
	return *o.Sid
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statement) GetSidOk() (*string, bool) {
	if o == nil || IsNil(o.Sid) {
		return nil, false
	}
	return o.Sid, true
}

// HasSid returns a boolean if a field has been set.
func (o *Statement) HasSid() bool {
	if o != nil && !IsNil(o.Sid) {
		return true
	}

	return false
}

// SetSid gets a reference to the given string and assigns it to the Sid field.
func (o *Statement) SetSid(v string) {
	o.Sid = &v
}

func (o Statement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Statement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["Action"] = o.Action
	}
	if o.Condition != nil {
		toSerialize["Condition"] = o.Condition
	}
	toSerialize["Effect"] = o.Effect
	if o.NotAction != nil {
		toSerialize["NotAction"] = o.NotAction
	}
	if o.Principal.IsSet() {
		toSerialize["Principal"] = o.Principal.Get()
	}
	if !IsNil(o.Resource) {
		toSerialize["Resource"] = o.Resource
	}
	if !IsNil(o.Sid) {
		toSerialize["Sid"] = o.Sid
	}
	return toSerialize, nil
}

func (o *Statement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Effect",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStatement := _Statement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStatement)

	if err != nil {
		return err
	}

	*o = Statement(varStatement)

	return err
}

type NullableStatement struct {
	value *Statement
	isSet bool
}

func (v NullableStatement) Get() *Statement {
	return v.value
}

func (v *NullableStatement) Set(val *Statement) {
	v.value = val
	v.isSet = true
}

func (v NullableStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatement(val *Statement) *NullableStatement {
	return &NullableStatement{value: val, isSet: true}
}

func (v NullableStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
