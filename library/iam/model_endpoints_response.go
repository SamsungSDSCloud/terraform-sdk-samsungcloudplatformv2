/*
SCP IAM Service

SCP IAM Service

API version: 0.0.1.dev1432
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EndpointsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointsResponse{}

// EndpointsResponse struct for EndpointsResponse
type EndpointsResponse struct {
	// Region
	Region string `json:"region"`
	// Service name
	ServiceName string `json:"service_name"`
	// Service type
	ServiceType string `json:"service_type"`
	// URL
	Url string `json:"url"`
}

type _EndpointsResponse EndpointsResponse

// NewEndpointsResponse instantiates a new EndpointsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointsResponse(region string, serviceName string, serviceType string, url string) *EndpointsResponse {
	this := EndpointsResponse{}
	this.Region = region
	this.ServiceName = serviceName
	this.ServiceType = serviceType
	this.Url = url
	return &this
}

// NewEndpointsResponseWithDefaults instantiates a new EndpointsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointsResponseWithDefaults() *EndpointsResponse {
	this := EndpointsResponse{}
	return &this
}

// GetRegion returns the Region field value
func (o *EndpointsResponse) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *EndpointsResponse) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *EndpointsResponse) SetRegion(v string) {
	o.Region = v
}

// GetServiceName returns the ServiceName field value
func (o *EndpointsResponse) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *EndpointsResponse) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *EndpointsResponse) SetServiceName(v string) {
	o.ServiceName = v
}

// GetServiceType returns the ServiceType field value
func (o *EndpointsResponse) GetServiceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *EndpointsResponse) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *EndpointsResponse) SetServiceType(v string) {
	o.ServiceType = v
}

// GetUrl returns the Url field value
func (o *EndpointsResponse) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *EndpointsResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *EndpointsResponse) SetUrl(v string) {
	o.Url = v
}

func (o EndpointsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["service_name"] = o.ServiceName
	toSerialize["service_type"] = o.ServiceType
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *EndpointsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"service_name",
		"service_type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEndpointsResponse := _EndpointsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEndpointsResponse)

	if err != nil {
		return err
	}

	*o = EndpointsResponse(varEndpointsResponse)

	return err
}

type NullableEndpointsResponse struct {
	value *EndpointsResponse
	isSet bool
}

func (v NullableEndpointsResponse) Get() *EndpointsResponse {
	return v.value
}

func (v *NullableEndpointsResponse) Set(val *EndpointsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointsResponse(val *EndpointsResponse) *NullableEndpointsResponse {
	return &NullableEndpointsResponse{value: val, isSet: true}
}

func (v NullableEndpointsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
