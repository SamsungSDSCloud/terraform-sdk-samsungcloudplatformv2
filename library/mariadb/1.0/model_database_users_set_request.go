/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DatabaseUsersSetRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseUsersSetRequest{}

// DatabaseUsersSetRequest struct for DatabaseUsersSetRequest
type DatabaseUsersSetRequest struct {
	// Database User Request List
	DatabaseUsers []DatabaseUserRequest `json:"database_users"`
}

type _DatabaseUsersSetRequest DatabaseUsersSetRequest

// NewDatabaseUsersSetRequest instantiates a new DatabaseUsersSetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseUsersSetRequest(databaseUsers []DatabaseUserRequest) *DatabaseUsersSetRequest {
	this := DatabaseUsersSetRequest{}
	this.DatabaseUsers = databaseUsers
	return &this
}

// NewDatabaseUsersSetRequestWithDefaults instantiates a new DatabaseUsersSetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseUsersSetRequestWithDefaults() *DatabaseUsersSetRequest {
	this := DatabaseUsersSetRequest{}
	return &this
}

// GetDatabaseUsers returns the DatabaseUsers field value
func (o *DatabaseUsersSetRequest) GetDatabaseUsers() []DatabaseUserRequest {
	if o == nil {
		var ret []DatabaseUserRequest
		return ret
	}

	return o.DatabaseUsers
}

// GetDatabaseUsersOk returns a tuple with the DatabaseUsers field value
// and a boolean to check if the value has been set.
func (o *DatabaseUsersSetRequest) GetDatabaseUsersOk() ([]DatabaseUserRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseUsers, true
}

// SetDatabaseUsers sets field value
func (o *DatabaseUsersSetRequest) SetDatabaseUsers(v []DatabaseUserRequest) {
	o.DatabaseUsers = v
}

func (o DatabaseUsersSetRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseUsersSetRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["database_users"] = o.DatabaseUsers
	return toSerialize, nil
}

func (o *DatabaseUsersSetRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseUsersSetRequest := _DatabaseUsersSetRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDatabaseUsersSetRequest)

	if err != nil {
		return err
	}

	*o = DatabaseUsersSetRequest(varDatabaseUsersSetRequest)

	return err
}

type NullableDatabaseUsersSetRequest struct {
	value *DatabaseUsersSetRequest
	isSet bool
}

func (v NullableDatabaseUsersSetRequest) Get() *DatabaseUsersSetRequest {
	return v.value
}

func (v *NullableDatabaseUsersSetRequest) Set(val *DatabaseUsersSetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseUsersSetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseUsersSetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseUsersSetRequest(val *DatabaseUsersSetRequest) *NullableDatabaseUsersSetRequest {
	return &NullableDatabaseUsersSetRequest{value: val, isSet: true}
}

func (v NullableDatabaseUsersSetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseUsersSetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
