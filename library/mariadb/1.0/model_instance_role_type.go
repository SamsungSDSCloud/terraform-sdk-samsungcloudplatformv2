/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"
	"fmt"
)

// InstanceRoleType the model 'InstanceRoleType'
type InstanceRoleType string

// List of InstanceRoleType
const (
	INSTANCEROLETYPE_ACTIVE           InstanceRoleType = "ACTIVE"
	INSTANCEROLETYPE_STANDBY          InstanceRoleType = "STANDBY"
	INSTANCEROLETYPE_PRIMARY          InstanceRoleType = "PRIMARY"
	INSTANCEROLETYPE_SECONDARY        InstanceRoleType = "SECONDARY"
	INSTANCEROLETYPE_MASTER           InstanceRoleType = "MASTER"
	INSTANCEROLETYPE_REPLICA          InstanceRoleType = "REPLICA"
	INSTANCEROLETYPE_SENTINEL         InstanceRoleType = "SENTINEL"
	INSTANCEROLETYPE_MASTER_DATA      InstanceRoleType = "MASTER_DATA"
	INSTANCEROLETYPE_DATA             InstanceRoleType = "DATA"
	INSTANCEROLETYPE_KIBANA           InstanceRoleType = "KIBANA"
	INSTANCEROLETYPE_DASHBOARDS       InstanceRoleType = "DASHBOARDS"
	INSTANCEROLETYPE_ZOOKEEPER_BROKER InstanceRoleType = "ZOOKEEPER_BROKER"
	INSTANCEROLETYPE_BROKER           InstanceRoleType = "BROKER"
	INSTANCEROLETYPE_ZOOKEEPER        InstanceRoleType = "ZOOKEEPER"
	INSTANCEROLETYPE_AKHQ             InstanceRoleType = "AKHQ"
	INSTANCEROLETYPE_CONSOLE          InstanceRoleType = "CONSOLE"
)

// All allowed values of InstanceRoleType enum
var AllowedInstanceRoleTypeEnumValues = []InstanceRoleType{
	"ACTIVE",
	"STANDBY",
	"PRIMARY",
	"SECONDARY",
	"MASTER",
	"REPLICA",
	"SENTINEL",
	"MASTER_DATA",
	"DATA",
	"KIBANA",
	"DASHBOARDS",
	"ZOOKEEPER_BROKER",
	"BROKER",
	"ZOOKEEPER",
	"AKHQ",
	"CONSOLE",
}

func (v *InstanceRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstanceRoleType(value)
	for _, existing := range AllowedInstanceRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstanceRoleType", value)
}

// NewInstanceRoleTypeFromValue returns a pointer to a valid InstanceRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstanceRoleTypeFromValue(v string) (*InstanceRoleType, error) {
	ev := InstanceRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstanceRoleType: valid values are %v", v, AllowedInstanceRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstanceRoleType) IsValid() bool {
	for _, existing := range AllowedInstanceRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstanceRoleType value
func (v InstanceRoleType) Ptr() *InstanceRoleType {
	return &v
}

type NullableInstanceRoleType struct {
	value *InstanceRoleType
	isSet bool
}

func (v NullableInstanceRoleType) Get() *InstanceRoleType {
	return v.value
}

func (v *NullableInstanceRoleType) Set(val *InstanceRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceRoleType(val *InstanceRoleType) *NullableInstanceRoleType {
	return &NullableInstanceRoleType{value: val, isSet: true}
}

func (v NullableInstanceRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
