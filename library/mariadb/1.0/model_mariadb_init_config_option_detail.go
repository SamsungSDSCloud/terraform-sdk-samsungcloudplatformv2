/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MariadbInitConfigOptionDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MariadbInitConfigOptionDetail{}

// MariadbInitConfigOptionDetail struct for MariadbInitConfigOptionDetail
type MariadbInitConfigOptionDetail struct {
	// Audit usage state
	AuditEnabled         *bool                       `json:"audit_enabled,omitempty"`
	BackupOption         NullableMariadbBackupOption `json:"backup_option,omitempty"`
	DatabaseCharacterSet NullableString              `json:"database_character_set,omitempty"`
	// Database Name
	DatabaseName string        `json:"database_name"`
	DatabasePort NullableInt32 `json:"database_port,omitempty"`
	// Database User Name
	DatabaseUserName string `json:"database_user_name"`
}

type _MariadbInitConfigOptionDetail MariadbInitConfigOptionDetail

// NewMariadbInitConfigOptionDetail instantiates a new MariadbInitConfigOptionDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMariadbInitConfigOptionDetail(databaseName string, databaseUserName string) *MariadbInitConfigOptionDetail {
	this := MariadbInitConfigOptionDetail{}
	var auditEnabled bool = false
	this.AuditEnabled = &auditEnabled
	this.DatabaseName = databaseName
	this.DatabaseUserName = databaseUserName
	return &this
}

// NewMariadbInitConfigOptionDetailWithDefaults instantiates a new MariadbInitConfigOptionDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMariadbInitConfigOptionDetailWithDefaults() *MariadbInitConfigOptionDetail {
	this := MariadbInitConfigOptionDetail{}
	var auditEnabled bool = false
	this.AuditEnabled = &auditEnabled
	return &this
}

// GetAuditEnabled returns the AuditEnabled field value if set, zero value otherwise.
func (o *MariadbInitConfigOptionDetail) GetAuditEnabled() bool {
	if o == nil || IsNil(o.AuditEnabled) {
		var ret bool
		return ret
	}
	return *o.AuditEnabled
}

// GetAuditEnabledOk returns a tuple with the AuditEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MariadbInitConfigOptionDetail) GetAuditEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AuditEnabled) {
		return nil, false
	}
	return o.AuditEnabled, true
}

// HasAuditEnabled returns a boolean if a field has been set.
func (o *MariadbInitConfigOptionDetail) HasAuditEnabled() bool {
	if o != nil && !IsNil(o.AuditEnabled) {
		return true
	}

	return false
}

// SetAuditEnabled gets a reference to the given bool and assigns it to the AuditEnabled field.
func (o *MariadbInitConfigOptionDetail) SetAuditEnabled(v bool) {
	o.AuditEnabled = &v
}

// GetBackupOption returns the BackupOption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MariadbInitConfigOptionDetail) GetBackupOption() MariadbBackupOption {
	if o == nil || IsNil(o.BackupOption.Get()) {
		var ret MariadbBackupOption
		return ret
	}
	return *o.BackupOption.Get()
}

// GetBackupOptionOk returns a tuple with the BackupOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MariadbInitConfigOptionDetail) GetBackupOptionOk() (*MariadbBackupOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupOption.Get(), o.BackupOption.IsSet()
}

// HasBackupOption returns a boolean if a field has been set.
func (o *MariadbInitConfigOptionDetail) HasBackupOption() bool {
	if o != nil && o.BackupOption.IsSet() {
		return true
	}

	return false
}

// SetBackupOption gets a reference to the given NullableMariadbBackupOption and assigns it to the BackupOption field.
func (o *MariadbInitConfigOptionDetail) SetBackupOption(v MariadbBackupOption) {
	o.BackupOption.Set(&v)
}

// SetBackupOptionNil sets the value for BackupOption to be an explicit nil
func (o *MariadbInitConfigOptionDetail) SetBackupOptionNil() {
	o.BackupOption.Set(nil)
}

// UnsetBackupOption ensures that no value is present for BackupOption, not even an explicit nil
func (o *MariadbInitConfigOptionDetail) UnsetBackupOption() {
	o.BackupOption.Unset()
}

// GetDatabaseCharacterSet returns the DatabaseCharacterSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MariadbInitConfigOptionDetail) GetDatabaseCharacterSet() string {
	if o == nil || IsNil(o.DatabaseCharacterSet.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseCharacterSet.Get()
}

// GetDatabaseCharacterSetOk returns a tuple with the DatabaseCharacterSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MariadbInitConfigOptionDetail) GetDatabaseCharacterSetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseCharacterSet.Get(), o.DatabaseCharacterSet.IsSet()
}

// HasDatabaseCharacterSet returns a boolean if a field has been set.
func (o *MariadbInitConfigOptionDetail) HasDatabaseCharacterSet() bool {
	if o != nil && o.DatabaseCharacterSet.IsSet() {
		return true
	}

	return false
}

// SetDatabaseCharacterSet gets a reference to the given NullableString and assigns it to the DatabaseCharacterSet field.
func (o *MariadbInitConfigOptionDetail) SetDatabaseCharacterSet(v string) {
	o.DatabaseCharacterSet.Set(&v)
}

// SetDatabaseCharacterSetNil sets the value for DatabaseCharacterSet to be an explicit nil
func (o *MariadbInitConfigOptionDetail) SetDatabaseCharacterSetNil() {
	o.DatabaseCharacterSet.Set(nil)
}

// UnsetDatabaseCharacterSet ensures that no value is present for DatabaseCharacterSet, not even an explicit nil
func (o *MariadbInitConfigOptionDetail) UnsetDatabaseCharacterSet() {
	o.DatabaseCharacterSet.Unset()
}

// GetDatabaseName returns the DatabaseName field value
func (o *MariadbInitConfigOptionDetail) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *MariadbInitConfigOptionDetail) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *MariadbInitConfigOptionDetail) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetDatabasePort returns the DatabasePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MariadbInitConfigOptionDetail) GetDatabasePort() int32 {
	if o == nil || IsNil(o.DatabasePort.Get()) {
		var ret int32
		return ret
	}
	return *o.DatabasePort.Get()
}

// GetDatabasePortOk returns a tuple with the DatabasePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MariadbInitConfigOptionDetail) GetDatabasePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabasePort.Get(), o.DatabasePort.IsSet()
}

// HasDatabasePort returns a boolean if a field has been set.
func (o *MariadbInitConfigOptionDetail) HasDatabasePort() bool {
	if o != nil && o.DatabasePort.IsSet() {
		return true
	}

	return false
}

// SetDatabasePort gets a reference to the given NullableInt32 and assigns it to the DatabasePort field.
func (o *MariadbInitConfigOptionDetail) SetDatabasePort(v int32) {
	o.DatabasePort.Set(&v)
}

// SetDatabasePortNil sets the value for DatabasePort to be an explicit nil
func (o *MariadbInitConfigOptionDetail) SetDatabasePortNil() {
	o.DatabasePort.Set(nil)
}

// UnsetDatabasePort ensures that no value is present for DatabasePort, not even an explicit nil
func (o *MariadbInitConfigOptionDetail) UnsetDatabasePort() {
	o.DatabasePort.Unset()
}

// GetDatabaseUserName returns the DatabaseUserName field value
func (o *MariadbInitConfigOptionDetail) GetDatabaseUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseUserName
}

// GetDatabaseUserNameOk returns a tuple with the DatabaseUserName field value
// and a boolean to check if the value has been set.
func (o *MariadbInitConfigOptionDetail) GetDatabaseUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseUserName, true
}

// SetDatabaseUserName sets field value
func (o *MariadbInitConfigOptionDetail) SetDatabaseUserName(v string) {
	o.DatabaseUserName = v
}

func (o MariadbInitConfigOptionDetail) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MariadbInitConfigOptionDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuditEnabled) {
		toSerialize["audit_enabled"] = o.AuditEnabled
	}
	if o.BackupOption.IsSet() {
		toSerialize["backup_option"] = o.BackupOption.Get()
	}
	if o.DatabaseCharacterSet.IsSet() {
		toSerialize["database_character_set"] = o.DatabaseCharacterSet.Get()
	}
	toSerialize["database_name"] = o.DatabaseName
	if o.DatabasePort.IsSet() {
		toSerialize["database_port"] = o.DatabasePort.Get()
	}
	toSerialize["database_user_name"] = o.DatabaseUserName
	return toSerialize, nil
}

func (o *MariadbInitConfigOptionDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"database_name",
		"database_user_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMariadbInitConfigOptionDetail := _MariadbInitConfigOptionDetail{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMariadbInitConfigOptionDetail)

	if err != nil {
		return err
	}

	*o = MariadbInitConfigOptionDetail(varMariadbInitConfigOptionDetail)

	return err
}

type NullableMariadbInitConfigOptionDetail struct {
	value *MariadbInitConfigOptionDetail
	isSet bool
}

func (v NullableMariadbInitConfigOptionDetail) Get() *MariadbInitConfigOptionDetail {
	return v.value
}

func (v *NullableMariadbInitConfigOptionDetail) Set(val *MariadbInitConfigOptionDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableMariadbInitConfigOptionDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableMariadbInitConfigOptionDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMariadbInitConfigOptionDetail(val *MariadbInitConfigOptionDetail) *NullableMariadbInitConfigOptionDetail {
	return &NullableMariadbInitConfigOptionDetail{value: val, isSet: true}
}

func (v NullableMariadbInitConfigOptionDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMariadbInitConfigOptionDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
