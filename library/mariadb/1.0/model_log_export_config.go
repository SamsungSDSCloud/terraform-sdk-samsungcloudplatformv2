/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev2162
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LogExportConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogExportConfig{}

// LogExportConfig struct for LogExportConfig
type LogExportConfig struct {
	BucketName      NullableString `json:"bucket_name"`
	DeleteOnExport  NullableBool   `json:"delete_on_export"`
	IsBucketDeleted NullableBool   `json:"is_bucket_deleted"`
	// Log type registration state
	IsRegistered bool `json:"is_registered"`
	// Log label
	LogLabel string `json:"log_label"`
	// Log type
	LogType               string            `json:"log_type"`
	ScheduleDayOfMonth    NullableString    `json:"schedule_day_of_month"`
	ScheduleDayOfWeek     NullableDayOfWeek `json:"schedule_day_of_week"`
	ScheduleFrequencyType NullableString    `json:"schedule_frequency_type"`
	ScheduleHour          NullableString    `json:"schedule_hour"`
}

type _LogExportConfig LogExportConfig

// NewLogExportConfig instantiates a new LogExportConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogExportConfig(bucketName NullableString, deleteOnExport NullableBool, isBucketDeleted NullableBool, isRegistered bool, logLabel string, logType string, scheduleDayOfMonth NullableString, scheduleDayOfWeek NullableDayOfWeek, scheduleFrequencyType NullableString, scheduleHour NullableString) *LogExportConfig {
	this := LogExportConfig{}
	this.BucketName = bucketName
	this.DeleteOnExport = deleteOnExport
	this.IsBucketDeleted = isBucketDeleted
	this.IsRegistered = isRegistered
	this.LogLabel = logLabel
	this.LogType = logType
	this.ScheduleDayOfMonth = scheduleDayOfMonth
	this.ScheduleDayOfWeek = scheduleDayOfWeek
	this.ScheduleFrequencyType = scheduleFrequencyType
	this.ScheduleHour = scheduleHour
	return &this
}

// NewLogExportConfigWithDefaults instantiates a new LogExportConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogExportConfigWithDefaults() *LogExportConfig {
	this := LogExportConfig{}
	return &this
}

// GetBucketName returns the BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LogExportConfig) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogExportConfig) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// SetBucketName sets field value
func (o *LogExportConfig) SetBucketName(v string) {
	o.BucketName.Set(&v)
}

// GetDeleteOnExport returns the DeleteOnExport field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *LogExportConfig) GetDeleteOnExport() bool {
	if o == nil || o.DeleteOnExport.Get() == nil {
		var ret bool
		return ret
	}

	return *o.DeleteOnExport.Get()
}

// GetDeleteOnExportOk returns a tuple with the DeleteOnExport field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogExportConfig) GetDeleteOnExportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleteOnExport.Get(), o.DeleteOnExport.IsSet()
}

// SetDeleteOnExport sets field value
func (o *LogExportConfig) SetDeleteOnExport(v bool) {
	o.DeleteOnExport.Set(&v)
}

// GetIsBucketDeleted returns the IsBucketDeleted field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *LogExportConfig) GetIsBucketDeleted() bool {
	if o == nil || o.IsBucketDeleted.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsBucketDeleted.Get()
}

// GetIsBucketDeletedOk returns a tuple with the IsBucketDeleted field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogExportConfig) GetIsBucketDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsBucketDeleted.Get(), o.IsBucketDeleted.IsSet()
}

// SetIsBucketDeleted sets field value
func (o *LogExportConfig) SetIsBucketDeleted(v bool) {
	o.IsBucketDeleted.Set(&v)
}

// GetIsRegistered returns the IsRegistered field value
func (o *LogExportConfig) GetIsRegistered() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRegistered
}

// GetIsRegisteredOk returns a tuple with the IsRegistered field value
// and a boolean to check if the value has been set.
func (o *LogExportConfig) GetIsRegisteredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRegistered, true
}

// SetIsRegistered sets field value
func (o *LogExportConfig) SetIsRegistered(v bool) {
	o.IsRegistered = v
}

// GetLogLabel returns the LogLabel field value
func (o *LogExportConfig) GetLogLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogLabel
}

// GetLogLabelOk returns a tuple with the LogLabel field value
// and a boolean to check if the value has been set.
func (o *LogExportConfig) GetLogLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogLabel, true
}

// SetLogLabel sets field value
func (o *LogExportConfig) SetLogLabel(v string) {
	o.LogLabel = v
}

// GetLogType returns the LogType field value
func (o *LogExportConfig) GetLogType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogType
}

// GetLogTypeOk returns a tuple with the LogType field value
// and a boolean to check if the value has been set.
func (o *LogExportConfig) GetLogTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogType, true
}

// SetLogType sets field value
func (o *LogExportConfig) SetLogType(v string) {
	o.LogType = v
}

// GetScheduleDayOfMonth returns the ScheduleDayOfMonth field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LogExportConfig) GetScheduleDayOfMonth() string {
	if o == nil || o.ScheduleDayOfMonth.Get() == nil {
		var ret string
		return ret
	}

	return *o.ScheduleDayOfMonth.Get()
}

// GetScheduleDayOfMonthOk returns a tuple with the ScheduleDayOfMonth field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogExportConfig) GetScheduleDayOfMonthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleDayOfMonth.Get(), o.ScheduleDayOfMonth.IsSet()
}

// SetScheduleDayOfMonth sets field value
func (o *LogExportConfig) SetScheduleDayOfMonth(v string) {
	o.ScheduleDayOfMonth.Set(&v)
}

// GetScheduleDayOfWeek returns the ScheduleDayOfWeek field value
// If the value is explicit nil, the zero value for DayOfWeek will be returned
func (o *LogExportConfig) GetScheduleDayOfWeek() DayOfWeek {
	if o == nil || o.ScheduleDayOfWeek.Get() == nil {
		var ret DayOfWeek
		return ret
	}

	return *o.ScheduleDayOfWeek.Get()
}

// GetScheduleDayOfWeekOk returns a tuple with the ScheduleDayOfWeek field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogExportConfig) GetScheduleDayOfWeekOk() (*DayOfWeek, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleDayOfWeek.Get(), o.ScheduleDayOfWeek.IsSet()
}

// SetScheduleDayOfWeek sets field value
func (o *LogExportConfig) SetScheduleDayOfWeek(v DayOfWeek) {
	o.ScheduleDayOfWeek.Set(&v)
}

// GetScheduleFrequencyType returns the ScheduleFrequencyType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LogExportConfig) GetScheduleFrequencyType() string {
	if o == nil || o.ScheduleFrequencyType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ScheduleFrequencyType.Get()
}

// GetScheduleFrequencyTypeOk returns a tuple with the ScheduleFrequencyType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogExportConfig) GetScheduleFrequencyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleFrequencyType.Get(), o.ScheduleFrequencyType.IsSet()
}

// SetScheduleFrequencyType sets field value
func (o *LogExportConfig) SetScheduleFrequencyType(v string) {
	o.ScheduleFrequencyType.Set(&v)
}

// GetScheduleHour returns the ScheduleHour field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LogExportConfig) GetScheduleHour() string {
	if o == nil || o.ScheduleHour.Get() == nil {
		var ret string
		return ret
	}

	return *o.ScheduleHour.Get()
}

// GetScheduleHourOk returns a tuple with the ScheduleHour field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogExportConfig) GetScheduleHourOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleHour.Get(), o.ScheduleHour.IsSet()
}

// SetScheduleHour sets field value
func (o *LogExportConfig) SetScheduleHour(v string) {
	o.ScheduleHour.Set(&v)
}

func (o LogExportConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogExportConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_name"] = o.BucketName.Get()
	toSerialize["delete_on_export"] = o.DeleteOnExport.Get()
	toSerialize["is_bucket_deleted"] = o.IsBucketDeleted.Get()
	toSerialize["is_registered"] = o.IsRegistered
	toSerialize["log_label"] = o.LogLabel
	toSerialize["log_type"] = o.LogType
	toSerialize["schedule_day_of_month"] = o.ScheduleDayOfMonth.Get()
	toSerialize["schedule_day_of_week"] = o.ScheduleDayOfWeek.Get()
	toSerialize["schedule_frequency_type"] = o.ScheduleFrequencyType.Get()
	toSerialize["schedule_hour"] = o.ScheduleHour.Get()
	return toSerialize, nil
}

func (o *LogExportConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket_name",
		"delete_on_export",
		"is_bucket_deleted",
		"is_registered",
		"log_label",
		"log_type",
		"schedule_day_of_month",
		"schedule_day_of_week",
		"schedule_frequency_type",
		"schedule_hour",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogExportConfig := _LogExportConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogExportConfig)

	if err != nil {
		return err
	}

	*o = LogExportConfig(varLogExportConfig)

	return err
}

type NullableLogExportConfig struct {
	value *LogExportConfig
	isSet bool
}

func (v NullableLogExportConfig) Get() *LogExportConfig {
	return v.value
}

func (v *NullableLogExportConfig) Set(val *LogExportConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLogExportConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLogExportConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogExportConfig(val *LogExportConfig) *NullableLogExportConfig {
	return &NullableLogExportConfig{value: val, isSet: true}
}

func (v NullableLogExportConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogExportConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
