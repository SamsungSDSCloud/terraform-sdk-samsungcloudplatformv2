/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev1795
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParameterGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterGroup{}

// ParameterGroup struct for ParameterGroup
type ParameterGroup struct {
	// Parameter group ID
	Id string `json:"id"`
	// Software major version
	MajorVersion string `json:"major_version"`
	// Parameter group name
	Name string `json:"name"`
	// Product type
	ProductType string `json:"product_type"`
}

type _ParameterGroup ParameterGroup

// NewParameterGroup instantiates a new ParameterGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterGroup(id string, majorVersion string, name string, productType string) *ParameterGroup {
	this := ParameterGroup{}
	this.Id = id
	this.MajorVersion = majorVersion
	this.Name = name
	this.ProductType = productType
	return &this
}

// NewParameterGroupWithDefaults instantiates a new ParameterGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterGroupWithDefaults() *ParameterGroup {
	this := ParameterGroup{}
	return &this
}

// GetId returns the Id field value
func (o *ParameterGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParameterGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParameterGroup) SetId(v string) {
	o.Id = v
}

// GetMajorVersion returns the MajorVersion field value
func (o *ParameterGroup) GetMajorVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MajorVersion
}

// GetMajorVersionOk returns a tuple with the MajorVersion field value
// and a boolean to check if the value has been set.
func (o *ParameterGroup) GetMajorVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MajorVersion, true
}

// SetMajorVersion sets field value
func (o *ParameterGroup) SetMajorVersion(v string) {
	o.MajorVersion = v
}

// GetName returns the Name field value
func (o *ParameterGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParameterGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParameterGroup) SetName(v string) {
	o.Name = v
}

// GetProductType returns the ProductType field value
func (o *ParameterGroup) GetProductType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *ParameterGroup) GetProductTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *ParameterGroup) SetProductType(v string) {
	o.ProductType = v
}

func (o ParameterGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["major_version"] = o.MajorVersion
	toSerialize["name"] = o.Name
	toSerialize["product_type"] = o.ProductType
	return toSerialize, nil
}

func (o *ParameterGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"major_version",
		"name",
		"product_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterGroup := _ParameterGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParameterGroup)

	if err != nil {
		return err
	}

	*o = ParameterGroup(varParameterGroup)

	return err
}

type NullableParameterGroup struct {
	value *ParameterGroup
	isSet bool
}

func (v NullableParameterGroup) Get() *ParameterGroup {
	return v.value
}

func (v *NullableParameterGroup) Set(val *ParameterGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterGroup(val *ParameterGroup) *NullableParameterGroup {
	return &NullableParameterGroup{value: val, isSet: true}
}

func (v NullableParameterGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


