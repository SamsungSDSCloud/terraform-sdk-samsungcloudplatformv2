/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev1795
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstanceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceResponse{}

// InstanceResponse struct for InstanceResponse
type InstanceResponse struct {
	// Name
	Name string `json:"name"`
	// Role type
	RoleType InstanceRoleType `json:"role_type"`
	ServiceIpAddress NullableString `json:"service_ip_address,omitempty"`
	// Service state
	ServiceState ServiceState `json:"service_state"`
}

type _InstanceResponse InstanceResponse

// NewInstanceResponse instantiates a new InstanceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceResponse(name string, roleType InstanceRoleType, serviceState ServiceState) *InstanceResponse {
	this := InstanceResponse{}
	this.Name = name
	this.RoleType = roleType
	this.ServiceState = serviceState
	return &this
}

// NewInstanceResponseWithDefaults instantiates a new InstanceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceResponseWithDefaults() *InstanceResponse {
	this := InstanceResponse{}
	return &this
}

// GetName returns the Name field value
func (o *InstanceResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InstanceResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InstanceResponse) SetName(v string) {
	o.Name = v
}

// GetRoleType returns the RoleType field value
func (o *InstanceResponse) GetRoleType() InstanceRoleType {
	if o == nil {
		var ret InstanceRoleType
		return ret
	}

	return o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value
// and a boolean to check if the value has been set.
func (o *InstanceResponse) GetRoleTypeOk() (*InstanceRoleType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleType, true
}

// SetRoleType sets field value
func (o *InstanceResponse) SetRoleType(v InstanceRoleType) {
	o.RoleType = v
}

// GetServiceIpAddress returns the ServiceIpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InstanceResponse) GetServiceIpAddress() string {
	if o == nil || IsNil(o.ServiceIpAddress.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceIpAddress.Get()
}

// GetServiceIpAddressOk returns a tuple with the ServiceIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InstanceResponse) GetServiceIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceIpAddress.Get(), o.ServiceIpAddress.IsSet()
}

// HasServiceIpAddress returns a boolean if a field has been set.
func (o *InstanceResponse) HasServiceIpAddress() bool {
	if o != nil && o.ServiceIpAddress.IsSet() {
		return true
	}

	return false
}

// SetServiceIpAddress gets a reference to the given NullableString and assigns it to the ServiceIpAddress field.
func (o *InstanceResponse) SetServiceIpAddress(v string) {
	o.ServiceIpAddress.Set(&v)
}
// SetServiceIpAddressNil sets the value for ServiceIpAddress to be an explicit nil
func (o *InstanceResponse) SetServiceIpAddressNil() {
	o.ServiceIpAddress.Set(nil)
}

// UnsetServiceIpAddress ensures that no value is present for ServiceIpAddress, not even an explicit nil
func (o *InstanceResponse) UnsetServiceIpAddress() {
	o.ServiceIpAddress.Unset()
}

// GetServiceState returns the ServiceState field value
func (o *InstanceResponse) GetServiceState() ServiceState {
	if o == nil {
		var ret ServiceState
		return ret
	}

	return o.ServiceState
}

// GetServiceStateOk returns a tuple with the ServiceState field value
// and a boolean to check if the value has been set.
func (o *InstanceResponse) GetServiceStateOk() (*ServiceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceState, true
}

// SetServiceState sets field value
func (o *InstanceResponse) SetServiceState(v ServiceState) {
	o.ServiceState = v
}

func (o InstanceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["role_type"] = o.RoleType
	if o.ServiceIpAddress.IsSet() {
		toSerialize["service_ip_address"] = o.ServiceIpAddress.Get()
	}
	toSerialize["service_state"] = o.ServiceState
	return toSerialize, nil
}

func (o *InstanceResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"role_type",
		"service_state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceResponse := _InstanceResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstanceResponse)

	if err != nil {
		return err
	}

	*o = InstanceResponse(varInstanceResponse)

	return err
}

type NullableInstanceResponse struct {
	value *InstanceResponse
	isSet bool
}

func (v NullableInstanceResponse) Get() *InstanceResponse {
	return v.value
}

func (v *NullableInstanceResponse) Set(val *InstanceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceResponse(val *InstanceResponse) *NullableInstanceResponse {
	return &NullableInstanceResponse{value: val, isSet: true}
}

func (v NullableInstanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


