/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev1795
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"
)

// checks if the MariadbBackupOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MariadbBackupOption{}

// MariadbBackupOption struct for MariadbBackupOption
type MariadbBackupOption struct {
	ArchiveFrequencyMinute NullableString `json:"archive_frequency_minute,omitempty" validate:"regexp=^(5|10|30|60)$"`
	// Backup retention period (day)
	RetentionPeriodDay *string `json:"retention_period_day,omitempty"`
	// Backup starting time (hour)
	StartingTimeHour *string `json:"starting_time_hour,omitempty"`
}

// NewMariadbBackupOption instantiates a new MariadbBackupOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMariadbBackupOption() *MariadbBackupOption {
	this := MariadbBackupOption{}
	return &this
}

// NewMariadbBackupOptionWithDefaults instantiates a new MariadbBackupOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMariadbBackupOptionWithDefaults() *MariadbBackupOption {
	this := MariadbBackupOption{}
	return &this
}

// GetArchiveFrequencyMinute returns the ArchiveFrequencyMinute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MariadbBackupOption) GetArchiveFrequencyMinute() string {
	if o == nil || IsNil(o.ArchiveFrequencyMinute.Get()) {
		var ret string
		return ret
	}
	return *o.ArchiveFrequencyMinute.Get()
}

// GetArchiveFrequencyMinuteOk returns a tuple with the ArchiveFrequencyMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MariadbBackupOption) GetArchiveFrequencyMinuteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchiveFrequencyMinute.Get(), o.ArchiveFrequencyMinute.IsSet()
}

// HasArchiveFrequencyMinute returns a boolean if a field has been set.
func (o *MariadbBackupOption) HasArchiveFrequencyMinute() bool {
	if o != nil && o.ArchiveFrequencyMinute.IsSet() {
		return true
	}

	return false
}

// SetArchiveFrequencyMinute gets a reference to the given NullableString and assigns it to the ArchiveFrequencyMinute field.
func (o *MariadbBackupOption) SetArchiveFrequencyMinute(v string) {
	o.ArchiveFrequencyMinute.Set(&v)
}
// SetArchiveFrequencyMinuteNil sets the value for ArchiveFrequencyMinute to be an explicit nil
func (o *MariadbBackupOption) SetArchiveFrequencyMinuteNil() {
	o.ArchiveFrequencyMinute.Set(nil)
}

// UnsetArchiveFrequencyMinute ensures that no value is present for ArchiveFrequencyMinute, not even an explicit nil
func (o *MariadbBackupOption) UnsetArchiveFrequencyMinute() {
	o.ArchiveFrequencyMinute.Unset()
}

// GetRetentionPeriodDay returns the RetentionPeriodDay field value if set, zero value otherwise.
func (o *MariadbBackupOption) GetRetentionPeriodDay() string {
	if o == nil || IsNil(o.RetentionPeriodDay) {
		var ret string
		return ret
	}
	return *o.RetentionPeriodDay
}

// GetRetentionPeriodDayOk returns a tuple with the RetentionPeriodDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MariadbBackupOption) GetRetentionPeriodDayOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionPeriodDay) {
		return nil, false
	}
	return o.RetentionPeriodDay, true
}

// HasRetentionPeriodDay returns a boolean if a field has been set.
func (o *MariadbBackupOption) HasRetentionPeriodDay() bool {
	if o != nil && !IsNil(o.RetentionPeriodDay) {
		return true
	}

	return false
}

// SetRetentionPeriodDay gets a reference to the given string and assigns it to the RetentionPeriodDay field.
func (o *MariadbBackupOption) SetRetentionPeriodDay(v string) {
	o.RetentionPeriodDay = &v
}

// GetStartingTimeHour returns the StartingTimeHour field value if set, zero value otherwise.
func (o *MariadbBackupOption) GetStartingTimeHour() string {
	if o == nil || IsNil(o.StartingTimeHour) {
		var ret string
		return ret
	}
	return *o.StartingTimeHour
}

// GetStartingTimeHourOk returns a tuple with the StartingTimeHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MariadbBackupOption) GetStartingTimeHourOk() (*string, bool) {
	if o == nil || IsNil(o.StartingTimeHour) {
		return nil, false
	}
	return o.StartingTimeHour, true
}

// HasStartingTimeHour returns a boolean if a field has been set.
func (o *MariadbBackupOption) HasStartingTimeHour() bool {
	if o != nil && !IsNil(o.StartingTimeHour) {
		return true
	}

	return false
}

// SetStartingTimeHour gets a reference to the given string and assigns it to the StartingTimeHour field.
func (o *MariadbBackupOption) SetStartingTimeHour(v string) {
	o.StartingTimeHour = &v
}

func (o MariadbBackupOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MariadbBackupOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveFrequencyMinute.IsSet() {
		toSerialize["archive_frequency_minute"] = o.ArchiveFrequencyMinute.Get()
	}
	if !IsNil(o.RetentionPeriodDay) {
		toSerialize["retention_period_day"] = o.RetentionPeriodDay
	}
	if !IsNil(o.StartingTimeHour) {
		toSerialize["starting_time_hour"] = o.StartingTimeHour
	}
	return toSerialize, nil
}

type NullableMariadbBackupOption struct {
	value *MariadbBackupOption
	isSet bool
}

func (v NullableMariadbBackupOption) Get() *MariadbBackupOption {
	return v.value
}

func (v *NullableMariadbBackupOption) Set(val *MariadbBackupOption) {
	v.value = val
	v.isSet = true
}

func (v NullableMariadbBackupOption) IsSet() bool {
	return v.isSet
}

func (v *NullableMariadbBackupOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMariadbBackupOption(val *MariadbBackupOption) *NullableMariadbBackupOption {
	return &NullableMariadbBackupOption{value: val, isSet: true}
}

func (v NullableMariadbBackupOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMariadbBackupOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


