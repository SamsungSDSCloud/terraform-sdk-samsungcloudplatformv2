/*
OSSCP Scp-dbaas Project

OSSCP Scp-dbaas Project

API version: 0.0.1.dev1795
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mariadb

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MinorPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinorPatchRequest{}

// MinorPatchRequest struct for MinorPatchRequest
type MinorPatchRequest struct {
	// backup_before_upgrade
	BackupBeforeUpgrade bool `json:"backup_before_upgrade"`
	// software_version
	SoftwareVersion string `json:"software_version"`
}

type _MinorPatchRequest MinorPatchRequest

// NewMinorPatchRequest instantiates a new MinorPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinorPatchRequest(backupBeforeUpgrade bool, softwareVersion string) *MinorPatchRequest {
	this := MinorPatchRequest{}
	this.BackupBeforeUpgrade = backupBeforeUpgrade
	this.SoftwareVersion = softwareVersion
	return &this
}

// NewMinorPatchRequestWithDefaults instantiates a new MinorPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinorPatchRequestWithDefaults() *MinorPatchRequest {
	this := MinorPatchRequest{}
	return &this
}

// GetBackupBeforeUpgrade returns the BackupBeforeUpgrade field value
func (o *MinorPatchRequest) GetBackupBeforeUpgrade() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BackupBeforeUpgrade
}

// GetBackupBeforeUpgradeOk returns a tuple with the BackupBeforeUpgrade field value
// and a boolean to check if the value has been set.
func (o *MinorPatchRequest) GetBackupBeforeUpgradeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupBeforeUpgrade, true
}

// SetBackupBeforeUpgrade sets field value
func (o *MinorPatchRequest) SetBackupBeforeUpgrade(v bool) {
	o.BackupBeforeUpgrade = v
}

// GetSoftwareVersion returns the SoftwareVersion field value
func (o *MinorPatchRequest) GetSoftwareVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value
// and a boolean to check if the value has been set.
func (o *MinorPatchRequest) GetSoftwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SoftwareVersion, true
}

// SetSoftwareVersion sets field value
func (o *MinorPatchRequest) SetSoftwareVersion(v string) {
	o.SoftwareVersion = v
}

func (o MinorPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinorPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backup_before_upgrade"] = o.BackupBeforeUpgrade
	toSerialize["software_version"] = o.SoftwareVersion
	return toSerialize, nil
}

func (o *MinorPatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backup_before_upgrade",
		"software_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMinorPatchRequest := _MinorPatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMinorPatchRequest)

	if err != nil {
		return err
	}

	*o = MinorPatchRequest(varMinorPatchRequest)

	return err
}

type NullableMinorPatchRequest struct {
	value *MinorPatchRequest
	isSet bool
}

func (v NullableMinorPatchRequest) Get() *MinorPatchRequest {
	return v.value
}

func (v *NullableMinorPatchRequest) Set(val *MinorPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMinorPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMinorPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinorPatchRequest(val *MinorPatchRequest) *NullableMinorPatchRequest {
	return &NullableMinorPatchRequest{value: val, isSet: true}
}

func (v NullableMinorPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinorPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


