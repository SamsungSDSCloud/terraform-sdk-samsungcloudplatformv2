/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the AttachmentListModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachmentListModel{}

// AttachmentListModel struct for AttachmentListModel
type AttachmentListModel struct {
	// Object id
	ObjectId *string `json:"object_id,omitempty"`
	// Object type
	ObjectType *BlockStorageAttachmentObjectType `json:"object_type,omitempty"`
}

// NewAttachmentListModel instantiates a new AttachmentListModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentListModel() *AttachmentListModel {
	this := AttachmentListModel{}
	return &this
}

// NewAttachmentListModelWithDefaults instantiates a new AttachmentListModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentListModelWithDefaults() *AttachmentListModel {
	this := AttachmentListModel{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *AttachmentListModel) GetObjectId() string {
	if o == nil || IsNil(o.ObjectId) {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentListModel) GetObjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *AttachmentListModel) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *AttachmentListModel) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *AttachmentListModel) GetObjectType() BlockStorageAttachmentObjectType {
	if o == nil || IsNil(o.ObjectType) {
		var ret BlockStorageAttachmentObjectType
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentListModel) GetObjectTypeOk() (*BlockStorageAttachmentObjectType, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *AttachmentListModel) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given BlockStorageAttachmentObjectType and assigns it to the ObjectType field.
func (o *AttachmentListModel) SetObjectType(v BlockStorageAttachmentObjectType) {
	o.ObjectType = &v
}

func (o AttachmentListModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachmentListModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectId) {
		toSerialize["object_id"] = o.ObjectId
	}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	return toSerialize, nil
}

type NullableAttachmentListModel struct {
	value *AttachmentListModel
	isSet bool
}

func (v NullableAttachmentListModel) Get() *AttachmentListModel {
	return v.value
}

func (v *NullableAttachmentListModel) Set(val *AttachmentListModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentListModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentListModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentListModel(val *AttachmentListModel) *NullableAttachmentListModel {
	return &NullableAttachmentListModel{value: val, isSet: true}
}

func (v NullableAttachmentListModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentListModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
