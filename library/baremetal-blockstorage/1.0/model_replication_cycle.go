/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// ReplicationCycle the model 'ReplicationCycle'
type ReplicationCycle string

// List of ReplicationCycle
const (
	REPLICATIONCYCLE__5_MIN  ReplicationCycle = "5MIN"
	REPLICATIONCYCLE_HOURLY  ReplicationCycle = "HOURLY"
	REPLICATIONCYCLE_DAILY   ReplicationCycle = "DAILY"
	REPLICATIONCYCLE_WEEKLY  ReplicationCycle = "WEEKLY"
	REPLICATIONCYCLE_MONTHLY ReplicationCycle = "MONTHLY"
)

// All allowed values of ReplicationCycle enum
var AllowedReplicationCycleEnumValues = []ReplicationCycle{
	"5MIN",
	"HOURLY",
	"DAILY",
	"WEEKLY",
	"MONTHLY",
}

func (v *ReplicationCycle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationCycle(value)
	for _, existing := range AllowedReplicationCycleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationCycle", value)
}

// NewReplicationCycleFromValue returns a pointer to a valid ReplicationCycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationCycleFromValue(v string) (*ReplicationCycle, error) {
	ev := ReplicationCycle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationCycle: valid values are %v", v, AllowedReplicationCycleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationCycle) IsValid() bool {
	for _, existing := range AllowedReplicationCycleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationCycle value
func (v ReplicationCycle) Ptr() *ReplicationCycle {
	return &v
}

type NullableReplicationCycle struct {
	value *ReplicationCycle
	isSet bool
}

func (v NullableReplicationCycle) Get() *ReplicationCycle {
	return v.value
}

func (v *NullableReplicationCycle) Set(val *ReplicationCycle) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationCycle(val *ReplicationCycle) *NullableReplicationCycle {
	return &NullableReplicationCycle{value: val, isSet: true}
}

func (v NullableReplicationCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
