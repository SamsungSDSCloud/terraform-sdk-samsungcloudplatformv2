/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// SnapshotFrequency the model 'SnapshotFrequency'
type SnapshotFrequency string

// List of SnapshotFrequency
const (
	SNAPSHOTFREQUENCY_DAILY  SnapshotFrequency = "DAILY"
	SNAPSHOTFREQUENCY_WEEKLY SnapshotFrequency = "WEEKLY"
	SNAPSHOTFREQUENCY_NONE   SnapshotFrequency = "NONE"
)

// All allowed values of SnapshotFrequency enum
var AllowedSnapshotFrequencyEnumValues = []SnapshotFrequency{
	"DAILY",
	"WEEKLY",
	"NONE",
}

func (v *SnapshotFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SnapshotFrequency(value)
	for _, existing := range AllowedSnapshotFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SnapshotFrequency", value)
}

// NewSnapshotFrequencyFromValue returns a pointer to a valid SnapshotFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSnapshotFrequencyFromValue(v string) (*SnapshotFrequency, error) {
	ev := SnapshotFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SnapshotFrequency: valid values are %v", v, AllowedSnapshotFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SnapshotFrequency) IsValid() bool {
	for _, existing := range AllowedSnapshotFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SnapshotFrequency value
func (v SnapshotFrequency) Ptr() *SnapshotFrequency {
	return &v
}

type NullableSnapshotFrequency struct {
	value *SnapshotFrequency
	isSet bool
}

func (v NullableSnapshotFrequency) Get() *SnapshotFrequency {
	return v.value
}

func (v *NullableSnapshotFrequency) Set(val *SnapshotFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotFrequency(val *SnapshotFrequency) *NullableSnapshotFrequency {
	return &NullableSnapshotFrequency{value: val, isSet: true}
}

func (v NullableSnapshotFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
