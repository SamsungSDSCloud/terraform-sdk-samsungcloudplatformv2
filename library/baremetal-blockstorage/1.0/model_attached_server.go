/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the AttachedServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachedServer{}

// AttachedServer struct for AttachedServer
type AttachedServer struct {
	// Server id
	Id *string `json:"id,omitempty"`
	// Image name
	ImageName *string `json:"image_name,omitempty"`
	// Server name
	Name *string `json:"name,omitempty"`
	// SRN
	Srn *string `json:"srn,omitempty"`
	// Server state
	State *string `json:"state,omitempty"`
	// Server type
	Type *BlockStorageAttachmentObjectType `json:"type,omitempty"`
}

// NewAttachedServer instantiates a new AttachedServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachedServer() *AttachedServer {
	this := AttachedServer{}
	return &this
}

// NewAttachedServerWithDefaults instantiates a new AttachedServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachedServerWithDefaults() *AttachedServer {
	this := AttachedServer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AttachedServer) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachedServer) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AttachedServer) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AttachedServer) SetId(v string) {
	o.Id = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *AttachedServer) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachedServer) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *AttachedServer) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *AttachedServer) SetImageName(v string) {
	o.ImageName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AttachedServer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachedServer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AttachedServer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AttachedServer) SetName(v string) {
	o.Name = &v
}

// GetSrn returns the Srn field value if set, zero value otherwise.
func (o *AttachedServer) GetSrn() string {
	if o == nil || IsNil(o.Srn) {
		var ret string
		return ret
	}
	return *o.Srn
}

// GetSrnOk returns a tuple with the Srn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachedServer) GetSrnOk() (*string, bool) {
	if o == nil || IsNil(o.Srn) {
		return nil, false
	}
	return o.Srn, true
}

// HasSrn returns a boolean if a field has been set.
func (o *AttachedServer) HasSrn() bool {
	if o != nil && !IsNil(o.Srn) {
		return true
	}

	return false
}

// SetSrn gets a reference to the given string and assigns it to the Srn field.
func (o *AttachedServer) SetSrn(v string) {
	o.Srn = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AttachedServer) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachedServer) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AttachedServer) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AttachedServer) SetState(v string) {
	o.State = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AttachedServer) GetType() BlockStorageAttachmentObjectType {
	if o == nil || IsNil(o.Type) {
		var ret BlockStorageAttachmentObjectType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachedServer) GetTypeOk() (*BlockStorageAttachmentObjectType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AttachedServer) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given BlockStorageAttachmentObjectType and assigns it to the Type field.
func (o *AttachedServer) SetType(v BlockStorageAttachmentObjectType) {
	o.Type = &v
}

func (o AttachedServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachedServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ImageName) {
		toSerialize["image_name"] = o.ImageName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Srn) {
		toSerialize["srn"] = o.Srn
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableAttachedServer struct {
	value *AttachedServer
	isSet bool
}

func (v NullableAttachedServer) Get() *AttachedServer {
	return v.value
}

func (v *NullableAttachedServer) Set(val *AttachedServer) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachedServer) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachedServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachedServer(val *AttachedServer) *NullableAttachedServer {
	return &NullableAttachedServer{value: val, isSet: true}
}

func (v NullableAttachedServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachedServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
