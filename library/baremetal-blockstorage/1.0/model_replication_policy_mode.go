/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// ReplicationPolicyMode the model 'ReplicationPolicyMode'
type ReplicationPolicyMode string

// List of ReplicationPolicyMode
const (
	REPLICATIONPOLICYMODE_RESYNC ReplicationPolicyMode = "RESYNC"
	REPLICATIONPOLICYMODE_BREAK  ReplicationPolicyMode = "BREAK"
)

// All allowed values of ReplicationPolicyMode enum
var AllowedReplicationPolicyModeEnumValues = []ReplicationPolicyMode{
	"RESYNC",
	"BREAK",
}

func (v *ReplicationPolicyMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplicationPolicyMode(value)
	for _, existing := range AllowedReplicationPolicyModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplicationPolicyMode", value)
}

// NewReplicationPolicyModeFromValue returns a pointer to a valid ReplicationPolicyMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplicationPolicyModeFromValue(v string) (*ReplicationPolicyMode, error) {
	ev := ReplicationPolicyMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplicationPolicyMode: valid values are %v", v, AllowedReplicationPolicyModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplicationPolicyMode) IsValid() bool {
	for _, existing := range AllowedReplicationPolicyModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplicationPolicyMode value
func (v ReplicationPolicyMode) Ptr() *ReplicationPolicyMode {
	return &v
}

type NullableReplicationPolicyMode struct {
	value *ReplicationPolicyMode
	isSet bool
}

func (v NullableReplicationPolicyMode) Get() *ReplicationPolicyMode {
	return v.value
}

func (v *NullableReplicationPolicyMode) Set(val *ReplicationPolicyMode) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationPolicyMode) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationPolicyMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationPolicyMode(val *ReplicationPolicyMode) *NullableReplicationPolicyMode {
	return &NullableReplicationPolicyMode{value: val, isSet: true}
}

func (v NullableReplicationPolicyMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationPolicyMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
