/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// VolumeGroupPurpose the model 'VolumeGroupPurpose'
type VolumeGroupPurpose string

// List of VolumeGroupPurpose
const (
	VOLUMEGROUPPURPOSE_ORG  VolumeGroupPurpose = "ORG"
	VOLUMEGROUPPURPOSE_REPL VolumeGroupPurpose = "REPL"
)

// All allowed values of VolumeGroupPurpose enum
var AllowedVolumeGroupPurposeEnumValues = []VolumeGroupPurpose{
	"ORG",
	"REPL",
}

func (v *VolumeGroupPurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeGroupPurpose(value)
	for _, existing := range AllowedVolumeGroupPurposeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeGroupPurpose", value)
}

// NewVolumeGroupPurposeFromValue returns a pointer to a valid VolumeGroupPurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeGroupPurposeFromValue(v string) (*VolumeGroupPurpose, error) {
	ev := VolumeGroupPurpose(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeGroupPurpose: valid values are %v", v, AllowedVolumeGroupPurposeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeGroupPurpose) IsValid() bool {
	for _, existing := range AllowedVolumeGroupPurposeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeGroupPurpose value
func (v VolumeGroupPurpose) Ptr() *VolumeGroupPurpose {
	return &v
}

type NullableVolumeGroupPurpose struct {
	value *VolumeGroupPurpose
	isSet bool
}

func (v NullableVolumeGroupPurpose) Get() *VolumeGroupPurpose {
	return v.value
}

func (v *NullableVolumeGroupPurpose) Set(val *VolumeGroupPurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeGroupPurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeGroupPurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeGroupPurpose(val *VolumeGroupPurpose) *NullableVolumeGroupPurpose {
	return &NullableVolumeGroupPurpose{value: val, isSet: true}
}

func (v NullableVolumeGroupPurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeGroupPurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
