/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService BaremetalBlockstorageV1VolumeSnapshotV1APIsAPI service
type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService service

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId   string
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRequest) Execute() (*VolumeSnapshotResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeSnapshotExecute(r)
}

/*
CreateVolumeSnapshot Create Volume Snapshot

Create Volume snapshot.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) CreateVolumeSnapshot(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) CreateVolumeSnapshotExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRequest) (*VolumeSnapshotResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshots"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest struct {
	ctx                       context.Context
	ApiService                *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId                  string
	volumeSnapshotRateRequest *VolumeSnapshotRateRequest
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest) VolumeSnapshotRateRequest(volumeSnapshotRateRequest VolumeSnapshotRateRequest) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest {
	r.volumeSnapshotRateRequest = &volumeSnapshotRateRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest) Execute() (*VolumeSnapshotRateResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeSnapshotRateExecute(r)
}

/*
CreateVolumeSnapshotRate Create Volume Snapshot Rate

Create Volume snapshot rate.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) CreateVolumeSnapshotRate(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotRateResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) CreateVolumeSnapshotRateExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotRateRequest) (*VolumeSnapshotRateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotRateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshot-rates"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeSnapshotRateRequest == nil {
		return localVarReturnValue, nil, reportError("volumeSnapshotRateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeSnapshotRateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest struct {
	ctx                           context.Context
	ApiService                    *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId                      string
	volumeSnapshotScheduleRequest *VolumeSnapshotScheduleRequest
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest) VolumeSnapshotScheduleRequest(volumeSnapshotScheduleRequest VolumeSnapshotScheduleRequest) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest {
	r.volumeSnapshotScheduleRequest = &volumeSnapshotScheduleRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest) Execute() (*VolumeSnapshotScheduleResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeSnapshotScheduleExecute(r)
}

/*
CreateVolumeSnapshotSchedule Create Volume Snapshot Schedule

Create Volume snapshot schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) CreateVolumeSnapshotSchedule(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotScheduleResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) CreateVolumeSnapshotScheduleExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPICreateVolumeSnapshotScheduleRequest) (*VolumeSnapshotScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotScheduleResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshot-schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeSnapshotScheduleRequest == nil {
		return localVarReturnValue, nil, reportError("volumeSnapshotScheduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeSnapshotScheduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId   string
	snapshotId string
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRequest) Execute() (*VolumeSnapshotDeleteResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeSnapshotExecute(r)
}

/*
DeleteVolumeSnapshot Delete Volume Snapshot

Delete Volume snapshot.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@param snapshotId Snapshot id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) DeleteVolumeSnapshot(ctx context.Context, volumeId string, snapshotId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
		snapshotId: snapshotId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotDeleteResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) DeleteVolumeSnapshotExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRequest) (*VolumeSnapshotDeleteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotDeleteResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshots/{snapshot_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"snapshot_id"+"}", url.PathEscape(parameterValueToString(r.snapshotId, "snapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRateRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId   string
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRateRequest) Execute() (*VolumeSnapshotRateResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeSnapshotRateExecute(r)
}

/*
DeleteVolumeSnapshotRate Delete Volume Snapshot Rate

Delete Volume snapshot rate.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRateRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) DeleteVolumeSnapshotRate(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRateRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRateRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotRateResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) DeleteVolumeSnapshotRateExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotRateRequest) (*VolumeSnapshotRateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotRateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshot-rates"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotScheduleRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId   string
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotScheduleRequest) Execute() (*VolumeSnapshotScheduleResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeSnapshotScheduleExecute(r)
}

/*
DeleteVolumeSnapshotSchedule Delete Volume Snapshot Schedule

Delete Volume snapshot schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotScheduleRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) DeleteVolumeSnapshotSchedule(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotScheduleRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotScheduleRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotScheduleResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) DeleteVolumeSnapshotScheduleExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIDeleteVolumeSnapshotScheduleRequest) (*VolumeSnapshotScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotScheduleResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshot-schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIListVolumeSnapshotsRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId   string
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIListVolumeSnapshotsRequest) Execute() (*VolumeSnapshotListResponse, *http.Response, error) {
	return r.ApiService.ListVolumeSnapshotsExecute(r)
}

/*
ListVolumeSnapshots List Volume Snapshots

Get a list of Volume snapshots.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIListVolumeSnapshotsRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) ListVolumeSnapshots(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIListVolumeSnapshotsRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIListVolumeSnapshotsRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotListResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) ListVolumeSnapshotsExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIListVolumeSnapshotsRequest) (*VolumeSnapshotListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshots"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIRestoreVolumeSnapshotRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId   string
	snapshotId string
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIRestoreVolumeSnapshotRequest) Execute() (*VolumeSnapshotRestoreResponse, *http.Response, error) {
	return r.ApiService.RestoreVolumeSnapshotExecute(r)
}

/*
RestoreVolumeSnapshot Restore Volume Snapshot

Restore Volume from snapshot.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@param snapshotId Snapshot id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIRestoreVolumeSnapshotRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) RestoreVolumeSnapshot(ctx context.Context, volumeId string, snapshotId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIRestoreVolumeSnapshotRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIRestoreVolumeSnapshotRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
		snapshotId: snapshotId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotRestoreResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) RestoreVolumeSnapshotExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIRestoreVolumeSnapshotRequest) (*VolumeSnapshotRestoreResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotRestoreResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshots/{snapshot_id}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"snapshot_id"+"}", url.PathEscape(parameterValueToString(r.snapshotId, "snapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest struct {
	ctx                       context.Context
	ApiService                *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId                  string
	volumeSnapshotRateRequest *VolumeSnapshotRateRequest
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest) VolumeSnapshotRateRequest(volumeSnapshotRateRequest VolumeSnapshotRateRequest) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest {
	r.volumeSnapshotRateRequest = &volumeSnapshotRateRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest) Execute() (*VolumeSnapshotRateResponse, *http.Response, error) {
	return r.ApiService.SetVolumeSnapshotRateExecute(r)
}

/*
SetVolumeSnapshotRate Set Volume Snapshot Rate

Set Volume snapshot rate.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) SetVolumeSnapshotRate(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotRateResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) SetVolumeSnapshotRateExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotRateRequest) (*VolumeSnapshotRateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotRateResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshot-rates"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeSnapshotRateRequest == nil {
		return localVarReturnValue, nil, reportError("volumeSnapshotRateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeSnapshotRateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest struct {
	ctx                           context.Context
	ApiService                    *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService
	volumeId                      string
	volumeSnapshotScheduleRequest *VolumeSnapshotScheduleRequest
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest) VolumeSnapshotScheduleRequest(volumeSnapshotScheduleRequest VolumeSnapshotScheduleRequest) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest {
	r.volumeSnapshotScheduleRequest = &volumeSnapshotScheduleRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest) Execute() (*VolumeSnapshotScheduleResponse, *http.Response, error) {
	return r.ApiService.SetVolumeSnapshotScheduleExecute(r)
}

/*
SetVolumeSnapshotSchedule Set Volume Snapshot Schedule

Set Volume snapshot schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest
*/
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) SetVolumeSnapshotSchedule(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest {
	return BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeSnapshotScheduleResponse
func (a *BaremetalBlockstorageV1VolumeSnapshotV1APIsAPIService) SetVolumeSnapshotScheduleExecute(r BaremetalBlockstorageV1VolumeSnapshotV1APIsAPISetVolumeSnapshotScheduleRequest) (*VolumeSnapshotScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeSnapshotScheduleResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/snapshot-schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeSnapshotScheduleRequest == nil {
		return localVarReturnValue, nil, reportError("volumeSnapshotScheduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeSnapshotScheduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
