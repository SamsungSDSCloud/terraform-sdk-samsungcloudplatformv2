/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the ExternalError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalError{}

// ExternalError struct for ExternalError
type ExternalError struct {
	// Code
	Code *string `json:"code,omitempty"`
	// Server type
	ObjectType *BlockStorageAttachmentObjectType `json:"object_type,omitempty"`
	// Status
	Status *int32 `json:"status,omitempty"`
}

// NewExternalError instantiates a new ExternalError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalError() *ExternalError {
	this := ExternalError{}
	return &this
}

// NewExternalErrorWithDefaults instantiates a new ExternalError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalErrorWithDefaults() *ExternalError {
	this := ExternalError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ExternalError) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ExternalError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ExternalError) SetCode(v string) {
	o.Code = &v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ExternalError) GetObjectType() BlockStorageAttachmentObjectType {
	if o == nil || IsNil(o.ObjectType) {
		var ret BlockStorageAttachmentObjectType
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalError) GetObjectTypeOk() (*BlockStorageAttachmentObjectType, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ExternalError) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given BlockStorageAttachmentObjectType and assigns it to the ObjectType field.
func (o *ExternalError) SetObjectType(v BlockStorageAttachmentObjectType) {
	o.ObjectType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExternalError) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalError) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExternalError) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *ExternalError) SetStatus(v int32) {
	o.Status = &v
}

func (o ExternalError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableExternalError struct {
	value *ExternalError
	isSet bool
}

func (v NullableExternalError) Get() *ExternalError {
	return v.value
}

func (v *NullableExternalError) Set(val *ExternalError) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalError) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalError(val *ExternalError) *NullableExternalError {
	return &NullableExternalError{value: val, isSet: true}
}

func (v NullableExternalError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
