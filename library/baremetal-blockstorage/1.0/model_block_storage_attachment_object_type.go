/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// BlockStorageAttachmentObjectType the model 'BlockStorageAttachmentObjectType'
type BlockStorageAttachmentObjectType string

// List of BlockStorageAttachmentObjectType
const (
	BLOCKSTORAGEATTACHMENTOBJECTTYPE_BM   BlockStorageAttachmentObjectType = "BM"
	BLOCKSTORAGEATTACHMENTOBJECTTYPE_MNGC BlockStorageAttachmentObjectType = "MNGC"
)

// All allowed values of BlockStorageAttachmentObjectType enum
var AllowedBlockStorageAttachmentObjectTypeEnumValues = []BlockStorageAttachmentObjectType{
	"BM",
	"MNGC",
}

func (v *BlockStorageAttachmentObjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockStorageAttachmentObjectType(value)
	for _, existing := range AllowedBlockStorageAttachmentObjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockStorageAttachmentObjectType", value)
}

// NewBlockStorageAttachmentObjectTypeFromValue returns a pointer to a valid BlockStorageAttachmentObjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockStorageAttachmentObjectTypeFromValue(v string) (*BlockStorageAttachmentObjectType, error) {
	ev := BlockStorageAttachmentObjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockStorageAttachmentObjectType: valid values are %v", v, AllowedBlockStorageAttachmentObjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockStorageAttachmentObjectType) IsValid() bool {
	for _, existing := range AllowedBlockStorageAttachmentObjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BlockStorageAttachmentObjectType value
func (v BlockStorageAttachmentObjectType) Ptr() *BlockStorageAttachmentObjectType {
	return &v
}

type NullableBlockStorageAttachmentObjectType struct {
	value *BlockStorageAttachmentObjectType
	isSet bool
}

func (v NullableBlockStorageAttachmentObjectType) Get() *BlockStorageAttachmentObjectType {
	return v.value
}

func (v *NullableBlockStorageAttachmentObjectType) Set(val *BlockStorageAttachmentObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStorageAttachmentObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStorageAttachmentObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStorageAttachmentObjectType(val *BlockStorageAttachmentObjectType) *NullableBlockStorageAttachmentObjectType {
	return &NullableBlockStorageAttachmentObjectType{value: val, isSet: true}
}

func (v NullableBlockStorageAttachmentObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStorageAttachmentObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
