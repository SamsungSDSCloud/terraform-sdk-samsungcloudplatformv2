/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the RelationVolumeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationVolumeModel{}

// RelationVolumeModel struct for RelationVolumeModel
type RelationVolumeModel struct {
	// Auth
	Auth *VolumePermission `json:"auth,omitempty"`
	// Id
	Id *string `json:"id,omitempty"`
	// Volume name
	Name *string `json:"name,omitempty"`
	// Volume purpose
	Purpose *BlockStoragePurpose `json:"purpose,omitempty"`
	// Region
	Region *string `json:"region,omitempty"`
}

// NewRelationVolumeModel instantiates a new RelationVolumeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationVolumeModel() *RelationVolumeModel {
	this := RelationVolumeModel{}
	return &this
}

// NewRelationVolumeModelWithDefaults instantiates a new RelationVolumeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationVolumeModelWithDefaults() *RelationVolumeModel {
	this := RelationVolumeModel{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *RelationVolumeModel) GetAuth() VolumePermission {
	if o == nil || IsNil(o.Auth) {
		var ret VolumePermission
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeModel) GetAuthOk() (*VolumePermission, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *RelationVolumeModel) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given VolumePermission and assigns it to the Auth field.
func (o *RelationVolumeModel) SetAuth(v VolumePermission) {
	o.Auth = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RelationVolumeModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RelationVolumeModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RelationVolumeModel) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RelationVolumeModel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeModel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RelationVolumeModel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RelationVolumeModel) SetName(v string) {
	o.Name = &v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *RelationVolumeModel) GetPurpose() BlockStoragePurpose {
	if o == nil || IsNil(o.Purpose) {
		var ret BlockStoragePurpose
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeModel) GetPurposeOk() (*BlockStoragePurpose, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *RelationVolumeModel) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given BlockStoragePurpose and assigns it to the Purpose field.
func (o *RelationVolumeModel) SetPurpose(v BlockStoragePurpose) {
	o.Purpose = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *RelationVolumeModel) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeModel) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *RelationVolumeModel) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *RelationVolumeModel) SetRegion(v string) {
	o.Region = &v
}

func (o RelationVolumeModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationVolumeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableRelationVolumeModel struct {
	value *RelationVolumeModel
	isSet bool
}

func (v NullableRelationVolumeModel) Get() *RelationVolumeModel {
	return v.value
}

func (v *NullableRelationVolumeModel) Set(val *RelationVolumeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationVolumeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationVolumeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationVolumeModel(val *RelationVolumeModel) *NullableRelationVolumeModel {
	return &NullableRelationVolumeModel{value: val, isSet: true}
}

func (v NullableRelationVolumeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationVolumeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
