/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPI service
type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService service

type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService
	volumeGroupId string
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotRequest) Execute() (*VolumeGroupSnapshotResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeGroupSnapshotExecute(r)
}

/*
CreateVolumeGroupSnapshot Create Volume Group Snapshot

Create Volume Group Snapshot

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) CreateVolumeGroupSnapshot(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotRequest {
	return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupSnapshotResponse
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) CreateVolumeGroupSnapshotExecute(r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotRequest) (*VolumeGroupSnapshotResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupSnapshotResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/snapshots"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest struct {
	ctx                                context.Context
	ApiService                         *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService
	volumeGroupId                      string
	volumeGroupSnapshotScheduleRequest *VolumeGroupSnapshotScheduleRequest
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest) VolumeGroupSnapshotScheduleRequest(volumeGroupSnapshotScheduleRequest VolumeGroupSnapshotScheduleRequest) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest {
	r.volumeGroupSnapshotScheduleRequest = &volumeGroupSnapshotScheduleRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest) Execute() (*VolumeGroupSnapshotScheduleResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeGroupSnapshotScheduleExecute(r)
}

/*
CreateVolumeGroupSnapshotSchedule Create Volume Group Snapshot Schedule

Create Volume Group Snapshot Schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) CreateVolumeGroupSnapshotSchedule(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest {
	return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupSnapshotScheduleResponse
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) CreateVolumeGroupSnapshotScheduleExecute(r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPICreateVolumeGroupSnapshotScheduleRequest) (*VolumeGroupSnapshotScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupSnapshotScheduleResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/snapshot-schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupSnapshotScheduleRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupSnapshotScheduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupSnapshotScheduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService
	volumeGroupId string
	snapshotId    string
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotRequest) Execute() (*VolumeGroupSnapshotDeleteResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeGroupSnapshotExecute(r)
}

/*
DeleteVolumeGroupSnapshot Delete Volume Group Snapshot

Delete Volume Group snapshot.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@param snapshotId Snapshot id
	@return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) DeleteVolumeGroupSnapshot(ctx context.Context, volumeGroupId string, snapshotId string) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotRequest {
	return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
		snapshotId:    snapshotId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupSnapshotDeleteResponse
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) DeleteVolumeGroupSnapshotExecute(r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotRequest) (*VolumeGroupSnapshotDeleteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupSnapshotDeleteResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/snapshots/{snapshot_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"snapshot_id"+"}", url.PathEscape(parameterValueToString(r.snapshotId, "snapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotScheduleRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService
	volumeGroupId string
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotScheduleRequest) Execute() (*VolumeGroupSnapshotScheduleResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeGroupSnapshotScheduleExecute(r)
}

/*
DeleteVolumeGroupSnapshotSchedule Delete Volume Group Snapshot Schedule

Delete Volume Group Snapshot Schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotScheduleRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) DeleteVolumeGroupSnapshotSchedule(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotScheduleRequest {
	return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotScheduleRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupSnapshotScheduleResponse
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) DeleteVolumeGroupSnapshotScheduleExecute(r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIDeleteVolumeGroupSnapshotScheduleRequest) (*VolumeGroupSnapshotScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupSnapshotScheduleResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/snapshot-schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIListVolumeGroupSnapshotsRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService
	volumeGroupId string
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIListVolumeGroupSnapshotsRequest) Execute() (*VolumeGroupSnapshotListResponse, *http.Response, error) {
	return r.ApiService.ListVolumeGroupSnapshotsExecute(r)
}

/*
ListVolumeGroupSnapshots List Volume Group Snapshots

Get a list of Volume Group snapshots.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIListVolumeGroupSnapshotsRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) ListVolumeGroupSnapshots(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIListVolumeGroupSnapshotsRequest {
	return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIListVolumeGroupSnapshotsRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupSnapshotListResponse
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) ListVolumeGroupSnapshotsExecute(r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIListVolumeGroupSnapshotsRequest) (*VolumeGroupSnapshotListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupSnapshotListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/snapshots"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIRestoreVolumeGroupSnapshotRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService
	volumeGroupId string
	snapshotId    string
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIRestoreVolumeGroupSnapshotRequest) Execute() (*VolumeGroupSnapshotRestoreResponse, *http.Response, error) {
	return r.ApiService.RestoreVolumeGroupSnapshotExecute(r)
}

/*
RestoreVolumeGroupSnapshot Restore Volume Group Snapshot

Restore Volume Group snapshot.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@param snapshotId Snapshot id
	@return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIRestoreVolumeGroupSnapshotRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) RestoreVolumeGroupSnapshot(ctx context.Context, volumeGroupId string, snapshotId string) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIRestoreVolumeGroupSnapshotRequest {
	return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIRestoreVolumeGroupSnapshotRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
		snapshotId:    snapshotId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupSnapshotRestoreResponse
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) RestoreVolumeGroupSnapshotExecute(r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIRestoreVolumeGroupSnapshotRequest) (*VolumeGroupSnapshotRestoreResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupSnapshotRestoreResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/snapshots/{snapshot_id}/restore"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"snapshot_id"+"}", url.PathEscape(parameterValueToString(r.snapshotId, "snapshotId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest struct {
	ctx                                context.Context
	ApiService                         *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService
	volumeGroupId                      string
	volumeGroupSnapshotScheduleRequest *VolumeGroupSnapshotScheduleRequest
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest) VolumeGroupSnapshotScheduleRequest(volumeGroupSnapshotScheduleRequest VolumeGroupSnapshotScheduleRequest) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest {
	r.volumeGroupSnapshotScheduleRequest = &volumeGroupSnapshotScheduleRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest) Execute() (*VolumeGroupSnapshotScheduleResponse, *http.Response, error) {
	return r.ApiService.SetVolumeGroupSnapshotScheduleExecute(r)
}

/*
SetVolumeGroupSnapshotSchedule Set Volume Group Snapshot Schedule

Set Volume Group Snapshot Schedule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) SetVolumeGroupSnapshotSchedule(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest {
	return BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupSnapshotScheduleResponse
func (a *BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPIService) SetVolumeGroupSnapshotScheduleExecute(r BaremetalBlockstorageV1VolumeGroupSnapshotV1APISAPISetVolumeGroupSnapshotScheduleRequest) (*VolumeGroupSnapshotScheduleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupSnapshotScheduleResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/snapshot-schedules"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupSnapshotScheduleRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupSnapshotScheduleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupSnapshotScheduleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
