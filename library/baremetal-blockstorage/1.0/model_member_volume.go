/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the MemberVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberVolume{}

// MemberVolume struct for MemberVolume
type MemberVolume struct {
	// disk_type
	DiskType *DiskType `json:"disk_type,omitempty"`
	// volume id
	Id *string `json:"id,omitempty"`
	// volume name
	Name *string `json:"name,omitempty"`
	// volume purpose
	Purpose *BlockStoragePurpose `json:"purpose,omitempty"`
	// size_gb
	SizeGb *int32 `json:"size_gb,omitempty"`
	// so volume id
	SoVolumeId *string `json:"so_volume_id,omitempty"`
	// so volume name
	SoVolumeName *string `json:"so_volume_name,omitempty"`
}

// NewMemberVolume instantiates a new MemberVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberVolume() *MemberVolume {
	this := MemberVolume{}
	return &this
}

// NewMemberVolumeWithDefaults instantiates a new MemberVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberVolumeWithDefaults() *MemberVolume {
	this := MemberVolume{}
	return &this
}

// GetDiskType returns the DiskType field value if set, zero value otherwise.
func (o *MemberVolume) GetDiskType() DiskType {
	if o == nil || IsNil(o.DiskType) {
		var ret DiskType
		return ret
	}
	return *o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVolume) GetDiskTypeOk() (*DiskType, bool) {
	if o == nil || IsNil(o.DiskType) {
		return nil, false
	}
	return o.DiskType, true
}

// HasDiskType returns a boolean if a field has been set.
func (o *MemberVolume) HasDiskType() bool {
	if o != nil && !IsNil(o.DiskType) {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given DiskType and assigns it to the DiskType field.
func (o *MemberVolume) SetDiskType(v DiskType) {
	o.DiskType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberVolume) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVolume) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberVolume) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MemberVolume) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MemberVolume) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVolume) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MemberVolume) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MemberVolume) SetName(v string) {
	o.Name = &v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *MemberVolume) GetPurpose() BlockStoragePurpose {
	if o == nil || IsNil(o.Purpose) {
		var ret BlockStoragePurpose
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVolume) GetPurposeOk() (*BlockStoragePurpose, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *MemberVolume) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given BlockStoragePurpose and assigns it to the Purpose field.
func (o *MemberVolume) SetPurpose(v BlockStoragePurpose) {
	o.Purpose = &v
}

// GetSizeGb returns the SizeGb field value if set, zero value otherwise.
func (o *MemberVolume) GetSizeGb() int32 {
	if o == nil || IsNil(o.SizeGb) {
		var ret int32
		return ret
	}
	return *o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVolume) GetSizeGbOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeGb) {
		return nil, false
	}
	return o.SizeGb, true
}

// HasSizeGb returns a boolean if a field has been set.
func (o *MemberVolume) HasSizeGb() bool {
	if o != nil && !IsNil(o.SizeGb) {
		return true
	}

	return false
}

// SetSizeGb gets a reference to the given int32 and assigns it to the SizeGb field.
func (o *MemberVolume) SetSizeGb(v int32) {
	o.SizeGb = &v
}

// GetSoVolumeId returns the SoVolumeId field value if set, zero value otherwise.
func (o *MemberVolume) GetSoVolumeId() string {
	if o == nil || IsNil(o.SoVolumeId) {
		var ret string
		return ret
	}
	return *o.SoVolumeId
}

// GetSoVolumeIdOk returns a tuple with the SoVolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVolume) GetSoVolumeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SoVolumeId) {
		return nil, false
	}
	return o.SoVolumeId, true
}

// HasSoVolumeId returns a boolean if a field has been set.
func (o *MemberVolume) HasSoVolumeId() bool {
	if o != nil && !IsNil(o.SoVolumeId) {
		return true
	}

	return false
}

// SetSoVolumeId gets a reference to the given string and assigns it to the SoVolumeId field.
func (o *MemberVolume) SetSoVolumeId(v string) {
	o.SoVolumeId = &v
}

// GetSoVolumeName returns the SoVolumeName field value if set, zero value otherwise.
func (o *MemberVolume) GetSoVolumeName() string {
	if o == nil || IsNil(o.SoVolumeName) {
		var ret string
		return ret
	}
	return *o.SoVolumeName
}

// GetSoVolumeNameOk returns a tuple with the SoVolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberVolume) GetSoVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.SoVolumeName) {
		return nil, false
	}
	return o.SoVolumeName, true
}

// HasSoVolumeName returns a boolean if a field has been set.
func (o *MemberVolume) HasSoVolumeName() bool {
	if o != nil && !IsNil(o.SoVolumeName) {
		return true
	}

	return false
}

// SetSoVolumeName gets a reference to the given string and assigns it to the SoVolumeName field.
func (o *MemberVolume) SetSoVolumeName(v string) {
	o.SoVolumeName = &v
}

func (o MemberVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiskType) {
		toSerialize["disk_type"] = o.DiskType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.SizeGb) {
		toSerialize["size_gb"] = o.SizeGb
	}
	if !IsNil(o.SoVolumeId) {
		toSerialize["so_volume_id"] = o.SoVolumeId
	}
	if !IsNil(o.SoVolumeName) {
		toSerialize["so_volume_name"] = o.SoVolumeName
	}
	return toSerialize, nil
}

type NullableMemberVolume struct {
	value *MemberVolume
	isSet bool
}

func (v NullableMemberVolume) Get() *MemberVolume {
	return v.value
}

func (v *NullableMemberVolume) Set(val *MemberVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberVolume(val *MemberVolume) *NullableMemberVolume {
	return &NullableMemberVolume{value: val, isSet: true}
}

func (v NullableMemberVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
