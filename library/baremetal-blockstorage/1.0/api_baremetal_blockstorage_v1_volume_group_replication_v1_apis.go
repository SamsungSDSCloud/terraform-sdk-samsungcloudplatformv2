/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPI service
type BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService service

type BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest struct {
	ctx                                 context.Context
	ApiService                          *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService
	volumeGroupId                       string
	volumeGroupReplicationCreateRequest *VolumeGroupReplicationCreateRequest
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest) VolumeGroupReplicationCreateRequest(volumeGroupReplicationCreateRequest VolumeGroupReplicationCreateRequest) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest {
	r.volumeGroupReplicationCreateRequest = &volumeGroupReplicationCreateRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeGroupReplicationExecute(r)
}

/*
CreateVolumeGroupReplication Create Volume Group Replication

Create Volume Group Replication.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) CreateVolumeGroupReplication(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest {
	return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) CreateVolumeGroupReplicationExecute(r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPICreateVolumeGroupReplicationRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/replications"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupReplicationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupReplicationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupReplicationCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIDeleteVolumeGroupReplicationRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService
	volumeGroupId string
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIDeleteVolumeGroupReplicationRequest) Execute() (*VolumeGroupReplicationDeleteResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeGroupReplicationExecute(r)
}

/*
DeleteVolumeGroupReplication Delete Volume Group Replication

Delete Volume Group Replication.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIDeleteVolumeGroupReplicationRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) DeleteVolumeGroupReplication(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIDeleteVolumeGroupReplicationRequest {
	return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIDeleteVolumeGroupReplicationRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupReplicationDeleteResponse
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) DeleteVolumeGroupReplicationExecute(r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIDeleteVolumeGroupReplicationRequest) (*VolumeGroupReplicationDeleteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupReplicationDeleteResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/replications"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest struct {
	ctx                                      context.Context
	ApiService                               *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService
	volumeGroupId                            string
	volumeGroupReplicationUpdateCycleRequest *VolumeGroupReplicationUpdateCycleRequest
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest) VolumeGroupReplicationUpdateCycleRequest(volumeGroupReplicationUpdateCycleRequest VolumeGroupReplicationUpdateCycleRequest) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest {
	r.volumeGroupReplicationUpdateCycleRequest = &volumeGroupReplicationUpdateCycleRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest) Execute() (*VolumeGroupReplicationUpdateCycleResponse, *http.Response, error) {
	return r.ApiService.SetVolumeGroupReplicationCycleExecute(r)
}

/*
SetVolumeGroupReplicationCycle Set Volume Group Replication Cycle

Set Volume Group Replication Cycle.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) SetVolumeGroupReplicationCycle(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest {
	return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupReplicationUpdateCycleResponse
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) SetVolumeGroupReplicationCycleExecute(r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationCycleRequest) (*VolumeGroupReplicationUpdateCycleResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupReplicationUpdateCycleResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/replications/cycle"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupReplicationUpdateCycleRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupReplicationUpdateCycleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupReplicationUpdateCycleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest struct {
	ctx                                       context.Context
	ApiService                                *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService
	volumeGroupId                             string
	volumeGroupReplicationUpdatePolicyRequest *VolumeGroupReplicationUpdatePolicyRequest
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest) VolumeGroupReplicationUpdatePolicyRequest(volumeGroupReplicationUpdatePolicyRequest VolumeGroupReplicationUpdatePolicyRequest) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest {
	r.volumeGroupReplicationUpdatePolicyRequest = &volumeGroupReplicationUpdatePolicyRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest) Execute() (*VolumeGroupReplicationUpdatePolicyResponse, *http.Response, error) {
	return r.ApiService.SetVolumeGroupReplicationPolicyExecute(r)
}

/*
SetVolumeGroupReplicationPolicy Set Volume Group Replication Policy

Set Volume Group Replication Policy.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) SetVolumeGroupReplicationPolicy(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest {
	return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupReplicationUpdatePolicyResponse
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) SetVolumeGroupReplicationPolicyExecute(r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPISetVolumeGroupReplicationPolicyRequest) (*VolumeGroupReplicationUpdatePolicyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupReplicationUpdatePolicyResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/replications/policy"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupReplicationUpdatePolicyRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupReplicationUpdatePolicyRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupReplicationUpdatePolicyRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIShowVolumeGroupReplicationRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService
	volumeGroupId string
}

func (r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIShowVolumeGroupReplicationRequest) Execute() (*VolumeGroupReplicationSyncTabResponse, *http.Response, error) {
	return r.ApiService.ShowVolumeGroupReplicationExecute(r)
}

/*
ShowVolumeGroupReplication Show Volume Group Replication

Show Volume Group Replication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIShowVolumeGroupReplicationRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) ShowVolumeGroupReplication(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIShowVolumeGroupReplicationRequest {
	return BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIShowVolumeGroupReplicationRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupReplicationSyncTabResponse
func (a *BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIService) ShowVolumeGroupReplicationExecute(r BaremetalBlockstorageV1VolumeGroupReplicationV1APIsAPIShowVolumeGroupReplicationRequest) (*VolumeGroupReplicationSyncTabResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupReplicationSyncTabResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/replications"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
