/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BaremetalBlockstorageV1VolumeV1APIsAPIService BaremetalBlockstorageV1VolumeV1APIsAPI service
type BaremetalBlockstorageV1VolumeV1APIsAPIService service

type BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest struct {
	ctx                 context.Context
	ApiService          *BaremetalBlockstorageV1VolumeV1APIsAPIService
	volumeCreateRequest *VolumeCreateRequest
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest) VolumeCreateRequest(volumeCreateRequest VolumeCreateRequest) BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest {
	r.volumeCreateRequest = &volumeCreateRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeExecute(r)
}

/*
CreateVolume Create Volume

Create Volume.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest
*/
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) CreateVolume(ctx context.Context) BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest {
	return BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) CreateVolumeExecute(r BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeCreateRequest == nil {
		return localVarReturnValue, nil, reportError("volumeCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeCreateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest struct {
	ctx                     context.Context
	ApiService              *BaremetalBlockstorageV1VolumeV1APIsAPIService
	volumeId                string
	volumeAttachmentRequest *VolumeAttachmentRequest
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest) VolumeAttachmentRequest(volumeAttachmentRequest VolumeAttachmentRequest) BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest {
	r.volumeAttachmentRequest = &volumeAttachmentRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest) Execute() (*VolumeResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeAttachmentsExecute(r)
}

/*
CreateVolumeAttachments Attach Volume

Attach Volume to servers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest
*/
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) CreateVolumeAttachments(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest {
	return BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeResponse
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) CreateVolumeAttachmentsExecute(r BaremetalBlockstorageV1VolumeV1APIsAPICreateVolumeAttachmentsRequest) (*VolumeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeAttachmentRequest == nil {
		return localVarReturnValue, nil, reportError("volumeAttachmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeAttachmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeV1APIsAPIService
	volumeId   string
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeExecute(r)
}

/*
DeleteVolume Delete Volume

Delete Volume.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeRequest
*/
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) DeleteVolume(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeRequest {
	return BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) DeleteVolumeExecute(r BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest struct {
	ctx                 context.Context
	ApiService          *BaremetalBlockstorageV1VolumeV1APIsAPIService
	volumeId            string
	volumeDetachRequest *VolumeDetachRequest
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest) VolumeDetachRequest(volumeDetachRequest VolumeDetachRequest) BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest {
	r.volumeDetachRequest = &volumeDetachRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest) Execute() (*VolumeResponse, *http.Response, error) {
	return r.ApiService.DeleteVolumeAttachmentsExecute(r)
}

/*
DeleteVolumeAttachments Detach Volume

Detach Volume from servers.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest
*/
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) DeleteVolumeAttachments(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest {
	return BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeResponse
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) DeleteVolumeAttachmentsExecute(r BaremetalBlockstorageV1VolumeV1APIsAPIDeleteVolumeAttachmentsRequest) (*VolumeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeDetachRequest == nil {
		return localVarReturnValue, nil, reportError("volumeDetachRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeDetachRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeV1APIsAPIService
	limit      *int32
	offset     *int32
	sort       *string
	name       *string
	objectName *string
}

// Number to be displayed on the page
func (r BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest) Limit(limit int32) BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest {
	r.limit = &limit
	return r
}

// Offset
func (r BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest) Offset(offset int32) BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest {
	r.offset = &offset
	return r
}

// Sort
func (r BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest) Sort(sort string) BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest {
	r.sort = &sort
	return r
}

// Volume name
func (r BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest) Name(name string) BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest {
	r.name = &name
	return r
}

// Attached server name
func (r BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest) ObjectName(objectName string) BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest {
	r.objectName = &objectName
	return r
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest) Execute() (*VolumeListResponse, *http.Response, error) {
	return r.ApiService.ListVolumesExecute(r)
}

/*
ListVolumes List Volumes

Get a list of Volumes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest
*/
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) ListVolumes(ctx context.Context) BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest {
	return BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VolumeListResponse
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) ListVolumesExecute(r BaremetalBlockstorageV1VolumeV1APIsAPIListVolumesRequest) (*VolumeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.objectName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "object_name", r.objectName, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeV1APIsAPIShowVolumeRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeV1APIsAPIService
	volumeId   string
}

func (r BaremetalBlockstorageV1VolumeV1APIsAPIShowVolumeRequest) Execute() (*VolumeResponse, *http.Response, error) {
	return r.ApiService.ShowVolumeExecute(r)
}

/*
ShowVolume Show Volume

Show Volume.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeId Volume id
	@return BaremetalBlockstorageV1VolumeV1APIsAPIShowVolumeRequest
*/
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) ShowVolume(ctx context.Context, volumeId string) BaremetalBlockstorageV1VolumeV1APIsAPIShowVolumeRequest {
	return BaremetalBlockstorageV1VolumeV1APIsAPIShowVolumeRequest{
		ApiService: a,
		ctx:        ctx,
		volumeId:   volumeId,
	}
}

// Execute executes the request
//
//	@return VolumeResponse
func (a *BaremetalBlockstorageV1VolumeV1APIsAPIService) ShowVolumeExecute(r BaremetalBlockstorageV1VolumeV1APIsAPIShowVolumeRequest) (*VolumeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volumes/{volume_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_id"+"}", url.PathEscape(parameterValueToString(r.volumeId, "volumeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
