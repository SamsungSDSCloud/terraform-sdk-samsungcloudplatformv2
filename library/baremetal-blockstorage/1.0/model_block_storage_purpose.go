/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// BlockStoragePurpose the model 'BlockStoragePurpose'
type BlockStoragePurpose string

// List of BlockStoragePurpose
const (
	BLOCKSTORAGEPURPOSE_ORG    BlockStoragePurpose = "ORG"
	BLOCKSTORAGEPURPOSE_REPL   BlockStoragePurpose = "REPL"
	BLOCKSTORAGEPURPOSE_BACKUP BlockStoragePurpose = "BACKUP"
	BLOCKSTORAGEPURPOSE_CLONE  BlockStoragePurpose = "CLONE"
)

// All allowed values of BlockStoragePurpose enum
var AllowedBlockStoragePurposeEnumValues = []BlockStoragePurpose{
	"ORG",
	"REPL",
	"BACKUP",
	"CLONE",
}

func (v *BlockStoragePurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockStoragePurpose(value)
	for _, existing := range AllowedBlockStoragePurposeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockStoragePurpose", value)
}

// NewBlockStoragePurposeFromValue returns a pointer to a valid BlockStoragePurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockStoragePurposeFromValue(v string) (*BlockStoragePurpose, error) {
	ev := BlockStoragePurpose(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockStoragePurpose: valid values are %v", v, AllowedBlockStoragePurposeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockStoragePurpose) IsValid() bool {
	for _, existing := range AllowedBlockStoragePurposeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BlockStoragePurpose value
func (v BlockStoragePurpose) Ptr() *BlockStoragePurpose {
	return &v
}

type NullableBlockStoragePurpose struct {
	value *BlockStoragePurpose
	isSet bool
}

func (v NullableBlockStoragePurpose) Get() *BlockStoragePurpose {
	return v.value
}

func (v *NullableBlockStoragePurpose) Set(val *BlockStoragePurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStoragePurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStoragePurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStoragePurpose(val *BlockStoragePurpose) *NullableBlockStoragePurpose {
	return &NullableBlockStoragePurpose{value: val, isSet: true}
}

func (v NullableBlockStoragePurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStoragePurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
