/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// BlockStorageState the model 'BlockStorageState'
type BlockStorageState string

// List of BlockStorageState
const (
	BLOCKSTORAGESTATE_CREATING       BlockStorageState = "CREATING"
	BLOCKSTORAGESTATE_IN_USE         BlockStorageState = "IN_USE"
	BLOCKSTORAGESTATE_EDITING        BlockStorageState = "EDITING"
	BLOCKSTORAGESTATE_DELETING       BlockStorageState = "DELETING"
	BLOCKSTORAGESTATE_DELETED        BlockStorageState = "DELETED"
	BLOCKSTORAGESTATE_ATTACHING      BlockStorageState = "ATTACHING"
	BLOCKSTORAGESTATE_DETACHING      BlockStorageState = "DETACHING"
	BLOCKSTORAGESTATE_AVAILABLE      BlockStorageState = "AVAILABLE"
	BLOCKSTORAGESTATE_ERROR_DELETING BlockStorageState = "ERROR_DELETING"
	BLOCKSTORAGESTATE_ERROR_EDITING  BlockStorageState = "ERROR_EDITING"
	BLOCKSTORAGESTATE_ERROR          BlockStorageState = "ERROR"
)

// All allowed values of BlockStorageState enum
var AllowedBlockStorageStateEnumValues = []BlockStorageState{
	"CREATING",
	"IN_USE",
	"EDITING",
	"DELETING",
	"DELETED",
	"ATTACHING",
	"DETACHING",
	"AVAILABLE",
	"ERROR_DELETING",
	"ERROR_EDITING",
	"ERROR",
}

func (v *BlockStorageState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BlockStorageState(value)
	for _, existing := range AllowedBlockStorageStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BlockStorageState", value)
}

// NewBlockStorageStateFromValue returns a pointer to a valid BlockStorageState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBlockStorageStateFromValue(v string) (*BlockStorageState, error) {
	ev := BlockStorageState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BlockStorageState: valid values are %v", v, AllowedBlockStorageStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BlockStorageState) IsValid() bool {
	for _, existing := range AllowedBlockStorageStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BlockStorageState value
func (v BlockStorageState) Ptr() *BlockStorageState {
	return &v
}

type NullableBlockStorageState struct {
	value *BlockStorageState
	isSet bool
}

func (v NullableBlockStorageState) Get() *BlockStorageState {
	return v.value
}

func (v *NullableBlockStorageState) Set(val *BlockStorageState) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockStorageState) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockStorageState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockStorageState(val *BlockStorageState) *NullableBlockStorageState {
	return &NullableBlockStorageState{value: val, isSet: true}
}

func (v NullableBlockStorageState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockStorageState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
