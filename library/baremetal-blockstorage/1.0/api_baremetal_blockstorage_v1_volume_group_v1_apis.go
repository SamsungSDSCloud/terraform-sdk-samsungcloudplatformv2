/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"bytes"
	"context"
	scpsdk "github.com/SamsungSDSCloud/terraform-sdk-samsungcloudplatformv2/client"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BaremetalBlockstorageV1VolumeGroupV1APIsAPIService BaremetalBlockstorageV1VolumeGroupV1APIsAPI service
type BaremetalBlockstorageV1VolumeGroupV1APIsAPIService service

type BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest struct {
	ctx                      context.Context
	ApiService               *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService
	volumeGroupId            string
	volumeGroupMemberRequest *VolumeGroupMemberRequest
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest) VolumeGroupMemberRequest(volumeGroupMemberRequest VolumeGroupMemberRequest) BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest {
	r.volumeGroupMemberRequest = &volumeGroupMemberRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest) Execute() (*VolumeGroupMemberResponse, *http.Response, error) {
	return r.ApiService.AddVolumeGroupMembersExecute(r)
}

/*
AddVolumeGroupMembers Add Volume Group Member on Volume Group

Add Volume Group Member on Volume Group.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) AddVolumeGroupMembers(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest {
	return BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupMemberResponse
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) AddVolumeGroupMembersExecute(r BaremetalBlockstorageV1VolumeGroupV1APIsAPIAddVolumeGroupMembersRequest) (*VolumeGroupMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupMemberResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/members/add"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupMemberRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupMemberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupMemberRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest struct {
	ctx                        context.Context
	ApiService                 *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService
	volumeGroupCreationRequest *VolumeGroupCreationRequest
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest) VolumeGroupCreationRequest(volumeGroupCreationRequest VolumeGroupCreationRequest) BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest {
	r.volumeGroupCreationRequest = &volumeGroupCreationRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest) Execute() (*AsyncResponse, *http.Response, error) {
	return r.ApiService.CreateVolumeGroupExecute(r)
}

/*
CreateVolumeGroup Create Volume Group

Create Volume Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) CreateVolumeGroup(ctx context.Context) BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest {
	return BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AsyncResponse
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) CreateVolumeGroupExecute(r BaremetalBlockstorageV1VolumeGroupV1APIsAPICreateVolumeGroupRequest) (*AsyncResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupCreationRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupCreationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupCreationRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest struct {
	ctx        context.Context
	ApiService *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService
	limit      *int32
	offset     *int32
	sort       *string
	name       *string
}

// Number to be displayed on the page
func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest) Limit(limit int32) BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest {
	r.limit = &limit
	return r
}

// Offset
func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest) Offset(offset int32) BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest {
	r.offset = &offset
	return r
}

// Sort
func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest) Sort(sort string) BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest {
	r.sort = &sort
	return r
}

// Volume group name
func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest) Name(name string) BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest {
	r.name = &name
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest) Execute() (*VolumeGroupListResponse, *http.Response, error) {
	return r.ApiService.ListVolumeGroupsExecute(r)
}

/*
ListVolumeGroups List Volume Groups

Get a list of Volume Groups.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) ListVolumeGroups(ctx context.Context) BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest {
	return BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return VolumeGroupListResponse
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) ListVolumeGroupsExecute(r BaremetalBlockstorageV1VolumeGroupV1APIsAPIListVolumeGroupsRequest) (*VolumeGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupListResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest struct {
	ctx                      context.Context
	ApiService               *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService
	volumeGroupId            string
	volumeGroupMemberRequest *VolumeGroupMemberRequest
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest) VolumeGroupMemberRequest(volumeGroupMemberRequest VolumeGroupMemberRequest) BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest {
	r.volumeGroupMemberRequest = &volumeGroupMemberRequest
	return r
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest) Execute() (*VolumeGroupMemberResponse, *http.Response, error) {
	return r.ApiService.RemoveVolumeGroupMembersExecute(r)
}

/*
RemoveVolumeGroupMembers Remove Volume Group Member on Volume Group

Remove Volume Group Member on Volume Group.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) RemoveVolumeGroupMembers(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest {
	return BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupMemberResponse
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) RemoveVolumeGroupMembersExecute(r BaremetalBlockstorageV1VolumeGroupV1APIsAPIRemoveVolumeGroupMembersRequest) (*VolumeGroupMemberResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupMemberResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}/members/remove"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeGroupMemberRequest == nil {
		return localVarReturnValue, nil, reportError("volumeGroupMemberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeGroupMemberRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BaremetalBlockstorageV1VolumeGroupV1APIsAPIShowVolumeGroupRequest struct {
	ctx           context.Context
	ApiService    *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService
	volumeGroupId string
}

func (r BaremetalBlockstorageV1VolumeGroupV1APIsAPIShowVolumeGroupRequest) Execute() (*VolumeGroupResponse, *http.Response, error) {
	return r.ApiService.ShowVolumeGroupExecute(r)
}

/*
ShowVolumeGroup Show Volume Group

Show Volume Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param volumeGroupId Volume group id
	@return BaremetalBlockstorageV1VolumeGroupV1APIsAPIShowVolumeGroupRequest
*/
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) ShowVolumeGroup(ctx context.Context, volumeGroupId string) BaremetalBlockstorageV1VolumeGroupV1APIsAPIShowVolumeGroupRequest {
	return BaremetalBlockstorageV1VolumeGroupV1APIsAPIShowVolumeGroupRequest{
		ApiService:    a,
		ctx:           ctx,
		volumeGroupId: volumeGroupId,
	}
}

// Execute executes the request
//
//	@return VolumeGroupResponse
func (a *BaremetalBlockstorageV1VolumeGroupV1APIsAPIService) ShowVolumeGroupExecute(r BaremetalBlockstorageV1VolumeGroupV1APIsAPIShowVolumeGroupRequest) (*VolumeGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *VolumeGroupResponse
	)

	var basePath string

	if a.client.cfg.Endpoint != "" {
		basePath = a.client.cfg.Endpoint
	} else {
		var err error
		catalog := scpsdk.NewCatalog(
			a.client.cfg.AuthUrl,
			a.client.cfg.Credentials.AccessKey,
			a.client.cfg.Credentials.SecretKey,
			a.client.cfg.DefaultRegion,
		)
		basePath, err = catalog.GetEndpoint(
			a.client.cfg.ServiceType, a.client.cfg.Region, a.client.cfg.AccountId,
		)
		if err != nil {
			return localVarReturnValue, nil, err
		}
	}

	localVarPath := basePath + "/v1/volume-groups/{volume_group_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"volume_group_id"+"}", url.PathEscape(parameterValueToString(r.volumeGroupId, "volumeGroupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	localVarHeaderParams["Scp-API-Version"] = "baremetalblockstorage 1.0"

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["X-Auth-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Auth-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &scpsdk.GenericOpenAPIError{
			ResponseBody: localVarBody,
			ErrorMessage: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
