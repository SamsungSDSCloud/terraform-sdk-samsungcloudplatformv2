/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeDetachRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeDetachRequest{}

// VolumeDetachRequest struct for VolumeDetachRequest
type VolumeDetachRequest struct {
	// List of object id to detach
	Attachments []string `json:"attachments"`
}

type _VolumeDetachRequest VolumeDetachRequest

// NewVolumeDetachRequest instantiates a new VolumeDetachRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeDetachRequest(attachments []string) *VolumeDetachRequest {
	this := VolumeDetachRequest{}
	this.Attachments = attachments
	return &this
}

// NewVolumeDetachRequestWithDefaults instantiates a new VolumeDetachRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeDetachRequestWithDefaults() *VolumeDetachRequest {
	this := VolumeDetachRequest{}
	return &this
}

// GetAttachments returns the Attachments field value
func (o *VolumeDetachRequest) GetAttachments() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value
// and a boolean to check if the value has been set.
func (o *VolumeDetachRequest) GetAttachmentsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Attachments, true
}

// SetAttachments sets field value
func (o *VolumeDetachRequest) SetAttachments(v []string) {
	o.Attachments = v
}

func (o VolumeDetachRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeDetachRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attachments"] = o.Attachments
	return toSerialize, nil
}

func (o *VolumeDetachRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attachments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeDetachRequest := _VolumeDetachRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeDetachRequest)

	if err != nil {
		return err
	}

	*o = VolumeDetachRequest(varVolumeDetachRequest)

	return err
}

type NullableVolumeDetachRequest struct {
	value *VolumeDetachRequest
	isSet bool
}

func (v NullableVolumeDetachRequest) Get() *VolumeDetachRequest {
	return v.value
}

func (v *NullableVolumeDetachRequest) Set(val *VolumeDetachRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeDetachRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeDetachRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeDetachRequest(val *VolumeDetachRequest) *NullableVolumeDetachRequest {
	return &NullableVolumeDetachRequest{value: val, isSet: true}
}

func (v NullableVolumeDetachRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeDetachRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
