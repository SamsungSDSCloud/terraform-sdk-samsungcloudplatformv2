/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the AsyncResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncResponse{}

// AsyncResponse struct for AsyncResponse
type AsyncResponse struct {
	// Request id
	RequestId *string `json:"request_id,omitempty"`
	// Resource id
	ResourceId *string `json:"resource_id,omitempty"`
}

// NewAsyncResponse instantiates a new AsyncResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncResponse() *AsyncResponse {
	this := AsyncResponse{}
	return &this
}

// NewAsyncResponseWithDefaults instantiates a new AsyncResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncResponseWithDefaults() *AsyncResponse {
	this := AsyncResponse{}
	return &this
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *AsyncResponse) GetRequestId() string {
	if o == nil || IsNil(o.RequestId) {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || IsNil(o.RequestId) {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *AsyncResponse) HasRequestId() bool {
	if o != nil && !IsNil(o.RequestId) {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *AsyncResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *AsyncResponse) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncResponse) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *AsyncResponse) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *AsyncResponse) SetResourceId(v string) {
	o.ResourceId = &v
}

func (o AsyncResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestId) {
		toSerialize["request_id"] = o.RequestId
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	return toSerialize, nil
}

type NullableAsyncResponse struct {
	value *AsyncResponse
	isSet bool
}

func (v NullableAsyncResponse) Get() *AsyncResponse {
	return v.value
}

func (v *NullableAsyncResponse) Set(val *AsyncResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncResponse(val *AsyncResponse) *NullableAsyncResponse {
	return &NullableAsyncResponse{value: val, isSet: true}
}

func (v NullableAsyncResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
