/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the VolumeSnapshotRestoreResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSnapshotRestoreResponse{}

// VolumeSnapshotRestoreResponse struct for VolumeSnapshotRestoreResponse
type VolumeSnapshotRestoreResponse struct {
	// Account id
	AccountId *string `json:"account_id,omitempty"`
	// Snapshot id
	SnapshotId *string `json:"snapshot_id,omitempty"`
	// Volume id
	VolumeId *string `json:"volume_id,omitempty"`
}

// NewVolumeSnapshotRestoreResponse instantiates a new VolumeSnapshotRestoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSnapshotRestoreResponse() *VolumeSnapshotRestoreResponse {
	this := VolumeSnapshotRestoreResponse{}
	var accountId string = ""
	this.AccountId = &accountId
	var snapshotId string = ""
	this.SnapshotId = &snapshotId
	var volumeId string = ""
	this.VolumeId = &volumeId
	return &this
}

// NewVolumeSnapshotRestoreResponseWithDefaults instantiates a new VolumeSnapshotRestoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSnapshotRestoreResponseWithDefaults() *VolumeSnapshotRestoreResponse {
	this := VolumeSnapshotRestoreResponse{}
	var accountId string = ""
	this.AccountId = &accountId
	var snapshotId string = ""
	this.SnapshotId = &snapshotId
	var volumeId string = ""
	this.VolumeId = &volumeId
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *VolumeSnapshotRestoreResponse) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotRestoreResponse) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *VolumeSnapshotRestoreResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *VolumeSnapshotRestoreResponse) SetAccountId(v string) {
	o.AccountId = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *VolumeSnapshotRestoreResponse) GetSnapshotId() string {
	if o == nil || IsNil(o.SnapshotId) {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotRestoreResponse) GetSnapshotIdOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *VolumeSnapshotRestoreResponse) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *VolumeSnapshotRestoreResponse) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

// GetVolumeId returns the VolumeId field value if set, zero value otherwise.
func (o *VolumeSnapshotRestoreResponse) GetVolumeId() string {
	if o == nil || IsNil(o.VolumeId) {
		var ret string
		return ret
	}
	return *o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSnapshotRestoreResponse) GetVolumeIdOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeId) {
		return nil, false
	}
	return o.VolumeId, true
}

// HasVolumeId returns a boolean if a field has been set.
func (o *VolumeSnapshotRestoreResponse) HasVolumeId() bool {
	if o != nil && !IsNil(o.VolumeId) {
		return true
	}

	return false
}

// SetVolumeId gets a reference to the given string and assigns it to the VolumeId field.
func (o *VolumeSnapshotRestoreResponse) SetVolumeId(v string) {
	o.VolumeId = &v
}

func (o VolumeSnapshotRestoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSnapshotRestoreResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshot_id"] = o.SnapshotId
	}
	if !IsNil(o.VolumeId) {
		toSerialize["volume_id"] = o.VolumeId
	}
	return toSerialize, nil
}

type NullableVolumeSnapshotRestoreResponse struct {
	value *VolumeSnapshotRestoreResponse
	isSet bool
}

func (v NullableVolumeSnapshotRestoreResponse) Get() *VolumeSnapshotRestoreResponse {
	return v.value
}

func (v *NullableVolumeSnapshotRestoreResponse) Set(val *VolumeSnapshotRestoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSnapshotRestoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSnapshotRestoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSnapshotRestoreResponse(val *VolumeSnapshotRestoreResponse) *NullableVolumeSnapshotRestoreResponse {
	return &NullableVolumeSnapshotRestoreResponse{value: val, isSet: true}
}

func (v NullableVolumeSnapshotRestoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSnapshotRestoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
