/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
)

// checks if the RelationVolumeGroupModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelationVolumeGroupModel{}

// RelationVolumeGroupModel struct for RelationVolumeGroupModel
type RelationVolumeGroupModel struct {
	// Auth
	Auth *VolumePermission `json:"auth,omitempty"`
	// Id
	Id *string `json:"id,omitempty"`
	// Volume group name
	Name *string `json:"name,omitempty"`
	// Volume group purpose
	Purpose *VolumeGroupPurpose `json:"purpose,omitempty"`
	// Region
	Region *string `json:"region,omitempty"`
}

// NewRelationVolumeGroupModel instantiates a new RelationVolumeGroupModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationVolumeGroupModel() *RelationVolumeGroupModel {
	this := RelationVolumeGroupModel{}
	return &this
}

// NewRelationVolumeGroupModelWithDefaults instantiates a new RelationVolumeGroupModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationVolumeGroupModelWithDefaults() *RelationVolumeGroupModel {
	this := RelationVolumeGroupModel{}
	return &this
}

// GetAuth returns the Auth field value if set, zero value otherwise.
func (o *RelationVolumeGroupModel) GetAuth() VolumePermission {
	if o == nil || IsNil(o.Auth) {
		var ret VolumePermission
		return ret
	}
	return *o.Auth
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeGroupModel) GetAuthOk() (*VolumePermission, bool) {
	if o == nil || IsNil(o.Auth) {
		return nil, false
	}
	return o.Auth, true
}

// HasAuth returns a boolean if a field has been set.
func (o *RelationVolumeGroupModel) HasAuth() bool {
	if o != nil && !IsNil(o.Auth) {
		return true
	}

	return false
}

// SetAuth gets a reference to the given VolumePermission and assigns it to the Auth field.
func (o *RelationVolumeGroupModel) SetAuth(v VolumePermission) {
	o.Auth = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RelationVolumeGroupModel) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeGroupModel) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RelationVolumeGroupModel) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RelationVolumeGroupModel) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RelationVolumeGroupModel) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeGroupModel) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RelationVolumeGroupModel) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RelationVolumeGroupModel) SetName(v string) {
	o.Name = &v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *RelationVolumeGroupModel) GetPurpose() VolumeGroupPurpose {
	if o == nil || IsNil(o.Purpose) {
		var ret VolumeGroupPurpose
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeGroupModel) GetPurposeOk() (*VolumeGroupPurpose, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *RelationVolumeGroupModel) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given VolumeGroupPurpose and assigns it to the Purpose field.
func (o *RelationVolumeGroupModel) SetPurpose(v VolumeGroupPurpose) {
	o.Purpose = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *RelationVolumeGroupModel) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelationVolumeGroupModel) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *RelationVolumeGroupModel) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *RelationVolumeGroupModel) SetRegion(v string) {
	o.Region = &v
}

func (o RelationVolumeGroupModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelationVolumeGroupModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Auth) {
		toSerialize["auth"] = o.Auth
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	return toSerialize, nil
}

type NullableRelationVolumeGroupModel struct {
	value *RelationVolumeGroupModel
	isSet bool
}

func (v NullableRelationVolumeGroupModel) Get() *RelationVolumeGroupModel {
	return v.value
}

func (v *NullableRelationVolumeGroupModel) Set(val *RelationVolumeGroupModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationVolumeGroupModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationVolumeGroupModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationVolumeGroupModel(val *RelationVolumeGroupModel) *NullableRelationVolumeGroupModel {
	return &NullableRelationVolumeGroupModel{value: val, isSet: true}
}

func (v NullableRelationVolumeGroupModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationVolumeGroupModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
