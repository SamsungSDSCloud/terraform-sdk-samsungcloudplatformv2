/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// DiskType the model 'DiskType'
type DiskType string

// List of DiskType
const (
	DISKTYPE_SSD DiskType = "SSD"
	DISKTYPE_HDD DiskType = "HDD"
)

// All allowed values of DiskType enum
var AllowedDiskTypeEnumValues = []DiskType{
	"SSD",
	"HDD",
}

func (v *DiskType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskType(value)
	for _, existing := range AllowedDiskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskType", value)
}

// NewDiskTypeFromValue returns a pointer to a valid DiskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskTypeFromValue(v string) (*DiskType, error) {
	ev := DiskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskType: valid values are %v", v, AllowedDiskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskType) IsValid() bool {
	for _, existing := range AllowedDiskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiskType value
func (v DiskType) Ptr() *DiskType {
	return &v
}

type NullableDiskType struct {
	value *DiskType
	isSet bool
}

func (v NullableDiskType) Get() *DiskType {
	return v.value
}

func (v *NullableDiskType) Set(val *DiskType) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskType) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskType(val *DiskType) *NullableDiskType {
	return &NullableDiskType{value: val, isSet: true}
}

func (v NullableDiskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
