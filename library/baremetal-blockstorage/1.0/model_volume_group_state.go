/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// VolumeGroupState the model 'VolumeGroupState'
type VolumeGroupState string

// List of VolumeGroupState
const (
	VOLUMEGROUPSTATE_CREATING       VolumeGroupState = "CREATING"
	VOLUMEGROUPSTATE_AVAILABLE      VolumeGroupState = "AVAILABLE"
	VOLUMEGROUPSTATE_DELETING       VolumeGroupState = "DELETING"
	VOLUMEGROUPSTATE_EDITING        VolumeGroupState = "EDITING"
	VOLUMEGROUPSTATE_DELETED        VolumeGroupState = "DELETED"
	VOLUMEGROUPSTATE_ERROR_DELETING VolumeGroupState = "ERROR_DELETING"
	VOLUMEGROUPSTATE_ERROR_EDITING  VolumeGroupState = "ERROR_EDITING"
	VOLUMEGROUPSTATE_ERROR          VolumeGroupState = "ERROR"
)

// All allowed values of VolumeGroupState enum
var AllowedVolumeGroupStateEnumValues = []VolumeGroupState{
	"CREATING",
	"AVAILABLE",
	"DELETING",
	"EDITING",
	"DELETED",
	"ERROR_DELETING",
	"ERROR_EDITING",
	"ERROR",
}

func (v *VolumeGroupState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeGroupState(value)
	for _, existing := range AllowedVolumeGroupStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeGroupState", value)
}

// NewVolumeGroupStateFromValue returns a pointer to a valid VolumeGroupState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeGroupStateFromValue(v string) (*VolumeGroupState, error) {
	ev := VolumeGroupState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeGroupState: valid values are %v", v, AllowedVolumeGroupStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeGroupState) IsValid() bool {
	for _, existing := range AllowedVolumeGroupStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeGroupState value
func (v VolumeGroupState) Ptr() *VolumeGroupState {
	return &v
}

type NullableVolumeGroupState struct {
	value *VolumeGroupState
	isSet bool
}

func (v NullableVolumeGroupState) Get() *VolumeGroupState {
	return v.value
}

func (v *NullableVolumeGroupState) Set(val *VolumeGroupState) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeGroupState) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeGroupState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeGroupState(val *VolumeGroupState) *NullableVolumeGroupState {
	return &NullableVolumeGroupState{value: val, isSet: true}
}

func (v NullableVolumeGroupState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeGroupState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
