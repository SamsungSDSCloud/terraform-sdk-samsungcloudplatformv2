/*
SCP Baremetal BlockStorage Service

SCP Baremetal BlockStorage Service

API version: 0.0.1.dev1719
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package baremetalblockstorage

import (
	"encoding/json"
	"fmt"
)

// VolumePermission the model 'VolumePermission'
type VolumePermission string

// List of VolumePermission
const (
	VOLUMEPERMISSION_READ       VolumePermission = "READ"
	VOLUMEPERMISSION_READ_WRITE VolumePermission = "READ_WRITE"
	VOLUMEPERMISSION_UNKNOWN    VolumePermission = "UNKNOWN"
)

// All allowed values of VolumePermission enum
var AllowedVolumePermissionEnumValues = []VolumePermission{
	"READ",
	"READ_WRITE",
	"UNKNOWN",
}

func (v *VolumePermission) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumePermission(value)
	for _, existing := range AllowedVolumePermissionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumePermission", value)
}

// NewVolumePermissionFromValue returns a pointer to a valid VolumePermission
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumePermissionFromValue(v string) (*VolumePermission, error) {
	ev := VolumePermission(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumePermission: valid values are %v", v, AllowedVolumePermissionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumePermission) IsValid() bool {
	for _, existing := range AllowedVolumePermissionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumePermission value
func (v VolumePermission) Ptr() *VolumePermission {
	return &v
}

type NullableVolumePermission struct {
	value *VolumePermission
	isSet bool
}

func (v NullableVolumePermission) Get() *VolumePermission {
	return v.value
}

func (v *NullableVolumePermission) Set(val *VolumePermission) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumePermission) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumePermission(val *VolumePermission) *NullableVolumePermission {
	return &NullableVolumePermission{value: val, isSet: true}
}

func (v NullableVolumePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
